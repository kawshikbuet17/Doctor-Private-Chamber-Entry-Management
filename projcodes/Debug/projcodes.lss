
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ade  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00000ade  00000b72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080012e  0080012e  00000c40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000234c  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f15  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000172d  00000000  00000000  000041a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000058d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  00005da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a4  00000000  00000000  000064a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000784a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 32       	cpi	r26, 0x2E	; 46
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e2       	ldi	r26, 0x2E	; 46
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 33       	cpi	r26, 0x32	; 50
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <main>
  8a:	0c 94 6d 05 	jmp	0xada	; 0xada <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
  92:	08 95       	ret

00000094 <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	8b b9       	out	0x0b, r24	; 11
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	89 b9       	out	0x09, r24	; 9
  a4:	10 bc       	out	0x20, r1	; 32
  a6:	08 95       	ret

000000a8 <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
  a8:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <HC05_SendChar+0x2>
}
  ae:	08 95       	ret

000000b0 <HC05_SendString>:
void HC05_SendString(char * s)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
	while(*s)
  b6:	88 81       	ld	r24, Y
  b8:	88 23       	and	r24, r24
  ba:	31 f0       	breq	.+12     	; 0xc8 <HC05_SendString+0x18>
  bc:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
  be:	0e 94 54 00 	call	0xa8	; 0xa8 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
  c2:	89 91       	ld	r24, Y+
  c4:	81 11       	cpse	r24, r1
  c6:	fb cf       	rjmp	.-10     	; 0xbe <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	83 70       	andi	r24, 0x03	; 3
  d2:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
  d8:	88 bb       	out	0x18, r24	; 24
  da:	08 95       	ret

000000dc <Keypad_KeyPressed>:
}

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
  dc:	89 b3       	in	r24, 0x19	; 25
}
  de:	82 95       	swap	r24
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	08 95       	ret

000000e4 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
  e4:	89 b3       	in	r24, 0x19	; 25
  e6:	82 95       	swap	r24
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	48 2f       	mov	r20, r24
  ec:	50 e0       	ldi	r21, 0x00	; 0
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
  ee:	80 fd       	sbrc	r24, 0
  f0:	0c c0       	rjmp	.+24     	; 0x10a <Keypad_GetRow+0x26>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9a 01       	movw	r18, r20
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <Keypad_GetRow+0x1c>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <Keypad_GetRow+0x18>
 104:	20 ff       	sbrs	r18, 0
 106:	04 c0       	rjmp	.+8      	; 0x110 <Keypad_GetRow+0x2c>
 108:	08 95       	ret
}

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	for(int i=0;i<4;i++)
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
 10e:	08 95       	ret
}

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	for(int i=0;i<4;i++)
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	84 30       	cpi	r24, 0x04	; 4
 114:	91 05       	cpc	r25, r1
 116:	79 f7       	brne	.-34     	; 0xf6 <Keypad_GetRow+0x12>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	return -1;
 118:	8f ef       	ldi	r24, 0xFF	; 255
}
 11a:	08 95       	ret

0000011c <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
	for(int i=0;i<8;i++)
	{
		PORTB = PORTB ^ (1<<i);
 11c:	98 b3       	in	r25, 0x18	; 24
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	89 27       	eor	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
	PORTB = 0xFF;
}

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
 124:	89 b3       	in	r24, 0x19	; 25
int_fast8_t Keypad_GetCol()
{
	for(int i=0;i<8;i++)
	{
		PORTB = PORTB ^ (1<<i);
		if(!(Keypad_KeyPressed()))
 126:	82 95       	swap	r24
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	99 f0       	breq	.+38     	; 0x152 <Keypad_GetCol+0x36>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0

int_fast8_t Keypad_GetCol()
{
	for(int i=0;i<8;i++)
	{
		PORTB = PORTB ^ (1<<i);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	48 b3       	in	r20, 0x18	; 24
 136:	9b 01       	movw	r18, r22
 138:	08 2e       	mov	r0, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Keypad_GetCol+0x24>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <Keypad_GetCol+0x20>
 144:	24 27       	eor	r18, r20
 146:	28 bb       	out	0x18, r18	; 24
	PORTB = 0xFF;
}

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
 148:	29 b3       	in	r18, 0x19	; 25
int_fast8_t Keypad_GetCol()
{
	for(int i=0;i<8;i++)
	{
		PORTB = PORTB ^ (1<<i);
		if(!(Keypad_KeyPressed()))
 14a:	22 95       	swap	r18
 14c:	2f 70       	andi	r18, 0x0F	; 15
 14e:	21 f4       	brne	.+8      	; 0x158 <Keypad_GetCol+0x3c>
 150:	08 95       	ret
	return -1;
}

int_fast8_t Keypad_GetCol()
{
	for(int i=0;i<8;i++)
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTB = PORTB ^ (1<<i);
		if(!(Keypad_KeyPressed()))
		{
			return i;
 156:	08 95       	ret
	return -1;
}

int_fast8_t Keypad_GetCol()
{
	for(int i=0;i<8;i++)
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	91 05       	cpc	r25, r1
 15e:	51 f7       	brne	.-44     	; 0x134 <Keypad_GetCol+0x18>
		{
			return i;
		}
	}	
	// report error
	return -1;
 160:	8f ef       	ldi	r24, 0xFF	; 255
}
 162:	08 95       	ret

00000164 <Keypad_GetKey>:
	lcd_cursor_pos ++;
	return c;
}
*/
int_fast8_t Keypad_GetKey()
{
 164:	cf 93       	push	r28
	int_fast8_t row = Keypad_GetRow();
 166:	0e 94 72 00 	call	0xe4	; 0xe4 <Keypad_GetRow>
 16a:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
 16c:	0e 94 8e 00 	call	0x11c	; 0x11c <Keypad_GetCol>
	return row * 8 + col;
 170:	cc 0f       	add	r28, r28
 172:	cc 0f       	add	r28, r28
 174:	cc 0f       	add	r28, r28
 176:	8c 0f       	add	r24, r28
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
 17c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <currentState>
 180:	91 11       	cpse	r25, r1
 182:	03 c0       	rjmp	.+6      	; 0x18a <KeyProcessor_ProcessKey+0xe>
	{
		case IDLE:
			Idle_ProcessKey(key);
 184:	0e 94 21 05 	call	0xa42	; 0xa42 <Idle_ProcessKey>
			break;
 188:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
 18a:	85 e6       	ldi	r24, 0x65	; 101
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
 192:	08 95       	ret

00000194 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <Lcd_Init+0xa>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	39 f0       	breq	.+14     	; 0x1aa <Lcd_Init+0x16>
 19c:	24 c0       	rjmp	.+72     	; 0x1e6 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
 19e:	81 b3       	in	r24, 0x11	; 17
 1a0:	8c 6f       	ori	r24, 0xFC	; 252
 1a2:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
 1a4:	0e 94 08 03 	call	0x610	; 0x610 <Lcd4_Init>
			break;
 1a8:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lcd_init>
			lcd_backlight(0);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 ce 04 	call	0x99c	; 0x99c <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2f e9       	ldi	r18, 0x9F	; 159
 1b8:	86 e8       	ldi	r24, 0x86	; 134
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <Lcd_Init+0x28>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Lcd_Init+0x32>
 1c6:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 ce 04 	call	0x99c	; 0x99c <lcd_backlight>
 1ce:	2f e9       	ldi	r18, 0x9F	; 159
 1d0:	86 e8       	ldi	r24, 0x86	; 134
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <Lcd_Init+0x40>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <Lcd_Init+0x4a>
 1de:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
 1e0:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
 1e4:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
 1e6:	89 e8       	ldi	r24, 0x89	; 137
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
 1ee:	08 95       	ret

000001f0 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
 1f0:	88 23       	and	r24, r24
 1f2:	19 f0       	breq	.+6      	; 0x1fa <Lcd_ClearScreen+0xa>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	21 f0       	breq	.+8      	; 0x200 <Lcd_ClearScreen+0x10>
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
 1fa:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Lcd4_Clear>
			break;
 1fe:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
 200:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clrscr>
			break;
 204:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
 206:	88 ea       	ldi	r24, 0xA8	; 168
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
 20e:	08 95       	ret

00000210 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
 210:	88 23       	and	r24, r24
 212:	19 f0       	breq	.+6      	; 0x21a <Lcd_Prints+0xa>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	29 f0       	breq	.+10     	; 0x222 <Lcd_Prints+0x12>
 218:	08 c0       	rjmp	.+16     	; 0x22a <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
 21a:	cb 01       	movw	r24, r22
 21c:	0e 94 81 03 	call	0x702	; 0x702 <Lcd4_Write_String>
			break;
 220:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
 222:	cb 01       	movw	r24, r22
 224:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_puts>
			break;
 228:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
 22a:	88 ea       	ldi	r24, 0xA8	; 168
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
 232:	08 95       	ret

00000234 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
 234:	96 2f       	mov	r25, r22
	switch(lcdType)
 236:	88 23       	and	r24, r24
 238:	19 f0       	breq	.+6      	; 0x240 <Lcd_Position+0xc>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	31 f0       	breq	.+12     	; 0x24a <Lcd_Position+0x16>
 23e:	09 c0       	rjmp	.+18     	; 0x252 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
 240:	64 2f       	mov	r22, r20
 242:	89 2f       	mov	r24, r25
 244:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <Lcd4_Set_Cursor>
		break;
 248:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
 24a:	84 2f       	mov	r24, r20
 24c:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_gotoxy>
		break;
 250:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
 252:	8f ec       	ldi	r24, 0xCF	; 207
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
 25a:	08 95       	ret

0000025c <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <Lcd_Printc+0x6>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
 266:	69 83       	std	Y+1, r22	; 0x01
 268:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
 26a:	be 01       	movw	r22, r28
 26c:	6f 5f       	subi	r22, 0xFF	; 255
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	0e 94 08 01 	call	0x210	; 0x210 <Lcd_Prints>
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
 27e:	67 2b       	or	r22, r23
 280:	09 f0       	breq	.+2      	; 0x284 <pinChange+0x6>
 282:	9f c0       	rjmp	.+318    	; 0x3c2 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0xe>
		PORTA &= ~(1<<PA0);
 288:	d8 98       	cbi	0x1b, 0	; 27
 28a:	08 95       	ret
		else if(a == eS_PORTA1)
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	91 05       	cpc	r25, r1
 290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
 292:	d9 98       	cbi	0x1b, 1	; 27
 294:	08 95       	ret
		else if(a == eS_PORTA2)
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
 29c:	da 98       	cbi	0x1b, 2	; 27
 29e:	08 95       	ret
		else if(a == eS_PORTA3)
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	91 05       	cpc	r25, r1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
 2a6:	db 98       	cbi	0x1b, 3	; 27
 2a8:	08 95       	ret
		else if(a == eS_PORTA4)
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
 2b0:	dc 98       	cbi	0x1b, 4	; 27
 2b2:	08 95       	ret
		else if(a == eS_PORTA5)
 2b4:	85 30       	cpi	r24, 0x05	; 5
 2b6:	91 05       	cpc	r25, r1
 2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x40>
		PORTA &= ~(1<<PA5);
 2ba:	dd 98       	cbi	0x1b, 5	; 27
 2bc:	08 95       	ret
		else if(a == eS_PORTA6)
 2be:	86 30       	cpi	r24, 0x06	; 6
 2c0:	91 05       	cpc	r25, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
 2c4:	de 98       	cbi	0x1b, 6	; 27
 2c6:	08 95       	ret
		else if(a == eS_PORTA7)
 2c8:	87 30       	cpi	r24, 0x07	; 7
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
 2ce:	df 98       	cbi	0x1b, 7	; 27
 2d0:	08 95       	ret
		else if(a == eS_PORTB0)
 2d2:	8a 30       	cpi	r24, 0x0A	; 10
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
 2d8:	c0 98       	cbi	0x18, 0	; 24
 2da:	08 95       	ret
		else if(a == eS_PORTB1)
 2dc:	8b 30       	cpi	r24, 0x0B	; 11
 2de:	91 05       	cpc	r25, r1
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
 2e2:	c1 98       	cbi	0x18, 1	; 24
 2e4:	08 95       	ret
		else if(a == eS_PORTB2)
 2e6:	8c 30       	cpi	r24, 0x0C	; 12
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
 2ec:	c2 98       	cbi	0x18, 2	; 24
 2ee:	08 95       	ret
		else if(a == eS_PORTB3)
 2f0:	8d 30       	cpi	r24, 0x0D	; 13
 2f2:	91 05       	cpc	r25, r1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
 2f6:	c3 98       	cbi	0x18, 3	; 24
 2f8:	08 95       	ret
		else if(a == eS_PORTB4)
 2fa:	8e 30       	cpi	r24, 0x0E	; 14
 2fc:	91 05       	cpc	r25, r1
 2fe:	11 f4       	brne	.+4      	; 0x304 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
 300:	c4 98       	cbi	0x18, 4	; 24
 302:	08 95       	ret
		else if(a == eS_PORTB5)
 304:	8f 30       	cpi	r24, 0x0F	; 15
 306:	91 05       	cpc	r25, r1
 308:	11 f4       	brne	.+4      	; 0x30e <pinChange+0x90>
		PORTB &= ~(1<<PB5);
 30a:	c5 98       	cbi	0x18, 5	; 24
 30c:	08 95       	ret
		else if(a == eS_PORTB6)
 30e:	80 31       	cpi	r24, 0x10	; 16
 310:	91 05       	cpc	r25, r1
 312:	11 f4       	brne	.+4      	; 0x318 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
 314:	c6 98       	cbi	0x18, 6	; 24
 316:	08 95       	ret
		else if(a == eS_PORTB7)
 318:	81 31       	cpi	r24, 0x11	; 17
 31a:	91 05       	cpc	r25, r1
 31c:	11 f4       	brne	.+4      	; 0x322 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
 31e:	c7 98       	cbi	0x18, 7	; 24
 320:	08 95       	ret
		else if(a == eS_PORTC0)
 322:	84 31       	cpi	r24, 0x14	; 20
 324:	91 05       	cpc	r25, r1
 326:	11 f4       	brne	.+4      	; 0x32c <pinChange+0xae>
		PORTC &= ~(1<<PC0);
 328:	a8 98       	cbi	0x15, 0	; 21
 32a:	08 95       	ret
		else if(a == eS_PORTC1)
 32c:	85 31       	cpi	r24, 0x15	; 21
 32e:	91 05       	cpc	r25, r1
 330:	11 f4       	brne	.+4      	; 0x336 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
 332:	a9 98       	cbi	0x15, 1	; 21
 334:	08 95       	ret
		else if(a == eS_PORTC2)
 336:	86 31       	cpi	r24, 0x16	; 22
 338:	91 05       	cpc	r25, r1
 33a:	11 f4       	brne	.+4      	; 0x340 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
 33c:	aa 98       	cbi	0x15, 2	; 21
 33e:	08 95       	ret
		else if(a == eS_PORTC3)
 340:	87 31       	cpi	r24, 0x17	; 23
 342:	91 05       	cpc	r25, r1
 344:	11 f4       	brne	.+4      	; 0x34a <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
 346:	ab 98       	cbi	0x15, 3	; 21
 348:	08 95       	ret
		else if(a == eS_PORTC4)
 34a:	88 31       	cpi	r24, 0x18	; 24
 34c:	91 05       	cpc	r25, r1
 34e:	11 f4       	brne	.+4      	; 0x354 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
 350:	ac 98       	cbi	0x15, 4	; 21
 352:	08 95       	ret
		else if(a == eS_PORTC5)
 354:	89 31       	cpi	r24, 0x19	; 25
 356:	91 05       	cpc	r25, r1
 358:	11 f4       	brne	.+4      	; 0x35e <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
 35a:	ad 98       	cbi	0x15, 5	; 21
 35c:	08 95       	ret
		else if(a == eS_PORTC6)
 35e:	8a 31       	cpi	r24, 0x1A	; 26
 360:	91 05       	cpc	r25, r1
 362:	11 f4       	brne	.+4      	; 0x368 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
 364:	ae 98       	cbi	0x15, 6	; 21
 366:	08 95       	ret
		else if(a == eS_PORTC7)
 368:	8b 31       	cpi	r24, 0x1B	; 27
 36a:	91 05       	cpc	r25, r1
 36c:	11 f4       	brne	.+4      	; 0x372 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
 36e:	af 98       	cbi	0x15, 7	; 21
 370:	08 95       	ret
		else if(a == eS_PORTD0)
 372:	8e 31       	cpi	r24, 0x1E	; 30
 374:	91 05       	cpc	r25, r1
 376:	11 f4       	brne	.+4      	; 0x37c <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
 378:	90 98       	cbi	0x12, 0	; 18
 37a:	08 95       	ret
		else if(a == eS_PORTD1)
 37c:	8f 31       	cpi	r24, 0x1F	; 31
 37e:	91 05       	cpc	r25, r1
 380:	11 f4       	brne	.+4      	; 0x386 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
 382:	91 98       	cbi	0x12, 1	; 18
 384:	08 95       	ret
		else if(a == eS_PORTD2)
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	91 05       	cpc	r25, r1
 38a:	11 f4       	brne	.+4      	; 0x390 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
 38c:	92 98       	cbi	0x12, 2	; 18
 38e:	08 95       	ret
		else if(a == eS_PORTD3)
 390:	81 32       	cpi	r24, 0x21	; 33
 392:	91 05       	cpc	r25, r1
 394:	11 f4       	brne	.+4      	; 0x39a <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
 396:	93 98       	cbi	0x12, 3	; 18
 398:	08 95       	ret
		else if(a == eS_PORTD4)
 39a:	82 32       	cpi	r24, 0x22	; 34
 39c:	91 05       	cpc	r25, r1
 39e:	11 f4       	brne	.+4      	; 0x3a4 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
 3a0:	94 98       	cbi	0x12, 4	; 18
 3a2:	08 95       	ret
		else if(a == eS_PORTD5)
 3a4:	83 32       	cpi	r24, 0x23	; 35
 3a6:	91 05       	cpc	r25, r1
 3a8:	11 f4       	brne	.+4      	; 0x3ae <pinChange+0x130>
		PORTD &= ~(1<<PD5);
 3aa:	95 98       	cbi	0x12, 5	; 18
 3ac:	08 95       	ret
		else if(a == eS_PORTD6)
 3ae:	84 32       	cpi	r24, 0x24	; 36
 3b0:	91 05       	cpc	r25, r1
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
 3b4:	96 98       	cbi	0x12, 6	; 18
 3b6:	08 95       	ret
		else if(a == eS_PORTD7)
 3b8:	85 97       	sbiw	r24, 0x25	; 37
 3ba:	09 f0       	breq	.+2      	; 0x3be <pinChange+0x140>
 3bc:	9f c0       	rjmp	.+318    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		PORTD &= ~(1<<PD7);
 3be:	97 98       	cbi	0x12, 7	; 18
 3c0:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	11 f4       	brne	.+4      	; 0x3ca <pinChange+0x14c>
		PORTA |= (1<<PA0);
 3c6:	d8 9a       	sbi	0x1b, 0	; 27
 3c8:	08 95       	ret
		else if(a == eS_PORTA1)
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	91 05       	cpc	r25, r1
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <pinChange+0x156>
		PORTA |= (1<<PA1);
 3d0:	d9 9a       	sbi	0x1b, 1	; 27
 3d2:	08 95       	ret
		else if(a == eS_PORTA2)
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	91 05       	cpc	r25, r1
 3d8:	11 f4       	brne	.+4      	; 0x3de <pinChange+0x160>
		PORTA |= (1<<PA2);
 3da:	da 9a       	sbi	0x1b, 2	; 27
 3dc:	08 95       	ret
		else if(a == eS_PORTA3)
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	91 05       	cpc	r25, r1
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <pinChange+0x16a>
		PORTA |= (1<<PA3);
 3e4:	db 9a       	sbi	0x1b, 3	; 27
 3e6:	08 95       	ret
		else if(a == eS_PORTA4)
 3e8:	84 30       	cpi	r24, 0x04	; 4
 3ea:	91 05       	cpc	r25, r1
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <pinChange+0x174>
		PORTA |= (1<<PA4);
 3ee:	dc 9a       	sbi	0x1b, 4	; 27
 3f0:	08 95       	ret
		else if(a == eS_PORTA5)
 3f2:	85 30       	cpi	r24, 0x05	; 5
 3f4:	91 05       	cpc	r25, r1
 3f6:	11 f4       	brne	.+4      	; 0x3fc <pinChange+0x17e>
		PORTA |= (1<<PA5);
 3f8:	dd 9a       	sbi	0x1b, 5	; 27
 3fa:	08 95       	ret
		else if(a == eS_PORTA6)
 3fc:	86 30       	cpi	r24, 0x06	; 6
 3fe:	91 05       	cpc	r25, r1
 400:	11 f4       	brne	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		PORTA |= (1<<PA6);
 402:	de 9a       	sbi	0x1b, 6	; 27
 404:	08 95       	ret
		else if(a == eS_PORTA7)
 406:	87 30       	cpi	r24, 0x07	; 7
 408:	91 05       	cpc	r25, r1
 40a:	11 f4       	brne	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		PORTA |= (1<<PA7);
 40c:	df 9a       	sbi	0x1b, 7	; 27
 40e:	08 95       	ret
		else if(a == eS_PORTB0)
 410:	8a 30       	cpi	r24, 0x0A	; 10
 412:	91 05       	cpc	r25, r1
 414:	11 f4       	brne	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		PORTB |= (1<<PB0);
 416:	c0 9a       	sbi	0x18, 0	; 24
 418:	08 95       	ret
		else if(a == eS_PORTB1)
 41a:	8b 30       	cpi	r24, 0x0B	; 11
 41c:	91 05       	cpc	r25, r1
 41e:	11 f4       	brne	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		PORTB |= (1<<PB1);
 420:	c1 9a       	sbi	0x18, 1	; 24
 422:	08 95       	ret
		else if(a == eS_PORTB2)
 424:	8c 30       	cpi	r24, 0x0C	; 12
 426:	91 05       	cpc	r25, r1
 428:	11 f4       	brne	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		PORTB |= (1<<PB2);
 42a:	c2 9a       	sbi	0x18, 2	; 24
 42c:	08 95       	ret
		else if(a == eS_PORTB3)
 42e:	8d 30       	cpi	r24, 0x0D	; 13
 430:	91 05       	cpc	r25, r1
 432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		PORTB |= (1<<PB3);
 434:	c3 9a       	sbi	0x18, 3	; 24
 436:	08 95       	ret
		else if(a == eS_PORTB4)
 438:	8e 30       	cpi	r24, 0x0E	; 14
 43a:	91 05       	cpc	r25, r1
 43c:	11 f4       	brne	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		PORTB |= (1<<PB4);
 43e:	c4 9a       	sbi	0x18, 4	; 24
 440:	08 95       	ret
		else if(a == eS_PORTB5)
 442:	8f 30       	cpi	r24, 0x0F	; 15
 444:	91 05       	cpc	r25, r1
 446:	11 f4       	brne	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		PORTB |= (1<<PB5);
 448:	c5 9a       	sbi	0x18, 5	; 24
 44a:	08 95       	ret
		else if(a == eS_PORTB6)
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	91 05       	cpc	r25, r1
 450:	11 f4       	brne	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		PORTB |= (1<<PB6);
 452:	c6 9a       	sbi	0x18, 6	; 24
 454:	08 95       	ret
		else if(a == eS_PORTB7)
 456:	81 31       	cpi	r24, 0x11	; 17
 458:	91 05       	cpc	r25, r1
 45a:	11 f4       	brne	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		PORTB |= (1<<PB7);
 45c:	c7 9a       	sbi	0x18, 7	; 24
 45e:	08 95       	ret
		else if(a == eS_PORTC0)
 460:	84 31       	cpi	r24, 0x14	; 20
 462:	91 05       	cpc	r25, r1
 464:	11 f4       	brne	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		PORTC |= (1<<PC0);
 466:	a8 9a       	sbi	0x15, 0	; 21
 468:	08 95       	ret
		else if(a == eS_PORTC1)
 46a:	85 31       	cpi	r24, 0x15	; 21
 46c:	91 05       	cpc	r25, r1
 46e:	11 f4       	brne	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		PORTC |= (1<<PC1);
 470:	a9 9a       	sbi	0x15, 1	; 21
 472:	08 95       	ret
		else if(a == eS_PORTC2)
 474:	86 31       	cpi	r24, 0x16	; 22
 476:	91 05       	cpc	r25, r1
 478:	11 f4       	brne	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		PORTC |= (1<<PC2);
 47a:	aa 9a       	sbi	0x15, 2	; 21
 47c:	08 95       	ret
		else if(a == eS_PORTC3)
 47e:	87 31       	cpi	r24, 0x17	; 23
 480:	91 05       	cpc	r25, r1
 482:	11 f4       	brne	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		PORTC |= (1<<PC3);
 484:	ab 9a       	sbi	0x15, 3	; 21
 486:	08 95       	ret
		else if(a == eS_PORTC4)
 488:	88 31       	cpi	r24, 0x18	; 24
 48a:	91 05       	cpc	r25, r1
 48c:	11 f4       	brne	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		PORTC |= (1<<PC4);
 48e:	ac 9a       	sbi	0x15, 4	; 21
 490:	08 95       	ret
		else if(a == eS_PORTC5)
 492:	89 31       	cpi	r24, 0x19	; 25
 494:	91 05       	cpc	r25, r1
 496:	11 f4       	brne	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		PORTC |= (1<<PC5);
 498:	ad 9a       	sbi	0x15, 5	; 21
 49a:	08 95       	ret
		else if(a == eS_PORTC6)
 49c:	8a 31       	cpi	r24, 0x1A	; 26
 49e:	91 05       	cpc	r25, r1
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		PORTC |= (1<<PC6);
 4a2:	ae 9a       	sbi	0x15, 6	; 21
 4a4:	08 95       	ret
		else if(a == eS_PORTC7)
 4a6:	8b 31       	cpi	r24, 0x1B	; 27
 4a8:	91 05       	cpc	r25, r1
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		PORTC |= (1<<PC7);
 4ac:	af 9a       	sbi	0x15, 7	; 21
 4ae:	08 95       	ret
		else if(a == eS_PORTD0)
 4b0:	8e 31       	cpi	r24, 0x1E	; 30
 4b2:	91 05       	cpc	r25, r1
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		PORTD |= (1<<PD0);
 4b6:	90 9a       	sbi	0x12, 0	; 18
 4b8:	08 95       	ret
		else if(a == eS_PORTD1)
 4ba:	8f 31       	cpi	r24, 0x1F	; 31
 4bc:	91 05       	cpc	r25, r1
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		PORTD |= (1<<PD1);
 4c0:	91 9a       	sbi	0x12, 1	; 18
 4c2:	08 95       	ret
		else if(a == eS_PORTD2)
 4c4:	80 32       	cpi	r24, 0x20	; 32
 4c6:	91 05       	cpc	r25, r1
 4c8:	11 f4       	brne	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		PORTD |= (1<<PD2);
 4ca:	92 9a       	sbi	0x12, 2	; 18
 4cc:	08 95       	ret
		else if(a == eS_PORTD3)
 4ce:	81 32       	cpi	r24, 0x21	; 33
 4d0:	91 05       	cpc	r25, r1
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		PORTD |= (1<<PD3);
 4d4:	93 9a       	sbi	0x12, 3	; 18
 4d6:	08 95       	ret
		else if(a == eS_PORTD4)
 4d8:	82 32       	cpi	r24, 0x22	; 34
 4da:	91 05       	cpc	r25, r1
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		PORTD |= (1<<PD4);
 4de:	94 9a       	sbi	0x12, 4	; 18
 4e0:	08 95       	ret
		else if(a == eS_PORTD5)
 4e2:	83 32       	cpi	r24, 0x23	; 35
 4e4:	91 05       	cpc	r25, r1
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		PORTD |= (1<<PD5);
 4e8:	95 9a       	sbi	0x12, 5	; 18
 4ea:	08 95       	ret
		else if(a == eS_PORTD6)
 4ec:	84 32       	cpi	r24, 0x24	; 36
 4ee:	91 05       	cpc	r25, r1
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		PORTD |= (1<<PD6);
 4f2:	96 9a       	sbi	0x12, 6	; 18
 4f4:	08 95       	ret
		else if(a == eS_PORTD7)
 4f6:	85 97       	sbiw	r24, 0x25	; 37
 4f8:	09 f4       	brne	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		PORTD |= (1<<PD7);
 4fa:	97 9a       	sbi	0x12, 7	; 18
 4fc:	08 95       	ret

000004fe <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
 4fe:	cf 93       	push	r28
 500:	c8 2f       	mov	r28, r24
	if(a & 1)
 502:	80 ff       	sbrs	r24, 0
 504:	07 c0       	rjmp	.+14     	; 0x514 <Lcd4_Port+0x16>
	pinChange(D4,1);
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	83 e2       	ldi	r24, 0x23	; 35
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 512:	06 c0       	rjmp	.+12     	; 0x520 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	83 e2       	ldi	r24, 0x23	; 35
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
	
	if(a & 2)
 520:	c1 ff       	sbrs	r28, 1
 522:	07 c0       	rjmp	.+14     	; 0x532 <Lcd4_Port+0x34>
	pinChange(D5,1);
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	82 e2       	ldi	r24, 0x22	; 34
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 530:	06 c0       	rjmp	.+12     	; 0x53e <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	82 e2       	ldi	r24, 0x22	; 34
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
	
	if(a & 4)
 53e:	c2 ff       	sbrs	r28, 2
 540:	07 c0       	rjmp	.+14     	; 0x550 <Lcd4_Port+0x52>
	pinChange(D6,1);
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	81 e2       	ldi	r24, 0x21	; 33
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 54e:	06 c0       	rjmp	.+12     	; 0x55c <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	81 e2       	ldi	r24, 0x21	; 33
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
	
	if(a & 8)
 55c:	c3 ff       	sbrs	r28, 3
 55e:	07 c0       	rjmp	.+14     	; 0x56e <Lcd4_Port+0x70>
	pinChange(D7,1);
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 56c:	06 c0       	rjmp	.+12     	; 0x57a <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	80 e2       	ldi	r24, 0x20	; 32
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
}
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 57e:	cf 93       	push	r28
 580:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	85 e2       	ldi	r24, 0x25	; 37
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
	Lcd4_Port(a);
 58e:	8c 2f       	mov	r24, r28
 590:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	84 e2       	ldi	r24, 0x24	; 36
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 5a0:	89 ef       	ldi	r24, 0xF9	; 249
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <Lcd4_Cmd+0x26>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <Lcd4_Cmd+0x2c>
 5aa:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	84 e2       	ldi	r24, 0x24	; 36
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 5b8:	89 ef       	ldi	r24, 0xF9	; 249
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <Lcd4_Cmd+0x3e>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <Lcd4_Cmd+0x44>
 5c2:	00 00       	nop
	_delay_ms(1);
}
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(1);
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
 5d4:	08 95       	ret

000005d6 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 5d6:	cf 93       	push	r28
 5d8:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
 5da:	81 11       	cpse	r24, r1
 5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	86 0f       	add	r24, r22
 5e2:	82 95       	swap	r24
 5e4:	8f 70       	andi	r24, 0x0F	; 15
 5e6:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
		Lcd4_Cmd(y);
 5ea:	8c 2f       	mov	r24, r28
 5ec:	8f 70       	andi	r24, 0x0F	; 15
 5ee:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
 5f2:	0c c0       	rjmp	.+24     	; 0x60c <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	51 f4       	brne	.+20     	; 0x60c <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 5f8:	80 ec       	ldi	r24, 0xC0	; 192
 5fa:	86 0f       	add	r24, r22
 5fc:	82 95       	swap	r24
 5fe:	8f 70       	andi	r24, 0x0F	; 15
 600:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
		Lcd4_Cmd(y);
 604:	8c 2f       	mov	r24, r28
 606:	8f 70       	andi	r24, 0x0F	; 15
 608:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	}
}
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd4_Port>
 616:	87 e8       	ldi	r24, 0x87	; 135
 618:	93 e1       	ldi	r25, 0x13	; 19
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <Lcd4_Init+0xa>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <Lcd4_Init+0x10>
 620:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
 628:	81 ee       	ldi	r24, 0xE1	; 225
 62a:	94 e0       	ldi	r25, 0x04	; 4
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <Lcd4_Init+0x1c>
 630:	00 c0       	rjmp	.+0      	; 0x632 <Lcd4_Init+0x22>
 632:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
 63a:	8d eb       	ldi	r24, 0xBD	; 189
 63c:	9a e0       	ldi	r25, 0x0A	; 10
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <Lcd4_Init+0x2e>
 642:	00 c0       	rjmp	.+0      	; 0x644 <Lcd4_Init+0x34>
 644:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 658:	88 e0       	ldi	r24, 0x08	; 8
 65a:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 664:	8c e0       	ldi	r24, 0x0C	; 12
 666:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 670:	86 e0       	ldi	r24, 0x06	; 6
 672:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Cmd>
	Lcd4_Clear();
 676:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Lcd4_Clear>
 67a:	08 95       	ret

0000067c <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
 67c:	cf 93       	push	r28
 67e:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	85 e2       	ldi	r24, 0x25	; 37
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 68c:	8c 2f       	mov	r24, r28
 68e:	82 95       	swap	r24
 690:	8f 70       	andi	r24, 0x0F	; 15
 692:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd4_Port>
	pinChange(EN,1);
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	84 e2       	ldi	r24, 0x24	; 36
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 6a2:	89 ef       	ldi	r24, 0xF9	; 249
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	01 97       	sbiw	r24, 0x01	; 1
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <Lcd4_Write_Char+0x2a>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <Lcd4_Write_Char+0x30>
 6ac:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	84 e2       	ldi	r24, 0x24	; 36
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 6ba:	89 ef       	ldi	r24, 0xF9	; 249
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <Lcd4_Write_Char+0x42>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <Lcd4_Write_Char+0x48>
 6c4:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 6c6:	8c 2f       	mov	r24, r28
 6c8:	8f 70       	andi	r24, 0x0F	; 15
 6ca:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd4_Port>
	pinChange(EN,1);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	84 e2       	ldi	r24, 0x24	; 36
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 6da:	89 ef       	ldi	r24, 0xF9	; 249
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <Lcd4_Write_Char+0x62>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <Lcd4_Write_Char+0x68>
 6e4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	84 e2       	ldi	r24, 0x24	; 36
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 3f 01 	call	0x27e	; 0x27e <pinChange>
 6f2:	89 ef       	ldi	r24, 0xF9	; 249
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <Lcd4_Write_Char+0x7a>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <Lcd4_Write_Char+0x80>
 6fc:	00 00       	nop
	_delay_ms(1);
}
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 708:	88 81       	ld	r24, Y
 70a:	88 23       	and	r24, r24
 70c:	31 f0       	breq	.+12     	; 0x71a <Lcd4_Write_String+0x18>
 70e:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 710:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 714:	89 91       	ld	r24, Y+
 716:	81 11       	cpse	r24, r1
 718:	fb cf       	rjmp	.-10     	; 0x710 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	7b 01       	movw	r14, r22
 72e:	14 2f       	mov	r17, r20
 730:	88 0f       	add	r24, r24
 732:	0e 94 3c 05 	call	0xa78	; 0xa78 <i2c_start>
 736:	81 11       	cpse	r24, r1
 738:	12 c0       	rjmp	.+36     	; 0x75e <I2C_WRITESEQ+0x3e>
 73a:	11 23       	and	r17, r17
 73c:	91 f0       	breq	.+36     	; 0x762 <I2C_WRITESEQ+0x42>
 73e:	e7 01       	movw	r28, r14
 740:	11 50       	subi	r17, 0x01	; 1
 742:	01 2f       	mov	r16, r17
 744:	10 e0       	ldi	r17, 0x00	; 0
 746:	0f 5f       	subi	r16, 0xFF	; 255
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	0e 0d       	add	r16, r14
 74c:	1f 1d       	adc	r17, r15
 74e:	89 91       	ld	r24, Y+
 750:	0e 94 60 05 	call	0xac0	; 0xac0 <i2c_write>
 754:	c0 17       	cp	r28, r16
 756:	d1 07       	cpc	r29, r17
 758:	d1 f7       	brne	.-12     	; 0x74e <I2C_WRITESEQ+0x2e>
 75a:	c0 e0       	ldi	r28, 0x00	; 0
 75c:	03 c0       	rjmp	.+6      	; 0x764 <I2C_WRITESEQ+0x44>
 75e:	c1 e0       	ldi	r28, 0x01	; 1
 760:	01 c0       	rjmp	.+2      	; 0x764 <I2C_WRITESEQ+0x44>
 762:	c0 e0       	ldi	r28, 0x00	; 0
 764:	0e 94 5a 05 	call	0xab4	; 0xab4 <i2c_stop>
 768:	8c 2f       	mov	r24, r28
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	ef 90       	pop	r14
 776:	08 95       	ret

00000778 <wr_lcd_mode>:
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	00 d0       	rcall	.+0      	; 0x782 <wr_lcd_mode+0xa>
 782:	00 d0       	rcall	.+0      	; 0x784 <wr_lcd_mode+0xc>
 784:	1f 92       	push	r1
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	08 2f       	mov	r16, r24
 78c:	68 30       	cpi	r22, 0x08	; 8
 78e:	71 f4       	brne	.+28     	; 0x7ac <wr_lcd_mode+0x34>
 790:	81 11       	cpse	r24, r1
 792:	02 c0       	rjmp	.+4      	; 0x798 <wr_lcd_mode+0x20>
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	01 c0       	rjmp	.+2      	; 0x79a <wr_lcd_mode+0x22>
 798:	88 e0       	ldi	r24, 0x08	; 8
 79a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 79e:	41 e0       	ldi	r20, 0x01	; 1
 7a0:	60 e6       	ldi	r22, 0x60	; 96
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	87 e2       	ldi	r24, 0x27	; 39
 7a6:	0e 94 90 03 	call	0x720	; 0x720 <I2C_WRITESEQ>
 7aa:	26 c0       	rjmp	.+76     	; 0x7f8 <wr_lcd_mode+0x80>
 7ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7b0:	16 2f       	mov	r17, r22
 7b2:	18 2b       	or	r17, r24
 7b4:	19 83       	std	Y+1, r17	; 0x01
 7b6:	80 2f       	mov	r24, r16
 7b8:	80 7f       	andi	r24, 0xF0	; 240
 7ba:	84 60       	ori	r24, 0x04	; 4
 7bc:	81 2b       	or	r24, r17
 7be:	8a 83       	std	Y+2, r24	; 0x02
 7c0:	8b 7f       	andi	r24, 0xFB	; 251
 7c2:	8b 83       	std	Y+3, r24	; 0x03
 7c4:	20 e1       	ldi	r18, 0x10	; 16
 7c6:	02 9f       	mul	r16, r18
 7c8:	c0 01       	movw	r24, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	81 2b       	or	r24, r17
 7ce:	84 60       	ori	r24, 0x04	; 4
 7d0:	8c 83       	std	Y+4, r24	; 0x04
 7d2:	8b 7f       	andi	r24, 0xFB	; 251
 7d4:	8d 83       	std	Y+5, r24	; 0x05
 7d6:	45 e0       	ldi	r20, 0x05	; 5
 7d8:	be 01       	movw	r22, r28
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	87 e2       	ldi	r24, 0x27	; 39
 7e0:	0e 94 90 03 	call	0x720	; 0x720 <I2C_WRITESEQ>
 7e4:	10 fd       	sbrc	r17, 0
 7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <wr_lcd_mode+0x80>
 7e8:	03 30       	cpi	r16, 0x03	; 3
 7ea:	30 f4       	brcc	.+12     	; 0x7f8 <wr_lcd_mode+0x80>
 7ec:	e3 ef       	ldi	r30, 0xF3	; 243
 7ee:	f1 e0       	ldi	r31, 0x01	; 1
 7f0:	31 97       	sbiw	r30, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <wr_lcd_mode+0x78>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <wr_lcd_mode+0x7e>
 7f6:	00 00       	nop
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	08 95       	ret

0000080c <lcd_gotoxy>:
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	d8 2f       	mov	r29, r24
 812:	c6 2f       	mov	r28, r22
 814:	e6 2f       	mov	r30, r22
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	ef 59       	subi	r30, 0x9F	; 159
 81a:	ff 4f       	sbci	r31, 0xFF	; 255
 81c:	98 2f       	mov	r25, r24
 81e:	90 68       	ori	r25, 0x80	; 128
 820:	80 81       	ld	r24, Z
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	89 2b       	or	r24, r25
 826:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
 82a:	d0 93 2f 01 	sts	0x012F, r29	; 0x80012f <_lcd_x>
 82e:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <_lcd_y>
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <lcd_clrscr>:
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
 840:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_lcd_y>
 844:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_lcd_x>
 848:	08 95       	ret

0000084a <lcd_putc>:
 84a:	cf 93       	push	r28
 84c:	c8 2f       	mov	r28, r24
 84e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_lcd_x>
 852:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 856:	98 17       	cp	r25, r24
 858:	18 f4       	brcc	.+6      	; 0x860 <__stack+0x1>
 85a:	ca 30       	cpi	r28, 0x0A	; 10
 85c:	59 f4       	brne	.+22     	; 0x874 <__stack+0x15>
 85e:	14 c0       	rjmp	.+40     	; 0x888 <__stack+0x29>
 860:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <_lcd_y>
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <_lcd_y>
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_gotoxy>
 870:	ca 30       	cpi	r28, 0x0A	; 10
 872:	91 f0       	breq	.+36     	; 0x898 <__stack+0x39>
 874:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_lcd_x>
 878:	8f 5f       	subi	r24, 0xFF	; 255
 87a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_lcd_x>
 87e:	61 e0       	ldi	r22, 0x01	; 1
 880:	8c 2f       	mov	r24, r28
 882:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
 886:	08 c0       	rjmp	.+16     	; 0x898 <__stack+0x39>
 888:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <_lcd_y>
 88c:	6f 5f       	subi	r22, 0xFF	; 255
 88e:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <_lcd_y>
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_gotoxy>
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <lcd_puts>:
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	ec 01       	movw	r28, r24
 8a2:	88 81       	ld	r24, Y
 8a4:	88 23       	and	r24, r24
 8a6:	31 f0       	breq	.+12     	; 0x8b4 <lcd_puts+0x18>
 8a8:	21 96       	adiw	r28, 0x01	; 1
 8aa:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_putc>
 8ae:	89 91       	ld	r24, Y+
 8b0:	81 11       	cpse	r24, r1
 8b2:	fb cf       	rjmp	.-10     	; 0x8aa <lcd_puts+0xe>
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 8ba:	0f 93       	push	r16
 8bc:	1f 93       	push	r17
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	00 d0       	rcall	.+0      	; 0x8c4 <lcd_init+0xa>
 8c4:	00 d0       	rcall	.+0      	; 0x8c6 <lcd_init+0xc>
 8c6:	00 d0       	rcall	.+0      	; 0x8c8 <lcd_init+0xe>
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
 8cc:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 8ce:	80 e3       	ldi	r24, 0x30	; 48
 8d0:	89 83       	std	Y+1, r24	; 0x01
 8d2:	94 e3       	ldi	r25, 0x34	; 52
 8d4:	9a 83       	std	Y+2, r25	; 0x02
 8d6:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	8c 83       	std	Y+4, r24	; 0x04
 8dc:	94 e2       	ldi	r25, 0x24	; 36
 8de:	9d 83       	std	Y+5, r25	; 0x05
 8e0:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 8e2:	80 e1       	ldi	r24, 0x10	; 16
 8e4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 8e8:	e1 e6       	ldi	r30, 0x61	; 97
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	80 5f       	subi	r24, 0xF0	; 240
 8f0:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 8f2:	81 81       	ldd	r24, Z+1	; 0x01
 8f4:	80 5f       	subi	r24, 0xF0	; 240
 8f6:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 8f8:	bd 9a       	sbi	0x17, 5	; 23
 8fa:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
 8fc:	0e 94 38 05 	call	0xa70	; 0xa70 <i2c_init>
 900:	8b e4       	ldi	r24, 0x4B	; 75
 902:	9d e1       	ldi	r25, 0x1D	; 29
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <lcd_init+0x4a>
 908:	00 c0       	rjmp	.+0      	; 0x90a <lcd_init+0x50>
 90a:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 90c:	43 e0       	ldi	r20, 0x03	; 3
 90e:	be 01       	movw	r22, r28
 910:	6f 5f       	subi	r22, 0xFF	; 255
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	87 e2       	ldi	r24, 0x27	; 39
 916:	0e 94 90 03 	call	0x720	; 0x720 <I2C_WRITESEQ>
 91a:	18 2f       	mov	r17, r24
 91c:	81 ee       	ldi	r24, 0xE1	; 225
 91e:	94 e0       	ldi	r25, 0x04	; 4
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <lcd_init+0x66>
 924:	00 c0       	rjmp	.+0      	; 0x926 <lcd_init+0x6c>
 926:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 928:	43 e0       	ldi	r20, 0x03	; 3
 92a:	be 01       	movw	r22, r28
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	87 e2       	ldi	r24, 0x27	; 39
 932:	0e 94 90 03 	call	0x720	; 0x720 <I2C_WRITESEQ>
 936:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 938:	43 e0       	ldi	r20, 0x03	; 3
 93a:	be 01       	movw	r22, r28
 93c:	6f 5f       	subi	r22, 0xFF	; 255
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	87 e2       	ldi	r24, 0x27	; 39
 942:	0e 94 90 03 	call	0x720	; 0x720 <I2C_WRITESEQ>
 946:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 948:	43 e0       	ldi	r20, 0x03	; 3
 94a:	be 01       	movw	r22, r28
 94c:	6c 5f       	subi	r22, 0xFC	; 252
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	87 e2       	ldi	r24, 0x27	; 39
 952:	0e 94 90 03 	call	0x720	; 0x720 <I2C_WRITESEQ>
 956:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	88 e2       	ldi	r24, 0x28	; 40
 95c:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
 960:	81 2b       	or	r24, r17
 962:	09 f0       	breq	.+2      	; 0x966 <lcd_init+0xac>
 964:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	8c e0       	ldi	r24, 0x0C	; 12
 96a:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	86 e0       	ldi	r24, 0x06	; 6
 972:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	80 2f       	mov	r24, r16
 982:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
}
 986:	26 96       	adiw	r28, 0x06	; 6
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	08 95       	ret

0000099c <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 99c:	68 e0       	ldi	r22, 0x08	; 8
 99e:	0e 94 bc 03 	call	0x778	; 0x778 <wr_lcd_mode>
 9a2:	08 95       	ret

000009a4 <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
 9a4:	0e 94 4a 00 	call	0x94	; 0x94 <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
 9a8:	83 ef       	ldi	r24, 0xF3	; 243
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 58 00 	call	0xb0	; 0xb0 <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	0e 94 ca 00 	call	0x194	; 0x194 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	0e 94 ca 00 	call	0x194	; 0x194 <Lcd_Init>
	
	States_GotoState(IDLE);
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	0e 94 2e 05 	call	0xa5c	; 0xa5c <States_GotoState>
	Keypad_Init();
 9c2:	0e 94 67 00 	call	0xce	; 0xce <Keypad_Init>
 9c6:	11 e6       	ldi	r17, 0x61	; 97
	
	for(int i=0;i<26;i++)
 9c8:	c0 e0       	ldi	r28, 0x00	; 0
 9ca:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Position(LCDNOTICE , i/16, i%16);
 9cc:	ce 01       	movw	r24, r28
 9ce:	8f 70       	andi	r24, 0x0F	; 15
 9d0:	90 78       	andi	r25, 0x80	; 128
 9d2:	99 23       	and	r25, r25
 9d4:	24 f4       	brge	.+8      	; 0x9de <main+0x3a>
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	80 6f       	ori	r24, 0xF0	; 240
 9da:	9f 6f       	ori	r25, 0xFF	; 255
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	f8 2e       	mov	r15, r24
 9e0:	09 2f       	mov	r16, r25
 9e2:	ce 01       	movw	r24, r28
 9e4:	dd 23       	and	r29, r29
 9e6:	0c f4       	brge	.+2      	; 0x9ea <main+0x46>
 9e8:	0f 96       	adiw	r24, 0x0f	; 15
 9ea:	6c 01       	movw	r12, r24
 9ec:	d5 94       	asr	r13
 9ee:	c7 94       	ror	r12
 9f0:	d5 94       	asr	r13
 9f2:	c7 94       	ror	r12
 9f4:	d5 94       	asr	r13
 9f6:	c7 94       	ror	r12
 9f8:	d5 94       	asr	r13
 9fa:	c7 94       	ror	r12
 9fc:	4f 2d       	mov	r20, r15
 9fe:	50 2f       	mov	r21, r16
 a00:	b6 01       	movw	r22, r12
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	0e 94 1a 01 	call	0x234	; 0x234 <Lcd_Position>
		Lcd_Printc(LCDNOTICE , 'a' + i);
 a08:	61 2f       	mov	r22, r17
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_Printc>
		
		Lcd_Position(LCDKEYPAD , i/16, i%16);
 a10:	4f 2d       	mov	r20, r15
 a12:	50 2f       	mov	r21, r16
 a14:	b6 01       	movw	r22, r12
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	0e 94 1a 01 	call	0x234	; 0x234 <Lcd_Position>
		Lcd_Printc(LCDKEYPAD , 'a' + i);
 a1c:	61 2f       	mov	r22, r17
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_Printc>
	Lcd_Init(LCDNOTICE);
	
	States_GotoState(IDLE);
	Keypad_Init();
	
	for(int i=0;i<26;i++)
 a24:	21 96       	adiw	r28, 0x01	; 1
 a26:	1f 5f       	subi	r17, 0xFF	; 255
 a28:	1b 37       	cpi	r17, 0x7B	; 123
 a2a:	81 f6       	brne	.-96     	; 0x9cc <main+0x28>
	
	
	
	while (1)
	{
		if(Keypad_KeyPressed())
 a2c:	0e 94 6e 00 	call	0xdc	; 0xdc <Keypad_KeyPressed>
 a30:	88 23       	and	r24, r24
 a32:	e1 f3       	breq	.-8      	; 0xa2c <main+0x88>
		{
			int_fast8_t x = Keypad_GetKey();
 a34:	0e 94 b2 00 	call	0x164	; 0x164 <Keypad_GetKey>
			KeyProcessor_ProcessKey(x);
 a38:	0e 94 be 00 	call	0x17c	; 0x17c <KeyProcessor_ProcessKey>
			Keypad_Init();
 a3c:	0e 94 67 00 	call	0xce	; 0xce <Keypad_Init>
 a40:	f5 cf       	rjmp	.-22     	; 0xa2c <main+0x88>

00000a42 <Idle_ProcessKey>:
#include "../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	0e 94 2e 05 	call	0xa5c	; 0xa5c <States_GotoState>
 a48:	08 95       	ret

00000a4a <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Lcd_ClearScreen>
	Lcd_Prints(LCDKEYPAD , "Welcome to xyz");
 a50:	6f ef       	ldi	r22, 0xFF	; 255
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	80 e0       	ldi	r24, 0x00	; 0
 a56:	0e 94 08 01 	call	0x210	; 0x210 <Lcd_Prints>
 a5a:	08 95       	ret

00000a5c <States_GotoState>:
#include "../all.h"

int_fast8_t currentState;
void States_GotoState(int_fast8_t newState)
{
	switch(newState)
 a5c:	81 11       	cpse	r24, r1
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <States_GotoState+0xa>
	{
		case IDLE:
			Idle_Init();
 a60:	0e 94 25 05 	call	0xa4a	; 0xa4a <Idle_Init>
			break;
 a64:	08 95       	ret
		default:
			Error_Error("GotoState: newState not defined");
 a66:	8e e0       	ldi	r24, 0x0E	; 14
 a68:	91 e0       	ldi	r25, 0x01	; 1
 a6a:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
 a6e:	08 95       	ret

00000a70 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 a70:	11 b8       	out	0x01, r1	; 1
 a72:	8c e0       	ldi	r24, 0x0C	; 12
 a74:	80 b9       	out	0x00, r24	; 0
 a76:	08 95       	ret

00000a78 <i2c_start>:
 a78:	94 ea       	ldi	r25, 0xA4	; 164
 a7a:	96 bf       	out	0x36, r25	; 54
 a7c:	06 b6       	in	r0, 0x36	; 54
 a7e:	07 fe       	sbrs	r0, 7
 a80:	fd cf       	rjmp	.-6      	; 0xa7c <i2c_start+0x4>
 a82:	91 b1       	in	r25, 0x01	; 1
 a84:	98 7f       	andi	r25, 0xF8	; 248
 a86:	98 30       	cpi	r25, 0x08	; 8
 a88:	11 f0       	breq	.+4      	; 0xa8e <i2c_start+0x16>
 a8a:	90 31       	cpi	r25, 0x10	; 16
 a8c:	79 f4       	brne	.+30     	; 0xaac <i2c_start+0x34>
 a8e:	83 b9       	out	0x03, r24	; 3
 a90:	84 e8       	ldi	r24, 0x84	; 132
 a92:	86 bf       	out	0x36, r24	; 54
 a94:	06 b6       	in	r0, 0x36	; 54
 a96:	07 fe       	sbrs	r0, 7
 a98:	fd cf       	rjmp	.-6      	; 0xa94 <i2c_start+0x1c>
 a9a:	91 b1       	in	r25, 0x01	; 1
 a9c:	98 7f       	andi	r25, 0xF8	; 248
 a9e:	98 31       	cpi	r25, 0x18	; 24
 aa0:	39 f0       	breq	.+14     	; 0xab0 <i2c_start+0x38>
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	90 34       	cpi	r25, 0x40	; 64
 aa6:	29 f4       	brne	.+10     	; 0xab2 <i2c_start+0x3a>
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	08 95       	ret
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	08 95       	ret
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	08 95       	ret

00000ab4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 ab4:	84 e9       	ldi	r24, 0x94	; 148
 ab6:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 ab8:	06 b6       	in	r0, 0x36	; 54
 aba:	04 fc       	sbrc	r0, 4
 abc:	fd cf       	rjmp	.-6      	; 0xab8 <i2c_stop+0x4>

}/* i2c_stop */
 abe:	08 95       	ret

00000ac0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 ac0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 ac2:	84 e8       	ldi	r24, 0x84	; 132
 ac4:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 ac6:	06 b6       	in	r0, 0x36	; 54
 ac8:	07 fe       	sbrs	r0, 7
 aca:	fd cf       	rjmp	.-6      	; 0xac6 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 acc:	91 b1       	in	r25, 0x01	; 1
 ace:	98 7f       	andi	r25, 0xF8	; 248
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	98 32       	cpi	r25, 0x28	; 40
 ad4:	09 f4       	brne	.+2      	; 0xad8 <i2c_write+0x18>
 ad6:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 ad8:	08 95       	ret

00000ada <_exit>:
 ada:	f8 94       	cli

00000adc <__stop_program>:
 adc:	ff cf       	rjmp	.-2      	; 0xadc <__stop_program>
