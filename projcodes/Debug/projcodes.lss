
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000212  00800060  00002d3c  00002dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000354  00800272  00800272  00002fe2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fe2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000538  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005067  00000000  00000000  000035b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ee8  00000000  00000000  0000861b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003349  00000000  00000000  0000a503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0000d84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d26  00000000  00000000  0000e320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000290e  00000000  00000000  0000f046  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00011954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	bf 04       	cpc	r11, r15
      56:	c2 04       	cpc	r12, r2
      58:	c5 04       	cpc	r12, r5
      5a:	c8 04       	cpc	r12, r8
      5c:	cb 04       	cpc	r12, r11
      5e:	ce 04       	cpc	r12, r14
      60:	d1 04       	cpc	r13, r1
      62:	66 0d       	add	r22, r6
      64:	69 0d       	add	r22, r9
      66:	6c 0d       	add	r22, r12
      68:	6f 0d       	add	r22, r15
      6a:	72 0d       	add	r23, r2
      6c:	75 0d       	add	r23, r5
      6e:	78 0d       	add	r23, r8

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <Lcd_Init+0x18>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <Keypad_WriteToBuffer+0x4a>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <regression+0x13e>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <sumit+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	ec e3       	ldi	r30, 0x3C	; 60
     17e:	fd e2       	ldi	r31, 0x2D	; 45
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a2 37       	cpi	r26, 0x72	; 114
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	25 e0       	ldi	r18, 0x05	; 5
     18e:	a2 e7       	ldi	r26, 0x72	; 114
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a6 3c       	cpi	r26, 0xC6	; 198
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 a3 09 	call	0x1346	; 0x1346 <main>
     1a0:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <sumit>:
char disp[16] = "00000000000001";
char result[8] = "000001"; 

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=data_points[i];
     1bc:	16 16       	cp	r1, r22
     1be:	17 06       	cpc	r1, r23
     1c0:	04 f5       	brge	.+64     	; 0x202 <sumit+0x5a>
     1c2:	7b 01       	movw	r14, r22
     1c4:	8c 01       	movw	r16, r24
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	c1 e0       	ldi	r28, 0x01	; 1
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	f8 01       	movw	r30, r16
     1d6:	61 91       	ld	r22, Z+
     1d8:	71 91       	ld	r23, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	07 2e       	mov	r0, r23
     1de:	00 0c       	add	r0, r0
     1e0:	88 0b       	sbc	r24, r24
     1e2:	99 0b       	sbc	r25, r25
     1e4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	ec 16       	cp	r14, r28
     1fc:	fd 06       	cpc	r15, r29
     1fe:	54 f7       	brge	.-44     	; 0x1d4 <sumit+0x2c>
     200:	03 c0       	rjmp	.+6      	; 0x208 <sumit+0x60>

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	 int i;
	 double sum=0;
     202:	81 2c       	mov	r8, r1
     204:	91 2c       	mov	r9, r1
     206:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=data_points[i];
	 return sum;
}
     208:	c5 01       	movw	r24, r10
     20a:	b4 01       	movw	r22, r8
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <xysum>:

double xysum(int data_points[],int length){
     222:	8f 92       	push	r8
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     236:	16 16       	cp	r1, r22
     238:	17 06       	cpc	r1, r23
     23a:	3c f5       	brge	.+78     	; 0x28a <xysum+0x68>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	c1 e0       	ldi	r28, 0x01	; 1
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	54 01       	movw	r10, r8
     24e:	f8 01       	movw	r30, r16
     250:	81 91       	ld	r24, Z+
     252:	91 91       	ld	r25, Z+
     254:	8f 01       	movw	r16, r30
     256:	8c 9f       	mul	r24, r28
     258:	b0 01       	movw	r22, r0
     25a:	8d 9f       	mul	r24, r29
     25c:	70 0d       	add	r23, r0
     25e:	9c 9f       	mul	r25, r28
     260:	70 0d       	add	r23, r0
     262:	11 24       	eor	r1, r1
     264:	07 2e       	mov	r0, r23
     266:	00 0c       	add	r0, r0
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__floatsisf>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ec 16       	cp	r14, r28
     284:	fd 06       	cpc	r15, r29
     286:	1c f7       	brge	.-58     	; 0x24e <xysum+0x2c>
     288:	03 c0       	rjmp	.+6      	; 0x290 <xysum+0x6e>
	 return sum;
}

double xysum(int data_points[],int length){
	 int i;
	 double sum=0;
     28a:	81 2c       	mov	r8, r1
     28c:	91 2c       	mov	r9, r1
     28e:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
	 return sum;
}
     290:	c5 01       	movw	r24, r10
     292:	b4 01       	movw	r22, r8
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret

000002aa <regression>:

void regression(int data_points[],double n){
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	60 97       	sbiw	r28, 0x10	; 16
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	3c 01       	movw	r6, r24
     2d8:	6a 01       	movw	r12, r20
     2da:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     2ec:	6d 83       	std	Y+5, r22	; 0x05
     2ee:	7e 83       	std	Y+6, r23	; 0x06
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
	double xbar = (n+1)/2.0;
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__fixsfsi>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	c3 01       	movw	r24, r6
     316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sumit>
     31a:	a7 01       	movw	r20, r14
     31c:	96 01       	movw	r18, r12
     31e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divsf3>
     322:	69 87       	std	Y+9, r22	; 0x09
     324:	7a 87       	std	Y+10, r23	; 0x0a
     326:	8b 87       	std	Y+11, r24	; 0x0b
     328:	9c 87       	std	Y+12, r25	; 0x0c
	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     32a:	b4 01       	movw	r22, r8
     32c:	c3 01       	movw	r24, r6
     32e:	0e 94 11 01 	call	0x222	; 0x222 <xysum>
     332:	4b 01       	movw	r8, r22
     334:	5c 01       	movw	r10, r24
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     346:	2b 01       	movw	r4, r22
     348:	3c 01       	movw	r6, r24
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	69 85       	ldd	r22, Y+9	; 0x09
     350:	7a 85       	ldd	r23, Y+10	; 0x0a
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__subsf3>
     366:	4b 01       	movw	r8, r22
     368:	5c 01       	movw	r10, r24
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     382:	6d 87       	std	Y+13, r22	; 0x0d
     384:	7e 87       	std	Y+14, r23	; 0x0e
     386:	8f 87       	std	Y+15, r24	; 0x0f
     388:	98 8b       	std	Y+16, r25	; 0x10
     38a:	2d 81       	ldd	r18, Y+5	; 0x05
     38c:	3e 81       	ldd	r19, Y+6	; 0x06
     38e:	4f 81       	ldd	r20, Y+7	; 0x07
     390:	58 85       	ldd	r21, Y+8	; 0x08
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a4:	98 89       	ldd	r25, Y+16	; 0x10
     3a6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 ec       	ldi	r20, 0xC0	; 192
     3b0:	50 e4       	ldi	r21, 0x40	; 64
     3b2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a3 01       	movw	r20, r6
     3bc:	92 01       	movw	r18, r4
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__subsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divsf3>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <m>
     3ea:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <m+0x1>
     3ee:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <m+0x2>
     3f2:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <m+0x3>
	c=ybar-m*xbar;
     3f6:	69 81       	ldd	r22, Y+1	; 0x01
     3f8:	7a 81       	ldd	r23, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	69 85       	ldd	r22, Y+9	; 0x09
     408:	7a 85       	ldd	r23, Y+10	; 0x0a
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__subsf3>
     412:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <__data_end>
     416:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <__data_end+0x1>
     41a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end+0x2>
     41e:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x3>
}
     422:	60 96       	adiw	r28, 0x10	; 16
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	08 95       	ret

0000044c <Bp_Read>:

int Bp_Read()
{
   ADCSRA |= (1<<ADSC);
     44c:	36 9a       	sbi	0x06, 6	; 6
   while(ADCSRA & (1<<ADSC));
     44e:	36 99       	sbic	0x06, 6	; 6
     450:	fe cf       	rjmp	.-4      	; 0x44e <Bp_Read+0x2>
   
   return ADC;
     452:	84 b1       	in	r24, 0x04	; 4
     454:	95 b1       	in	r25, 0x05	; 5
}
     456:	08 95       	ret

00000458 <Bp_Init>:

void Bp_Init()
{
	DDRA &= ~2;		/* Vref: Avcc, ADC channel: 1 */
     458:	d1 98       	cbi	0x1a, 1	; 26
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
     45a:	80 ec       	ldi	r24, 0xC0	; 192
     45c:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	86 b9       	out	0x06, r24	; 6
     462:	08 95       	ret

00000464 <Bp_PrintBp>:
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
}

void Bp_PrintBp()
{
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <Bp_PrintBp+0x22>
     486:	00 d0       	rcall	.+0      	; 0x488 <Bp_PrintBp+0x24>
     488:	00 d0       	rcall	.+0      	; 0x48a <Bp_PrintBp+0x26>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
}
     48e:	4d b6       	in	r4, 0x3d	; 61
     490:	5e b6       	in	r5, 0x3e	; 62
	
	/*  timing data */
    const double sampling_rate = 0.100 ;	   	// actually this is the _delay_ms val
    const int time_limit = 15 ;  				 //in seconds
    const int size=time_limit/(sampling_rate);
    int data_points[size+1];
     492:	8d b7       	in	r24, 0x3d	; 61
     494:	9e b7       	in	r25, 0x3e	; 62
     496:	8e 52       	subi	r24, 0x2E	; 46
     498:	91 40       	sbci	r25, 0x01	; 1
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	9e bf       	out	0x3e, r25	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	8d bf       	out	0x3d, r24	; 61
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	3f 01       	movw	r6, r30

	data_points[0]=0;
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	12 82       	std	Z+2, r1	; 0x02
     4b2:	11 82       	std	Z+1, r1	; 0x01
     4b4:	ad b6       	in	r10, 0x3d	; 61
     4b6:	be b6       	in	r11, 0x3e	; 62
     4b8:	f3 e0       	ldi	r31, 0x03	; 3
     4ba:	af 0e       	add	r10, r31
     4bc:	b1 1c       	adc	r11, r1
     4be:	0f e9       	ldi	r16, 0x9F	; 159
     4c0:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
		
		sprintf(val , "%2ds",(size -i +9)/10);
     4c2:	0f 2e       	mov	r0, r31
     4c4:	fa e0       	ldi	r31, 0x0A	; 10
     4c6:	8f 2e       	mov	r8, r31
     4c8:	91 2c       	mov	r9, r1
     4ca:	f0 2d       	mov	r31, r0
     4cc:	0f 2e       	mov	r0, r31
     4ce:	fb e6       	ldi	r31, 0x6B	; 107
     4d0:	cf 2e       	mov	r12, r31
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	df 2e       	mov	r13, r31
     4d6:	f0 2d       	mov	r31, r0
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	7c 01       	movw	r14, r24
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
     4de:	0e 94 26 02 	call	0x44c	; 0x44c <Bp_Read>
     4e2:	f5 01       	movw	r30, r10
     4e4:	81 93       	st	Z+, r24
     4e6:	91 93       	st	Z+, r25
     4e8:	5f 01       	movw	r10, r30
		
		sprintf(val , "%2ds",(size -i +9)/10);
     4ea:	c8 01       	movw	r24, r16
     4ec:	b4 01       	movw	r22, r8
     4ee:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__divmodhi4>
     4f2:	7f 93       	push	r23
     4f4:	6f 93       	push	r22
     4f6:	df 92       	push	r13
     4f8:	cf 92       	push	r12
     4fa:	ff 92       	push	r15
     4fc:	ef 92       	push	r14
     4fe:	0e 94 70 11 	call	0x22e0	; 0x22e0 <sprintf>
		Lcd_Position(LCDKEYPAD , 1, 6 );
     502:	46 e0       	ldi	r20, 0x06	; 6
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
		Lcd_Prints(LCDKEYPAD , val);
     510:	b7 01       	movw	r22, r14
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     518:	ff ef       	ldi	r31, 0xFF	; 255
     51a:	20 e7       	ldi	r18, 0x70	; 112
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	f1 50       	subi	r31, 0x01	; 1
     520:	20 40       	sbci	r18, 0x00	; 0
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <Bp_PrintBp+0xba>
     526:	00 c0       	rjmp	.+0      	; 0x528 <Bp_PrintBp+0xc4>
     528:	00 00       	nop
     52a:	01 50       	subi	r16, 0x01	; 1
     52c:	11 09       	sbc	r17, r1
	/* /timing data */
	
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	08 30       	cpi	r16, 0x08	; 8
     53c:	11 05       	cpc	r17, r1
     53e:	79 f6       	brne	.-98     	; 0x4de <Bp_PrintBp+0x7a>

		_delay_ms(sampling_rate*1000);
	
	}

	regression(data_points,size);
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	66 e1       	ldi	r22, 0x16	; 22
     546:	73 e4       	ldi	r23, 0x43	; 67
     548:	c3 01       	movw	r24, r6
     54a:	0e 94 55 01 	call	0x2aa	; 0x2aa <regression>
     54e:	f3 01       	movw	r30, r6
     550:	94 ed       	ldi	r25, 0xD4	; 212
     552:	69 1a       	sub	r6, r25
     554:	9e ef       	ldi	r25, 0xFE	; 254
     556:	79 0a       	sbc	r7, r25
	int count3 =  0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
	
	//recorded wave form
	for(i=0;i<size;i++){	
		thresh=(i+2)*m+c;

		int a=data_points[i+1];//current value
     55c:	22 81       	ldd	r18, Z+2	; 0x02
     55e:	33 81       	ldd	r19, Z+3	; 0x03
			count1+=1; //peak counting]
			if(a>data_points[i] && a>data_points[i+2]){
				count2+=1;
			}
		}
		if(a>data_points[i] && a>data_points[i+2])
     560:	40 81       	ld	r20, Z
     562:	51 81       	ldd	r21, Z+1	; 0x01
     564:	32 96       	adiw	r30, 0x02	; 2
     566:	42 17       	cp	r20, r18
     568:	53 07       	cpc	r21, r19
     56a:	34 f4       	brge	.+12     	; 0x578 <Bp_PrintBp+0x114>
     56c:	42 81       	ldd	r20, Z+2	; 0x02
     56e:	53 81       	ldd	r21, Z+3	; 0x03
     570:	42 17       	cp	r20, r18
     572:	53 07       	cpc	r21, r19
     574:	0c f4       	brge	.+2      	; 0x578 <Bp_PrintBp+0x114>
		{
			count3++;
     576:	01 96       	adiw	r24, 0x01	; 1

	regression(data_points,size);
	int count3 =  0;
	
	//recorded wave form
	for(i=0;i<size;i++){	
     578:	6e 16       	cp	r6, r30
     57a:	7f 06       	cpc	r7, r31
     57c:	79 f7       	brne	.-34     	; 0x55c <Bp_PrintBp+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     57e:	4a e0       	ldi	r20, 0x0A	; 10
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	0e 94 4b 11 	call	0x2296	; 0x2296 <__itoa_ncheck>
	int bpm = 60 + (count3*(60/time_limit))/10;
	
	bpm  =  (count3*(60/time_limit));
	
    itoa(bpm,val,10);
	Lcd_Position(LCDKEYPAD , 1,  10);
     592:	4a e0       	ldi	r20, 0x0A	; 10
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , val);
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
	
	Lcd_Position(LCDKEYPAD , 1,  13);
     5ac:	4d e0       	ldi	r20, 0x0D	; 13
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "BPM");
     5ba:	60 e7       	ldi	r22, 0x70	; 112
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
	
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
     5c4:	be 01       	movw	r22, r28
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	82 e8       	ldi	r24, 0x82	; 130
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
}
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	5e be       	out	0x3e, r5	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	4d be       	out	0x3d, r4	; 61
     5dc:	26 96       	adiw	r28, 0x06	; 6
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	bf 90       	pop	r11
     5fa:	af 90       	pop	r10
     5fc:	9f 90       	pop	r9
     5fe:	8f 90       	pop	r8
     600:	7f 90       	pop	r7
     602:	6f 90       	pop	r6
     604:	5f 90       	pop	r5
     606:	4f 90       	pop	r4
     608:	08 95       	ret

0000060a <Button_Init>:
#include "button.h"

void Button_Init()
{
	DDRA &= ~(1<<2);
     60a:	d2 98       	cbi	0x1a, 2	; 26
     60c:	08 95       	ret

0000060e <Button_ButtonPressed>:
}
bool Button_ButtonPressed()
{
	return (((PINA>>2)&1) == 0);
     60e:	89 b3       	in	r24, 0x19	; 25
     610:	82 fb       	bst	r24, 2
     612:	88 27       	eor	r24, r24
     614:	80 f9       	bld	r24, 0
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	89 27       	eor	r24, r25
     61a:	08 95       	ret

0000061c <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
     61c:	08 95       	ret

0000061e <Error_ErrorNum>:
	// HC05_SendString(text);
}
void Error_ErrorNum(const char * text , int val)
{
     61e:	08 95       	ret

00000620 <Error_ErrorBin>:
// 	sprintf(temp , " = %d\n" , val);
// 	HC05_SendString(temp);
// 	HC05_SendString("\r\n");
}
void Error_ErrorBin(const char * text,int val)
{
     620:	08 95       	ret

00000622 <HC05_SendChar>:
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     622:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     624:	5d 9b       	sbis	0x0b, 5	; 11
     626:	fe cf       	rjmp	.-4      	; 0x624 <HC05_SendChar+0x2>
}
     628:	08 95       	ret

0000062a <HC05_SendString>:
void HC05_SendString(char * s)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
	while(*s)
     630:	88 81       	ld	r24, Y
     632:	88 23       	and	r24, r24
     634:	31 f0       	breq	.+12     	; 0x642 <HC05_SendString+0x18>
     636:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     638:	0e 94 11 03 	call	0x622	; 0x622 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     63c:	89 91       	ld	r24, Y+
     63e:	81 11       	cpse	r24, r1
     640:	fb cf       	rjmp	.-10     	; 0x638 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     648:	8a b3       	in	r24, 0x1a	; 26
     64a:	83 70       	andi	r24, 0x03	; 3
     64c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     652:	88 bb       	out	0x18, r24	; 24
     654:	08 95       	ret

00000656 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     656:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <isNumber>
	isUpperCase = false;
     65a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <isUpperCase>
	position = 0;
     65e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <position+0x1>
     662:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <position>
	keyBuffer[position] = 0;
     666:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <keyBuffer>
     66a:	08 95       	ret

0000066c <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	59 f4       	brne	.+22     	; 0x686 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     670:	84 e7       	ldi	r24, 0x74	; 116
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
		position = 0;
     678:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <position+0x1>
     67c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <position>
		keyBuffer[position]=0;
     680:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <keyBuffer>
     684:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     686:	fc 01       	movw	r30, r24
     688:	01 90       	ld	r0, Z+
     68a:	00 20       	and	r0, r0
     68c:	e9 f7       	brne	.-6      	; 0x688 <Keypad_WriteToBuffer+0x1c>
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	e8 1b       	sub	r30, r24
     692:	f9 0b       	sbc	r31, r25
     694:	e0 31       	cpi	r30, 0x10	; 16
     696:	f1 05       	cpc	r31, r1
     698:	28 f5       	brcc	.+74     	; 0x6e4 <Keypad_WriteToBuffer+0x78>
     69a:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     69c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <position+0x1>
     6a0:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <position>
     6a4:	1e 16       	cp	r1, r30
     6a6:	1f 06       	cpc	r1, r31
     6a8:	b4 f4       	brge	.+44     	; 0x6d6 <Keypad_WriteToBuffer+0x6a>
     6aa:	fc 01       	movw	r30, r24
     6ac:	a2 e8       	ldi	r26, 0x82	; 130
     6ae:	b2 e0       	ldi	r27, 0x02	; 2
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     6b4:	81 91       	ld	r24, Z+
     6b6:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <position+0x1>
     6c0:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <position>
     6c4:	24 17       	cp	r18, r20
     6c6:	35 07       	cpc	r19, r21
     6c8:	ac f3       	brlt	.-22     	; 0x6b4 <Keypad_WriteToBuffer+0x48>
     6ca:	14 16       	cp	r1, r20
     6cc:	15 06       	cpc	r1, r21
     6ce:	2c f0       	brlt	.+10     	; 0x6da <Keypad_WriteToBuffer+0x6e>
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <Keypad_WriteToBuffer+0x6e>
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     6da:	fa 01       	movw	r30, r20
     6dc:	ee 57       	subi	r30, 0x7E	; 126
     6de:	fd 4f       	sbci	r31, 0xFD	; 253
     6e0:	10 82       	st	Z, r1
	}
}
     6e2:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     6e4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <position+0x1>
     6e8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <position>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     6ec:	40 e1       	ldi	r20, 0x10	; 16
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	dc cf       	rjmp	.-72     	; 0x6aa <Keypad_WriteToBuffer+0x3e>

000006f2 <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <isNumber>
     6f8:	08 95       	ret

000006fa <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     6fa:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <isNumber>
     6fe:	81 11       	cpse	r24, r1
     700:	07 c0       	rjmp	.+14     	; 0x710 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     702:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <isUpperCase>
     706:	81 11       	cpse	r24, r1
     708:	06 c0       	rjmp	.+12     	; 0x716 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     70a:	8c e8       	ldi	r24, 0x8C	; 140
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     710:	84 e8       	ldi	r24, 0x84	; 132
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     716:	88 e8       	ldi	r24, 0x88	; 136
     718:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     71a:	08 95       	ret

0000071c <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     720:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Keypad_GetMode>
     724:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     726:	fc 01       	movw	r30, r24
     728:	01 90       	ld	r0, Z+
     72a:	00 20       	and	r0, r0
     72c:	e9 f7       	brne	.-6      	; 0x728 <Keypad_UpdateKeyMode+0xc>
     72e:	ac 01       	movw	r20, r24
     730:	4e 1b       	sub	r20, r30
     732:	5f 0b       	sbc	r21, r31
     734:	4f 5e       	subi	r20, 0xEF	; 239
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     742:	be 01       	movw	r22, r28
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     750:	89 b3       	in	r24, 0x19	; 25
}
     752:	82 95       	swap	r24
     754:	8f 70       	andi	r24, 0x0F	; 15
     756:	08 95       	ret

00000758 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
	int pin = PINA >> 4;
     75e:	c9 b3       	in	r28, 0x19	; 25
     760:	c2 95       	swap	r28
     762:	cf 70       	andi	r28, 0x0F	; 15
     764:	0c 2f       	mov	r16, r28
     766:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     768:	b8 01       	movw	r22, r16
     76a:	80 e9       	ldi	r24, 0x90	; 144
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 10 03 	call	0x620	; 0x620 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     772:	c0 fd       	sbrc	r28, 0
     774:	0c c0       	rjmp	.+24     	; 0x78e <Keypad_GetRow+0x36>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	98 01       	movw	r18, r16
     77c:	08 2e       	mov	r0, r24
     77e:	02 c0       	rjmp	.+4      	; 0x784 <Keypad_GetRow+0x2c>
     780:	35 95       	asr	r19
     782:	27 95       	ror	r18
     784:	0a 94       	dec	r0
     786:	e2 f7       	brpl	.-8      	; 0x780 <Keypad_GetRow+0x28>
     788:	20 ff       	sbrs	r18, 0
     78a:	04 c0       	rjmp	.+8      	; 0x794 <Keypad_GetRow+0x3c>
     78c:	0c c0       	rjmp	.+24     	; 0x7a6 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     792:	09 c0       	rjmp	.+18     	; 0x7a6 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	84 30       	cpi	r24, 0x04	; 4
     798:	91 05       	cpc	r25, r1
     79a:	79 f7       	brne	.-34     	; 0x77a <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     79c:	89 e9       	ldi	r24, 0x99	; 153
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	return -1;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
}
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	int i = 7;
     7b6:	c7 e0       	ldi	r28, 0x07	; 7
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     7ba:	01 e0       	ldi	r16, 0x01	; 1
     7bc:	10 e0       	ldi	r17, 0x00	; 0
     7be:	28 b3       	in	r18, 0x18	; 24
     7c0:	c8 01       	movw	r24, r16
     7c2:	0c 2e       	mov	r0, r28
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <Keypad_GetCol+0x1c>
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <Keypad_GetCol+0x18>
     7ce:	82 27       	eor	r24, r18
     7d0:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     7d2:	66 b3       	in	r22, 0x16	; 22
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	87 ea       	ldi	r24, 0xA7	; 167
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 10 03 	call	0x620	; 0x620 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     7de:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     7e0:	82 95       	swap	r24
     7e2:	8f 70       	andi	r24, 0x0F	; 15
     7e4:	11 f4       	brne	.+4      	; 0x7ea <Keypad_GetCol+0x3c>
		{
			return i;
     7e6:	8c 2f       	mov	r24, r28
     7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <Keypad_GetCol+0x4a>
		}
		i--;
     7ea:	21 97       	sbiw	r28, 0x01	; 1
     7ec:	40 f7       	brcc	.-48     	; 0x7be <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     7ee:	8d ea       	ldi	r24, 0xAD	; 173
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	// report error
	return -1;
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     802:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <position>
     806:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <position+0x1>
     80a:	f9 01       	movw	r30, r18
     80c:	ee 57       	subi	r30, 0x7E	; 126
     80e:	fd 4f       	sbci	r31, 0xFD	; 253
     810:	80 83       	st	Z, r24
	if(position < 16)
     812:	20 31       	cpi	r18, 0x10	; 16
     814:	31 05       	cpc	r19, r1
     816:	34 f4       	brge	.+12     	; 0x824 <addChar+0x22>
		position = position +1;
     818:	2f 5f       	subi	r18, 0xFF	; 255
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <position+0x1>
     820:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <position>
	keyBuffer[position] = 0;
     824:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <position>
     828:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <position+0x1>
     82c:	ee 57       	subi	r30, 0x7E	; 126
     82e:	fd 4f       	sbci	r31, 0xFD	; 253
     830:	10 82       	st	Z, r1
     832:	08 95       	ret

00000834 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     834:	cf 93       	push	r28
     836:	c8 2f       	mov	r28, r24
	if(key >= 30)
     838:	8e 31       	cpi	r24, 0x1E	; 30
     83a:	24 f0       	brlt	.+8      	; 0x844 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     83c:	8b eb       	ldi	r24, 0xBB	; 187
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	if(key == 29) 
     844:	cd 31       	cpi	r28, 0x1D	; 29
     846:	99 f4       	brne	.+38     	; 0x86e <__stack+0xf>
	{
		// backspace = delete char
		if(position)
     848:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <position>
     84c:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <position+0x1>
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	29 f0       	breq	.+10     	; 0x85e <Keypad_AddKey+0x2a>
			position--;
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <position+0x1>
     85a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <position>
		keyBuffer[position] = 0;
     85e:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <position>
     862:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <position+0x1>
     866:	ee 57       	subi	r30, 0x7E	; 126
     868:	fd 4f       	sbci	r31, 0xFD	; 253
     86a:	10 82       	st	Z, r1
     86c:	57 c0       	rjmp	.+174    	; 0x91c <__stack+0xbd>
	}
	else if(key == 28)
     86e:	cc 31       	cpi	r28, 0x1C	; 28
     870:	21 f4       	brne	.+8      	; 0x87a <__stack+0x1b>
	{
		// space
		addChar(' ');
     872:	80 e2       	ldi	r24, 0x20	; 32
     874:	0e 94 01 04 	call	0x802	; 0x802 <addChar>
     878:	51 c0       	rjmp	.+162    	; 0x91c <__stack+0xbd>
	}
	else if(key == 27)
     87a:	cb 31       	cpi	r28, 0x1B	; 27
     87c:	39 f4       	brne	.+14     	; 0x88c <__stack+0x2d>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     87e:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <isNumber>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	89 27       	eor	r24, r25
     886:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <isNumber>
     88a:	48 c0       	rjmp	.+144    	; 0x91c <__stack+0xbd>
	}
	else if(isNumber) 
     88c:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <isNumber>
     890:	88 23       	and	r24, r24
     892:	e9 f0       	breq	.+58     	; 0x8ce <__stack+0x6f>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     894:	9c 2f       	mov	r25, r28
     896:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     898:	93 30       	cpi	r25, 0x03	; 3
     89a:	08 f0       	brcs	.+2      	; 0x89e <__stack+0x3f>
     89c:	3f c0       	rjmp	.+126    	; 0x91c <__stack+0xbd>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     89e:	c5 95       	asr	r28
     8a0:	c5 95       	asr	r28
     8a2:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     8a4:	c3 30       	cpi	r28, 0x03	; 3
     8a6:	38 f4       	brcc	.+14     	; 0x8b6 <__stack+0x57>
			c = '1' + row * 3 + col;
     8a8:	8c 2f       	mov	r24, r28
     8aa:	88 0f       	add	r24, r24
     8ac:	c8 0f       	add	r28, r24
     8ae:	81 e3       	ldi	r24, 0x31	; 49
     8b0:	89 0f       	add	r24, r25
     8b2:	8c 0f       	add	r24, r28
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__stack+0x69>
		}
		else if(col == 0) {
     8b6:	99 23       	and	r25, r25
     8b8:	21 f0       	breq	.+8      	; 0x8c2 <__stack+0x63>
			c = '*';
		}
		else if(col == 1) {
     8ba:	91 30       	cpi	r25, 0x01	; 1
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <__stack+0x67>
			c = '0';
		}
		else  {
			c = '#';
     8be:	83 e2       	ldi	r24, 0x23	; 35
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     8c2:	8a e2       	ldi	r24, 0x2A	; 42
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <__stack+0x69>
		}
		else if(col == 1) {
			c = '0';
     8c6:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     8c8:	0e 94 01 04 	call	0x802	; 0x802 <addChar>
     8cc:	27 c0       	rjmp	.+78     	; 0x91c <__stack+0xbd>
		
	}
	else if(key == 26)
     8ce:	ca 31       	cpi	r28, 0x1A	; 26
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <__stack+0x81>
	{
		// capslock
		isUpperCase = !isUpperCase;
     8d2:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <isUpperCase>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	89 27       	eor	r24, r25
     8da:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <isUpperCase>
     8de:	1e c0       	rjmp	.+60     	; 0x91c <__stack+0xbd>
	}
	else
	{
		// char
		char row = key >> 3;
     8e0:	9c 2f       	mov	r25, r28
     8e2:	95 95       	asr	r25
     8e4:	95 95       	asr	r25
     8e6:	95 95       	asr	r25
		char col = key & 0b00000111;
     8e8:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     8ea:	93 30       	cpi	r25, 0x03	; 3
     8ec:	68 f4       	brcc	.+26     	; 0x908 <__stack+0xa9>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     8ee:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <isUpperCase>
     8f2:	81 11       	cpse	r24, r1
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	81 e6       	ldi	r24, 0x61	; 97
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <__stack+0x9d>
     8fa:	81 e4       	ldi	r24, 0x41	; 65
     8fc:	99 0f       	add	r25, r25
     8fe:	99 0f       	add	r25, r25
     900:	99 0f       	add	r25, r25
     902:	c9 0f       	add	r28, r25
     904:	8c 0f       	add	r24, r28
     906:	08 c0       	rjmp	.+16     	; 0x918 <__stack+0xb9>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     908:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <isUpperCase>
     90c:	81 11       	cpse	r24, r1
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
     910:	89 e7       	ldi	r24, 0x79	; 121
     912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0xb7>
     914:	89 e5       	ldi	r24, 0x59	; 89
     916:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     918:	0e 94 01 04 	call	0x802	; 0x802 <addChar>
	}
	return ;
}
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     924:	0e 94 ac 03 	call	0x758	; 0x758 <Keypad_GetRow>
     928:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     92a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <Keypad_GetCol>
     92e:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     930:	6c 2f       	mov	r22, r28
     932:	0c 2e       	mov	r0, r28
     934:	00 0c       	add	r0, r0
     936:	77 0b       	sbc	r23, r23
     938:	80 ed       	ldi	r24, 0xD0	; 208
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 0f 03 	call	0x61e	; 0x61e <Error_ErrorNum>
	Error_ErrorNum("col",col);
     940:	6d 2f       	mov	r22, r29
     942:	0d 2e       	mov	r0, r29
     944:	00 0c       	add	r0, r0
     946:	77 0b       	sbc	r23, r23
     948:	84 ed       	ldi	r24, 0xD4	; 212
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 0f 03 	call	0x61e	; 0x61e <Error_ErrorNum>
	return row * 8 + col;
     950:	8c 2f       	mov	r24, r28
     952:	88 0f       	add	r24, r24
     954:	88 0f       	add	r24, r24
     956:	88 0f       	add	r24, r24
     958:	8d 0f       	add	r24, r29
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     960:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <currentState>
     964:	4e 2f       	mov	r20, r30
     966:	ee 0f       	add	r30, r30
     968:	55 0b       	sbc	r21, r21
     96a:	66 0b       	sbc	r22, r22
     96c:	77 0b       	sbc	r23, r23
     96e:	47 30       	cpi	r20, 0x07	; 7
     970:	51 05       	cpc	r21, r1
     972:	d0 f4       	brcc	.+52     	; 0x9a8 <KeyProcessor_ProcessKey+0x48>
     974:	fa 01       	movw	r30, r20
     976:	e6 5d       	subi	r30, 0xD6	; 214
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__tablejump2__>
	{
		case IDLE:
			Idle_ProcessKey(key);
     97e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <Idle_ProcessKey>
			break;
     982:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     984:	0e 94 8b 0b 	call	0x1716	; 0x1716 <EnteringName_ProcessKey>
			break;
     988:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     98a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <EnteringAge_ProcessKey>
			break;
     98e:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     990:	0e 94 ce 0b 	call	0x179c	; 0x179c <EnteringPhone_ProcessKey>
			break;
     994:	08 95       	ret
		case ENTERING_TEMP :
			EnteringTemp_ProcessKey(key);
     996:	0e 94 31 0c 	call	0x1862	; 0x1862 <EnteringTemp_ProcessKey>
			break;
     99a:	08 95       	ret
		case ENTERING_BP :
			EnteringBp_ProcessKey(key);
     99c:	0e 94 3f 0b 	call	0x167e	; 0x167e <EnteringBp_ProcessKey>
			break;
     9a0:	08 95       	ret
		case GENERATE_SERIAL :
			GenerateSerial_ProcessKey(key);
     9a2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GenerateSerial_ProcessKey>
			break;
     9a6:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     9a8:	88 ed       	ldi	r24, 0xD8	; 216
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     9b0:	08 95       	ret

000009b2 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     9b2:	88 23       	and	r24, r24
     9b4:	19 f0       	breq	.+6      	; 0x9bc <Lcd_Init+0xa>
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <Lcd_Init+0x16>
     9ba:	24 c0       	rjmp	.+72     	; 0xa04 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     9bc:	81 b3       	in	r24, 0x11	; 17
     9be:	8c 6f       	ori	r24, 0xFC	; 252
     9c0:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     9c2:	0e 94 47 07 	call	0xe8e	; 0xe8e <Lcd4_Init>
			break;
     9c6:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	0e 94 9c 08 	call	0x1138	; 0x1138 <lcd_init>
			lcd_backlight(0);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 0d 09 	call	0x121a	; 0x121a <lcd_backlight>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	84 e3       	ldi	r24, 0x34	; 52
     9d8:	9c e0       	ldi	r25, 0x0C	; 12
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	80 40       	sbci	r24, 0x00	; 0
     9de:	90 40       	sbci	r25, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <Lcd_Init+0x28>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <Lcd_Init+0x32>
     9e4:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 0d 09 	call	0x121a	; 0x121a <lcd_backlight>
     9ec:	2f ef       	ldi	r18, 0xFF	; 255
     9ee:	84 e3       	ldi	r24, 0x34	; 52
     9f0:	9c e0       	ldi	r25, 0x0C	; 12
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	80 40       	sbci	r24, 0x00	; 0
     9f6:	90 40       	sbci	r25, 0x00	; 0
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <Lcd_Init+0x40>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <Lcd_Init+0x4a>
     9fc:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     9fe:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     a02:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     a04:	8c ef       	ldi	r24, 0xFC	; 252
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     a0c:	08 95       	ret

00000a0e <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     a0e:	88 23       	and	r24, r24
     a10:	19 f0       	breq	.+6      	; 0xa18 <Lcd_ClearScreen+0xa>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	21 f0       	breq	.+8      	; 0xa1e <Lcd_ClearScreen+0x10>
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     a18:	0e 94 23 07 	call	0xe46	; 0xe46 <Lcd4_Clear>
			break;
     a1c:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     a1e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <lcd_clrscr>
			break;
     a22:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     a24:	8b e1       	ldi	r24, 0x1B	; 27
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     a2c:	08 95       	ret

00000a2e <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     a2e:	88 23       	and	r24, r24
     a30:	19 f0       	breq	.+6      	; 0xa38 <Lcd_Prints+0xa>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	29 f0       	breq	.+10     	; 0xa40 <Lcd_Prints+0x12>
     a36:	08 c0       	rjmp	.+16     	; 0xa48 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     a38:	cb 01       	movw	r24, r22
     a3a:	0e 94 c0 07 	call	0xf80	; 0xf80 <Lcd4_Write_String>
			break;
     a3e:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     a40:	cb 01       	movw	r24, r22
     a42:	0e 94 8d 08 	call	0x111a	; 0x111a <lcd_puts>
			break;
     a46:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     a48:	8b e1       	ldi	r24, 0x1B	; 27
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     a50:	08 95       	ret

00000a52 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     a52:	96 2f       	mov	r25, r22
	switch(lcdType)
     a54:	88 23       	and	r24, r24
     a56:	19 f0       	breq	.+6      	; 0xa5e <Lcd_Position+0xc>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	31 f0       	breq	.+12     	; 0xa68 <Lcd_Position+0x16>
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     a5e:	64 2f       	mov	r22, r20
     a60:	89 2f       	mov	r24, r25
     a62:	0e 94 2a 07 	call	0xe54	; 0xe54 <Lcd4_Set_Cursor>
		break;
     a66:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     a68:	84 2f       	mov	r24, r20
     a6a:	0e 94 45 08 	call	0x108a	; 0x108a <lcd_gotoxy>
		break;
     a6e:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     a70:	82 e4       	ldi	r24, 0x42	; 66
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     a78:	08 95       	ret

00000a7a <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <Lcd_Printc+0x6>
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     a84:	69 83       	std	Y+1, r22	; 0x01
     a86:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     a88:	be 01       	movw	r22, r28
     a8a:	6f 5f       	subi	r22, 0xFF	; 255
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
}
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	f8 2e       	mov	r15, r24
     aa8:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	int i =0;
	while (str[i])
     ab2:	68 81       	ld	r22, Y
     ab4:	66 23       	and	r22, r22
     ab6:	91 f0       	breq	.+36     	; 0xadc <Lcd_PrintLine+0x40>
     ab8:	8e 01       	movw	r16, r28
     aba:	0f 5f       	subi	r16, 0xFF	; 255
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	c0 e0       	ldi	r28, 0x00	; 0
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     ac2:	21 96       	adiw	r28, 0x01	; 1
     ac4:	8f 2d       	mov	r24, r15
     ac6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     aca:	f8 01       	movw	r30, r16
     acc:	61 91       	ld	r22, Z+
     ace:	8f 01       	movw	r16, r30
     ad0:	61 11       	cpse	r22, r1
     ad2:	f7 cf       	rjmp	.-18     	; 0xac2 <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     ad4:	c0 31       	cpi	r28, 0x10	; 16
     ad6:	d1 05       	cpc	r29, r1
     ad8:	1c f0       	brlt	.+6      	; 0xae0 <Lcd_PrintLine+0x44>
     ada:	0a c0       	rjmp	.+20     	; 0xaf0 <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     adc:	c0 e0       	ldi	r28, 0x00	; 0
     ade:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     ae0:	60 e2       	ldi	r22, 0x20	; 32
     ae2:	8f 2d       	mov	r24, r15
     ae4:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Lcd_Printc>
     ae8:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     aea:	c0 31       	cpi	r28, 0x10	; 16
     aec:	d1 05       	cpc	r29, r1
     aee:	c4 f3       	brlt	.-16     	; 0xae0 <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	08 95       	ret

00000afc <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     afc:	67 2b       	or	r22, r23
     afe:	09 f0       	breq	.+2      	; 0xb02 <pinChange+0x6>
     b00:	9f c0       	rjmp	.+318    	; 0xc40 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	11 f4       	brne	.+4      	; 0xb0a <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     b06:	d8 98       	cbi	0x1b, 0	; 27
     b08:	08 95       	ret
		else if(a == eS_PORTA1)
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	91 05       	cpc	r25, r1
     b0e:	11 f4       	brne	.+4      	; 0xb14 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     b10:	d9 98       	cbi	0x1b, 1	; 27
     b12:	08 95       	ret
		else if(a == eS_PORTA2)
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	91 05       	cpc	r25, r1
     b18:	11 f4       	brne	.+4      	; 0xb1e <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     b1a:	da 98       	cbi	0x1b, 2	; 27
     b1c:	08 95       	ret
		else if(a == eS_PORTA3)
     b1e:	83 30       	cpi	r24, 0x03	; 3
     b20:	91 05       	cpc	r25, r1
     b22:	11 f4       	brne	.+4      	; 0xb28 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     b24:	db 98       	cbi	0x1b, 3	; 27
     b26:	08 95       	ret
		else if(a == eS_PORTA4)
     b28:	84 30       	cpi	r24, 0x04	; 4
     b2a:	91 05       	cpc	r25, r1
     b2c:	11 f4       	brne	.+4      	; 0xb32 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     b2e:	dc 98       	cbi	0x1b, 4	; 27
     b30:	08 95       	ret
		else if(a == eS_PORTA5)
     b32:	85 30       	cpi	r24, 0x05	; 5
     b34:	91 05       	cpc	r25, r1
     b36:	11 f4       	brne	.+4      	; 0xb3c <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     b38:	dd 98       	cbi	0x1b, 5	; 27
     b3a:	08 95       	ret
		else if(a == eS_PORTA6)
     b3c:	86 30       	cpi	r24, 0x06	; 6
     b3e:	91 05       	cpc	r25, r1
     b40:	11 f4       	brne	.+4      	; 0xb46 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     b42:	de 98       	cbi	0x1b, 6	; 27
     b44:	08 95       	ret
		else if(a == eS_PORTA7)
     b46:	87 30       	cpi	r24, 0x07	; 7
     b48:	91 05       	cpc	r25, r1
     b4a:	11 f4       	brne	.+4      	; 0xb50 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     b4c:	df 98       	cbi	0x1b, 7	; 27
     b4e:	08 95       	ret
		else if(a == eS_PORTB0)
     b50:	8a 30       	cpi	r24, 0x0A	; 10
     b52:	91 05       	cpc	r25, r1
     b54:	11 f4       	brne	.+4      	; 0xb5a <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     b56:	c0 98       	cbi	0x18, 0	; 24
     b58:	08 95       	ret
		else if(a == eS_PORTB1)
     b5a:	8b 30       	cpi	r24, 0x0B	; 11
     b5c:	91 05       	cpc	r25, r1
     b5e:	11 f4       	brne	.+4      	; 0xb64 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     b60:	c1 98       	cbi	0x18, 1	; 24
     b62:	08 95       	ret
		else if(a == eS_PORTB2)
     b64:	8c 30       	cpi	r24, 0x0C	; 12
     b66:	91 05       	cpc	r25, r1
     b68:	11 f4       	brne	.+4      	; 0xb6e <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     b6a:	c2 98       	cbi	0x18, 2	; 24
     b6c:	08 95       	ret
		else if(a == eS_PORTB3)
     b6e:	8d 30       	cpi	r24, 0x0D	; 13
     b70:	91 05       	cpc	r25, r1
     b72:	11 f4       	brne	.+4      	; 0xb78 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     b74:	c3 98       	cbi	0x18, 3	; 24
     b76:	08 95       	ret
		else if(a == eS_PORTB4)
     b78:	8e 30       	cpi	r24, 0x0E	; 14
     b7a:	91 05       	cpc	r25, r1
     b7c:	11 f4       	brne	.+4      	; 0xb82 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     b7e:	c4 98       	cbi	0x18, 4	; 24
     b80:	08 95       	ret
		else if(a == eS_PORTB5)
     b82:	8f 30       	cpi	r24, 0x0F	; 15
     b84:	91 05       	cpc	r25, r1
     b86:	11 f4       	brne	.+4      	; 0xb8c <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     b88:	c5 98       	cbi	0x18, 5	; 24
     b8a:	08 95       	ret
		else if(a == eS_PORTB6)
     b8c:	80 31       	cpi	r24, 0x10	; 16
     b8e:	91 05       	cpc	r25, r1
     b90:	11 f4       	brne	.+4      	; 0xb96 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     b92:	c6 98       	cbi	0x18, 6	; 24
     b94:	08 95       	ret
		else if(a == eS_PORTB7)
     b96:	81 31       	cpi	r24, 0x11	; 17
     b98:	91 05       	cpc	r25, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     b9c:	c7 98       	cbi	0x18, 7	; 24
     b9e:	08 95       	ret
		else if(a == eS_PORTC0)
     ba0:	84 31       	cpi	r24, 0x14	; 20
     ba2:	91 05       	cpc	r25, r1
     ba4:	11 f4       	brne	.+4      	; 0xbaa <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     ba6:	a8 98       	cbi	0x15, 0	; 21
     ba8:	08 95       	ret
		else if(a == eS_PORTC1)
     baa:	85 31       	cpi	r24, 0x15	; 21
     bac:	91 05       	cpc	r25, r1
     bae:	11 f4       	brne	.+4      	; 0xbb4 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     bb0:	a9 98       	cbi	0x15, 1	; 21
     bb2:	08 95       	ret
		else if(a == eS_PORTC2)
     bb4:	86 31       	cpi	r24, 0x16	; 22
     bb6:	91 05       	cpc	r25, r1
     bb8:	11 f4       	brne	.+4      	; 0xbbe <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     bba:	aa 98       	cbi	0x15, 2	; 21
     bbc:	08 95       	ret
		else if(a == eS_PORTC3)
     bbe:	87 31       	cpi	r24, 0x17	; 23
     bc0:	91 05       	cpc	r25, r1
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     bc4:	ab 98       	cbi	0x15, 3	; 21
     bc6:	08 95       	ret
		else if(a == eS_PORTC4)
     bc8:	88 31       	cpi	r24, 0x18	; 24
     bca:	91 05       	cpc	r25, r1
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     bce:	ac 98       	cbi	0x15, 4	; 21
     bd0:	08 95       	ret
		else if(a == eS_PORTC5)
     bd2:	89 31       	cpi	r24, 0x19	; 25
     bd4:	91 05       	cpc	r25, r1
     bd6:	11 f4       	brne	.+4      	; 0xbdc <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     bd8:	ad 98       	cbi	0x15, 5	; 21
     bda:	08 95       	ret
		else if(a == eS_PORTC6)
     bdc:	8a 31       	cpi	r24, 0x1A	; 26
     bde:	91 05       	cpc	r25, r1
     be0:	11 f4       	brne	.+4      	; 0xbe6 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     be2:	ae 98       	cbi	0x15, 6	; 21
     be4:	08 95       	ret
		else if(a == eS_PORTC7)
     be6:	8b 31       	cpi	r24, 0x1B	; 27
     be8:	91 05       	cpc	r25, r1
     bea:	11 f4       	brne	.+4      	; 0xbf0 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     bec:	af 98       	cbi	0x15, 7	; 21
     bee:	08 95       	ret
		else if(a == eS_PORTD0)
     bf0:	8e 31       	cpi	r24, 0x1E	; 30
     bf2:	91 05       	cpc	r25, r1
     bf4:	11 f4       	brne	.+4      	; 0xbfa <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     bf6:	90 98       	cbi	0x12, 0	; 18
     bf8:	08 95       	ret
		else if(a == eS_PORTD1)
     bfa:	8f 31       	cpi	r24, 0x1F	; 31
     bfc:	91 05       	cpc	r25, r1
     bfe:	11 f4       	brne	.+4      	; 0xc04 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     c00:	91 98       	cbi	0x12, 1	; 18
     c02:	08 95       	ret
		else if(a == eS_PORTD2)
     c04:	80 32       	cpi	r24, 0x20	; 32
     c06:	91 05       	cpc	r25, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     c0a:	92 98       	cbi	0x12, 2	; 18
     c0c:	08 95       	ret
		else if(a == eS_PORTD3)
     c0e:	81 32       	cpi	r24, 0x21	; 33
     c10:	91 05       	cpc	r25, r1
     c12:	11 f4       	brne	.+4      	; 0xc18 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     c14:	93 98       	cbi	0x12, 3	; 18
     c16:	08 95       	ret
		else if(a == eS_PORTD4)
     c18:	82 32       	cpi	r24, 0x22	; 34
     c1a:	91 05       	cpc	r25, r1
     c1c:	11 f4       	brne	.+4      	; 0xc22 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     c1e:	94 98       	cbi	0x12, 4	; 18
     c20:	08 95       	ret
		else if(a == eS_PORTD5)
     c22:	83 32       	cpi	r24, 0x23	; 35
     c24:	91 05       	cpc	r25, r1
     c26:	11 f4       	brne	.+4      	; 0xc2c <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     c28:	95 98       	cbi	0x12, 5	; 18
     c2a:	08 95       	ret
		else if(a == eS_PORTD6)
     c2c:	84 32       	cpi	r24, 0x24	; 36
     c2e:	91 05       	cpc	r25, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     c32:	96 98       	cbi	0x12, 6	; 18
     c34:	08 95       	ret
		else if(a == eS_PORTD7)
     c36:	85 97       	sbiw	r24, 0x25	; 37
     c38:	09 f0       	breq	.+2      	; 0xc3c <pinChange+0x140>
     c3a:	9f c0       	rjmp	.+318    	; 0xd7a <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     c3c:	97 98       	cbi	0x12, 7	; 18
     c3e:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	11 f4       	brne	.+4      	; 0xc48 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     c44:	d8 9a       	sbi	0x1b, 0	; 27
     c46:	08 95       	ret
		else if(a == eS_PORTA1)
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	91 05       	cpc	r25, r1
     c4c:	11 f4       	brne	.+4      	; 0xc52 <pinChange+0x156>
		PORTA |= (1<<PA1);
     c4e:	d9 9a       	sbi	0x1b, 1	; 27
     c50:	08 95       	ret
		else if(a == eS_PORTA2)
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	91 05       	cpc	r25, r1
     c56:	11 f4       	brne	.+4      	; 0xc5c <pinChange+0x160>
		PORTA |= (1<<PA2);
     c58:	da 9a       	sbi	0x1b, 2	; 27
     c5a:	08 95       	ret
		else if(a == eS_PORTA3)
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	91 05       	cpc	r25, r1
     c60:	11 f4       	brne	.+4      	; 0xc66 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     c62:	db 9a       	sbi	0x1b, 3	; 27
     c64:	08 95       	ret
		else if(a == eS_PORTA4)
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	91 05       	cpc	r25, r1
     c6a:	11 f4       	brne	.+4      	; 0xc70 <pinChange+0x174>
		PORTA |= (1<<PA4);
     c6c:	dc 9a       	sbi	0x1b, 4	; 27
     c6e:	08 95       	ret
		else if(a == eS_PORTA5)
     c70:	85 30       	cpi	r24, 0x05	; 5
     c72:	91 05       	cpc	r25, r1
     c74:	11 f4       	brne	.+4      	; 0xc7a <pinChange+0x17e>
		PORTA |= (1<<PA5);
     c76:	dd 9a       	sbi	0x1b, 5	; 27
     c78:	08 95       	ret
		else if(a == eS_PORTA6)
     c7a:	86 30       	cpi	r24, 0x06	; 6
     c7c:	91 05       	cpc	r25, r1
     c7e:	11 f4       	brne	.+4      	; 0xc84 <pinChange+0x188>
		PORTA |= (1<<PA6);
     c80:	de 9a       	sbi	0x1b, 6	; 27
     c82:	08 95       	ret
		else if(a == eS_PORTA7)
     c84:	87 30       	cpi	r24, 0x07	; 7
     c86:	91 05       	cpc	r25, r1
     c88:	11 f4       	brne	.+4      	; 0xc8e <pinChange+0x192>
		PORTA |= (1<<PA7);
     c8a:	df 9a       	sbi	0x1b, 7	; 27
     c8c:	08 95       	ret
		else if(a == eS_PORTB0)
     c8e:	8a 30       	cpi	r24, 0x0A	; 10
     c90:	91 05       	cpc	r25, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     c94:	c0 9a       	sbi	0x18, 0	; 24
     c96:	08 95       	ret
		else if(a == eS_PORTB1)
     c98:	8b 30       	cpi	r24, 0x0B	; 11
     c9a:	91 05       	cpc	r25, r1
     c9c:	11 f4       	brne	.+4      	; 0xca2 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     c9e:	c1 9a       	sbi	0x18, 1	; 24
     ca0:	08 95       	ret
		else if(a == eS_PORTB2)
     ca2:	8c 30       	cpi	r24, 0x0C	; 12
     ca4:	91 05       	cpc	r25, r1
     ca6:	11 f4       	brne	.+4      	; 0xcac <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     ca8:	c2 9a       	sbi	0x18, 2	; 24
     caa:	08 95       	ret
		else if(a == eS_PORTB3)
     cac:	8d 30       	cpi	r24, 0x0D	; 13
     cae:	91 05       	cpc	r25, r1
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     cb2:	c3 9a       	sbi	0x18, 3	; 24
     cb4:	08 95       	ret
		else if(a == eS_PORTB4)
     cb6:	8e 30       	cpi	r24, 0x0E	; 14
     cb8:	91 05       	cpc	r25, r1
     cba:	11 f4       	brne	.+4      	; 0xcc0 <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     cbc:	c4 9a       	sbi	0x18, 4	; 24
     cbe:	08 95       	ret
		else if(a == eS_PORTB5)
     cc0:	8f 30       	cpi	r24, 0x0F	; 15
     cc2:	91 05       	cpc	r25, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     cc6:	c5 9a       	sbi	0x18, 5	; 24
     cc8:	08 95       	ret
		else if(a == eS_PORTB6)
     cca:	80 31       	cpi	r24, 0x10	; 16
     ccc:	91 05       	cpc	r25, r1
     cce:	11 f4       	brne	.+4      	; 0xcd4 <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     cd0:	c6 9a       	sbi	0x18, 6	; 24
     cd2:	08 95       	ret
		else if(a == eS_PORTB7)
     cd4:	81 31       	cpi	r24, 0x11	; 17
     cd6:	91 05       	cpc	r25, r1
     cd8:	11 f4       	brne	.+4      	; 0xcde <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     cda:	c7 9a       	sbi	0x18, 7	; 24
     cdc:	08 95       	ret
		else if(a == eS_PORTC0)
     cde:	84 31       	cpi	r24, 0x14	; 20
     ce0:	91 05       	cpc	r25, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     ce4:	a8 9a       	sbi	0x15, 0	; 21
     ce6:	08 95       	ret
		else if(a == eS_PORTC1)
     ce8:	85 31       	cpi	r24, 0x15	; 21
     cea:	91 05       	cpc	r25, r1
     cec:	11 f4       	brne	.+4      	; 0xcf2 <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     cee:	a9 9a       	sbi	0x15, 1	; 21
     cf0:	08 95       	ret
		else if(a == eS_PORTC2)
     cf2:	86 31       	cpi	r24, 0x16	; 22
     cf4:	91 05       	cpc	r25, r1
     cf6:	11 f4       	brne	.+4      	; 0xcfc <pinChange+0x200>
		PORTC |= (1<<PC2);
     cf8:	aa 9a       	sbi	0x15, 2	; 21
     cfa:	08 95       	ret
		else if(a == eS_PORTC3)
     cfc:	87 31       	cpi	r24, 0x17	; 23
     cfe:	91 05       	cpc	r25, r1
     d00:	11 f4       	brne	.+4      	; 0xd06 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     d02:	ab 9a       	sbi	0x15, 3	; 21
     d04:	08 95       	ret
		else if(a == eS_PORTC4)
     d06:	88 31       	cpi	r24, 0x18	; 24
     d08:	91 05       	cpc	r25, r1
     d0a:	11 f4       	brne	.+4      	; 0xd10 <pinChange+0x214>
		PORTC |= (1<<PC4);
     d0c:	ac 9a       	sbi	0x15, 4	; 21
     d0e:	08 95       	ret
		else if(a == eS_PORTC5)
     d10:	89 31       	cpi	r24, 0x19	; 25
     d12:	91 05       	cpc	r25, r1
     d14:	11 f4       	brne	.+4      	; 0xd1a <pinChange+0x21e>
		PORTC |= (1<<PC5);
     d16:	ad 9a       	sbi	0x15, 5	; 21
     d18:	08 95       	ret
		else if(a == eS_PORTC6)
     d1a:	8a 31       	cpi	r24, 0x1A	; 26
     d1c:	91 05       	cpc	r25, r1
     d1e:	11 f4       	brne	.+4      	; 0xd24 <pinChange+0x228>
		PORTC |= (1<<PC6);
     d20:	ae 9a       	sbi	0x15, 6	; 21
     d22:	08 95       	ret
		else if(a == eS_PORTC7)
     d24:	8b 31       	cpi	r24, 0x1B	; 27
     d26:	91 05       	cpc	r25, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <pinChange+0x232>
		PORTC |= (1<<PC7);
     d2a:	af 9a       	sbi	0x15, 7	; 21
     d2c:	08 95       	ret
		else if(a == eS_PORTD0)
     d2e:	8e 31       	cpi	r24, 0x1E	; 30
     d30:	91 05       	cpc	r25, r1
     d32:	11 f4       	brne	.+4      	; 0xd38 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     d34:	90 9a       	sbi	0x12, 0	; 18
     d36:	08 95       	ret
		else if(a == eS_PORTD1)
     d38:	8f 31       	cpi	r24, 0x1F	; 31
     d3a:	91 05       	cpc	r25, r1
     d3c:	11 f4       	brne	.+4      	; 0xd42 <pinChange+0x246>
		PORTD |= (1<<PD1);
     d3e:	91 9a       	sbi	0x12, 1	; 18
     d40:	08 95       	ret
		else if(a == eS_PORTD2)
     d42:	80 32       	cpi	r24, 0x20	; 32
     d44:	91 05       	cpc	r25, r1
     d46:	11 f4       	brne	.+4      	; 0xd4c <pinChange+0x250>
		PORTD |= (1<<PD2);
     d48:	92 9a       	sbi	0x12, 2	; 18
     d4a:	08 95       	ret
		else if(a == eS_PORTD3)
     d4c:	81 32       	cpi	r24, 0x21	; 33
     d4e:	91 05       	cpc	r25, r1
     d50:	11 f4       	brne	.+4      	; 0xd56 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     d52:	93 9a       	sbi	0x12, 3	; 18
     d54:	08 95       	ret
		else if(a == eS_PORTD4)
     d56:	82 32       	cpi	r24, 0x22	; 34
     d58:	91 05       	cpc	r25, r1
     d5a:	11 f4       	brne	.+4      	; 0xd60 <pinChange+0x264>
		PORTD |= (1<<PD4);
     d5c:	94 9a       	sbi	0x12, 4	; 18
     d5e:	08 95       	ret
		else if(a == eS_PORTD5)
     d60:	83 32       	cpi	r24, 0x23	; 35
     d62:	91 05       	cpc	r25, r1
     d64:	11 f4       	brne	.+4      	; 0xd6a <pinChange+0x26e>
		PORTD |= (1<<PD5);
     d66:	95 9a       	sbi	0x12, 5	; 18
     d68:	08 95       	ret
		else if(a == eS_PORTD6)
     d6a:	84 32       	cpi	r24, 0x24	; 36
     d6c:	91 05       	cpc	r25, r1
     d6e:	11 f4       	brne	.+4      	; 0xd74 <pinChange+0x278>
		PORTD |= (1<<PD6);
     d70:	96 9a       	sbi	0x12, 6	; 18
     d72:	08 95       	ret
		else if(a == eS_PORTD7)
     d74:	85 97       	sbiw	r24, 0x25	; 37
     d76:	09 f4       	brne	.+2      	; 0xd7a <pinChange+0x27e>
		PORTD |= (1<<PD7);
     d78:	97 9a       	sbi	0x12, 7	; 18
     d7a:	08 95       	ret

00000d7c <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     d7c:	cf 93       	push	r28
     d7e:	c8 2f       	mov	r28, r24
	if(a & 1)
     d80:	80 ff       	sbrs	r24, 0
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <Lcd4_Port+0x16>
	pinChange(D4,1);
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	83 e2       	ldi	r24, 0x23	; 35
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	83 e2       	ldi	r24, 0x23	; 35
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
	
	if(a & 2)
     d9e:	c1 ff       	sbrs	r28, 1
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <Lcd4_Port+0x34>
	pinChange(D5,1);
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	82 e2       	ldi	r24, 0x22	; 34
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     dae:	06 c0       	rjmp	.+12     	; 0xdbc <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	82 e2       	ldi	r24, 0x22	; 34
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
	
	if(a & 4)
     dbc:	c2 ff       	sbrs	r28, 2
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <Lcd4_Port+0x52>
	pinChange(D6,1);
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	81 e2       	ldi	r24, 0x21	; 33
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	81 e2       	ldi	r24, 0x21	; 33
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
	
	if(a & 8)
     dda:	c3 ff       	sbrs	r28, 3
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <Lcd4_Port+0x70>
	pinChange(D7,1);
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
}
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     dfc:	cf 93       	push	r28
     dfe:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	85 e2       	ldi	r24, 0x25	; 37
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
	Lcd4_Port(a);
     e0c:	8c 2f       	mov	r24, r28
     e0e:	0e 94 be 06 	call	0xd7c	; 0xd7c <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	84 e2       	ldi	r24, 0x24	; 36
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     e1e:	8f ec       	ldi	r24, 0xCF	; 207
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <Lcd4_Cmd+0x26>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <Lcd4_Cmd+0x2c>
     e28:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	84 e2       	ldi	r24, 0x24	; 36
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     e36:	8f ec       	ldi	r24, 0xCF	; 207
     e38:	97 e0       	ldi	r25, 0x07	; 7
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <Lcd4_Cmd+0x3e>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <Lcd4_Cmd+0x44>
     e40:	00 00       	nop
	_delay_ms(1);
}
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(1);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
     e52:	08 95       	ret

00000e54 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     e54:	cf 93       	push	r28
     e56:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     e58:	81 11       	cpse	r24, r1
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     e5c:	80 e8       	ldi	r24, 0x80	; 128
     e5e:	86 0f       	add	r24, r22
     e60:	82 95       	swap	r24
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
		Lcd4_Cmd(y);
     e68:	8c 2f       	mov	r24, r28
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
     e70:	0c c0       	rjmp	.+24     	; 0xe8a <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	51 f4       	brne	.+20     	; 0xe8a <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     e76:	80 ec       	ldi	r24, 0xC0	; 192
     e78:	86 0f       	add	r24, r22
     e7a:	82 95       	swap	r24
     e7c:	8f 70       	andi	r24, 0x0F	; 15
     e7e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
		Lcd4_Cmd(y);
     e82:	8c 2f       	mov	r24, r28
     e84:	8f 70       	andi	r24, 0x0F	; 15
     e86:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	}
}
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 be 06 	call	0xd7c	; 0xd7c <Lcd4_Port>
     e94:	8f e3       	ldi	r24, 0x3F	; 63
     e96:	9c e9       	ldi	r25, 0x9C	; 156
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <Lcd4_Init+0xa>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <Lcd4_Init+0x10>
     e9e:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
     ea6:	8f e0       	ldi	r24, 0x0F	; 15
     ea8:	97 e2       	ldi	r25, 0x27	; 39
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <Lcd4_Init+0x1c>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <Lcd4_Init+0x22>
     eb0:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
     eb8:	8f ee       	ldi	r24, 0xEF	; 239
     eba:	95 e5       	ldi	r25, 0x55	; 85
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <Lcd4_Init+0x2e>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <Lcd4_Init+0x34>
     ec2:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     ed6:	88 e0       	ldi	r24, 0x08	; 8
     ed8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     ee2:	8c e0       	ldi	r24, 0x0C	; 12
     ee4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     eee:	86 e0       	ldi	r24, 0x06	; 6
     ef0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Lcd4_Cmd>
	Lcd4_Clear();
     ef4:	0e 94 23 07 	call	0xe46	; 0xe46 <Lcd4_Clear>
     ef8:	08 95       	ret

00000efa <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     efa:	cf 93       	push	r28
     efc:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	85 e2       	ldi	r24, 0x25	; 37
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     f0a:	8c 2f       	mov	r24, r28
     f0c:	82 95       	swap	r24
     f0e:	8f 70       	andi	r24, 0x0F	; 15
     f10:	0e 94 be 06 	call	0xd7c	; 0xd7c <Lcd4_Port>
	pinChange(EN,1);
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	84 e2       	ldi	r24, 0x24	; 36
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     f20:	8f ec       	ldi	r24, 0xCF	; 207
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <Lcd4_Write_Char+0x2a>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <Lcd4_Write_Char+0x30>
     f2a:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	84 e2       	ldi	r24, 0x24	; 36
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     f38:	8f ec       	ldi	r24, 0xCF	; 207
     f3a:	97 e0       	ldi	r25, 0x07	; 7
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <Lcd4_Write_Char+0x42>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <Lcd4_Write_Char+0x48>
     f42:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     f44:	8c 2f       	mov	r24, r28
     f46:	8f 70       	andi	r24, 0x0F	; 15
     f48:	0e 94 be 06 	call	0xd7c	; 0xd7c <Lcd4_Port>
	pinChange(EN,1);
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	84 e2       	ldi	r24, 0x24	; 36
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     f58:	8f ec       	ldi	r24, 0xCF	; 207
     f5a:	97 e0       	ldi	r25, 0x07	; 7
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <Lcd4_Write_Char+0x62>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <Lcd4_Write_Char+0x68>
     f62:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	84 e2       	ldi	r24, 0x24	; 36
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 7e 05 	call	0xafc	; 0xafc <pinChange>
     f70:	8f ec       	ldi	r24, 0xCF	; 207
     f72:	97 e0       	ldi	r25, 0x07	; 7
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <Lcd4_Write_Char+0x7a>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <Lcd4_Write_Char+0x80>
     f7a:	00 00       	nop
	_delay_ms(1);
}
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     f86:	88 81       	ld	r24, Y
     f88:	88 23       	and	r24, r24
     f8a:	31 f0       	breq	.+12     	; 0xf98 <Lcd4_Write_String+0x18>
     f8c:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     f8e:	0e 94 7d 07 	call	0xefa	; 0xefa <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     f92:	89 91       	ld	r24, Y+
     f94:	81 11       	cpse	r24, r1
     f96:	fb cf       	rjmp	.-10     	; 0xf8e <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	7b 01       	movw	r14, r22
     fac:	14 2f       	mov	r17, r20
     fae:	88 0f       	add	r24, r24
     fb0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <i2c_start>
     fb4:	81 11       	cpse	r24, r1
     fb6:	12 c0       	rjmp	.+36     	; 0xfdc <I2C_WRITESEQ+0x3e>
     fb8:	11 23       	and	r17, r17
     fba:	91 f0       	breq	.+36     	; 0xfe0 <I2C_WRITESEQ+0x42>
     fbc:	e7 01       	movw	r28, r14
     fbe:	11 50       	subi	r17, 0x01	; 1
     fc0:	01 2f       	mov	r16, r17
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	0f 5f       	subi	r16, 0xFF	; 255
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	0e 0d       	add	r16, r14
     fca:	1f 1d       	adc	r17, r15
     fcc:	89 91       	ld	r24, Y+
     fce:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <i2c_write>
     fd2:	c0 17       	cp	r28, r16
     fd4:	d1 07       	cpc	r29, r17
     fd6:	d1 f7       	brne	.-12     	; 0xfcc <I2C_WRITESEQ+0x2e>
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <I2C_WRITESEQ+0x44>
     fdc:	c1 e0       	ldi	r28, 0x01	; 1
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <I2C_WRITESEQ+0x44>
     fe0:	c0 e0       	ldi	r28, 0x00	; 0
     fe2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <i2c_stop>
     fe6:	8c 2f       	mov	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	08 95       	ret

00000ff6 <wr_lcd_mode>:
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <wr_lcd_mode+0xa>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <wr_lcd_mode+0xc>
    1002:	1f 92       	push	r1
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	08 2f       	mov	r16, r24
    100a:	68 30       	cpi	r22, 0x08	; 8
    100c:	71 f4       	brne	.+28     	; 0x102a <wr_lcd_mode+0x34>
    100e:	81 11       	cpse	r24, r1
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <wr_lcd_mode+0x20>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <wr_lcd_mode+0x22>
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <backlight.1943>
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	66 e6       	ldi	r22, 0x66	; 102
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	87 e2       	ldi	r24, 0x27	; 39
    1024:	0e 94 cf 07 	call	0xf9e	; 0xf9e <I2C_WRITESEQ>
    1028:	26 c0       	rjmp	.+76     	; 0x1076 <wr_lcd_mode+0x80>
    102a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <backlight.1943>
    102e:	16 2f       	mov	r17, r22
    1030:	18 2b       	or	r17, r24
    1032:	19 83       	std	Y+1, r17	; 0x01
    1034:	80 2f       	mov	r24, r16
    1036:	80 7f       	andi	r24, 0xF0	; 240
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	81 2b       	or	r24, r17
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	8b 7f       	andi	r24, 0xFB	; 251
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	20 e1       	ldi	r18, 0x10	; 16
    1044:	02 9f       	mul	r16, r18
    1046:	c0 01       	movw	r24, r0
    1048:	11 24       	eor	r1, r1
    104a:	81 2b       	or	r24, r17
    104c:	84 60       	ori	r24, 0x04	; 4
    104e:	8c 83       	std	Y+4, r24	; 0x04
    1050:	8b 7f       	andi	r24, 0xFB	; 251
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	45 e0       	ldi	r20, 0x05	; 5
    1056:	be 01       	movw	r22, r28
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	87 e2       	ldi	r24, 0x27	; 39
    105e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <I2C_WRITESEQ>
    1062:	10 fd       	sbrc	r17, 0
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <wr_lcd_mode+0x80>
    1066:	03 30       	cpi	r16, 0x03	; 3
    1068:	30 f4       	brcc	.+12     	; 0x1076 <wr_lcd_mode+0x80>
    106a:	e3 ef       	ldi	r30, 0xF3	; 243
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	31 97       	sbiw	r30, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <wr_lcd_mode+0x78>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <wr_lcd_mode+0x7e>
    1074:	00 00       	nop
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <lcd_gotoxy>:
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	d8 2f       	mov	r29, r24
    1090:	c6 2f       	mov	r28, r22
    1092:	e6 2f       	mov	r30, r22
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e9 59       	subi	r30, 0x99	; 153
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	98 2f       	mov	r25, r24
    109c:	90 68       	ori	r25, 0x80	; 128
    109e:	80 81       	ld	r24, Z
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	89 2b       	or	r24, r25
    10a4:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    10a8:	d0 93 94 02 	sts	0x0294, r29	; 0x800294 <_lcd_x>
    10ac:	c0 93 95 02 	sts	0x0295, r28	; 0x800295 <_lcd_y>
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <lcd_clrscr>:
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    10be:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <_lcd_y>
    10c2:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <_lcd_x>
    10c6:	08 95       	ret

000010c8 <lcd_putc>:
    10c8:	cf 93       	push	r28
    10ca:	c8 2f       	mov	r28, r24
    10cc:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <_lcd_x>
    10d0:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_lcd_maxx>
    10d4:	98 17       	cp	r25, r24
    10d6:	18 f4       	brcc	.+6      	; 0x10de <lcd_putc+0x16>
    10d8:	ca 30       	cpi	r28, 0x0A	; 10
    10da:	59 f4       	brne	.+22     	; 0x10f2 <lcd_putc+0x2a>
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <lcd_putc+0x3e>
    10de:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <_lcd_y>
    10e2:	6f 5f       	subi	r22, 0xFF	; 255
    10e4:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <_lcd_y>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 45 08 	call	0x108a	; 0x108a <lcd_gotoxy>
    10ee:	ca 30       	cpi	r28, 0x0A	; 10
    10f0:	91 f0       	breq	.+36     	; 0x1116 <lcd_putc+0x4e>
    10f2:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <_lcd_x>
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <_lcd_x>
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	8c 2f       	mov	r24, r28
    1100:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <lcd_putc+0x4e>
    1106:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <_lcd_y>
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <_lcd_y>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	0e 94 45 08 	call	0x108a	; 0x108a <lcd_gotoxy>
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <lcd_puts>:
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
    1120:	88 81       	ld	r24, Y
    1122:	88 23       	and	r24, r24
    1124:	31 f0       	breq	.+12     	; 0x1132 <lcd_puts+0x18>
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	0e 94 64 08 	call	0x10c8	; 0x10c8 <lcd_putc>
    112c:	89 91       	ld	r24, Y+
    112e:	81 11       	cpse	r24, r1
    1130:	fb cf       	rjmp	.-10     	; 0x1128 <lcd_puts+0xe>
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	00 d0       	rcall	.+0      	; 0x1142 <lcd_init+0xa>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <lcd_init+0xc>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <lcd_init+0xe>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
    114c:	80 e3       	ldi	r24, 0x30	; 48
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	94 e3       	ldi	r25, 0x34	; 52
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	8c 83       	std	Y+4, r24	; 0x04
    115a:	94 e2       	ldi	r25, 0x24	; 36
    115c:	9d 83       	std	Y+5, r25	; 0x05
    115e:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
    1160:	80 e1       	ldi	r24, 0x10	; 16
    1162:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
    1166:	e7 e6       	ldi	r30, 0x67	; 103
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 5f       	subi	r24, 0xF0	; 240
    116e:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
    1170:	81 81       	ldd	r24, Z+1	; 0x01
    1172:	80 5f       	subi	r24, 0xF0	; 240
    1174:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
    1176:	bd 9a       	sbi	0x17, 5	; 23
    1178:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
    117a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <i2c_init>
    117e:	8b e4       	ldi	r24, 0x4B	; 75
    1180:	9d e1       	ldi	r25, 0x1D	; 29
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <lcd_init+0x4a>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <lcd_init+0x50>
    1188:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
    118a:	43 e0       	ldi	r20, 0x03	; 3
    118c:	be 01       	movw	r22, r28
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	87 e2       	ldi	r24, 0x27	; 39
    1194:	0e 94 cf 07 	call	0xf9e	; 0xf9e <I2C_WRITESEQ>
    1198:	18 2f       	mov	r17, r24
    119a:	81 ee       	ldi	r24, 0xE1	; 225
    119c:	94 e0       	ldi	r25, 0x04	; 4
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <lcd_init+0x66>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <lcd_init+0x6c>
    11a4:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	be 01       	movw	r22, r28
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	87 e2       	ldi	r24, 0x27	; 39
    11b0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <I2C_WRITESEQ>
    11b4:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    11b6:	43 e0       	ldi	r20, 0x03	; 3
    11b8:	be 01       	movw	r22, r28
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	87 e2       	ldi	r24, 0x27	; 39
    11c0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <I2C_WRITESEQ>
    11c4:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
    11c6:	43 e0       	ldi	r20, 0x03	; 3
    11c8:	be 01       	movw	r22, r28
    11ca:	6c 5f       	subi	r22, 0xFC	; 252
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	87 e2       	ldi	r24, 0x27	; 39
    11d0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <I2C_WRITESEQ>
    11d4:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	88 e2       	ldi	r24, 0x28	; 40
    11da:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
    11de:	81 2b       	or	r24, r17
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <lcd_init+0xac>
    11e2:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	8c e0       	ldi	r24, 0x0C	; 12
    11e8:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	86 e0       	ldi	r24, 0x06	; 6
    11f0:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	80 2f       	mov	r24, r16
    1200:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
}
    1204:	26 96       	adiw	r28, 0x06	; 6
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
    121a:	68 e0       	ldi	r22, 0x08	; 8
    121c:	0e 94 fb 07 	call	0xff6	; 0xff6 <wr_lcd_mode>
    1220:	08 95       	ret

00001222 <Lm35_Init>:
#include "../all.h"

void Lm35_Init()
{
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
    1222:	80 ec       	ldi	r24, 0xC0	; 192
    1224:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
    1226:	80 e8       	ldi	r24, 0x80	; 128
    1228:	86 b9       	out	0x06, r24	; 6
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
	DDRA &= ~1;
    122a:	d0 98       	cbi	0x1a, 0	; 26
    122c:	08 95       	ret

0000122e <Lm35_GetTemp>:

float Lm35_GetTemp()
{
	float tempC, tempF, vref = 2.56;

	ADCSRA |= (1<<ADSC);
    122e:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    1230:	36 99       	sbic	0x06, 6	; 6
    1232:	fe cf       	rjmp	.-4      	; 0x1230 <Lm35_GetTemp+0x2>

	unsigned int i = ADC;
    1234:	64 b1       	in	r22, 0x04	; 4
    1236:	75 b1       	in	r23, 0x05	; 5
	//tempC = i/4;  
	tempF = i * 9.0 / 20  + 32.0;

	return tempF;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__floatunsisf>
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e1       	ldi	r20, 0x10	; 16
    1246:	51 e4       	ldi	r21, 0x41	; 65
    1248:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 ea       	ldi	r20, 0xA0	; 160
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divsf3>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	52 e4       	ldi	r21, 0x42	; 66
    1260:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
    1264:	08 95       	ret

00001266 <enqueue>:
}

int nextPatientSerial(struct Queue *qptr)
{
	return qptr->queue[qptr->front_num + 1].serial;
}
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8c 01       	movw	r16, r24
    1274:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <q+0x2dc>
    1278:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <q+0x2dd>
    127c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <q+0x2de>
    1280:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <q+0x2df>
    1284:	82 17       	cp	r24, r18
    1286:	93 07       	cpc	r25, r19
    1288:	74 f4       	brge	.+28     	; 0x12a6 <enqueue+0x40>
    128a:	46 e6       	ldi	r20, 0x66	; 102
    128c:	51 e0       	ldi	r21, 0x01	; 1
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    1298:	47 e7       	ldi	r20, 0x77	; 119
    129a:	51 e0       	ldi	r21, 0x01	; 1
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    12a6:	f8 01       	movw	r30, r16
    12a8:	e2 52       	subi	r30, 0x22	; 34
    12aa:	fd 4f       	sbci	r31, 0xFD	; 253
    12ac:	20 81       	ld	r18, Z
    12ae:	31 81       	ldd	r19, Z+1	; 0x01
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	31 83       	std	Z+1, r19	; 0x01
    12b6:	20 83       	st	Z, r18
    12b8:	89 e4       	ldi	r24, 0x49	; 73
    12ba:	82 9f       	mul	r24, r18
    12bc:	d0 01       	movw	r26, r0
    12be:	83 9f       	mul	r24, r19
    12c0:	b0 0d       	add	r27, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	a0 0f       	add	r26, r16
    12c6:	b1 1f       	adc	r27, r17
    12c8:	fe 01       	movw	r30, r28
    12ca:	37 96       	adiw	r30, 0x07	; 7
    12cc:	01 90       	ld	r0, Z+
    12ce:	0d 92       	st	X+, r0
    12d0:	8a 95       	dec	r24
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <enqueue+0x66>
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	08 95       	ret

000012de <dequeue>:
    12de:	fc 01       	movw	r30, r24
    12e0:	e4 52       	subi	r30, 0x24	; 36
    12e2:	fd 4f       	sbci	r31, 0xFD	; 253
    12e4:	40 81       	ld	r20, Z
    12e6:	51 81       	ldd	r21, Z+1	; 0x01
    12e8:	32 96       	adiw	r30, 0x02	; 2
    12ea:	20 81       	ld	r18, Z
    12ec:	31 81       	ldd	r19, Z+1	; 0x01
    12ee:	24 17       	cp	r18, r20
    12f0:	35 07       	cpc	r19, r21
    12f2:	7c f0       	brlt	.+30     	; 0x1312 <dequeue+0x34>
    12f4:	32 97       	sbiw	r30, 0x02	; 2
    12f6:	9a 01       	movw	r18, r20
    12f8:	2f 5f       	subi	r18, 0xFF	; 255
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	31 83       	std	Z+1, r19	; 0x01
    12fe:	20 83       	st	Z, r18
    1300:	69 e4       	ldi	r22, 0x49	; 73
    1302:	64 9f       	mul	r22, r20
    1304:	90 01       	movw	r18, r0
    1306:	65 9f       	mul	r22, r21
    1308:	30 0d       	add	r19, r0
    130a:	11 24       	eor	r1, r1
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	08 95       	ret
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	08 95       	ret

00001318 <front>:
    1318:	fc 01       	movw	r30, r24
    131a:	e4 52       	subi	r30, 0x24	; 36
    131c:	fd 4f       	sbci	r31, 0xFD	; 253
    131e:	40 81       	ld	r20, Z
    1320:	51 81       	ldd	r21, Z+1	; 0x01
    1322:	32 96       	adiw	r30, 0x02	; 2
    1324:	20 81       	ld	r18, Z
    1326:	31 81       	ldd	r19, Z+1	; 0x01
    1328:	24 17       	cp	r18, r20
    132a:	35 07       	cpc	r19, r21
    132c:	4c f0       	brlt	.+18     	; 0x1340 <front+0x28>
    132e:	69 e4       	ldi	r22, 0x49	; 73
    1330:	64 9f       	mul	r22, r20
    1332:	90 01       	movw	r18, r0
    1334:	65 9f       	mul	r22, r21
    1336:	30 0d       	add	r19, r0
    1338:	11 24       	eor	r1, r1
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	08 95       	ret
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	08 95       	ret

00001346 <main>:

bool doctorSeeing = 0;

int main(void)
{
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	61 97       	sbiw	r28, 0x11	; 17
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
struct Queue q;

void Queue_Init(struct Queue *qptr)
{
	//toq=0;
	qptr->front_num = 0;
    135a:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <q+0x2dd>
    135e:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <q+0x2dc>
	qptr->rear_num = -1;
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	9f ef       	ldi	r25, 0xFF	; 255
    1366:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <q+0x2df>
    136a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <q+0x2de>
bool doctorSeeing = 0;

int main(void)
{
	Queue_Init(&q);
	doctorSeeing = 0;
    136e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <doctorSeeing>
	//HC05_Init_Data_Mode();
	//HC05_Init_ATCommand_Mode();
	
	//HC05_SendString("hello there");
	
	Lcd_Init(LCDKEYPAD);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Lcd_Init>
	//Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
	//Lcd_Position(LCDNOTICE , 0,0);
	//Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
	//Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
	
	States_GotoState(IDLE);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
	//States_GotoState(GENERATE_SERIAL);
	//States_GotoState(ENTERING_BP);
	
	Keypad_Init();
    1384:	0e 94 24 03 	call	0x648	; 0x648 <Keypad_Init>
	Button_Init();
    1388:	0e 94 05 03 	call	0x60a	; 0x60a <Button_Init>
	
	Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    138c:	47 e8       	ldi	r20, 0x87	; 135
    138e:	51 e0       	ldi	r21, 0x01	; 1
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    139a:	46 e9       	ldi	r20, 0x96	; 150
    139c:	51 e0       	ldi	r21, 0x01	; 1
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	qptr->rear_num = -1;
}

bool empty(struct Queue *qptr)
{
	if(qptr->front_num > qptr->rear_num)
    13a8:	0f 2e       	mov	r0, r31
    13aa:	f2 e7       	ldi	r31, 0x72	; 114
    13ac:	af 2e       	mov	r10, r31
    13ae:	f5 e0       	ldi	r31, 0x05	; 5
    13b0:	bf 2e       	mov	r11, r31
    13b2:	f0 2d       	mov	r31, r0
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f4 e7       	ldi	r31, 0x74	; 116
    13b8:	cf 2e       	mov	r12, r31
    13ba:	f5 e0       	ldi	r31, 0x05	; 5
    13bc:	df 2e       	mov	r13, r31
    13be:	f0 2d       	mov	r31, r0
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
				}
				else 
				{
					doctorSeeing = 1;
    13c0:	55 24       	eor	r5, r5
    13c2:	53 94       	inc	r5
					
					struct Patient* now =  front(&q);
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    13c4:	0f 2e       	mov	r0, r31
    13c6:	f3 ea       	ldi	r31, 0xA3	; 163
    13c8:	8f 2e       	mov	r8, r31
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	9f 2e       	mov	r9, r31
    13ce:	f0 2d       	mov	r31, r0
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	7c 01       	movw	r14, r24
					Lcd_PrintLine(LCDNOTICE , 0,s);
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    13d6:	0f 2e       	mov	r0, r31
    13d8:	fc ea       	ldi	r31, 0xAC	; 172
    13da:	6f 2e       	mov	r6, r31
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	7f 2e       	mov	r7, r31
    13e0:	f0 2d       	mov	r31, r0
	Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
	Lcd_PrintLine(LCDNOTICE , 1,"the queue");
	
	while (1)
	{
		if(Keypad_KeyPressed())
    13e2:	0e 94 a8 03 	call	0x750	; 0x750 <Keypad_KeyPressed>
    13e6:	88 23       	and	r24, r24
    13e8:	c9 f0       	breq	.+50     	; 0x141c <main+0xd6>
    13ea:	ef e3       	ldi	r30, 0x3F	; 63
    13ec:	fc e9       	ldi	r31, 0x9C	; 156
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <main+0xa8>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <main+0xae>
    13f4:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
    13f6:	0e 94 a8 03 	call	0x750	; 0x750 <Keypad_KeyPressed>
    13fa:	88 23       	and	r24, r24
    13fc:	79 f0       	breq	.+30     	; 0x141c <main+0xd6>
			{
				int_fast8_t x = Keypad_GetKey();
    13fe:	0e 94 90 04 	call	0x920	; 0x920 <Keypad_GetKey>
				KeyProcessor_ProcessKey(x);
    1402:	0e 94 b0 04 	call	0x960	; 0x960 <KeyProcessor_ProcessKey>
    1406:	ff ef       	ldi	r31, 0xFF	; 255
    1408:	20 e7       	ldi	r18, 0x70	; 112
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	f1 50       	subi	r31, 0x01	; 1
    140e:	20 40       	sbci	r18, 0x00	; 0
    1410:	80 40       	sbci	r24, 0x00	; 0
    1412:	e1 f7       	brne	.-8      	; 0x140c <main+0xc6>
    1414:	00 c0       	rjmp	.+0      	; 0x1416 <main+0xd0>
    1416:	00 00       	nop
				_delay_ms(100);
				Keypad_Init();
    1418:	0e 94 24 03 	call	0x648	; 0x648 <Keypad_Init>
				
			}
		}
		States_Refresh();
    141c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <States_Refresh>
		if(Button_ButtonPressed())
    1420:	0e 94 07 03 	call	0x60e	; 0x60e <Button_ButtonPressed>
    1424:	88 23       	and	r24, r24
    1426:	e9 f2       	breq	.-70     	; 0x13e2 <main+0x9c>
		{
			
			//Buzzer_Sound();
			Error_ErrorNum("dc",doctorSeeing);
    1428:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <doctorSeeing>
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	80 ea       	ldi	r24, 0xA0	; 160
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	0e 94 0f 03 	call	0x61e	; 0x61e <Error_ErrorNum>
			if(doctorSeeing)
    1436:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <doctorSeeing>
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <main+0xfa>
    143e:	55 c0       	rjmp	.+170    	; 0x14ea <main+0x1a4>
			{
				dequeue(&q);// ager ta falailam
    1440:	86 e9       	ldi	r24, 0x96	; 150
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	0e 94 6f 09 	call	0x12de	; 0x12de <dequeue>
				if(empty(&q))
    1448:	f5 01       	movw	r30, r10
    144a:	20 81       	ld	r18, Z
    144c:	31 81       	ldd	r19, Z+1	; 0x01
    144e:	f6 01       	movw	r30, r12
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	82 17       	cp	r24, r18
    1456:	93 07       	cpc	r25, r19
    1458:	8c f4       	brge	.+34     	; 0x147c <main+0x136>
				{
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    145a:	47 e8       	ldi	r20, 0x87	; 135
    145c:	51 e0       	ldi	r21, 0x01	; 1
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	85 2d       	mov	r24, r5
    1464:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    1468:	46 e9       	ldi	r20, 0x96	; 150
    146a:	51 e0       	ldi	r21, 0x01	; 1
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	85 2d       	mov	r24, r5
    1472:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
					doctorSeeing = 0;
    1476:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <doctorSeeing>
    147a:	87 c0       	rjmp	.+270    	; 0x158a <main+0x244>
				}
				else 
				{
					struct Patient* now =  front(&q);
    147c:	86 e9       	ldi	r24, 0x96	; 150
    147e:	92 e0       	ldi	r25, 0x02	; 2
    1480:	0e 94 8c 09 	call	0x1318	; 0x1318 <front>
    1484:	8c 01       	movw	r16, r24
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    1486:	1f 93       	push	r17
    1488:	8f 93       	push	r24
    148a:	fc 01       	movw	r30, r24
    148c:	e9 5b       	subi	r30, 0xB9	; 185
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	81 81       	ldd	r24, Z+1	; 0x01
    1492:	8f 93       	push	r24
    1494:	80 81       	ld	r24, Z
    1496:	8f 93       	push	r24
    1498:	9f 92       	push	r9
    149a:	8f 92       	push	r8
    149c:	ff 92       	push	r15
    149e:	ef 92       	push	r14
    14a0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 0,s);
    14a4:	a7 01       	movw	r20, r14
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	85 2d       	mov	r24, r5
    14ac:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    14b0:	c8 01       	movw	r24, r16
    14b2:	41 96       	adiw	r24, 0x11	; 17
    14b4:	9f 93       	push	r25
    14b6:	8f 93       	push	r24
    14b8:	8c 96       	adiw	r24, 0x2c	; 44
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	0d 5c       	subi	r16, 0xCD	; 205
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	1f 93       	push	r17
    14c4:	0f 93       	push	r16
    14c6:	7f 92       	push	r7
    14c8:	6f 92       	push	r6
    14ca:	ff 92       	push	r15
    14cc:	ef 92       	push	r14
    14ce:	0e 94 70 11 	call	0x22e0	; 0x22e0 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 1,s);
    14d2:	a7 01       	movw	r20, r14
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	85 2d       	mov	r24, r5
    14da:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	50 c0       	rjmp	.+160    	; 0x158a <main+0x244>
				}
				
			}
			else
			{
				if(empty(&q))
    14ea:	f5 01       	movw	r30, r10
    14ec:	20 81       	ld	r18, Z
    14ee:	31 81       	ldd	r19, Z+1	; 0x01
    14f0:	f6 01       	movw	r30, r12
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	82 17       	cp	r24, r18
    14f8:	93 07       	cpc	r25, r19
    14fa:	7c f4       	brge	.+30     	; 0x151a <main+0x1d4>
				{
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    14fc:	47 e8       	ldi	r20, 0x87	; 135
    14fe:	51 e0       	ldi	r21, 0x01	; 1
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	85 2d       	mov	r24, r5
    1506:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    150a:	46 e9       	ldi	r20, 0x96	; 150
    150c:	51 e0       	ldi	r21, 0x01	; 1
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	85 2d       	mov	r24, r5
    1514:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    1518:	38 c0       	rjmp	.+112    	; 0x158a <main+0x244>
				}
				else 
				{
					doctorSeeing = 1;
    151a:	50 92 7e 02 	sts	0x027E, r5	; 0x80027e <doctorSeeing>
					
					struct Patient* now =  front(&q);
    151e:	86 e9       	ldi	r24, 0x96	; 150
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	0e 94 8c 09 	call	0x1318	; 0x1318 <front>
    1526:	8c 01       	movw	r16, r24
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    1528:	1f 93       	push	r17
    152a:	8f 93       	push	r24
    152c:	fc 01       	movw	r30, r24
    152e:	e9 5b       	subi	r30, 0xB9	; 185
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	81 81       	ldd	r24, Z+1	; 0x01
    1534:	8f 93       	push	r24
    1536:	80 81       	ld	r24, Z
    1538:	8f 93       	push	r24
    153a:	9f 92       	push	r9
    153c:	8f 92       	push	r8
    153e:	ff 92       	push	r15
    1540:	ef 92       	push	r14
    1542:	0e 94 70 11 	call	0x22e0	; 0x22e0 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 0,s);
    1546:	a7 01       	movw	r20, r14
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	85 2d       	mov	r24, r5
    154e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    1552:	c8 01       	movw	r24, r16
    1554:	41 96       	adiw	r24, 0x11	; 17
    1556:	9f 93       	push	r25
    1558:	8f 93       	push	r24
    155a:	8c 96       	adiw	r24, 0x2c	; 44
    155c:	9f 93       	push	r25
    155e:	8f 93       	push	r24
    1560:	0d 5c       	subi	r16, 0xCD	; 205
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	1f 93       	push	r17
    1566:	0f 93       	push	r16
    1568:	7f 92       	push	r7
    156a:	6f 92       	push	r6
    156c:	ff 92       	push	r15
    156e:	ef 92       	push	r14
    1570:	0e 94 70 11 	call	0x22e0	; 0x22e0 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 1,s);
    1574:	a7 01       	movw	r20, r14
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	85 2d       	mov	r24, r5
    157c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	9f ef       	ldi	r25, 0xFF	; 255
    158c:	e4 e3       	ldi	r30, 0x34	; 52
    158e:	fc e0       	ldi	r31, 0x0C	; 12
    1590:	91 50       	subi	r25, 0x01	; 1
    1592:	e0 40       	sbci	r30, 0x00	; 0
    1594:	f0 40       	sbci	r31, 0x00	; 0
    1596:	e1 f7       	brne	.-8      	; 0x1590 <main+0x24a>
    1598:	00 c0       	rjmp	.+0      	; 0x159a <main+0x254>
    159a:	00 00       	nop
    159c:	22 cf       	rjmp	.-444    	; 0x13e2 <main+0x9c>

0000159e <Patient_UpdateName>:
struct Patient currentPatient ;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
    159e:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
    15a2:	08 95       	ret

000015a4 <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
    15a4:	41 96       	adiw	r24, 0x11	; 17
    15a6:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
    15aa:	08 95       	ret

000015ac <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
    15ac:	82 96       	adiw	r24, 0x22	; 34
    15ae:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
    15b2:	08 95       	ret

000015b4 <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
    15b4:	89 5b       	subi	r24, 0xB9	; 185
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	fc 01       	movw	r30, r24
    15ba:	71 83       	std	Z+1, r23	; 0x01
    15bc:	60 83       	st	Z, r22
    15be:	08 95       	ret

000015c0 <Patient_UpdateTemperature>:
}
void Patient_UpdateTemperature(struct Patient *p, char *newTemp)
{
	strcpy(p->temperature , newTemp);
    15c0:	c3 96       	adiw	r24, 0x33	; 51
    15c2:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
    15c6:	08 95       	ret

000015c8 <Patient_UpdateBp>:
}
void Patient_UpdateBp(struct Patient *p, char *newBp)
{
	strcpy(p->bp, newBp);
    15c8:	cd 96       	adiw	r24, 0x3d	; 61
    15ca:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
    15ce:	08 95       	ret

000015d0 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
    15d0:	4b eb       	ldi	r20, 0xBB	; 187
    15d2:	51 e0       	ldi	r21, 0x01	; 1
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	Keypad_InitNumpad();
    15de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    15e2:	0e 94 8e 03 	call	0x71c	; 0x71c <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
    15e6:	89 e8       	ldi	r24, 0x89	; 137
    15e8:	95 e0       	ldi	r25, 0x05	; 5
    15ea:	0e 94 36 03 	call	0x66c	; 0x66c <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    15ee:	42 e8       	ldi	r20, 0x82	; 130
    15f0:	52 e0       	ldi	r21, 0x02	; 2
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    15fc:	08 95       	ret

000015fe <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    15fe:	8f 31       	cpi	r24, 0x1F	; 31
    1600:	61 f4       	brne	.+24     	; 0x161a <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    1602:	62 e8       	ldi	r22, 0x82	; 130
    1604:	72 e0       	ldi	r23, 0x02	; 2
    1606:	88 e7       	ldi	r24, 0x78	; 120
    1608:	95 e0       	ldi	r25, 0x05	; 5
    160a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    160e:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    1618:	08 95       	ret
	}
	else if(key == 30)
    161a:	8e 31       	cpi	r24, 0x1E	; 30
    161c:	61 f4       	brne	.+24     	; 0x1636 <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    161e:	62 e8       	ldi	r22, 0x82	; 130
    1620:	72 e0       	ldi	r23, 0x02	; 2
    1622:	88 e7       	ldi	r24, 0x78	; 120
    1624:	95 e0       	ldi	r25, 0x05	; 5
    1626:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    162a:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    1634:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1636:	0e 94 1a 04 	call	0x834	; 0x834 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    163a:	42 e8       	ldi	r20, 0x82	; 130
    163c:	52 e0       	ldi	r21, 0x02	; 2
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1648:	82 e8       	ldi	r24, 0x82	; 130
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	0e 94 15 03 	call	0x62a	; 0x62a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1650:	0e 94 8e 03 	call	0x71c	; 0x71c <Keypad_UpdateKeyMode>
    1654:	08 95       	ret

00001656 <EnteringBp_Init>:
#include "../../all.h"

bool scanning = 0;
void EnteringBp_Init()
{
    Lcd_PrintLine(LCDKEYPAD,0,"Finger on green-");
    1656:	46 ec       	ldi	r20, 0xC6	; 198
    1658:	51 e0       	ldi	r21, 0x01	; 1
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	Lcd_PrintLine(LCDKEYPAD , 1, "Light, press next");
    1664:	47 ed       	ldi	r20, 0xD7	; 215
    1666:	51 e0       	ldi	r21, 0x01	; 1
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	Bp_Init();
    1672:	0e 94 2c 02 	call	0x458	; 0x458 <Bp_Init>
	scanning = 0;
    1676:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <scanning>
    167a:	08 95       	ret

0000167c <EntetingBp_Refresh>:
}

void EntetingBp_Refresh()
{
    167c:	08 95       	ret

0000167e <EnteringBp_ProcessKey>:
	
}

void EnteringBp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    167e:	8f 31       	cpi	r24, 0x1F	; 31
    1680:	f9 f4       	brne	.+62     	; 0x16c0 <EnteringBp_ProcessKey+0x42>
	{
		if(scanning == 0)
    1682:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <scanning>
    1686:	81 11       	cpse	r24, r1
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <EnteringBp_ProcessKey+0x26>
		{
			scanning = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <scanning>
			Lcd_PrintLine(LCDKEYPAD , 1, "Light");
    1690:	49 ee       	ldi	r20, 0xE9	; 233
    1692:	51 e0       	ldi	r21, 0x01	; 1
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
			Bp_PrintBp();
    169e:	0e 94 32 02 	call	0x464	; 0x464 <Bp_PrintBp>
    16a2:	08 95       	ret
		}
		else 
		{
			scanning = 0;
    16a4:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <scanning>
			Patient_UpdateBp(&currentPatient , keyBuffer);
    16a8:	62 e8       	ldi	r22, 0x82	; 130
    16aa:	72 e0       	ldi	r23, 0x02	; 2
    16ac:	88 e7       	ldi	r24, 0x78	; 120
    16ae:	95 e0       	ldi	r25, 0x05	; 5
    16b0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <Patient_UpdateBp>
			Keypad_ResetBuffer();
    16b4:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
			States_GotoState(GENERATE_SERIAL);
    16b8:	86 e0       	ldi	r24, 0x06	; 6
    16ba:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    16be:	08 95       	ret
		}
		// print serial
	}
	else if(key == 30)
    16c0:	8e 31       	cpi	r24, 0x1E	; 30
    16c2:	59 f4       	brne	.+22     	; 0x16da <EnteringBp_ProcessKey+0x5c>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    16c4:	62 e8       	ldi	r22, 0x82	; 130
    16c6:	72 e0       	ldi	r23, 0x02	; 2
    16c8:	88 e7       	ldi	r24, 0x78	; 120
    16ca:	95 e0       	ldi	r25, 0x05	; 5
    16cc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    16d0:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    16da:	08 95       	ret

000016dc <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	0e 94 07 05 	call	0xa0e	; 0xa0e <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
    16f0:	6f ee       	ldi	r22, 0xEF	; 239
    16f2:	71 e0       	ldi	r23, 0x01	; 1
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
	Keypad_UpdateKeyMode();
    16fa:	0e 94 8e 03 	call	0x71c	; 0x71c <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
    16fe:	88 e7       	ldi	r24, 0x78	; 120
    1700:	95 e0       	ldi	r25, 0x05	; 5
    1702:	0e 94 36 03 	call	0x66c	; 0x66c <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1706:	42 e8       	ldi	r20, 0x82	; 130
    1708:	52 e0       	ldi	r21, 0x02	; 2
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    1714:	08 95       	ret

00001716 <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1716:	8f 31       	cpi	r24, 0x1F	; 31
    1718:	61 f4       	brne	.+24     	; 0x1732 <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    171a:	62 e8       	ldi	r22, 0x82	; 130
    171c:	72 e0       	ldi	r23, 0x02	; 2
    171e:	88 e7       	ldi	r24, 0x78	; 120
    1720:	95 e0       	ldi	r25, 0x05	; 5
    1722:	0e 94 cf 0a 	call	0x159e	; 0x159e <Patient_UpdateName>
		Keypad_ResetBuffer();
    1726:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    1730:	08 95       	ret
	}
	else if(key == 30)
    1732:	8e 31       	cpi	r24, 0x1E	; 30
    1734:	61 f4       	brne	.+24     	; 0x174e <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    1736:	62 e8       	ldi	r22, 0x82	; 130
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	88 e7       	ldi	r24, 0x78	; 120
    173c:	95 e0       	ldi	r25, 0x05	; 5
    173e:	0e 94 cf 0a 	call	0x159e	; 0x159e <Patient_UpdateName>
		Keypad_ResetBuffer();
    1742:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    174c:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    174e:	0e 94 1a 04 	call	0x834	; 0x834 <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1752:	42 e8       	ldi	r20, 0x82	; 130
    1754:	52 e0       	ldi	r21, 0x02	; 2
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1760:	82 e8       	ldi	r24, 0x82	; 130
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	0e 94 15 03 	call	0x62a	; 0x62a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1768:	0e 94 8e 03 	call	0x71c	; 0x71c <Keypad_UpdateKeyMode>
    176c:	08 95       	ret

0000176e <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
    176e:	4b ef       	ldi	r20, 0xFB	; 251
    1770:	51 e0       	ldi	r21, 0x01	; 1
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1780:	0e 94 8e 03 	call	0x71c	; 0x71c <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    1784:	8a e9       	ldi	r24, 0x9A	; 154
    1786:	95 e0       	ldi	r25, 0x05	; 5
    1788:	0e 94 36 03 	call	0x66c	; 0x66c <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    178c:	42 e8       	ldi	r20, 0x82	; 130
    178e:	52 e0       	ldi	r21, 0x02	; 2
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    179a:	08 95       	ret

0000179c <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    179c:	8f 31       	cpi	r24, 0x1F	; 31
    179e:	61 f4       	brne	.+24     	; 0x17b8 <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    17a0:	62 e8       	ldi	r22, 0x82	; 130
    17a2:	72 e0       	ldi	r23, 0x02	; 2
    17a4:	88 e7       	ldi	r24, 0x78	; 120
    17a6:	95 e0       	ldi	r25, 0x05	; 5
    17a8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    17ac:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    17b6:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    17b8:	8e 31       	cpi	r24, 0x1E	; 30
    17ba:	61 f4       	brne	.+24     	; 0x17d4 <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    17bc:	62 e8       	ldi	r22, 0x82	; 130
    17be:	72 e0       	ldi	r23, 0x02	; 2
    17c0:	88 e7       	ldi	r24, 0x78	; 120
    17c2:	95 e0       	ldi	r25, 0x05	; 5
    17c4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    17c8:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    17d2:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    17d4:	0e 94 1a 04 	call	0x834	; 0x834 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    17d8:	42 e8       	ldi	r20, 0x82	; 130
    17da:	52 e0       	ldi	r21, 0x02	; 2
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    17e6:	82 e8       	ldi	r24, 0x82	; 130
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	0e 94 15 03 	call	0x62a	; 0x62a <HC05_SendString>
		
		Keypad_InitNumpad();
    17ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    17f2:	0e 94 8e 03 	call	0x71c	; 0x71c <Keypad_UpdateKeyMode>
    17f6:	08 95       	ret

000017f8 <EnteringTemp_Init>:
#include "../../all.h"

void EnteringTemp_Init()
{
	Lcd_PrintLine(LCDKEYPAD, 0, "Temperature:");
    17f8:	45 e0       	ldi	r20, 0x05	; 5
    17fa:	52 e0       	ldi	r21, 0x02	; 2
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    Lm35_Init();
    1806:	0e 94 11 09 	call	0x1222	; 0x1222 <Lm35_Init>
    180a:	08 95       	ret

0000180c <EnteringTemp_Refresh>:
}

void EnteringTemp_Refresh()
{
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	64 97       	sbiw	r28, 0x14	; 20
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
	float tempF = Lm35_GetTemp();
    1824:	0e 94 17 09 	call	0x122e	; 0x122e <Lm35_GetTemp>
	char tempF_txt[20];
	dtostrf(tempF, 5, 2, tempF_txt);
    1828:	8e 01       	movw	r16, r28
    182a:	0f 5f       	subi	r16, 0xFF	; 255
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	22 e0       	ldi	r18, 0x02	; 2
    1830:	45 e0       	ldi	r20, 0x05	; 5
    1832:	0e 94 03 10 	call	0x2006	; 0x2006 <dtostrf>
	Lcd_PrintLine(LCDKEYPAD, 1, tempF_txt);
    1836:	a8 01       	movw	r20, r16
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	strcpy(keyBuffer, tempF_txt);
    1842:	b8 01       	movw	r22, r16
    1844:	82 e8       	ldi	r24, 0x82	; 130
    1846:	92 e0       	ldi	r25, 0x02	; 2
    1848:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
}
    184c:	64 96       	adiw	r28, 0x14	; 20
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	08 95       	ret

00001862 <EnteringTemp_ProcessKey>:

void EnteringTemp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1862:	8f 31       	cpi	r24, 0x1F	; 31
    1864:	61 f4       	brne	.+24     	; 0x187e <EnteringTemp_ProcessKey+0x1c>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    1866:	62 e8       	ldi	r22, 0x82	; 130
    1868:	72 e0       	ldi	r23, 0x02	; 2
    186a:	88 e7       	ldi	r24, 0x78	; 120
    186c:	95 e0       	ldi	r25, 0x05	; 5
    186e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    1872:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_BP);
    1876:	85 e0       	ldi	r24, 0x05	; 5
    1878:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    187c:	08 95       	ret
	}
	else if(key == 30)
    187e:	8e 31       	cpi	r24, 0x1E	; 30
    1880:	59 f4       	brne	.+22     	; 0x1898 <EnteringTemp_ProcessKey+0x36>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    1882:	62 e8       	ldi	r22, 0x82	; 130
    1884:	72 e0       	ldi	r23, 0x02	; 2
    1886:	88 e7       	ldi	r24, 0x78	; 120
    1888:	95 e0       	ldi	r25, 0x05	; 5
    188a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    188e:	0e 94 2b 03 	call	0x656	; 0x656 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    1898:	08 95       	ret

0000189a <Update_Serial>:
		
	}
}

void Update_Serial()
{
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	c4 56       	subi	r28, 0x64	; 100
    18a8:	d1 09       	sbc	r29, r1
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    18b4:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <patientsCount>
    18b8:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <patientsCount+0x1>
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	07 2e       	mov	r0, r23
    18c2:	00 0c       	add	r0, r0
    18c4:	88 0b       	sbc	r24, r24
    18c6:	99 0b       	sbc	r25, r25
    18c8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__floatsisf>
    18cc:	8e 01       	movw	r16, r28
    18ce:	0f 5f       	subi	r16, 0xFF	; 255
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	43 e0       	ldi	r20, 0x03	; 3
    18d6:	0e 94 03 10 	call	0x2006	; 0x2006 <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    18da:	4d e0       	ldi	r20, 0x0D	; 13
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    18e8:	b8 01       	movw	r22, r16
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount+1);
    18f0:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <patientsCount>
    18f4:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <patientsCount+0x1>
    18f8:	6f 5f       	subi	r22, 0xFF	; 255
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	88 e7       	ldi	r24, 0x78	; 120
    18fe:	95 e0       	ldi	r25, 0x05	; 5
    1900:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Patient_UpdateSerial>
	
}
    1904:	cc 59       	subi	r28, 0x9C	; 156
    1906:	df 4f       	sbci	r29, 0xFF	; 255
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	08 95       	ret

0000191c <GenerateSerial_Init>:


void GenerateSerial_Init()
{
    
	Lcd_Position(LCDKEYPAD,0,0);
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_PrintLine(LCDKEYPAD,0,"Your Serial: ");
    192a:	42 e1       	ldi	r20, 0x12	; 18
    192c:	52 e0       	ldi	r21, 0x02	; 2
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
	Update_Serial();
    1938:	0e 94 4d 0c 	call	0x189a	; 0x189a <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_PrintLine(LCDKEYPAD,1,"N:Confirm P:Back");
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	52 e0       	ldi	r21, 0x02	; 2
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd_PrintLine>
    1958:	08 95       	ret

0000195a <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount+1);
	
}

void Update_PatientsList()
{
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));
    195e:	89 e4       	ldi	r24, 0x49	; 73
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 23 10 	call	0x2046	; 0x2046 <malloc>
    1966:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    1968:	68 e7       	ldi	r22, 0x78	; 120
    196a:	75 e0       	ldi	r23, 0x05	; 5
    196c:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
	strcpy(cp->age, currentPatient.age);
    1970:	69 e8       	ldi	r22, 0x89	; 137
    1972:	75 e0       	ldi	r23, 0x05	; 5
    1974:	ce 01       	movw	r24, r28
    1976:	41 96       	adiw	r24, 0x11	; 17
    1978:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    197c:	6a e9       	ldi	r22, 0x9A	; 154
    197e:	75 e0       	ldi	r23, 0x05	; 5
    1980:	ce 01       	movw	r24, r28
    1982:	82 96       	adiw	r24, 0x22	; 34
    1984:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
	cp->serial = currentPatient.serial;
    1988:	fe 01       	movw	r30, r28
    198a:	e9 5b       	subi	r30, 0xB9	; 185
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <currentPatient+0x47>
    1992:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <currentPatient+0x48>
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
	strcpy(cp->temperature, currentPatient.temperature);
    199a:	6b ea       	ldi	r22, 0xAB	; 171
    199c:	75 e0       	ldi	r23, 0x05	; 5
    199e:	ce 01       	movw	r24, r28
    19a0:	c3 96       	adiw	r24, 0x33	; 51
    19a2:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
	strcpy(cp->bp, currentPatient.bp);
    19a6:	65 eb       	ldi	r22, 0xB5	; 181
    19a8:	75 e0       	ldi	r23, 0x05	; 5
    19aa:	ce 01       	movw	r24, r28
    19ac:	cd 96       	adiw	r24, 0x3d	; 61
    19ae:	0e 94 44 11 	call	0x2288	; 0x2288 <strcpy>
	enqueue(&q,*cp);
    19b2:	8d b7       	in	r24, 0x3d	; 61
    19b4:	9e b7       	in	r25, 0x3e	; 62
    19b6:	89 54       	subi	r24, 0x49	; 73
    19b8:	91 09       	sbc	r25, r1
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	9e bf       	out	0x3e, r25	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	8d bf       	out	0x3d, r24	; 61
    19c4:	ad b7       	in	r26, 0x3d	; 61
    19c6:	be b7       	in	r27, 0x3e	; 62
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	89 e4       	ldi	r24, 0x49	; 73
    19cc:	fe 01       	movw	r30, r28
    19ce:	01 90       	ld	r0, Z+
    19d0:	0d 92       	st	X+, r0
    19d2:	8a 95       	dec	r24
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <Update_PatientsList+0x74>
    19d6:	86 e9       	ldi	r24, 0x96	; 150
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	0e 94 33 09 	call	0x1266	; 0x1266 <enqueue>
	free(cp);
    19de:	8d b7       	in	r24, 0x3d	; 61
    19e0:	9e b7       	in	r25, 0x3e	; 62
    19e2:	87 5b       	subi	r24, 0xB7	; 183
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	9e bf       	out	0x3e, r25	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	8d bf       	out	0x3d, r24	; 61
    19f0:	ce 01       	movw	r24, r28
    19f2:	0e 94 bb 10 	call	0x2176	; 0x2176 <free>
}
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <Clear_CurrentPatient_Data>:

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    19fc:	e8 e7       	ldi	r30, 0x78	; 120
    19fe:	f5 e0       	ldi	r31, 0x05	; 5
    1a00:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    1a02:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    1a04:	12 a2       	std	Z+34, r1	; 0x22
	strcpy(currentPatient.temperature, "");
    1a06:	13 aa       	std	Z+51, r1	; 0x33
	strcpy(currentPatient.bp, "");
    1a08:	15 ae       	std	Z+61, r1	; 0x3d
    1a0a:	08 95       	ret

00001a0c <GenerateSerial_ProcessKey>:
	Lcd_PrintLine(LCDKEYPAD,1,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1a0c:	8f 31       	cpi	r24, 0x1F	; 31
    1a0e:	49 f5       	brne	.+82     	; 0x1a62 <GenerateSerial_ProcessKey+0x56>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	0e 94 07 05 	call	0xa0e	; 0xa0e <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    1a16:	43 e0       	ldi	r20, 0x03	; 3
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
		patientsCount++;
    1a24:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <patientsCount>
    1a28:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <patientsCount+0x1>
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <patientsCount+0x1>
    1a32:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <patientsCount>
		Update_PatientsList();
    1a36:	0e 94 ad 0c 	call	0x195a	; 0x195a <Update_PatientsList>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    1a3a:	61 e3       	ldi	r22, 0x31	; 49
    1a3c:	72 e0       	ldi	r23, 0x02	; 2
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
    1a44:	2f ef       	ldi	r18, 0xFF	; 255
    1a46:	87 e8       	ldi	r24, 0x87	; 135
    1a48:	93 e1       	ldi	r25, 0x13	; 19
    1a4a:	21 50       	subi	r18, 0x01	; 1
    1a4c:	80 40       	sbci	r24, 0x00	; 0
    1a4e:	90 40       	sbci	r25, 0x00	; 0
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <GenerateSerial_ProcessKey+0x3e>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <GenerateSerial_ProcessKey+0x48>
    1a54:	00 00       	nop
		_delay_ms(800);
		States_GotoState(IDLE);
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
		Clear_CurrentPatient_Data();
    1a5c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <Clear_CurrentPatient_Data>
    1a60:	08 95       	ret
	}
	else if(key == 30)
    1a62:	8e 31       	cpi	r24, 0x1E	; 30
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <GenerateSerial_ProcessKey+0x60>
	{
		States_GotoState(ENTERING_BP);
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    1a6c:	08 95       	ret

00001a6e <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 57 0d 	call	0x1aae	; 0x1aae <States_GotoState>
    1a74:	08 95       	ret

00001a76 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	0e 94 07 05 	call	0xa0e	; 0xa0e <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    1a8a:	6b e3       	ldi	r22, 0x3B	; 59
    1a8c:	72 e0       	ldi	r23, 0x02	; 2
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    1aa2:	64 e4       	ldi	r22, 0x44	; 68
    1aa4:	72 e0       	ldi	r23, 0x02	; 2
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 17 05 	call	0xa2e	; 0xa2e <Lcd_Prints>
    1aac:	08 95       	ret

00001aae <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    1aae:	cf 93       	push	r28
    1ab0:	c8 2f       	mov	r28, r24
	switch(newState)
    1ab2:	08 2e       	mov	r0, r24
    1ab4:	00 0c       	add	r0, r0
    1ab6:	99 0b       	sbc	r25, r25
    1ab8:	aa 0b       	sbc	r26, r26
    1aba:	bb 0b       	sbc	r27, r27
    1abc:	87 30       	cpi	r24, 0x07	; 7
    1abe:	91 05       	cpc	r25, r1
    1ac0:	d0 f4       	brcc	.+52     	; 0x1af6 <States_GotoState+0x48>
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	ef 5c       	subi	r30, 0xCF	; 207
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__tablejump2__>
	{
		case IDLE:
			Idle_Init();
    1acc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Idle_Init>
			break;
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <States_GotoState+0x50>
		case ENTERING_NAME:
			EnteringName_Init();
    1ad2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <EnteringName_Init>
			break;
    1ad6:	13 c0       	rjmp	.+38     	; 0x1afe <States_GotoState+0x50>
		case ENTERING_AGE:
			EnteringAge_Init();
    1ad8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <EnteringAge_Init>
			break;
    1adc:	10 c0       	rjmp	.+32     	; 0x1afe <States_GotoState+0x50>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    1ade:	0e 94 b7 0b 	call	0x176e	; 0x176e <EnteringPhone_Init>
			break;
    1ae2:	0d c0       	rjmp	.+26     	; 0x1afe <States_GotoState+0x50>
		case ENTERING_TEMP:
			EnteringTemp_Init();
    1ae4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <EnteringTemp_Init>
			break;
    1ae8:	0a c0       	rjmp	.+20     	; 0x1afe <States_GotoState+0x50>
		case ENTERING_BP:
			EnteringBp_Init();
    1aea:	0e 94 2b 0b 	call	0x1656	; 0x1656 <EnteringBp_Init>
			break;
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <States_GotoState+0x50>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    1af0:	0e 94 8e 0c 	call	0x191c	; 0x191c <GenerateSerial_Init>
			break;
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <States_GotoState+0x50>
		default:
			Error_Error("GotoState: newState not defined");
    1af6:	81 e5       	ldi	r24, 0x51	; 81
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	}
	currentState = newState;
    1afe:	c0 93 c1 05 	sts	0x05C1, r28	; 0x8005c1 <currentState>
}
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <States_Refresh>:
void States_Refresh()
{
	switch(currentState)
    1b06:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <currentState>
    1b0a:	84 30       	cpi	r24, 0x04	; 4
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <States_Refresh+0xe>
    1b0e:	85 30       	cpi	r24, 0x05	; 5
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <States_Refresh+0x14>
    1b12:	08 95       	ret
		
		case ENTERING_PHONE:
		
			break;
		case ENTERING_TEMP:
			EnteringTemp_Refresh();
    1b14:	0e 94 06 0c 	call	0x180c	; 0x180c <EnteringTemp_Refresh>
			break;
    1b18:	08 95       	ret
		case ENTERING_BP:
			EntetingBp_Refresh();
    1b1a:	0e 94 3e 0b 	call	0x167c	; 0x167c <EntetingBp_Refresh>
    1b1e:	08 95       	ret

00001b20 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1b20:	11 b8       	out	0x01, r1	; 1
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	80 b9       	out	0x00, r24	; 0
    1b26:	08 95       	ret

00001b28 <i2c_start>:
    1b28:	94 ea       	ldi	r25, 0xA4	; 164
    1b2a:	96 bf       	out	0x36, r25	; 54
    1b2c:	06 b6       	in	r0, 0x36	; 54
    1b2e:	07 fe       	sbrs	r0, 7
    1b30:	fd cf       	rjmp	.-6      	; 0x1b2c <i2c_start+0x4>
    1b32:	91 b1       	in	r25, 0x01	; 1
    1b34:	98 7f       	andi	r25, 0xF8	; 248
    1b36:	98 30       	cpi	r25, 0x08	; 8
    1b38:	11 f0       	breq	.+4      	; 0x1b3e <i2c_start+0x16>
    1b3a:	90 31       	cpi	r25, 0x10	; 16
    1b3c:	79 f4       	brne	.+30     	; 0x1b5c <i2c_start+0x34>
    1b3e:	83 b9       	out	0x03, r24	; 3
    1b40:	84 e8       	ldi	r24, 0x84	; 132
    1b42:	86 bf       	out	0x36, r24	; 54
    1b44:	06 b6       	in	r0, 0x36	; 54
    1b46:	07 fe       	sbrs	r0, 7
    1b48:	fd cf       	rjmp	.-6      	; 0x1b44 <i2c_start+0x1c>
    1b4a:	91 b1       	in	r25, 0x01	; 1
    1b4c:	98 7f       	andi	r25, 0xF8	; 248
    1b4e:	98 31       	cpi	r25, 0x18	; 24
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <i2c_start+0x38>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 34       	cpi	r25, 0x40	; 64
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <i2c_start+0x3a>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	08 95       	ret
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	08 95       	ret
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1b64:	84 e9       	ldi	r24, 0x94	; 148
    1b66:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1b68:	06 b6       	in	r0, 0x36	; 54
    1b6a:	04 fc       	sbrc	r0, 4
    1b6c:	fd cf       	rjmp	.-6      	; 0x1b68 <i2c_stop+0x4>

}/* i2c_stop */
    1b6e:	08 95       	ret

00001b70 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1b70:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b72:	84 e8       	ldi	r24, 0x84	; 132
    1b74:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1b76:	06 b6       	in	r0, 0x36	; 54
    1b78:	07 fe       	sbrs	r0, 7
    1b7a:	fd cf       	rjmp	.-6      	; 0x1b76 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1b7c:	91 b1       	in	r25, 0x01	; 1
    1b7e:	98 7f       	andi	r25, 0xF8	; 248
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	98 32       	cpi	r25, 0x28	; 40
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <i2c_write+0x18>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1b88:	08 95       	ret

00001b8a <__subsf3>:
    1b8a:	50 58       	subi	r21, 0x80	; 128

00001b8c <__addsf3>:
    1b8c:	bb 27       	eor	r27, r27
    1b8e:	aa 27       	eor	r26, r26
    1b90:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__addsf3x>
    1b94:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_round>
    1b98:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__fp_pscA>
    1b9c:	38 f0       	brcs	.+14     	; 0x1bac <__addsf3+0x20>
    1b9e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscB>
    1ba2:	20 f0       	brcs	.+8      	; 0x1bac <__addsf3+0x20>
    1ba4:	39 f4       	brne	.+14     	; 0x1bb4 <__addsf3+0x28>
    1ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba8:	19 f4       	brne	.+6      	; 0x1bb0 <__addsf3+0x24>
    1baa:	26 f4       	brtc	.+8      	; 0x1bb4 <__addsf3+0x28>
    1bac:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_nan>
    1bb0:	0e f4       	brtc	.+2      	; 0x1bb4 <__addsf3+0x28>
    1bb2:	e0 95       	com	r30
    1bb4:	e7 fb       	bst	r30, 7
    1bb6:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__fp_inf>

00001bba <__addsf3x>:
    1bba:	e9 2f       	mov	r30, r25
    1bbc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_split3>
    1bc0:	58 f3       	brcs	.-42     	; 0x1b98 <__addsf3+0xc>
    1bc2:	ba 17       	cp	r27, r26
    1bc4:	62 07       	cpc	r22, r18
    1bc6:	73 07       	cpc	r23, r19
    1bc8:	84 07       	cpc	r24, r20
    1bca:	95 07       	cpc	r25, r21
    1bcc:	20 f0       	brcs	.+8      	; 0x1bd6 <__addsf3x+0x1c>
    1bce:	79 f4       	brne	.+30     	; 0x1bee <__addsf3x+0x34>
    1bd0:	a6 f5       	brtc	.+104    	; 0x1c3a <__addsf3x+0x80>
    1bd2:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__fp_zero>
    1bd6:	0e f4       	brtc	.+2      	; 0x1bda <__addsf3x+0x20>
    1bd8:	e0 95       	com	r30
    1bda:	0b 2e       	mov	r0, r27
    1bdc:	ba 2f       	mov	r27, r26
    1bde:	a0 2d       	mov	r26, r0
    1be0:	0b 01       	movw	r0, r22
    1be2:	b9 01       	movw	r22, r18
    1be4:	90 01       	movw	r18, r0
    1be6:	0c 01       	movw	r0, r24
    1be8:	ca 01       	movw	r24, r20
    1bea:	a0 01       	movw	r20, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	ff 27       	eor	r31, r31
    1bf0:	59 1b       	sub	r21, r25
    1bf2:	99 f0       	breq	.+38     	; 0x1c1a <__addsf3x+0x60>
    1bf4:	59 3f       	cpi	r21, 0xF9	; 249
    1bf6:	50 f4       	brcc	.+20     	; 0x1c0c <__addsf3x+0x52>
    1bf8:	50 3e       	cpi	r21, 0xE0	; 224
    1bfa:	68 f1       	brcs	.+90     	; 0x1c56 <__addsf3x+0x9c>
    1bfc:	1a 16       	cp	r1, r26
    1bfe:	f0 40       	sbci	r31, 0x00	; 0
    1c00:	a2 2f       	mov	r26, r18
    1c02:	23 2f       	mov	r18, r19
    1c04:	34 2f       	mov	r19, r20
    1c06:	44 27       	eor	r20, r20
    1c08:	58 5f       	subi	r21, 0xF8	; 248
    1c0a:	f3 cf       	rjmp	.-26     	; 0x1bf2 <__addsf3x+0x38>
    1c0c:	46 95       	lsr	r20
    1c0e:	37 95       	ror	r19
    1c10:	27 95       	ror	r18
    1c12:	a7 95       	ror	r26
    1c14:	f0 40       	sbci	r31, 0x00	; 0
    1c16:	53 95       	inc	r21
    1c18:	c9 f7       	brne	.-14     	; 0x1c0c <__addsf3x+0x52>
    1c1a:	7e f4       	brtc	.+30     	; 0x1c3a <__addsf3x+0x80>
    1c1c:	1f 16       	cp	r1, r31
    1c1e:	ba 0b       	sbc	r27, r26
    1c20:	62 0b       	sbc	r22, r18
    1c22:	73 0b       	sbc	r23, r19
    1c24:	84 0b       	sbc	r24, r20
    1c26:	ba f0       	brmi	.+46     	; 0x1c56 <__addsf3x+0x9c>
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	a1 f0       	breq	.+40     	; 0x1c54 <__addsf3x+0x9a>
    1c2c:	ff 0f       	add	r31, r31
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	66 1f       	adc	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	c2 f7       	brpl	.-16     	; 0x1c28 <__addsf3x+0x6e>
    1c38:	0e c0       	rjmp	.+28     	; 0x1c56 <__addsf3x+0x9c>
    1c3a:	ba 0f       	add	r27, r26
    1c3c:	62 1f       	adc	r22, r18
    1c3e:	73 1f       	adc	r23, r19
    1c40:	84 1f       	adc	r24, r20
    1c42:	48 f4       	brcc	.+18     	; 0x1c56 <__addsf3x+0x9c>
    1c44:	87 95       	ror	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	b7 95       	ror	r27
    1c4c:	f7 95       	ror	r31
    1c4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <__addsf3x+0x9a>
    1c52:	b0 cf       	rjmp	.-160    	; 0x1bb4 <__addsf3+0x28>
    1c54:	93 95       	inc	r25
    1c56:	88 0f       	add	r24, r24
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <__addsf3x+0xa2>
    1c5a:	99 27       	eor	r25, r25
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	97 95       	ror	r25
    1c60:	87 95       	ror	r24
    1c62:	08 95       	ret

00001c64 <__divsf3>:
    1c64:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divsf3x>
    1c68:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_round>
    1c6c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscB>
    1c70:	58 f0       	brcs	.+22     	; 0x1c88 <__divsf3+0x24>
    1c72:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__fp_pscA>
    1c76:	40 f0       	brcs	.+16     	; 0x1c88 <__divsf3+0x24>
    1c78:	29 f4       	brne	.+10     	; 0x1c84 <__divsf3+0x20>
    1c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7c:	29 f0       	breq	.+10     	; 0x1c88 <__divsf3+0x24>
    1c7e:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__fp_inf>
    1c82:	51 11       	cpse	r21, r1
    1c84:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__fp_szero>
    1c88:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_nan>

00001c8c <__divsf3x>:
    1c8c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_split3>
    1c90:	68 f3       	brcs	.-38     	; 0x1c6c <__divsf3+0x8>

00001c92 <__divsf3_pse>:
    1c92:	99 23       	and	r25, r25
    1c94:	b1 f3       	breq	.-20     	; 0x1c82 <__divsf3+0x1e>
    1c96:	55 23       	and	r21, r21
    1c98:	91 f3       	breq	.-28     	; 0x1c7e <__divsf3+0x1a>
    1c9a:	95 1b       	sub	r25, r21
    1c9c:	55 0b       	sbc	r21, r21
    1c9e:	bb 27       	eor	r27, r27
    1ca0:	aa 27       	eor	r26, r26
    1ca2:	62 17       	cp	r22, r18
    1ca4:	73 07       	cpc	r23, r19
    1ca6:	84 07       	cpc	r24, r20
    1ca8:	38 f0       	brcs	.+14     	; 0x1cb8 <__divsf3_pse+0x26>
    1caa:	9f 5f       	subi	r25, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	44 1f       	adc	r20, r20
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	a9 f3       	breq	.-22     	; 0x1ca2 <__divsf3_pse+0x10>
    1cb8:	35 d0       	rcall	.+106    	; 0x1d24 <__divsf3_pse+0x92>
    1cba:	0e 2e       	mov	r0, r30
    1cbc:	3a f0       	brmi	.+14     	; 0x1ccc <__divsf3_pse+0x3a>
    1cbe:	e0 e8       	ldi	r30, 0x80	; 128
    1cc0:	32 d0       	rcall	.+100    	; 0x1d26 <__divsf3_pse+0x94>
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	50 40       	sbci	r21, 0x00	; 0
    1cc6:	e6 95       	lsr	r30
    1cc8:	00 1c       	adc	r0, r0
    1cca:	ca f7       	brpl	.-14     	; 0x1cbe <__divsf3_pse+0x2c>
    1ccc:	2b d0       	rcall	.+86     	; 0x1d24 <__divsf3_pse+0x92>
    1cce:	fe 2f       	mov	r31, r30
    1cd0:	29 d0       	rcall	.+82     	; 0x1d24 <__divsf3_pse+0x92>
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	26 17       	cp	r18, r22
    1cdc:	37 07       	cpc	r19, r23
    1cde:	48 07       	cpc	r20, r24
    1ce0:	ab 07       	cpc	r26, r27
    1ce2:	b0 e8       	ldi	r27, 0x80	; 128
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <__divsf3_pse+0x56>
    1ce6:	bb 0b       	sbc	r27, r27
    1ce8:	80 2d       	mov	r24, r0
    1cea:	bf 01       	movw	r22, r30
    1cec:	ff 27       	eor	r31, r31
    1cee:	93 58       	subi	r25, 0x83	; 131
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	3a f0       	brmi	.+14     	; 0x1d02 <__divsf3_pse+0x70>
    1cf4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	78 f0       	brcs	.+30     	; 0x1d18 <__divsf3_pse+0x86>
    1cfa:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__fp_inf>
    1cfe:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__fp_szero>
    1d02:	5f 3f       	cpi	r21, 0xFF	; 255
    1d04:	e4 f3       	brlt	.-8      	; 0x1cfe <__divsf3_pse+0x6c>
    1d06:	98 3e       	cpi	r25, 0xE8	; 232
    1d08:	d4 f3       	brlt	.-12     	; 0x1cfe <__divsf3_pse+0x6c>
    1d0a:	86 95       	lsr	r24
    1d0c:	77 95       	ror	r23
    1d0e:	67 95       	ror	r22
    1d10:	b7 95       	ror	r27
    1d12:	f7 95       	ror	r31
    1d14:	9f 5f       	subi	r25, 0xFF	; 255
    1d16:	c9 f7       	brne	.-14     	; 0x1d0a <__divsf3_pse+0x78>
    1d18:	88 0f       	add	r24, r24
    1d1a:	91 1d       	adc	r25, r1
    1d1c:	96 95       	lsr	r25
    1d1e:	87 95       	ror	r24
    1d20:	97 f9       	bld	r25, 7
    1d22:	08 95       	ret
    1d24:	e1 e0       	ldi	r30, 0x01	; 1
    1d26:	66 0f       	add	r22, r22
    1d28:	77 1f       	adc	r23, r23
    1d2a:	88 1f       	adc	r24, r24
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	62 17       	cp	r22, r18
    1d30:	73 07       	cpc	r23, r19
    1d32:	84 07       	cpc	r24, r20
    1d34:	ba 07       	cpc	r27, r26
    1d36:	20 f0       	brcs	.+8      	; 0x1d40 <__divsf3_pse+0xae>
    1d38:	62 1b       	sub	r22, r18
    1d3a:	73 0b       	sbc	r23, r19
    1d3c:	84 0b       	sbc	r24, r20
    1d3e:	ba 0b       	sbc	r27, r26
    1d40:	ee 1f       	adc	r30, r30
    1d42:	88 f7       	brcc	.-30     	; 0x1d26 <__divsf3_pse+0x94>
    1d44:	e0 95       	com	r30
    1d46:	08 95       	ret

00001d48 <__fixsfsi>:
    1d48:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__fixunssfsi>
    1d4c:	68 94       	set
    1d4e:	b1 11       	cpse	r27, r1
    1d50:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__fp_szero>
    1d54:	08 95       	ret

00001d56 <__fixunssfsi>:
    1d56:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__fp_splitA>
    1d5a:	88 f0       	brcs	.+34     	; 0x1d7e <__fixunssfsi+0x28>
    1d5c:	9f 57       	subi	r25, 0x7F	; 127
    1d5e:	98 f0       	brcs	.+38     	; 0x1d86 <__fixunssfsi+0x30>
    1d60:	b9 2f       	mov	r27, r25
    1d62:	99 27       	eor	r25, r25
    1d64:	b7 51       	subi	r27, 0x17	; 23
    1d66:	b0 f0       	brcs	.+44     	; 0x1d94 <__fixunssfsi+0x3e>
    1d68:	e1 f0       	breq	.+56     	; 0x1da2 <__fixunssfsi+0x4c>
    1d6a:	66 0f       	add	r22, r22
    1d6c:	77 1f       	adc	r23, r23
    1d6e:	88 1f       	adc	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	1a f0       	brmi	.+6      	; 0x1d7a <__fixunssfsi+0x24>
    1d74:	ba 95       	dec	r27
    1d76:	c9 f7       	brne	.-14     	; 0x1d6a <__fixunssfsi+0x14>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <__fixunssfsi+0x4c>
    1d7a:	b1 30       	cpi	r27, 0x01	; 1
    1d7c:	91 f0       	breq	.+36     	; 0x1da2 <__fixunssfsi+0x4c>
    1d7e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__fp_zero>
    1d82:	b1 e0       	ldi	r27, 0x01	; 1
    1d84:	08 95       	ret
    1d86:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__fp_zero>
    1d8a:	67 2f       	mov	r22, r23
    1d8c:	78 2f       	mov	r23, r24
    1d8e:	88 27       	eor	r24, r24
    1d90:	b8 5f       	subi	r27, 0xF8	; 248
    1d92:	39 f0       	breq	.+14     	; 0x1da2 <__fixunssfsi+0x4c>
    1d94:	b9 3f       	cpi	r27, 0xF9	; 249
    1d96:	cc f3       	brlt	.-14     	; 0x1d8a <__fixunssfsi+0x34>
    1d98:	86 95       	lsr	r24
    1d9a:	77 95       	ror	r23
    1d9c:	67 95       	ror	r22
    1d9e:	b3 95       	inc	r27
    1da0:	d9 f7       	brne	.-10     	; 0x1d98 <__fixunssfsi+0x42>
    1da2:	3e f4       	brtc	.+14     	; 0x1db2 <__fixunssfsi+0x5c>
    1da4:	90 95       	com	r25
    1da6:	80 95       	com	r24
    1da8:	70 95       	com	r23
    1daa:	61 95       	neg	r22
    1dac:	7f 4f       	sbci	r23, 0xFF	; 255
    1dae:	8f 4f       	sbci	r24, 0xFF	; 255
    1db0:	9f 4f       	sbci	r25, 0xFF	; 255
    1db2:	08 95       	ret

00001db4 <__floatunsisf>:
    1db4:	e8 94       	clt
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <__floatsisf+0x12>

00001db8 <__floatsisf>:
    1db8:	97 fb       	bst	r25, 7
    1dba:	3e f4       	brtc	.+14     	; 0x1dca <__floatsisf+0x12>
    1dbc:	90 95       	com	r25
    1dbe:	80 95       	com	r24
    1dc0:	70 95       	com	r23
    1dc2:	61 95       	neg	r22
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	99 23       	and	r25, r25
    1dcc:	a9 f0       	breq	.+42     	; 0x1df8 <__floatsisf+0x40>
    1dce:	f9 2f       	mov	r31, r25
    1dd0:	96 e9       	ldi	r25, 0x96	; 150
    1dd2:	bb 27       	eor	r27, r27
    1dd4:	93 95       	inc	r25
    1dd6:	f6 95       	lsr	r31
    1dd8:	87 95       	ror	r24
    1dda:	77 95       	ror	r23
    1ddc:	67 95       	ror	r22
    1dde:	b7 95       	ror	r27
    1de0:	f1 11       	cpse	r31, r1
    1de2:	f8 cf       	rjmp	.-16     	; 0x1dd4 <__floatsisf+0x1c>
    1de4:	fa f4       	brpl	.+62     	; 0x1e24 <__floatsisf+0x6c>
    1de6:	bb 0f       	add	r27, r27
    1de8:	11 f4       	brne	.+4      	; 0x1dee <__floatsisf+0x36>
    1dea:	60 ff       	sbrs	r22, 0
    1dec:	1b c0       	rjmp	.+54     	; 0x1e24 <__floatsisf+0x6c>
    1dee:	6f 5f       	subi	r22, 0xFF	; 255
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	8f 4f       	sbci	r24, 0xFF	; 255
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	16 c0       	rjmp	.+44     	; 0x1e24 <__floatsisf+0x6c>
    1df8:	88 23       	and	r24, r24
    1dfa:	11 f0       	breq	.+4      	; 0x1e00 <__floatsisf+0x48>
    1dfc:	96 e9       	ldi	r25, 0x96	; 150
    1dfe:	11 c0       	rjmp	.+34     	; 0x1e22 <__floatsisf+0x6a>
    1e00:	77 23       	and	r23, r23
    1e02:	21 f0       	breq	.+8      	; 0x1e0c <__floatsisf+0x54>
    1e04:	9e e8       	ldi	r25, 0x8E	; 142
    1e06:	87 2f       	mov	r24, r23
    1e08:	76 2f       	mov	r23, r22
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <__floatsisf+0x5e>
    1e0c:	66 23       	and	r22, r22
    1e0e:	71 f0       	breq	.+28     	; 0x1e2c <__floatsisf+0x74>
    1e10:	96 e8       	ldi	r25, 0x86	; 134
    1e12:	86 2f       	mov	r24, r22
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	2a f0       	brmi	.+10     	; 0x1e24 <__floatsisf+0x6c>
    1e1a:	9a 95       	dec	r25
    1e1c:	66 0f       	add	r22, r22
    1e1e:	77 1f       	adc	r23, r23
    1e20:	88 1f       	adc	r24, r24
    1e22:	da f7       	brpl	.-10     	; 0x1e1a <__floatsisf+0x62>
    1e24:	88 0f       	add	r24, r24
    1e26:	96 95       	lsr	r25
    1e28:	87 95       	ror	r24
    1e2a:	97 f9       	bld	r25, 7
    1e2c:	08 95       	ret

00001e2e <__fp_inf>:
    1e2e:	97 f9       	bld	r25, 7
    1e30:	9f 67       	ori	r25, 0x7F	; 127
    1e32:	80 e8       	ldi	r24, 0x80	; 128
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	08 95       	ret

00001e3a <__fp_nan>:
    1e3a:	9f ef       	ldi	r25, 0xFF	; 255
    1e3c:	80 ec       	ldi	r24, 0xC0	; 192
    1e3e:	08 95       	ret

00001e40 <__fp_pscA>:
    1e40:	00 24       	eor	r0, r0
    1e42:	0a 94       	dec	r0
    1e44:	16 16       	cp	r1, r22
    1e46:	17 06       	cpc	r1, r23
    1e48:	18 06       	cpc	r1, r24
    1e4a:	09 06       	cpc	r0, r25
    1e4c:	08 95       	ret

00001e4e <__fp_pscB>:
    1e4e:	00 24       	eor	r0, r0
    1e50:	0a 94       	dec	r0
    1e52:	12 16       	cp	r1, r18
    1e54:	13 06       	cpc	r1, r19
    1e56:	14 06       	cpc	r1, r20
    1e58:	05 06       	cpc	r0, r21
    1e5a:	08 95       	ret

00001e5c <__fp_round>:
    1e5c:	09 2e       	mov	r0, r25
    1e5e:	03 94       	inc	r0
    1e60:	00 0c       	add	r0, r0
    1e62:	11 f4       	brne	.+4      	; 0x1e68 <__fp_round+0xc>
    1e64:	88 23       	and	r24, r24
    1e66:	52 f0       	brmi	.+20     	; 0x1e7c <__fp_round+0x20>
    1e68:	bb 0f       	add	r27, r27
    1e6a:	40 f4       	brcc	.+16     	; 0x1e7c <__fp_round+0x20>
    1e6c:	bf 2b       	or	r27, r31
    1e6e:	11 f4       	brne	.+4      	; 0x1e74 <__fp_round+0x18>
    1e70:	60 ff       	sbrs	r22, 0
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <__fp_round+0x20>
    1e74:	6f 5f       	subi	r22, 0xFF	; 255
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	08 95       	ret

00001e7e <__fp_split3>:
    1e7e:	57 fd       	sbrc	r21, 7
    1e80:	90 58       	subi	r25, 0x80	; 128
    1e82:	44 0f       	add	r20, r20
    1e84:	55 1f       	adc	r21, r21
    1e86:	59 f0       	breq	.+22     	; 0x1e9e <__fp_splitA+0x10>
    1e88:	5f 3f       	cpi	r21, 0xFF	; 255
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <__fp_splitA+0x1a>
    1e8c:	47 95       	ror	r20

00001e8e <__fp_splitA>:
    1e8e:	88 0f       	add	r24, r24
    1e90:	97 fb       	bst	r25, 7
    1e92:	99 1f       	adc	r25, r25
    1e94:	61 f0       	breq	.+24     	; 0x1eae <__fp_splitA+0x20>
    1e96:	9f 3f       	cpi	r25, 0xFF	; 255
    1e98:	79 f0       	breq	.+30     	; 0x1eb8 <__fp_splitA+0x2a>
    1e9a:	87 95       	ror	r24
    1e9c:	08 95       	ret
    1e9e:	12 16       	cp	r1, r18
    1ea0:	13 06       	cpc	r1, r19
    1ea2:	14 06       	cpc	r1, r20
    1ea4:	55 1f       	adc	r21, r21
    1ea6:	f2 cf       	rjmp	.-28     	; 0x1e8c <__fp_split3+0xe>
    1ea8:	46 95       	lsr	r20
    1eaa:	f1 df       	rcall	.-30     	; 0x1e8e <__fp_splitA>
    1eac:	08 c0       	rjmp	.+16     	; 0x1ebe <__fp_splitA+0x30>
    1eae:	16 16       	cp	r1, r22
    1eb0:	17 06       	cpc	r1, r23
    1eb2:	18 06       	cpc	r1, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	f1 cf       	rjmp	.-30     	; 0x1e9a <__fp_splitA+0xc>
    1eb8:	86 95       	lsr	r24
    1eba:	71 05       	cpc	r23, r1
    1ebc:	61 05       	cpc	r22, r1
    1ebe:	08 94       	sec
    1ec0:	08 95       	ret

00001ec2 <__fp_zero>:
    1ec2:	e8 94       	clt

00001ec4 <__fp_szero>:
    1ec4:	bb 27       	eor	r27, r27
    1ec6:	66 27       	eor	r22, r22
    1ec8:	77 27       	eor	r23, r23
    1eca:	cb 01       	movw	r24, r22
    1ecc:	97 f9       	bld	r25, 7
    1ece:	08 95       	ret

00001ed0 <__mulsf3>:
    1ed0:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3x>
    1ed4:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_round>
    1ed8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__fp_pscA>
    1edc:	38 f0       	brcs	.+14     	; 0x1eec <__mulsf3+0x1c>
    1ede:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscB>
    1ee2:	20 f0       	brcs	.+8      	; 0x1eec <__mulsf3+0x1c>
    1ee4:	95 23       	and	r25, r21
    1ee6:	11 f0       	breq	.+4      	; 0x1eec <__mulsf3+0x1c>
    1ee8:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__fp_inf>
    1eec:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_nan>
    1ef0:	11 24       	eor	r1, r1
    1ef2:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__fp_szero>

00001ef6 <__mulsf3x>:
    1ef6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_split3>
    1efa:	70 f3       	brcs	.-36     	; 0x1ed8 <__mulsf3+0x8>

00001efc <__mulsf3_pse>:
    1efc:	95 9f       	mul	r25, r21
    1efe:	c1 f3       	breq	.-16     	; 0x1ef0 <__mulsf3+0x20>
    1f00:	95 0f       	add	r25, r21
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	55 1f       	adc	r21, r21
    1f06:	62 9f       	mul	r22, r18
    1f08:	f0 01       	movw	r30, r0
    1f0a:	72 9f       	mul	r23, r18
    1f0c:	bb 27       	eor	r27, r27
    1f0e:	f0 0d       	add	r31, r0
    1f10:	b1 1d       	adc	r27, r1
    1f12:	63 9f       	mul	r22, r19
    1f14:	aa 27       	eor	r26, r26
    1f16:	f0 0d       	add	r31, r0
    1f18:	b1 1d       	adc	r27, r1
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	64 9f       	mul	r22, r20
    1f1e:	66 27       	eor	r22, r22
    1f20:	b0 0d       	add	r27, r0
    1f22:	a1 1d       	adc	r26, r1
    1f24:	66 1f       	adc	r22, r22
    1f26:	82 9f       	mul	r24, r18
    1f28:	22 27       	eor	r18, r18
    1f2a:	b0 0d       	add	r27, r0
    1f2c:	a1 1d       	adc	r26, r1
    1f2e:	62 1f       	adc	r22, r18
    1f30:	73 9f       	mul	r23, r19
    1f32:	b0 0d       	add	r27, r0
    1f34:	a1 1d       	adc	r26, r1
    1f36:	62 1f       	adc	r22, r18
    1f38:	83 9f       	mul	r24, r19
    1f3a:	a0 0d       	add	r26, r0
    1f3c:	61 1d       	adc	r22, r1
    1f3e:	22 1f       	adc	r18, r18
    1f40:	74 9f       	mul	r23, r20
    1f42:	33 27       	eor	r19, r19
    1f44:	a0 0d       	add	r26, r0
    1f46:	61 1d       	adc	r22, r1
    1f48:	23 1f       	adc	r18, r19
    1f4a:	84 9f       	mul	r24, r20
    1f4c:	60 0d       	add	r22, r0
    1f4e:	21 1d       	adc	r18, r1
    1f50:	82 2f       	mov	r24, r18
    1f52:	76 2f       	mov	r23, r22
    1f54:	6a 2f       	mov	r22, r26
    1f56:	11 24       	eor	r1, r1
    1f58:	9f 57       	subi	r25, 0x7F	; 127
    1f5a:	50 40       	sbci	r21, 0x00	; 0
    1f5c:	9a f0       	brmi	.+38     	; 0x1f84 <__mulsf3_pse+0x88>
    1f5e:	f1 f0       	breq	.+60     	; 0x1f9c <__mulsf3_pse+0xa0>
    1f60:	88 23       	and	r24, r24
    1f62:	4a f0       	brmi	.+18     	; 0x1f76 <__mulsf3_pse+0x7a>
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	bb 1f       	adc	r27, r27
    1f6a:	66 1f       	adc	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	88 1f       	adc	r24, r24
    1f70:	91 50       	subi	r25, 0x01	; 1
    1f72:	50 40       	sbci	r21, 0x00	; 0
    1f74:	a9 f7       	brne	.-22     	; 0x1f60 <__mulsf3_pse+0x64>
    1f76:	9e 3f       	cpi	r25, 0xFE	; 254
    1f78:	51 05       	cpc	r21, r1
    1f7a:	80 f0       	brcs	.+32     	; 0x1f9c <__mulsf3_pse+0xa0>
    1f7c:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__fp_inf>
    1f80:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__fp_szero>
    1f84:	5f 3f       	cpi	r21, 0xFF	; 255
    1f86:	e4 f3       	brlt	.-8      	; 0x1f80 <__mulsf3_pse+0x84>
    1f88:	98 3e       	cpi	r25, 0xE8	; 232
    1f8a:	d4 f3       	brlt	.-12     	; 0x1f80 <__mulsf3_pse+0x84>
    1f8c:	86 95       	lsr	r24
    1f8e:	77 95       	ror	r23
    1f90:	67 95       	ror	r22
    1f92:	b7 95       	ror	r27
    1f94:	f7 95       	ror	r31
    1f96:	e7 95       	ror	r30
    1f98:	9f 5f       	subi	r25, 0xFF	; 255
    1f9a:	c1 f7       	brne	.-16     	; 0x1f8c <__mulsf3_pse+0x90>
    1f9c:	fe 2b       	or	r31, r30
    1f9e:	88 0f       	add	r24, r24
    1fa0:	91 1d       	adc	r25, r1
    1fa2:	96 95       	lsr	r25
    1fa4:	87 95       	ror	r24
    1fa6:	97 f9       	bld	r25, 7
    1fa8:	08 95       	ret

00001faa <__divmodhi4>:
    1faa:	97 fb       	bst	r25, 7
    1fac:	07 2e       	mov	r0, r23
    1fae:	16 f4       	brtc	.+4      	; 0x1fb4 <__divmodhi4+0xa>
    1fb0:	00 94       	com	r0
    1fb2:	07 d0       	rcall	.+14     	; 0x1fc2 <__divmodhi4_neg1>
    1fb4:	77 fd       	sbrc	r23, 7
    1fb6:	09 d0       	rcall	.+18     	; 0x1fca <__divmodhi4_neg2>
    1fb8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__udivmodhi4>
    1fbc:	07 fc       	sbrc	r0, 7
    1fbe:	05 d0       	rcall	.+10     	; 0x1fca <__divmodhi4_neg2>
    1fc0:	3e f4       	brtc	.+14     	; 0x1fd0 <__divmodhi4_exit>

00001fc2 <__divmodhi4_neg1>:
    1fc2:	90 95       	com	r25
    1fc4:	81 95       	neg	r24
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__divmodhi4_neg2>:
    1fca:	70 95       	com	r23
    1fcc:	61 95       	neg	r22
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255

00001fd0 <__divmodhi4_exit>:
    1fd0:	08 95       	ret

00001fd2 <__tablejump2__>:
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	05 90       	lpm	r0, Z+
    1fd8:	f4 91       	lpm	r31, Z
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	09 94       	ijmp

00001fde <__udivmodhi4>:
    1fde:	aa 1b       	sub	r26, r26
    1fe0:	bb 1b       	sub	r27, r27
    1fe2:	51 e1       	ldi	r21, 0x11	; 17
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <__udivmodhi4_ep>

00001fe6 <__udivmodhi4_loop>:
    1fe6:	aa 1f       	adc	r26, r26
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	a6 17       	cp	r26, r22
    1fec:	b7 07       	cpc	r27, r23
    1fee:	10 f0       	brcs	.+4      	; 0x1ff4 <__udivmodhi4_ep>
    1ff0:	a6 1b       	sub	r26, r22
    1ff2:	b7 0b       	sbc	r27, r23

00001ff4 <__udivmodhi4_ep>:
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	5a 95       	dec	r21
    1ffa:	a9 f7       	brne	.-22     	; 0x1fe6 <__udivmodhi4_loop>
    1ffc:	80 95       	com	r24
    1ffe:	90 95       	com	r25
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	08 95       	ret

00002006 <dtostrf>:
    2006:	ef 92       	push	r14
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	e8 01       	movw	r28, r16
    2012:	47 fd       	sbrc	r20, 7
    2014:	02 c0       	rjmp	.+4      	; 0x201a <dtostrf+0x14>
    2016:	34 e0       	ldi	r19, 0x04	; 4
    2018:	01 c0       	rjmp	.+2      	; 0x201c <dtostrf+0x16>
    201a:	34 e1       	ldi	r19, 0x14	; 20
    201c:	04 2e       	mov	r0, r20
    201e:	00 0c       	add	r0, r0
    2020:	55 0b       	sbc	r21, r21
    2022:	57 ff       	sbrs	r21, 7
    2024:	03 c0       	rjmp	.+6      	; 0x202c <dtostrf+0x26>
    2026:	51 95       	neg	r21
    2028:	41 95       	neg	r20
    202a:	51 09       	sbc	r21, r1
    202c:	e3 2e       	mov	r14, r19
    202e:	02 2f       	mov	r16, r18
    2030:	24 2f       	mov	r18, r20
    2032:	ae 01       	movw	r20, r28
    2034:	0e 94 73 13 	call	0x26e6	; 0x26e6 <dtoa_prf>
    2038:	ce 01       	movw	r24, r28
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ef 90       	pop	r14
    2044:	08 95       	ret

00002046 <malloc>:
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	91 05       	cpc	r25, r1
    2052:	10 f4       	brcc	.+4      	; 0x2058 <malloc+0x12>
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <__flp>
    205c:	f0 91 c5 05 	lds	r31, 0x05C5	; 0x8005c5 <__flp+0x1>
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	30 97       	sbiw	r30, 0x00	; 0
    206a:	19 f1       	breq	.+70     	; 0x20b2 <malloc+0x6c>
    206c:	40 81       	ld	r20, Z
    206e:	51 81       	ldd	r21, Z+1	; 0x01
    2070:	02 81       	ldd	r16, Z+2	; 0x02
    2072:	13 81       	ldd	r17, Z+3	; 0x03
    2074:	48 17       	cp	r20, r24
    2076:	59 07       	cpc	r21, r25
    2078:	c8 f0       	brcs	.+50     	; 0x20ac <malloc+0x66>
    207a:	84 17       	cp	r24, r20
    207c:	95 07       	cpc	r25, r21
    207e:	69 f4       	brne	.+26     	; 0x209a <malloc+0x54>
    2080:	10 97       	sbiw	r26, 0x00	; 0
    2082:	31 f0       	breq	.+12     	; 0x2090 <malloc+0x4a>
    2084:	12 96       	adiw	r26, 0x02	; 2
    2086:	0c 93       	st	X, r16
    2088:	12 97       	sbiw	r26, 0x02	; 2
    208a:	13 96       	adiw	r26, 0x03	; 3
    208c:	1c 93       	st	X, r17
    208e:	27 c0       	rjmp	.+78     	; 0x20de <malloc+0x98>
    2090:	00 93 c4 05 	sts	0x05C4, r16	; 0x8005c4 <__flp>
    2094:	10 93 c5 05 	sts	0x05C5, r17	; 0x8005c5 <__flp+0x1>
    2098:	22 c0       	rjmp	.+68     	; 0x20de <malloc+0x98>
    209a:	21 15       	cp	r18, r1
    209c:	31 05       	cpc	r19, r1
    209e:	19 f0       	breq	.+6      	; 0x20a6 <malloc+0x60>
    20a0:	42 17       	cp	r20, r18
    20a2:	53 07       	cpc	r21, r19
    20a4:	18 f4       	brcc	.+6      	; 0x20ac <malloc+0x66>
    20a6:	9a 01       	movw	r18, r20
    20a8:	bd 01       	movw	r22, r26
    20aa:	ef 01       	movw	r28, r30
    20ac:	df 01       	movw	r26, r30
    20ae:	f8 01       	movw	r30, r16
    20b0:	db cf       	rjmp	.-74     	; 0x2068 <malloc+0x22>
    20b2:	21 15       	cp	r18, r1
    20b4:	31 05       	cpc	r19, r1
    20b6:	f9 f0       	breq	.+62     	; 0x20f6 <malloc+0xb0>
    20b8:	28 1b       	sub	r18, r24
    20ba:	39 0b       	sbc	r19, r25
    20bc:	24 30       	cpi	r18, 0x04	; 4
    20be:	31 05       	cpc	r19, r1
    20c0:	80 f4       	brcc	.+32     	; 0x20e2 <malloc+0x9c>
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	9b 81       	ldd	r25, Y+3	; 0x03
    20c6:	61 15       	cp	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <malloc+0x8e>
    20cc:	fb 01       	movw	r30, r22
    20ce:	93 83       	std	Z+3, r25	; 0x03
    20d0:	82 83       	std	Z+2, r24	; 0x02
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <malloc+0x96>
    20d4:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <__flp+0x1>
    20d8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <__flp>
    20dc:	fe 01       	movw	r30, r28
    20de:	32 96       	adiw	r30, 0x02	; 2
    20e0:	44 c0       	rjmp	.+136    	; 0x216a <malloc+0x124>
    20e2:	fe 01       	movw	r30, r28
    20e4:	e2 0f       	add	r30, r18
    20e6:	f3 1f       	adc	r31, r19
    20e8:	81 93       	st	Z+, r24
    20ea:	91 93       	st	Z+, r25
    20ec:	22 50       	subi	r18, 0x02	; 2
    20ee:	31 09       	sbc	r19, r1
    20f0:	39 83       	std	Y+1, r19	; 0x01
    20f2:	28 83       	st	Y, r18
    20f4:	3a c0       	rjmp	.+116    	; 0x216a <malloc+0x124>
    20f6:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <__brkval>
    20fa:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <__brkval+0x1>
    20fe:	23 2b       	or	r18, r19
    2100:	41 f4       	brne	.+16     	; 0x2112 <malloc+0xcc>
    2102:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    2106:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    210a:	30 93 c3 05 	sts	0x05C3, r19	; 0x8005c3 <__brkval+0x1>
    210e:	20 93 c2 05 	sts	0x05C2, r18	; 0x8005c2 <__brkval>
    2112:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2116:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    211a:	21 15       	cp	r18, r1
    211c:	31 05       	cpc	r19, r1
    211e:	41 f4       	brne	.+16     	; 0x2130 <malloc+0xea>
    2120:	2d b7       	in	r18, 0x3d	; 61
    2122:	3e b7       	in	r19, 0x3e	; 62
    2124:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    2128:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    212c:	24 1b       	sub	r18, r20
    212e:	35 0b       	sbc	r19, r21
    2130:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <__brkval>
    2134:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <__brkval+0x1>
    2138:	e2 17       	cp	r30, r18
    213a:	f3 07       	cpc	r31, r19
    213c:	a0 f4       	brcc	.+40     	; 0x2166 <malloc+0x120>
    213e:	2e 1b       	sub	r18, r30
    2140:	3f 0b       	sbc	r19, r31
    2142:	28 17       	cp	r18, r24
    2144:	39 07       	cpc	r19, r25
    2146:	78 f0       	brcs	.+30     	; 0x2166 <malloc+0x120>
    2148:	ac 01       	movw	r20, r24
    214a:	4e 5f       	subi	r20, 0xFE	; 254
    214c:	5f 4f       	sbci	r21, 0xFF	; 255
    214e:	24 17       	cp	r18, r20
    2150:	35 07       	cpc	r19, r21
    2152:	48 f0       	brcs	.+18     	; 0x2166 <malloc+0x120>
    2154:	4e 0f       	add	r20, r30
    2156:	5f 1f       	adc	r21, r31
    2158:	50 93 c3 05 	sts	0x05C3, r21	; 0x8005c3 <__brkval+0x1>
    215c:	40 93 c2 05 	sts	0x05C2, r20	; 0x8005c2 <__brkval>
    2160:	81 93       	st	Z+, r24
    2162:	91 93       	st	Z+, r25
    2164:	02 c0       	rjmp	.+4      	; 0x216a <malloc+0x124>
    2166:	e0 e0       	ldi	r30, 0x00	; 0
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	cf 01       	movw	r24, r30
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <free>:
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	09 f4       	brne	.+2      	; 0x2180 <free+0xa>
    217e:	81 c0       	rjmp	.+258    	; 0x2282 <free+0x10c>
    2180:	fc 01       	movw	r30, r24
    2182:	32 97       	sbiw	r30, 0x02	; 2
    2184:	13 82       	std	Z+3, r1	; 0x03
    2186:	12 82       	std	Z+2, r1	; 0x02
    2188:	a0 91 c4 05 	lds	r26, 0x05C4	; 0x8005c4 <__flp>
    218c:	b0 91 c5 05 	lds	r27, 0x05C5	; 0x8005c5 <__flp+0x1>
    2190:	10 97       	sbiw	r26, 0x00	; 0
    2192:	81 f4       	brne	.+32     	; 0x21b4 <free+0x3e>
    2194:	20 81       	ld	r18, Z
    2196:	31 81       	ldd	r19, Z+1	; 0x01
    2198:	82 0f       	add	r24, r18
    219a:	93 1f       	adc	r25, r19
    219c:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <__brkval>
    21a0:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <__brkval+0x1>
    21a4:	28 17       	cp	r18, r24
    21a6:	39 07       	cpc	r19, r25
    21a8:	51 f5       	brne	.+84     	; 0x21fe <free+0x88>
    21aa:	f0 93 c3 05 	sts	0x05C3, r31	; 0x8005c3 <__brkval+0x1>
    21ae:	e0 93 c2 05 	sts	0x05C2, r30	; 0x8005c2 <__brkval>
    21b2:	67 c0       	rjmp	.+206    	; 0x2282 <free+0x10c>
    21b4:	ed 01       	movw	r28, r26
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	ce 17       	cp	r28, r30
    21bc:	df 07       	cpc	r29, r31
    21be:	40 f4       	brcc	.+16     	; 0x21d0 <free+0x5a>
    21c0:	4a 81       	ldd	r20, Y+2	; 0x02
    21c2:	5b 81       	ldd	r21, Y+3	; 0x03
    21c4:	9e 01       	movw	r18, r28
    21c6:	41 15       	cp	r20, r1
    21c8:	51 05       	cpc	r21, r1
    21ca:	f1 f0       	breq	.+60     	; 0x2208 <free+0x92>
    21cc:	ea 01       	movw	r28, r20
    21ce:	f5 cf       	rjmp	.-22     	; 0x21ba <free+0x44>
    21d0:	d3 83       	std	Z+3, r29	; 0x03
    21d2:	c2 83       	std	Z+2, r28	; 0x02
    21d4:	40 81       	ld	r20, Z
    21d6:	51 81       	ldd	r21, Z+1	; 0x01
    21d8:	84 0f       	add	r24, r20
    21da:	95 1f       	adc	r25, r21
    21dc:	c8 17       	cp	r28, r24
    21de:	d9 07       	cpc	r29, r25
    21e0:	59 f4       	brne	.+22     	; 0x21f8 <free+0x82>
    21e2:	88 81       	ld	r24, Y
    21e4:	99 81       	ldd	r25, Y+1	; 0x01
    21e6:	84 0f       	add	r24, r20
    21e8:	95 1f       	adc	r25, r21
    21ea:	02 96       	adiw	r24, 0x02	; 2
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	93 83       	std	Z+3, r25	; 0x03
    21f6:	82 83       	std	Z+2, r24	; 0x02
    21f8:	21 15       	cp	r18, r1
    21fa:	31 05       	cpc	r19, r1
    21fc:	29 f4       	brne	.+10     	; 0x2208 <free+0x92>
    21fe:	f0 93 c5 05 	sts	0x05C5, r31	; 0x8005c5 <__flp+0x1>
    2202:	e0 93 c4 05 	sts	0x05C4, r30	; 0x8005c4 <__flp>
    2206:	3d c0       	rjmp	.+122    	; 0x2282 <free+0x10c>
    2208:	e9 01       	movw	r28, r18
    220a:	fb 83       	std	Y+3, r31	; 0x03
    220c:	ea 83       	std	Y+2, r30	; 0x02
    220e:	49 91       	ld	r20, Y+
    2210:	59 91       	ld	r21, Y+
    2212:	c4 0f       	add	r28, r20
    2214:	d5 1f       	adc	r29, r21
    2216:	ec 17       	cp	r30, r28
    2218:	fd 07       	cpc	r31, r29
    221a:	61 f4       	brne	.+24     	; 0x2234 <free+0xbe>
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	84 0f       	add	r24, r20
    2222:	95 1f       	adc	r25, r21
    2224:	02 96       	adiw	r24, 0x02	; 2
    2226:	e9 01       	movw	r28, r18
    2228:	99 83       	std	Y+1, r25	; 0x01
    222a:	88 83       	st	Y, r24
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	9b 83       	std	Y+3, r25	; 0x03
    2232:	8a 83       	std	Y+2, r24	; 0x02
    2234:	e0 e0       	ldi	r30, 0x00	; 0
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	12 96       	adiw	r26, 0x02	; 2
    223a:	8d 91       	ld	r24, X+
    223c:	9c 91       	ld	r25, X
    223e:	13 97       	sbiw	r26, 0x03	; 3
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	19 f0       	breq	.+6      	; 0x224a <free+0xd4>
    2244:	fd 01       	movw	r30, r26
    2246:	dc 01       	movw	r26, r24
    2248:	f7 cf       	rjmp	.-18     	; 0x2238 <free+0xc2>
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	11 97       	sbiw	r26, 0x01	; 1
    2250:	9d 01       	movw	r18, r26
    2252:	2e 5f       	subi	r18, 0xFE	; 254
    2254:	3f 4f       	sbci	r19, 0xFF	; 255
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <__brkval>
    225e:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <__brkval+0x1>
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	69 f4       	brne	.+26     	; 0x2282 <free+0x10c>
    2268:	30 97       	sbiw	r30, 0x00	; 0
    226a:	29 f4       	brne	.+10     	; 0x2276 <free+0x100>
    226c:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <__flp+0x1>
    2270:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <__flp>
    2274:	02 c0       	rjmp	.+4      	; 0x227a <free+0x104>
    2276:	13 82       	std	Z+3, r1	; 0x03
    2278:	12 82       	std	Z+2, r1	; 0x02
    227a:	b0 93 c3 05 	sts	0x05C3, r27	; 0x8005c3 <__brkval+0x1>
    227e:	a0 93 c2 05 	sts	0x05C2, r26	; 0x8005c2 <__brkval>
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <strcpy>:
    2288:	fb 01       	movw	r30, r22
    228a:	dc 01       	movw	r26, r24
    228c:	01 90       	ld	r0, Z+
    228e:	0d 92       	st	X+, r0
    2290:	00 20       	and	r0, r0
    2292:	e1 f7       	brne	.-8      	; 0x228c <strcpy+0x4>
    2294:	08 95       	ret

00002296 <__itoa_ncheck>:
    2296:	bb 27       	eor	r27, r27
    2298:	4a 30       	cpi	r20, 0x0A	; 10
    229a:	31 f4       	brne	.+12     	; 0x22a8 <__itoa_ncheck+0x12>
    229c:	99 23       	and	r25, r25
    229e:	22 f4       	brpl	.+8      	; 0x22a8 <__itoa_ncheck+0x12>
    22a0:	bd e2       	ldi	r27, 0x2D	; 45
    22a2:	90 95       	com	r25
    22a4:	81 95       	neg	r24
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__utoa_common>

000022ac <__utoa_ncheck>:
    22ac:	bb 27       	eor	r27, r27

000022ae <__utoa_common>:
    22ae:	fb 01       	movw	r30, r22
    22b0:	55 27       	eor	r21, r21
    22b2:	aa 27       	eor	r26, r26
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	aa 1f       	adc	r26, r26
    22ba:	a4 17       	cp	r26, r20
    22bc:	10 f0       	brcs	.+4      	; 0x22c2 <__utoa_common+0x14>
    22be:	a4 1b       	sub	r26, r20
    22c0:	83 95       	inc	r24
    22c2:	50 51       	subi	r21, 0x10	; 16
    22c4:	b9 f7       	brne	.-18     	; 0x22b4 <__utoa_common+0x6>
    22c6:	a0 5d       	subi	r26, 0xD0	; 208
    22c8:	aa 33       	cpi	r26, 0x3A	; 58
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <__utoa_common+0x20>
    22cc:	a9 5d       	subi	r26, 0xD9	; 217
    22ce:	a1 93       	st	Z+, r26
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	79 f7       	brne	.-34     	; 0x22b2 <__utoa_common+0x4>
    22d4:	b1 11       	cpse	r27, r1
    22d6:	b1 93       	st	Z+, r27
    22d8:	11 92       	st	Z+, r1
    22da:	cb 01       	movw	r24, r22
    22dc:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <strrev>

000022e0 <sprintf>:
    22e0:	ae e0       	ldi	r26, 0x0E	; 14
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e6 e7       	ldi	r30, 0x76	; 118
    22e6:	f1 e1       	ldi	r31, 0x11	; 17
    22e8:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x1c>
    22ec:	0d 89       	ldd	r16, Y+21	; 0x15
    22ee:	1e 89       	ldd	r17, Y+22	; 0x16
    22f0:	86 e0       	ldi	r24, 0x06	; 6
    22f2:	8c 83       	std	Y+4, r24	; 0x04
    22f4:	1a 83       	std	Y+2, r17	; 0x02
    22f6:	09 83       	std	Y+1, r16	; 0x01
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	9f e7       	ldi	r25, 0x7F	; 127
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	ae 01       	movw	r20, r28
    2302:	47 5e       	subi	r20, 0xE7	; 231
    2304:	5f 4f       	sbci	r21, 0xFF	; 255
    2306:	6f 89       	ldd	r22, Y+23	; 0x17
    2308:	78 8d       	ldd	r23, Y+24	; 0x18
    230a:	ce 01       	movw	r24, r28
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	0e 94 92 11 	call	0x2324	; 0x2324 <vfprintf>
    2312:	ef 81       	ldd	r30, Y+7	; 0x07
    2314:	f8 85       	ldd	r31, Y+8	; 0x08
    2316:	e0 0f       	add	r30, r16
    2318:	f1 1f       	adc	r31, r17
    231a:	10 82       	st	Z, r1
    231c:	2e 96       	adiw	r28, 0x0e	; 14
    231e:	e4 e0       	ldi	r30, 0x04	; 4
    2320:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x1c>

00002324 <vfprintf>:
    2324:	ab e0       	ldi	r26, 0x0B	; 11
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e8 e9       	ldi	r30, 0x98	; 152
    232a:	f1 e1       	ldi	r31, 0x11	; 17
    232c:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__>
    2330:	6c 01       	movw	r12, r24
    2332:	7b 01       	movw	r14, r22
    2334:	8a 01       	movw	r16, r20
    2336:	fc 01       	movw	r30, r24
    2338:	17 82       	std	Z+7, r1	; 0x07
    233a:	16 82       	std	Z+6, r1	; 0x06
    233c:	83 81       	ldd	r24, Z+3	; 0x03
    233e:	81 ff       	sbrs	r24, 1
    2340:	cc c1       	rjmp	.+920    	; 0x26da <vfprintf+0x3b6>
    2342:	ce 01       	movw	r24, r28
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	3c 01       	movw	r6, r24
    2348:	f6 01       	movw	r30, r12
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	f7 01       	movw	r30, r14
    234e:	93 fd       	sbrc	r25, 3
    2350:	85 91       	lpm	r24, Z+
    2352:	93 ff       	sbrs	r25, 3
    2354:	81 91       	ld	r24, Z+
    2356:	7f 01       	movw	r14, r30
    2358:	88 23       	and	r24, r24
    235a:	09 f4       	brne	.+2      	; 0x235e <vfprintf+0x3a>
    235c:	ba c1       	rjmp	.+884    	; 0x26d2 <vfprintf+0x3ae>
    235e:	85 32       	cpi	r24, 0x25	; 37
    2360:	39 f4       	brne	.+14     	; 0x2370 <vfprintf+0x4c>
    2362:	93 fd       	sbrc	r25, 3
    2364:	85 91       	lpm	r24, Z+
    2366:	93 ff       	sbrs	r25, 3
    2368:	81 91       	ld	r24, Z+
    236a:	7f 01       	movw	r14, r30
    236c:	85 32       	cpi	r24, 0x25	; 37
    236e:	29 f4       	brne	.+10     	; 0x237a <vfprintf+0x56>
    2370:	b6 01       	movw	r22, r12
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    2378:	e7 cf       	rjmp	.-50     	; 0x2348 <vfprintf+0x24>
    237a:	91 2c       	mov	r9, r1
    237c:	21 2c       	mov	r2, r1
    237e:	31 2c       	mov	r3, r1
    2380:	ff e1       	ldi	r31, 0x1F	; 31
    2382:	f3 15       	cp	r31, r3
    2384:	d8 f0       	brcs	.+54     	; 0x23bc <vfprintf+0x98>
    2386:	8b 32       	cpi	r24, 0x2B	; 43
    2388:	79 f0       	breq	.+30     	; 0x23a8 <vfprintf+0x84>
    238a:	38 f4       	brcc	.+14     	; 0x239a <vfprintf+0x76>
    238c:	80 32       	cpi	r24, 0x20	; 32
    238e:	79 f0       	breq	.+30     	; 0x23ae <vfprintf+0x8a>
    2390:	83 32       	cpi	r24, 0x23	; 35
    2392:	a1 f4       	brne	.+40     	; 0x23bc <vfprintf+0x98>
    2394:	23 2d       	mov	r18, r3
    2396:	20 61       	ori	r18, 0x10	; 16
    2398:	1d c0       	rjmp	.+58     	; 0x23d4 <vfprintf+0xb0>
    239a:	8d 32       	cpi	r24, 0x2D	; 45
    239c:	61 f0       	breq	.+24     	; 0x23b6 <vfprintf+0x92>
    239e:	80 33       	cpi	r24, 0x30	; 48
    23a0:	69 f4       	brne	.+26     	; 0x23bc <vfprintf+0x98>
    23a2:	23 2d       	mov	r18, r3
    23a4:	21 60       	ori	r18, 0x01	; 1
    23a6:	16 c0       	rjmp	.+44     	; 0x23d4 <vfprintf+0xb0>
    23a8:	83 2d       	mov	r24, r3
    23aa:	82 60       	ori	r24, 0x02	; 2
    23ac:	38 2e       	mov	r3, r24
    23ae:	e3 2d       	mov	r30, r3
    23b0:	e4 60       	ori	r30, 0x04	; 4
    23b2:	3e 2e       	mov	r3, r30
    23b4:	2a c0       	rjmp	.+84     	; 0x240a <vfprintf+0xe6>
    23b6:	f3 2d       	mov	r31, r3
    23b8:	f8 60       	ori	r31, 0x08	; 8
    23ba:	1d c0       	rjmp	.+58     	; 0x23f6 <vfprintf+0xd2>
    23bc:	37 fc       	sbrc	r3, 7
    23be:	2d c0       	rjmp	.+90     	; 0x241a <vfprintf+0xf6>
    23c0:	20 ed       	ldi	r18, 0xD0	; 208
    23c2:	28 0f       	add	r18, r24
    23c4:	2a 30       	cpi	r18, 0x0A	; 10
    23c6:	40 f0       	brcs	.+16     	; 0x23d8 <vfprintf+0xb4>
    23c8:	8e 32       	cpi	r24, 0x2E	; 46
    23ca:	b9 f4       	brne	.+46     	; 0x23fa <vfprintf+0xd6>
    23cc:	36 fc       	sbrc	r3, 6
    23ce:	81 c1       	rjmp	.+770    	; 0x26d2 <vfprintf+0x3ae>
    23d0:	23 2d       	mov	r18, r3
    23d2:	20 64       	ori	r18, 0x40	; 64
    23d4:	32 2e       	mov	r3, r18
    23d6:	19 c0       	rjmp	.+50     	; 0x240a <vfprintf+0xe6>
    23d8:	36 fe       	sbrs	r3, 6
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <vfprintf+0xc4>
    23dc:	8a e0       	ldi	r24, 0x0A	; 10
    23de:	98 9e       	mul	r9, r24
    23e0:	20 0d       	add	r18, r0
    23e2:	11 24       	eor	r1, r1
    23e4:	92 2e       	mov	r9, r18
    23e6:	11 c0       	rjmp	.+34     	; 0x240a <vfprintf+0xe6>
    23e8:	ea e0       	ldi	r30, 0x0A	; 10
    23ea:	2e 9e       	mul	r2, r30
    23ec:	20 0d       	add	r18, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	22 2e       	mov	r2, r18
    23f2:	f3 2d       	mov	r31, r3
    23f4:	f0 62       	ori	r31, 0x20	; 32
    23f6:	3f 2e       	mov	r3, r31
    23f8:	08 c0       	rjmp	.+16     	; 0x240a <vfprintf+0xe6>
    23fa:	8c 36       	cpi	r24, 0x6C	; 108
    23fc:	21 f4       	brne	.+8      	; 0x2406 <vfprintf+0xe2>
    23fe:	83 2d       	mov	r24, r3
    2400:	80 68       	ori	r24, 0x80	; 128
    2402:	38 2e       	mov	r3, r24
    2404:	02 c0       	rjmp	.+4      	; 0x240a <vfprintf+0xe6>
    2406:	88 36       	cpi	r24, 0x68	; 104
    2408:	41 f4       	brne	.+16     	; 0x241a <vfprintf+0xf6>
    240a:	f7 01       	movw	r30, r14
    240c:	93 fd       	sbrc	r25, 3
    240e:	85 91       	lpm	r24, Z+
    2410:	93 ff       	sbrs	r25, 3
    2412:	81 91       	ld	r24, Z+
    2414:	7f 01       	movw	r14, r30
    2416:	81 11       	cpse	r24, r1
    2418:	b3 cf       	rjmp	.-154    	; 0x2380 <vfprintf+0x5c>
    241a:	98 2f       	mov	r25, r24
    241c:	9f 7d       	andi	r25, 0xDF	; 223
    241e:	95 54       	subi	r25, 0x45	; 69
    2420:	93 30       	cpi	r25, 0x03	; 3
    2422:	28 f4       	brcc	.+10     	; 0x242e <vfprintf+0x10a>
    2424:	0c 5f       	subi	r16, 0xFC	; 252
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	9f e3       	ldi	r25, 0x3F	; 63
    242a:	99 83       	std	Y+1, r25	; 0x01
    242c:	0d c0       	rjmp	.+26     	; 0x2448 <vfprintf+0x124>
    242e:	83 36       	cpi	r24, 0x63	; 99
    2430:	31 f0       	breq	.+12     	; 0x243e <vfprintf+0x11a>
    2432:	83 37       	cpi	r24, 0x73	; 115
    2434:	71 f0       	breq	.+28     	; 0x2452 <vfprintf+0x12e>
    2436:	83 35       	cpi	r24, 0x53	; 83
    2438:	09 f0       	breq	.+2      	; 0x243c <vfprintf+0x118>
    243a:	59 c0       	rjmp	.+178    	; 0x24ee <vfprintf+0x1ca>
    243c:	21 c0       	rjmp	.+66     	; 0x2480 <vfprintf+0x15c>
    243e:	f8 01       	movw	r30, r16
    2440:	80 81       	ld	r24, Z
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	0e 5f       	subi	r16, 0xFE	; 254
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	88 24       	eor	r8, r8
    244a:	83 94       	inc	r8
    244c:	91 2c       	mov	r9, r1
    244e:	53 01       	movw	r10, r6
    2450:	13 c0       	rjmp	.+38     	; 0x2478 <vfprintf+0x154>
    2452:	28 01       	movw	r4, r16
    2454:	f2 e0       	ldi	r31, 0x02	; 2
    2456:	4f 0e       	add	r4, r31
    2458:	51 1c       	adc	r5, r1
    245a:	f8 01       	movw	r30, r16
    245c:	a0 80       	ld	r10, Z
    245e:	b1 80       	ldd	r11, Z+1	; 0x01
    2460:	36 fe       	sbrs	r3, 6
    2462:	03 c0       	rjmp	.+6      	; 0x246a <vfprintf+0x146>
    2464:	69 2d       	mov	r22, r9
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <vfprintf+0x14a>
    246a:	6f ef       	ldi	r22, 0xFF	; 255
    246c:	7f ef       	ldi	r23, 0xFF	; 255
    246e:	c5 01       	movw	r24, r10
    2470:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <strnlen>
    2474:	4c 01       	movw	r8, r24
    2476:	82 01       	movw	r16, r4
    2478:	f3 2d       	mov	r31, r3
    247a:	ff 77       	andi	r31, 0x7F	; 127
    247c:	3f 2e       	mov	r3, r31
    247e:	16 c0       	rjmp	.+44     	; 0x24ac <vfprintf+0x188>
    2480:	28 01       	movw	r4, r16
    2482:	22 e0       	ldi	r18, 0x02	; 2
    2484:	42 0e       	add	r4, r18
    2486:	51 1c       	adc	r5, r1
    2488:	f8 01       	movw	r30, r16
    248a:	a0 80       	ld	r10, Z
    248c:	b1 80       	ldd	r11, Z+1	; 0x01
    248e:	36 fe       	sbrs	r3, 6
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <vfprintf+0x174>
    2492:	69 2d       	mov	r22, r9
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	02 c0       	rjmp	.+4      	; 0x249c <vfprintf+0x178>
    2498:	6f ef       	ldi	r22, 0xFF	; 255
    249a:	7f ef       	ldi	r23, 0xFF	; 255
    249c:	c5 01       	movw	r24, r10
    249e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <strnlen_P>
    24a2:	4c 01       	movw	r8, r24
    24a4:	f3 2d       	mov	r31, r3
    24a6:	f0 68       	ori	r31, 0x80	; 128
    24a8:	3f 2e       	mov	r3, r31
    24aa:	82 01       	movw	r16, r4
    24ac:	33 fc       	sbrc	r3, 3
    24ae:	1b c0       	rjmp	.+54     	; 0x24e6 <vfprintf+0x1c2>
    24b0:	82 2d       	mov	r24, r2
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	88 16       	cp	r8, r24
    24b6:	99 06       	cpc	r9, r25
    24b8:	b0 f4       	brcc	.+44     	; 0x24e6 <vfprintf+0x1c2>
    24ba:	b6 01       	movw	r22, r12
    24bc:	80 e2       	ldi	r24, 0x20	; 32
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    24c4:	2a 94       	dec	r2
    24c6:	f4 cf       	rjmp	.-24     	; 0x24b0 <vfprintf+0x18c>
    24c8:	f5 01       	movw	r30, r10
    24ca:	37 fc       	sbrc	r3, 7
    24cc:	85 91       	lpm	r24, Z+
    24ce:	37 fe       	sbrs	r3, 7
    24d0:	81 91       	ld	r24, Z+
    24d2:	5f 01       	movw	r10, r30
    24d4:	b6 01       	movw	r22, r12
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    24dc:	21 10       	cpse	r2, r1
    24de:	2a 94       	dec	r2
    24e0:	21 e0       	ldi	r18, 0x01	; 1
    24e2:	82 1a       	sub	r8, r18
    24e4:	91 08       	sbc	r9, r1
    24e6:	81 14       	cp	r8, r1
    24e8:	91 04       	cpc	r9, r1
    24ea:	71 f7       	brne	.-36     	; 0x24c8 <vfprintf+0x1a4>
    24ec:	e8 c0       	rjmp	.+464    	; 0x26be <vfprintf+0x39a>
    24ee:	84 36       	cpi	r24, 0x64	; 100
    24f0:	11 f0       	breq	.+4      	; 0x24f6 <vfprintf+0x1d2>
    24f2:	89 36       	cpi	r24, 0x69	; 105
    24f4:	41 f5       	brne	.+80     	; 0x2546 <vfprintf+0x222>
    24f6:	f8 01       	movw	r30, r16
    24f8:	37 fe       	sbrs	r3, 7
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <vfprintf+0x1e6>
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	0c 5f       	subi	r16, 0xFC	; 252
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	08 c0       	rjmp	.+16     	; 0x251a <vfprintf+0x1f6>
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	07 2e       	mov	r0, r23
    2510:	00 0c       	add	r0, r0
    2512:	88 0b       	sbc	r24, r24
    2514:	99 0b       	sbc	r25, r25
    2516:	0e 5f       	subi	r16, 0xFE	; 254
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	f3 2d       	mov	r31, r3
    251c:	ff 76       	andi	r31, 0x6F	; 111
    251e:	3f 2e       	mov	r3, r31
    2520:	97 ff       	sbrs	r25, 7
    2522:	09 c0       	rjmp	.+18     	; 0x2536 <vfprintf+0x212>
    2524:	90 95       	com	r25
    2526:	80 95       	com	r24
    2528:	70 95       	com	r23
    252a:	61 95       	neg	r22
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	8f 4f       	sbci	r24, 0xFF	; 255
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	f0 68       	ori	r31, 0x80	; 128
    2534:	3f 2e       	mov	r3, r31
    2536:	2a e0       	ldi	r18, 0x0A	; 10
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	a3 01       	movw	r20, r6
    253c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__ultoa_invert>
    2540:	88 2e       	mov	r8, r24
    2542:	86 18       	sub	r8, r6
    2544:	45 c0       	rjmp	.+138    	; 0x25d0 <vfprintf+0x2ac>
    2546:	85 37       	cpi	r24, 0x75	; 117
    2548:	31 f4       	brne	.+12     	; 0x2556 <vfprintf+0x232>
    254a:	23 2d       	mov	r18, r3
    254c:	2f 7e       	andi	r18, 0xEF	; 239
    254e:	b2 2e       	mov	r11, r18
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	25 c0       	rjmp	.+74     	; 0x25a0 <vfprintf+0x27c>
    2556:	93 2d       	mov	r25, r3
    2558:	99 7f       	andi	r25, 0xF9	; 249
    255a:	b9 2e       	mov	r11, r25
    255c:	8f 36       	cpi	r24, 0x6F	; 111
    255e:	c1 f0       	breq	.+48     	; 0x2590 <vfprintf+0x26c>
    2560:	18 f4       	brcc	.+6      	; 0x2568 <vfprintf+0x244>
    2562:	88 35       	cpi	r24, 0x58	; 88
    2564:	79 f0       	breq	.+30     	; 0x2584 <vfprintf+0x260>
    2566:	b5 c0       	rjmp	.+362    	; 0x26d2 <vfprintf+0x3ae>
    2568:	80 37       	cpi	r24, 0x70	; 112
    256a:	19 f0       	breq	.+6      	; 0x2572 <vfprintf+0x24e>
    256c:	88 37       	cpi	r24, 0x78	; 120
    256e:	21 f0       	breq	.+8      	; 0x2578 <vfprintf+0x254>
    2570:	b0 c0       	rjmp	.+352    	; 0x26d2 <vfprintf+0x3ae>
    2572:	e9 2f       	mov	r30, r25
    2574:	e0 61       	ori	r30, 0x10	; 16
    2576:	be 2e       	mov	r11, r30
    2578:	b4 fe       	sbrs	r11, 4
    257a:	0d c0       	rjmp	.+26     	; 0x2596 <vfprintf+0x272>
    257c:	fb 2d       	mov	r31, r11
    257e:	f4 60       	ori	r31, 0x04	; 4
    2580:	bf 2e       	mov	r11, r31
    2582:	09 c0       	rjmp	.+18     	; 0x2596 <vfprintf+0x272>
    2584:	34 fe       	sbrs	r3, 4
    2586:	0a c0       	rjmp	.+20     	; 0x259c <vfprintf+0x278>
    2588:	29 2f       	mov	r18, r25
    258a:	26 60       	ori	r18, 0x06	; 6
    258c:	b2 2e       	mov	r11, r18
    258e:	06 c0       	rjmp	.+12     	; 0x259c <vfprintf+0x278>
    2590:	28 e0       	ldi	r18, 0x08	; 8
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <vfprintf+0x27c>
    2596:	20 e1       	ldi	r18, 0x10	; 16
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0x27c>
    259c:	20 e1       	ldi	r18, 0x10	; 16
    259e:	32 e0       	ldi	r19, 0x02	; 2
    25a0:	f8 01       	movw	r30, r16
    25a2:	b7 fe       	sbrs	r11, 7
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <vfprintf+0x290>
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	0c 5f       	subi	r16, 0xFC	; 252
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	06 c0       	rjmp	.+12     	; 0x25c0 <vfprintf+0x29c>
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 5f       	subi	r16, 0xFE	; 254
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	a3 01       	movw	r20, r6
    25c2:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__ultoa_invert>
    25c6:	88 2e       	mov	r8, r24
    25c8:	86 18       	sub	r8, r6
    25ca:	fb 2d       	mov	r31, r11
    25cc:	ff 77       	andi	r31, 0x7F	; 127
    25ce:	3f 2e       	mov	r3, r31
    25d0:	36 fe       	sbrs	r3, 6
    25d2:	0d c0       	rjmp	.+26     	; 0x25ee <vfprintf+0x2ca>
    25d4:	23 2d       	mov	r18, r3
    25d6:	2e 7f       	andi	r18, 0xFE	; 254
    25d8:	a2 2e       	mov	r10, r18
    25da:	89 14       	cp	r8, r9
    25dc:	58 f4       	brcc	.+22     	; 0x25f4 <vfprintf+0x2d0>
    25de:	34 fe       	sbrs	r3, 4
    25e0:	0b c0       	rjmp	.+22     	; 0x25f8 <vfprintf+0x2d4>
    25e2:	32 fc       	sbrc	r3, 2
    25e4:	09 c0       	rjmp	.+18     	; 0x25f8 <vfprintf+0x2d4>
    25e6:	83 2d       	mov	r24, r3
    25e8:	8e 7e       	andi	r24, 0xEE	; 238
    25ea:	a8 2e       	mov	r10, r24
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <vfprintf+0x2d4>
    25ee:	b8 2c       	mov	r11, r8
    25f0:	a3 2c       	mov	r10, r3
    25f2:	03 c0       	rjmp	.+6      	; 0x25fa <vfprintf+0x2d6>
    25f4:	b8 2c       	mov	r11, r8
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <vfprintf+0x2d6>
    25f8:	b9 2c       	mov	r11, r9
    25fa:	a4 fe       	sbrs	r10, 4
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <vfprintf+0x2f8>
    25fe:	fe 01       	movw	r30, r28
    2600:	e8 0d       	add	r30, r8
    2602:	f1 1d       	adc	r31, r1
    2604:	80 81       	ld	r24, Z
    2606:	80 33       	cpi	r24, 0x30	; 48
    2608:	21 f4       	brne	.+8      	; 0x2612 <vfprintf+0x2ee>
    260a:	9a 2d       	mov	r25, r10
    260c:	99 7e       	andi	r25, 0xE9	; 233
    260e:	a9 2e       	mov	r10, r25
    2610:	09 c0       	rjmp	.+18     	; 0x2624 <vfprintf+0x300>
    2612:	a2 fe       	sbrs	r10, 2
    2614:	06 c0       	rjmp	.+12     	; 0x2622 <vfprintf+0x2fe>
    2616:	b3 94       	inc	r11
    2618:	b3 94       	inc	r11
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <vfprintf+0x300>
    261c:	8a 2d       	mov	r24, r10
    261e:	86 78       	andi	r24, 0x86	; 134
    2620:	09 f0       	breq	.+2      	; 0x2624 <vfprintf+0x300>
    2622:	b3 94       	inc	r11
    2624:	a3 fc       	sbrc	r10, 3
    2626:	11 c0       	rjmp	.+34     	; 0x264a <vfprintf+0x326>
    2628:	a0 fe       	sbrs	r10, 0
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <vfprintf+0x314>
    262c:	b2 14       	cp	r11, r2
    262e:	88 f4       	brcc	.+34     	; 0x2652 <vfprintf+0x32e>
    2630:	28 0c       	add	r2, r8
    2632:	92 2c       	mov	r9, r2
    2634:	9b 18       	sub	r9, r11
    2636:	0e c0       	rjmp	.+28     	; 0x2654 <vfprintf+0x330>
    2638:	b2 14       	cp	r11, r2
    263a:	60 f4       	brcc	.+24     	; 0x2654 <vfprintf+0x330>
    263c:	b6 01       	movw	r22, r12
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    2646:	b3 94       	inc	r11
    2648:	f7 cf       	rjmp	.-18     	; 0x2638 <vfprintf+0x314>
    264a:	b2 14       	cp	r11, r2
    264c:	18 f4       	brcc	.+6      	; 0x2654 <vfprintf+0x330>
    264e:	2b 18       	sub	r2, r11
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <vfprintf+0x332>
    2652:	98 2c       	mov	r9, r8
    2654:	21 2c       	mov	r2, r1
    2656:	a4 fe       	sbrs	r10, 4
    2658:	10 c0       	rjmp	.+32     	; 0x267a <vfprintf+0x356>
    265a:	b6 01       	movw	r22, r12
    265c:	80 e3       	ldi	r24, 0x30	; 48
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    2664:	a2 fe       	sbrs	r10, 2
    2666:	17 c0       	rjmp	.+46     	; 0x2696 <vfprintf+0x372>
    2668:	a1 fc       	sbrc	r10, 1
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <vfprintf+0x34e>
    266c:	88 e7       	ldi	r24, 0x78	; 120
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <vfprintf+0x352>
    2672:	88 e5       	ldi	r24, 0x58	; 88
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	b6 01       	movw	r22, r12
    2678:	0c c0       	rjmp	.+24     	; 0x2692 <vfprintf+0x36e>
    267a:	8a 2d       	mov	r24, r10
    267c:	86 78       	andi	r24, 0x86	; 134
    267e:	59 f0       	breq	.+22     	; 0x2696 <vfprintf+0x372>
    2680:	a1 fe       	sbrs	r10, 1
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <vfprintf+0x364>
    2684:	8b e2       	ldi	r24, 0x2B	; 43
    2686:	01 c0       	rjmp	.+2      	; 0x268a <vfprintf+0x366>
    2688:	80 e2       	ldi	r24, 0x20	; 32
    268a:	a7 fc       	sbrc	r10, 7
    268c:	8d e2       	ldi	r24, 0x2D	; 45
    268e:	b6 01       	movw	r22, r12
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    2696:	89 14       	cp	r8, r9
    2698:	38 f4       	brcc	.+14     	; 0x26a8 <vfprintf+0x384>
    269a:	b6 01       	movw	r22, r12
    269c:	80 e3       	ldi	r24, 0x30	; 48
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    26a4:	9a 94       	dec	r9
    26a6:	f7 cf       	rjmp	.-18     	; 0x2696 <vfprintf+0x372>
    26a8:	8a 94       	dec	r8
    26aa:	f3 01       	movw	r30, r6
    26ac:	e8 0d       	add	r30, r8
    26ae:	f1 1d       	adc	r31, r1
    26b0:	80 81       	ld	r24, Z
    26b2:	b6 01       	movw	r22, r12
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    26ba:	81 10       	cpse	r8, r1
    26bc:	f5 cf       	rjmp	.-22     	; 0x26a8 <vfprintf+0x384>
    26be:	22 20       	and	r2, r2
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <vfprintf+0x3a0>
    26c2:	42 ce       	rjmp	.-892    	; 0x2348 <vfprintf+0x24>
    26c4:	b6 01       	movw	r22, r12
    26c6:	80 e2       	ldi	r24, 0x20	; 32
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <fputc>
    26ce:	2a 94       	dec	r2
    26d0:	f6 cf       	rjmp	.-20     	; 0x26be <vfprintf+0x39a>
    26d2:	f6 01       	movw	r30, r12
    26d4:	86 81       	ldd	r24, Z+6	; 0x06
    26d6:	97 81       	ldd	r25, Z+7	; 0x07
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <vfprintf+0x3ba>
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	9f ef       	ldi	r25, 0xFF	; 255
    26de:	2b 96       	adiw	r28, 0x0b	; 11
    26e0:	e2 e1       	ldi	r30, 0x12	; 18
    26e2:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__>

000026e6 <dtoa_prf>:
    26e6:	a9 e0       	ldi	r26, 0x09	; 9
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e9 e7       	ldi	r30, 0x79	; 121
    26ec:	f3 e1       	ldi	r31, 0x13	; 19
    26ee:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0xc>
    26f2:	6a 01       	movw	r12, r20
    26f4:	12 2f       	mov	r17, r18
    26f6:	b0 2e       	mov	r11, r16
    26f8:	2b e3       	ldi	r18, 0x3B	; 59
    26fa:	20 17       	cp	r18, r16
    26fc:	20 f0       	brcs	.+8      	; 0x2706 <dtoa_prf+0x20>
    26fe:	ff 24       	eor	r15, r15
    2700:	f3 94       	inc	r15
    2702:	f0 0e       	add	r15, r16
    2704:	02 c0       	rjmp	.+4      	; 0x270a <dtoa_prf+0x24>
    2706:	2c e3       	ldi	r18, 0x3C	; 60
    2708:	f2 2e       	mov	r15, r18
    270a:	0f 2d       	mov	r16, r15
    270c:	27 e0       	ldi	r18, 0x07	; 7
    270e:	ae 01       	movw	r20, r28
    2710:	4f 5f       	subi	r20, 0xFF	; 255
    2712:	5f 4f       	sbci	r21, 0xFF	; 255
    2714:	0e 94 cd 14 	call	0x299a	; 0x299a <__ftoa_engine>
    2718:	bc 01       	movw	r22, r24
    271a:	49 81       	ldd	r20, Y+1	; 0x01
    271c:	84 2f       	mov	r24, r20
    271e:	89 70       	andi	r24, 0x09	; 9
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	31 f0       	breq	.+12     	; 0x2730 <dtoa_prf+0x4a>
    2724:	e1 fc       	sbrc	r14, 1
    2726:	06 c0       	rjmp	.+12     	; 0x2734 <dtoa_prf+0x4e>
    2728:	e0 fe       	sbrs	r14, 0
    272a:	06 c0       	rjmp	.+12     	; 0x2738 <dtoa_prf+0x52>
    272c:	90 e2       	ldi	r25, 0x20	; 32
    272e:	05 c0       	rjmp	.+10     	; 0x273a <dtoa_prf+0x54>
    2730:	9d e2       	ldi	r25, 0x2D	; 45
    2732:	03 c0       	rjmp	.+6      	; 0x273a <dtoa_prf+0x54>
    2734:	9b e2       	ldi	r25, 0x2B	; 43
    2736:	01 c0       	rjmp	.+2      	; 0x273a <dtoa_prf+0x54>
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	5e 2d       	mov	r21, r14
    273c:	50 71       	andi	r21, 0x10	; 16
    273e:	43 ff       	sbrs	r20, 3
    2740:	3c c0       	rjmp	.+120    	; 0x27ba <dtoa_prf+0xd4>
    2742:	91 11       	cpse	r25, r1
    2744:	02 c0       	rjmp	.+4      	; 0x274a <dtoa_prf+0x64>
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	01 c0       	rjmp	.+2      	; 0x274c <dtoa_prf+0x66>
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	81 17       	cp	r24, r17
    274e:	18 f4       	brcc	.+6      	; 0x2756 <dtoa_prf+0x70>
    2750:	21 2f       	mov	r18, r17
    2752:	28 1b       	sub	r18, r24
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <dtoa_prf+0x72>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	51 11       	cpse	r21, r1
    275a:	0b c0       	rjmp	.+22     	; 0x2772 <dtoa_prf+0x8c>
    275c:	f6 01       	movw	r30, r12
    275e:	82 2f       	mov	r24, r18
    2760:	30 e2       	ldi	r19, 0x20	; 32
    2762:	88 23       	and	r24, r24
    2764:	19 f0       	breq	.+6      	; 0x276c <dtoa_prf+0x86>
    2766:	31 93       	st	Z+, r19
    2768:	81 50       	subi	r24, 0x01	; 1
    276a:	fb cf       	rjmp	.-10     	; 0x2762 <dtoa_prf+0x7c>
    276c:	c2 0e       	add	r12, r18
    276e:	d1 1c       	adc	r13, r1
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	99 23       	and	r25, r25
    2774:	29 f0       	breq	.+10     	; 0x2780 <dtoa_prf+0x9a>
    2776:	d6 01       	movw	r26, r12
    2778:	9c 93       	st	X, r25
    277a:	f6 01       	movw	r30, r12
    277c:	31 96       	adiw	r30, 0x01	; 1
    277e:	6f 01       	movw	r12, r30
    2780:	c6 01       	movw	r24, r12
    2782:	03 96       	adiw	r24, 0x03	; 3
    2784:	e2 fe       	sbrs	r14, 2
    2786:	0a c0       	rjmp	.+20     	; 0x279c <dtoa_prf+0xb6>
    2788:	3e e4       	ldi	r19, 0x4E	; 78
    278a:	d6 01       	movw	r26, r12
    278c:	3c 93       	st	X, r19
    278e:	41 e4       	ldi	r20, 0x41	; 65
    2790:	11 96       	adiw	r26, 0x01	; 1
    2792:	4c 93       	st	X, r20
    2794:	11 97       	sbiw	r26, 0x01	; 1
    2796:	12 96       	adiw	r26, 0x02	; 2
    2798:	3c 93       	st	X, r19
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <dtoa_prf+0xc2>
    279c:	3e e6       	ldi	r19, 0x6E	; 110
    279e:	f6 01       	movw	r30, r12
    27a0:	30 83       	st	Z, r19
    27a2:	41 e6       	ldi	r20, 0x61	; 97
    27a4:	41 83       	std	Z+1, r20	; 0x01
    27a6:	32 83       	std	Z+2, r19	; 0x02
    27a8:	fc 01       	movw	r30, r24
    27aa:	32 2f       	mov	r19, r18
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	33 23       	and	r19, r19
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <dtoa_prf+0xce>
    27b2:	42 c0       	rjmp	.+132    	; 0x2838 <dtoa_prf+0x152>
    27b4:	41 93       	st	Z+, r20
    27b6:	31 50       	subi	r19, 0x01	; 1
    27b8:	fa cf       	rjmp	.-12     	; 0x27ae <dtoa_prf+0xc8>
    27ba:	42 ff       	sbrs	r20, 2
    27bc:	44 c0       	rjmp	.+136    	; 0x2846 <dtoa_prf+0x160>
    27be:	91 11       	cpse	r25, r1
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <dtoa_prf+0xe0>
    27c2:	83 e0       	ldi	r24, 0x03	; 3
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <dtoa_prf+0xe2>
    27c6:	84 e0       	ldi	r24, 0x04	; 4
    27c8:	81 17       	cp	r24, r17
    27ca:	18 f4       	brcc	.+6      	; 0x27d2 <dtoa_prf+0xec>
    27cc:	21 2f       	mov	r18, r17
    27ce:	28 1b       	sub	r18, r24
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <dtoa_prf+0xee>
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	51 11       	cpse	r21, r1
    27d6:	0b c0       	rjmp	.+22     	; 0x27ee <dtoa_prf+0x108>
    27d8:	f6 01       	movw	r30, r12
    27da:	82 2f       	mov	r24, r18
    27dc:	30 e2       	ldi	r19, 0x20	; 32
    27de:	88 23       	and	r24, r24
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <dtoa_prf+0x102>
    27e2:	31 93       	st	Z+, r19
    27e4:	81 50       	subi	r24, 0x01	; 1
    27e6:	fb cf       	rjmp	.-10     	; 0x27de <dtoa_prf+0xf8>
    27e8:	c2 0e       	add	r12, r18
    27ea:	d1 1c       	adc	r13, r1
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	99 23       	and	r25, r25
    27f0:	29 f0       	breq	.+10     	; 0x27fc <dtoa_prf+0x116>
    27f2:	d6 01       	movw	r26, r12
    27f4:	9c 93       	st	X, r25
    27f6:	f6 01       	movw	r30, r12
    27f8:	31 96       	adiw	r30, 0x01	; 1
    27fa:	6f 01       	movw	r12, r30
    27fc:	c6 01       	movw	r24, r12
    27fe:	03 96       	adiw	r24, 0x03	; 3
    2800:	e2 fe       	sbrs	r14, 2
    2802:	0b c0       	rjmp	.+22     	; 0x281a <dtoa_prf+0x134>
    2804:	39 e4       	ldi	r19, 0x49	; 73
    2806:	d6 01       	movw	r26, r12
    2808:	3c 93       	st	X, r19
    280a:	3e e4       	ldi	r19, 0x4E	; 78
    280c:	11 96       	adiw	r26, 0x01	; 1
    280e:	3c 93       	st	X, r19
    2810:	11 97       	sbiw	r26, 0x01	; 1
    2812:	36 e4       	ldi	r19, 0x46	; 70
    2814:	12 96       	adiw	r26, 0x02	; 2
    2816:	3c 93       	st	X, r19
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <dtoa_prf+0x142>
    281a:	39 e6       	ldi	r19, 0x69	; 105
    281c:	f6 01       	movw	r30, r12
    281e:	30 83       	st	Z, r19
    2820:	3e e6       	ldi	r19, 0x6E	; 110
    2822:	31 83       	std	Z+1, r19	; 0x01
    2824:	36 e6       	ldi	r19, 0x66	; 102
    2826:	32 83       	std	Z+2, r19	; 0x02
    2828:	fc 01       	movw	r30, r24
    282a:	32 2f       	mov	r19, r18
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	33 23       	and	r19, r19
    2830:	19 f0       	breq	.+6      	; 0x2838 <dtoa_prf+0x152>
    2832:	41 93       	st	Z+, r20
    2834:	31 50       	subi	r19, 0x01	; 1
    2836:	fb cf       	rjmp	.-10     	; 0x282e <dtoa_prf+0x148>
    2838:	fc 01       	movw	r30, r24
    283a:	e2 0f       	add	r30, r18
    283c:	f1 1d       	adc	r31, r1
    283e:	10 82       	st	Z, r1
    2840:	8e ef       	ldi	r24, 0xFE	; 254
    2842:	9f ef       	ldi	r25, 0xFF	; 255
    2844:	a6 c0       	rjmp	.+332    	; 0x2992 <dtoa_prf+0x2ac>
    2846:	21 e0       	ldi	r18, 0x01	; 1
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	91 11       	cpse	r25, r1
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <dtoa_prf+0x16c>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	16 16       	cp	r1, r22
    2854:	17 06       	cpc	r1, r23
    2856:	1c f4       	brge	.+6      	; 0x285e <dtoa_prf+0x178>
    2858:	fb 01       	movw	r30, r22
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <dtoa_prf+0x17c>
    285e:	e1 e0       	ldi	r30, 0x01	; 1
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	2e 0f       	add	r18, r30
    2864:	3f 1f       	adc	r19, r31
    2866:	bb 20       	and	r11, r11
    2868:	21 f0       	breq	.+8      	; 0x2872 <dtoa_prf+0x18c>
    286a:	eb 2d       	mov	r30, r11
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	31 96       	adiw	r30, 0x01	; 1
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <dtoa_prf+0x190>
    2872:	e0 e0       	ldi	r30, 0x00	; 0
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	2e 0f       	add	r18, r30
    2878:	3f 1f       	adc	r19, r31
    287a:	e1 2f       	mov	r30, r17
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	2e 17       	cp	r18, r30
    2880:	3f 07       	cpc	r19, r31
    2882:	1c f4       	brge	.+6      	; 0x288a <dtoa_prf+0x1a4>
    2884:	12 1b       	sub	r17, r18
    2886:	21 2f       	mov	r18, r17
    2888:	01 c0       	rjmp	.+2      	; 0x288c <dtoa_prf+0x1a6>
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	8e 2d       	mov	r24, r14
    288e:	88 71       	andi	r24, 0x18	; 24
    2890:	59 f4       	brne	.+22     	; 0x28a8 <dtoa_prf+0x1c2>
    2892:	f6 01       	movw	r30, r12
    2894:	82 2f       	mov	r24, r18
    2896:	30 e2       	ldi	r19, 0x20	; 32
    2898:	88 23       	and	r24, r24
    289a:	19 f0       	breq	.+6      	; 0x28a2 <dtoa_prf+0x1bc>
    289c:	31 93       	st	Z+, r19
    289e:	81 50       	subi	r24, 0x01	; 1
    28a0:	fb cf       	rjmp	.-10     	; 0x2898 <dtoa_prf+0x1b2>
    28a2:	c2 0e       	add	r12, r18
    28a4:	d1 1c       	adc	r13, r1
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	99 23       	and	r25, r25
    28aa:	29 f0       	breq	.+10     	; 0x28b6 <dtoa_prf+0x1d0>
    28ac:	d6 01       	movw	r26, r12
    28ae:	9c 93       	st	X, r25
    28b0:	f6 01       	movw	r30, r12
    28b2:	31 96       	adiw	r30, 0x01	; 1
    28b4:	6f 01       	movw	r12, r30
    28b6:	51 11       	cpse	r21, r1
    28b8:	0b c0       	rjmp	.+22     	; 0x28d0 <dtoa_prf+0x1ea>
    28ba:	f6 01       	movw	r30, r12
    28bc:	82 2f       	mov	r24, r18
    28be:	90 e3       	ldi	r25, 0x30	; 48
    28c0:	88 23       	and	r24, r24
    28c2:	19 f0       	breq	.+6      	; 0x28ca <dtoa_prf+0x1e4>
    28c4:	91 93       	st	Z+, r25
    28c6:	81 50       	subi	r24, 0x01	; 1
    28c8:	fb cf       	rjmp	.-10     	; 0x28c0 <dtoa_prf+0x1da>
    28ca:	c2 0e       	add	r12, r18
    28cc:	d1 1c       	adc	r13, r1
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	0f 2d       	mov	r16, r15
    28d2:	06 0f       	add	r16, r22
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	34 2f       	mov	r19, r20
    28d8:	30 71       	andi	r19, 0x10	; 16
    28da:	44 ff       	sbrs	r20, 4
    28dc:	03 c0       	rjmp	.+6      	; 0x28e4 <dtoa_prf+0x1fe>
    28de:	91 33       	cpi	r25, 0x31	; 49
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <dtoa_prf+0x1fe>
    28e2:	01 50       	subi	r16, 0x01	; 1
    28e4:	10 16       	cp	r1, r16
    28e6:	24 f4       	brge	.+8      	; 0x28f0 <dtoa_prf+0x20a>
    28e8:	09 30       	cpi	r16, 0x09	; 9
    28ea:	18 f0       	brcs	.+6      	; 0x28f2 <dtoa_prf+0x20c>
    28ec:	08 e0       	ldi	r16, 0x08	; 8
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <dtoa_prf+0x20c>
    28f0:	01 e0       	ldi	r16, 0x01	; 1
    28f2:	ab 01       	movw	r20, r22
    28f4:	77 ff       	sbrs	r23, 7
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <dtoa_prf+0x216>
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	fb 01       	movw	r30, r22
    28fe:	e4 1b       	sub	r30, r20
    2900:	f5 0b       	sbc	r31, r21
    2902:	a1 e0       	ldi	r26, 0x01	; 1
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ac 0f       	add	r26, r28
    2908:	bd 1f       	adc	r27, r29
    290a:	ea 0f       	add	r30, r26
    290c:	fb 1f       	adc	r31, r27
    290e:	8e e2       	ldi	r24, 0x2E	; 46
    2910:	a8 2e       	mov	r10, r24
    2912:	4b 01       	movw	r8, r22
    2914:	80 1a       	sub	r8, r16
    2916:	91 08       	sbc	r9, r1
    2918:	0b 2d       	mov	r16, r11
    291a:	10 e0       	ldi	r17, 0x00	; 0
    291c:	11 95       	neg	r17
    291e:	01 95       	neg	r16
    2920:	11 09       	sbc	r17, r1
    2922:	4f 3f       	cpi	r20, 0xFF	; 255
    2924:	bf ef       	ldi	r27, 0xFF	; 255
    2926:	5b 07       	cpc	r21, r27
    2928:	21 f4       	brne	.+8      	; 0x2932 <dtoa_prf+0x24c>
    292a:	d6 01       	movw	r26, r12
    292c:	ac 92       	st	X, r10
    292e:	11 96       	adiw	r26, 0x01	; 1
    2930:	6d 01       	movw	r12, r26
    2932:	64 17       	cp	r22, r20
    2934:	75 07       	cpc	r23, r21
    2936:	2c f0       	brlt	.+10     	; 0x2942 <dtoa_prf+0x25c>
    2938:	84 16       	cp	r8, r20
    293a:	95 06       	cpc	r9, r21
    293c:	14 f4       	brge	.+4      	; 0x2942 <dtoa_prf+0x25c>
    293e:	81 81       	ldd	r24, Z+1	; 0x01
    2940:	01 c0       	rjmp	.+2      	; 0x2944 <dtoa_prf+0x25e>
    2942:	80 e3       	ldi	r24, 0x30	; 48
    2944:	41 50       	subi	r20, 0x01	; 1
    2946:	51 09       	sbc	r21, r1
    2948:	31 96       	adiw	r30, 0x01	; 1
    294a:	d6 01       	movw	r26, r12
    294c:	11 96       	adiw	r26, 0x01	; 1
    294e:	7d 01       	movw	r14, r26
    2950:	40 17       	cp	r20, r16
    2952:	51 07       	cpc	r21, r17
    2954:	24 f0       	brlt	.+8      	; 0x295e <dtoa_prf+0x278>
    2956:	d6 01       	movw	r26, r12
    2958:	8c 93       	st	X, r24
    295a:	67 01       	movw	r12, r14
    295c:	e2 cf       	rjmp	.-60     	; 0x2922 <dtoa_prf+0x23c>
    295e:	64 17       	cp	r22, r20
    2960:	75 07       	cpc	r23, r21
    2962:	39 f4       	brne	.+14     	; 0x2972 <dtoa_prf+0x28c>
    2964:	96 33       	cpi	r25, 0x36	; 54
    2966:	20 f4       	brcc	.+8      	; 0x2970 <dtoa_prf+0x28a>
    2968:	95 33       	cpi	r25, 0x35	; 53
    296a:	19 f4       	brne	.+6      	; 0x2972 <dtoa_prf+0x28c>
    296c:	31 11       	cpse	r19, r1
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <dtoa_prf+0x28c>
    2970:	81 e3       	ldi	r24, 0x31	; 49
    2972:	f6 01       	movw	r30, r12
    2974:	80 83       	st	Z, r24
    2976:	f7 01       	movw	r30, r14
    2978:	82 2f       	mov	r24, r18
    297a:	90 e2       	ldi	r25, 0x20	; 32
    297c:	88 23       	and	r24, r24
    297e:	19 f0       	breq	.+6      	; 0x2986 <dtoa_prf+0x2a0>
    2980:	91 93       	st	Z+, r25
    2982:	81 50       	subi	r24, 0x01	; 1
    2984:	fb cf       	rjmp	.-10     	; 0x297c <dtoa_prf+0x296>
    2986:	f7 01       	movw	r30, r14
    2988:	e2 0f       	add	r30, r18
    298a:	f1 1d       	adc	r31, r1
    298c:	10 82       	st	Z, r1
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	29 96       	adiw	r28, 0x09	; 9
    2994:	ec e0       	ldi	r30, 0x0C	; 12
    2996:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0xc>

0000299a <__ftoa_engine>:
    299a:	28 30       	cpi	r18, 0x08	; 8
    299c:	08 f0       	brcs	.+2      	; 0x29a0 <__ftoa_engine+0x6>
    299e:	27 e0       	ldi	r18, 0x07	; 7
    29a0:	33 27       	eor	r19, r19
    29a2:	da 01       	movw	r26, r20
    29a4:	99 0f       	add	r25, r25
    29a6:	31 1d       	adc	r19, r1
    29a8:	87 fd       	sbrc	r24, 7
    29aa:	91 60       	ori	r25, 0x01	; 1
    29ac:	00 96       	adiw	r24, 0x00	; 0
    29ae:	61 05       	cpc	r22, r1
    29b0:	71 05       	cpc	r23, r1
    29b2:	39 f4       	brne	.+14     	; 0x29c2 <__ftoa_engine+0x28>
    29b4:	32 60       	ori	r19, 0x02	; 2
    29b6:	2e 5f       	subi	r18, 0xFE	; 254
    29b8:	3d 93       	st	X+, r19
    29ba:	30 e3       	ldi	r19, 0x30	; 48
    29bc:	2a 95       	dec	r18
    29be:	e1 f7       	brne	.-8      	; 0x29b8 <__ftoa_engine+0x1e>
    29c0:	08 95       	ret
    29c2:	9f 3f       	cpi	r25, 0xFF	; 255
    29c4:	30 f0       	brcs	.+12     	; 0x29d2 <__ftoa_engine+0x38>
    29c6:	80 38       	cpi	r24, 0x80	; 128
    29c8:	71 05       	cpc	r23, r1
    29ca:	61 05       	cpc	r22, r1
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <__ftoa_engine+0x36>
    29ce:	3c 5f       	subi	r19, 0xFC	; 252
    29d0:	3c 5f       	subi	r19, 0xFC	; 252
    29d2:	3d 93       	st	X+, r19
    29d4:	91 30       	cpi	r25, 0x01	; 1
    29d6:	08 f0       	brcs	.+2      	; 0x29da <__ftoa_engine+0x40>
    29d8:	80 68       	ori	r24, 0x80	; 128
    29da:	91 1d       	adc	r25, r1
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	1f 93       	push	r17
    29e2:	0f 93       	push	r16
    29e4:	ff 92       	push	r15
    29e6:	ef 92       	push	r14
    29e8:	19 2f       	mov	r17, r25
    29ea:	98 7f       	andi	r25, 0xF8	; 248
    29ec:	96 95       	lsr	r25
    29ee:	e9 2f       	mov	r30, r25
    29f0:	96 95       	lsr	r25
    29f2:	96 95       	lsr	r25
    29f4:	e9 0f       	add	r30, r25
    29f6:	ff 27       	eor	r31, r31
    29f8:	e6 53       	subi	r30, 0x36	; 54
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	99 27       	eor	r25, r25
    29fe:	33 27       	eor	r19, r19
    2a00:	ee 24       	eor	r14, r14
    2a02:	ff 24       	eor	r15, r15
    2a04:	a7 01       	movw	r20, r14
    2a06:	e7 01       	movw	r28, r14
    2a08:	05 90       	lpm	r0, Z+
    2a0a:	08 94       	sec
    2a0c:	07 94       	ror	r0
    2a0e:	28 f4       	brcc	.+10     	; 0x2a1a <__ftoa_engine+0x80>
    2a10:	36 0f       	add	r19, r22
    2a12:	e7 1e       	adc	r14, r23
    2a14:	f8 1e       	adc	r15, r24
    2a16:	49 1f       	adc	r20, r25
    2a18:	51 1d       	adc	r21, r1
    2a1a:	66 0f       	add	r22, r22
    2a1c:	77 1f       	adc	r23, r23
    2a1e:	88 1f       	adc	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	06 94       	lsr	r0
    2a24:	a1 f7       	brne	.-24     	; 0x2a0e <__ftoa_engine+0x74>
    2a26:	05 90       	lpm	r0, Z+
    2a28:	07 94       	ror	r0
    2a2a:	28 f4       	brcc	.+10     	; 0x2a36 <__ftoa_engine+0x9c>
    2a2c:	e7 0e       	add	r14, r23
    2a2e:	f8 1e       	adc	r15, r24
    2a30:	49 1f       	adc	r20, r25
    2a32:	56 1f       	adc	r21, r22
    2a34:	c1 1d       	adc	r28, r1
    2a36:	77 0f       	add	r23, r23
    2a38:	88 1f       	adc	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	66 1f       	adc	r22, r22
    2a3e:	06 94       	lsr	r0
    2a40:	a1 f7       	brne	.-24     	; 0x2a2a <__ftoa_engine+0x90>
    2a42:	05 90       	lpm	r0, Z+
    2a44:	07 94       	ror	r0
    2a46:	28 f4       	brcc	.+10     	; 0x2a52 <__ftoa_engine+0xb8>
    2a48:	f8 0e       	add	r15, r24
    2a4a:	49 1f       	adc	r20, r25
    2a4c:	56 1f       	adc	r21, r22
    2a4e:	c7 1f       	adc	r28, r23
    2a50:	d1 1d       	adc	r29, r1
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	66 1f       	adc	r22, r22
    2a58:	77 1f       	adc	r23, r23
    2a5a:	06 94       	lsr	r0
    2a5c:	a1 f7       	brne	.-24     	; 0x2a46 <__ftoa_engine+0xac>
    2a5e:	05 90       	lpm	r0, Z+
    2a60:	07 94       	ror	r0
    2a62:	20 f4       	brcc	.+8      	; 0x2a6c <__ftoa_engine+0xd2>
    2a64:	49 0f       	add	r20, r25
    2a66:	56 1f       	adc	r21, r22
    2a68:	c7 1f       	adc	r28, r23
    2a6a:	d8 1f       	adc	r29, r24
    2a6c:	99 0f       	add	r25, r25
    2a6e:	66 1f       	adc	r22, r22
    2a70:	77 1f       	adc	r23, r23
    2a72:	88 1f       	adc	r24, r24
    2a74:	06 94       	lsr	r0
    2a76:	a9 f7       	brne	.-22     	; 0x2a62 <__ftoa_engine+0xc8>
    2a78:	84 91       	lpm	r24, Z
    2a7a:	10 95       	com	r17
    2a7c:	17 70       	andi	r17, 0x07	; 7
    2a7e:	41 f0       	breq	.+16     	; 0x2a90 <__ftoa_engine+0xf6>
    2a80:	d6 95       	lsr	r29
    2a82:	c7 95       	ror	r28
    2a84:	57 95       	ror	r21
    2a86:	47 95       	ror	r20
    2a88:	f7 94       	ror	r15
    2a8a:	e7 94       	ror	r14
    2a8c:	1a 95       	dec	r17
    2a8e:	c1 f7       	brne	.-16     	; 0x2a80 <__ftoa_engine+0xe6>
    2a90:	e0 e7       	ldi	r30, 0x70	; 112
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	68 94       	set
    2a96:	15 90       	lpm	r1, Z+
    2a98:	15 91       	lpm	r17, Z+
    2a9a:	35 91       	lpm	r19, Z+
    2a9c:	65 91       	lpm	r22, Z+
    2a9e:	95 91       	lpm	r25, Z+
    2aa0:	05 90       	lpm	r0, Z+
    2aa2:	7f e2       	ldi	r23, 0x2F	; 47
    2aa4:	73 95       	inc	r23
    2aa6:	e1 18       	sub	r14, r1
    2aa8:	f1 0a       	sbc	r15, r17
    2aaa:	43 0b       	sbc	r20, r19
    2aac:	56 0b       	sbc	r21, r22
    2aae:	c9 0b       	sbc	r28, r25
    2ab0:	d0 09       	sbc	r29, r0
    2ab2:	c0 f7       	brcc	.-16     	; 0x2aa4 <__ftoa_engine+0x10a>
    2ab4:	e1 0c       	add	r14, r1
    2ab6:	f1 1e       	adc	r15, r17
    2ab8:	43 1f       	adc	r20, r19
    2aba:	56 1f       	adc	r21, r22
    2abc:	c9 1f       	adc	r28, r25
    2abe:	d0 1d       	adc	r29, r0
    2ac0:	7e f4       	brtc	.+30     	; 0x2ae0 <__ftoa_engine+0x146>
    2ac2:	70 33       	cpi	r23, 0x30	; 48
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <__ftoa_engine+0x130>
    2ac6:	8a 95       	dec	r24
    2ac8:	e6 cf       	rjmp	.-52     	; 0x2a96 <__ftoa_engine+0xfc>
    2aca:	e8 94       	clt
    2acc:	01 50       	subi	r16, 0x01	; 1
    2ace:	30 f0       	brcs	.+12     	; 0x2adc <__ftoa_engine+0x142>
    2ad0:	08 0f       	add	r16, r24
    2ad2:	0a f4       	brpl	.+2      	; 0x2ad6 <__ftoa_engine+0x13c>
    2ad4:	00 27       	eor	r16, r16
    2ad6:	02 17       	cp	r16, r18
    2ad8:	08 f4       	brcc	.+2      	; 0x2adc <__ftoa_engine+0x142>
    2ada:	20 2f       	mov	r18, r16
    2adc:	23 95       	inc	r18
    2ade:	02 2f       	mov	r16, r18
    2ae0:	7a 33       	cpi	r23, 0x3A	; 58
    2ae2:	28 f0       	brcs	.+10     	; 0x2aee <__ftoa_engine+0x154>
    2ae4:	79 e3       	ldi	r23, 0x39	; 57
    2ae6:	7d 93       	st	X+, r23
    2ae8:	2a 95       	dec	r18
    2aea:	e9 f7       	brne	.-6      	; 0x2ae6 <__ftoa_engine+0x14c>
    2aec:	10 c0       	rjmp	.+32     	; 0x2b0e <__ftoa_engine+0x174>
    2aee:	7d 93       	st	X+, r23
    2af0:	2a 95       	dec	r18
    2af2:	89 f6       	brne	.-94     	; 0x2a96 <__ftoa_engine+0xfc>
    2af4:	06 94       	lsr	r0
    2af6:	97 95       	ror	r25
    2af8:	67 95       	ror	r22
    2afa:	37 95       	ror	r19
    2afc:	17 95       	ror	r17
    2afe:	17 94       	ror	r1
    2b00:	e1 18       	sub	r14, r1
    2b02:	f1 0a       	sbc	r15, r17
    2b04:	43 0b       	sbc	r20, r19
    2b06:	56 0b       	sbc	r21, r22
    2b08:	c9 0b       	sbc	r28, r25
    2b0a:	d0 09       	sbc	r29, r0
    2b0c:	98 f0       	brcs	.+38     	; 0x2b34 <__ftoa_engine+0x19a>
    2b0e:	23 95       	inc	r18
    2b10:	7e 91       	ld	r23, -X
    2b12:	73 95       	inc	r23
    2b14:	7a 33       	cpi	r23, 0x3A	; 58
    2b16:	08 f0       	brcs	.+2      	; 0x2b1a <__ftoa_engine+0x180>
    2b18:	70 e3       	ldi	r23, 0x30	; 48
    2b1a:	7c 93       	st	X, r23
    2b1c:	20 13       	cpse	r18, r16
    2b1e:	b8 f7       	brcc	.-18     	; 0x2b0e <__ftoa_engine+0x174>
    2b20:	7e 91       	ld	r23, -X
    2b22:	70 61       	ori	r23, 0x10	; 16
    2b24:	7d 93       	st	X+, r23
    2b26:	30 f0       	brcs	.+12     	; 0x2b34 <__ftoa_engine+0x19a>
    2b28:	83 95       	inc	r24
    2b2a:	71 e3       	ldi	r23, 0x31	; 49
    2b2c:	7d 93       	st	X+, r23
    2b2e:	70 e3       	ldi	r23, 0x30	; 48
    2b30:	2a 95       	dec	r18
    2b32:	e1 f7       	brne	.-8      	; 0x2b2c <__ftoa_engine+0x192>
    2b34:	11 24       	eor	r1, r1
    2b36:	ef 90       	pop	r14
    2b38:	ff 90       	pop	r15
    2b3a:	0f 91       	pop	r16
    2b3c:	1f 91       	pop	r17
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	99 27       	eor	r25, r25
    2b44:	87 fd       	sbrc	r24, 7
    2b46:	90 95       	com	r25
    2b48:	08 95       	ret

00002b4a <strnlen_P>:
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	05 90       	lpm	r0, Z+
    2b4e:	61 50       	subi	r22, 0x01	; 1
    2b50:	70 40       	sbci	r23, 0x00	; 0
    2b52:	01 10       	cpse	r0, r1
    2b54:	d8 f7       	brcc	.-10     	; 0x2b4c <strnlen_P+0x2>
    2b56:	80 95       	com	r24
    2b58:	90 95       	com	r25
    2b5a:	8e 0f       	add	r24, r30
    2b5c:	9f 1f       	adc	r25, r31
    2b5e:	08 95       	ret

00002b60 <strnlen>:
    2b60:	fc 01       	movw	r30, r24
    2b62:	61 50       	subi	r22, 0x01	; 1
    2b64:	70 40       	sbci	r23, 0x00	; 0
    2b66:	01 90       	ld	r0, Z+
    2b68:	01 10       	cpse	r0, r1
    2b6a:	d8 f7       	brcc	.-10     	; 0x2b62 <strnlen+0x2>
    2b6c:	80 95       	com	r24
    2b6e:	90 95       	com	r25
    2b70:	8e 0f       	add	r24, r30
    2b72:	9f 1f       	adc	r25, r31
    2b74:	08 95       	ret

00002b76 <strrev>:
    2b76:	dc 01       	movw	r26, r24
    2b78:	fc 01       	movw	r30, r24
    2b7a:	67 2f       	mov	r22, r23
    2b7c:	71 91       	ld	r23, Z+
    2b7e:	77 23       	and	r23, r23
    2b80:	e1 f7       	brne	.-8      	; 0x2b7a <strrev+0x4>
    2b82:	32 97       	sbiw	r30, 0x02	; 2
    2b84:	04 c0       	rjmp	.+8      	; 0x2b8e <strrev+0x18>
    2b86:	7c 91       	ld	r23, X
    2b88:	6d 93       	st	X+, r22
    2b8a:	70 83       	st	Z, r23
    2b8c:	62 91       	ld	r22, -Z
    2b8e:	ae 17       	cp	r26, r30
    2b90:	bf 07       	cpc	r27, r31
    2b92:	c8 f3       	brcs	.-14     	; 0x2b86 <strrev+0x10>
    2b94:	08 95       	ret

00002b96 <fputc>:
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	fb 01       	movw	r30, r22
    2ba0:	23 81       	ldd	r18, Z+3	; 0x03
    2ba2:	21 fd       	sbrc	r18, 1
    2ba4:	03 c0       	rjmp	.+6      	; 0x2bac <fputc+0x16>
    2ba6:	8f ef       	ldi	r24, 0xFF	; 255
    2ba8:	9f ef       	ldi	r25, 0xFF	; 255
    2baa:	2c c0       	rjmp	.+88     	; 0x2c04 <fputc+0x6e>
    2bac:	22 ff       	sbrs	r18, 2
    2bae:	16 c0       	rjmp	.+44     	; 0x2bdc <fputc+0x46>
    2bb0:	46 81       	ldd	r20, Z+6	; 0x06
    2bb2:	57 81       	ldd	r21, Z+7	; 0x07
    2bb4:	24 81       	ldd	r18, Z+4	; 0x04
    2bb6:	35 81       	ldd	r19, Z+5	; 0x05
    2bb8:	42 17       	cp	r20, r18
    2bba:	53 07       	cpc	r21, r19
    2bbc:	44 f4       	brge	.+16     	; 0x2bce <fputc+0x38>
    2bbe:	a0 81       	ld	r26, Z
    2bc0:	b1 81       	ldd	r27, Z+1	; 0x01
    2bc2:	9d 01       	movw	r18, r26
    2bc4:	2f 5f       	subi	r18, 0xFF	; 255
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	31 83       	std	Z+1, r19	; 0x01
    2bca:	20 83       	st	Z, r18
    2bcc:	8c 93       	st	X, r24
    2bce:	26 81       	ldd	r18, Z+6	; 0x06
    2bd0:	37 81       	ldd	r19, Z+7	; 0x07
    2bd2:	2f 5f       	subi	r18, 0xFF	; 255
    2bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd6:	37 83       	std	Z+7, r19	; 0x07
    2bd8:	26 83       	std	Z+6, r18	; 0x06
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <fputc+0x6e>
    2bdc:	8b 01       	movw	r16, r22
    2bde:	ec 01       	movw	r28, r24
    2be0:	fb 01       	movw	r30, r22
    2be2:	00 84       	ldd	r0, Z+8	; 0x08
    2be4:	f1 85       	ldd	r31, Z+9	; 0x09
    2be6:	e0 2d       	mov	r30, r0
    2be8:	09 95       	icall
    2bea:	89 2b       	or	r24, r25
    2bec:	e1 f6       	brne	.-72     	; 0x2ba6 <fputc+0x10>
    2bee:	d8 01       	movw	r26, r16
    2bf0:	16 96       	adiw	r26, 0x06	; 6
    2bf2:	8d 91       	ld	r24, X+
    2bf4:	9c 91       	ld	r25, X
    2bf6:	17 97       	sbiw	r26, 0x07	; 7
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	17 96       	adiw	r26, 0x07	; 7
    2bfc:	9c 93       	st	X, r25
    2bfe:	8e 93       	st	-X, r24
    2c00:	16 97       	sbiw	r26, 0x06	; 6
    2c02:	ce 01       	movw	r24, r28
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	08 95       	ret

00002c0e <__ultoa_invert>:
    2c0e:	fa 01       	movw	r30, r20
    2c10:	aa 27       	eor	r26, r26
    2c12:	28 30       	cpi	r18, 0x08	; 8
    2c14:	51 f1       	breq	.+84     	; 0x2c6a <__ultoa_invert+0x5c>
    2c16:	20 31       	cpi	r18, 0x10	; 16
    2c18:	81 f1       	breq	.+96     	; 0x2c7a <__ultoa_invert+0x6c>
    2c1a:	e8 94       	clt
    2c1c:	6f 93       	push	r22
    2c1e:	6e 7f       	andi	r22, 0xFE	; 254
    2c20:	6e 5f       	subi	r22, 0xFE	; 254
    2c22:	7f 4f       	sbci	r23, 0xFF	; 255
    2c24:	8f 4f       	sbci	r24, 0xFF	; 255
    2c26:	9f 4f       	sbci	r25, 0xFF	; 255
    2c28:	af 4f       	sbci	r26, 0xFF	; 255
    2c2a:	b1 e0       	ldi	r27, 0x01	; 1
    2c2c:	3e d0       	rcall	.+124    	; 0x2caa <__ultoa_invert+0x9c>
    2c2e:	b4 e0       	ldi	r27, 0x04	; 4
    2c30:	3c d0       	rcall	.+120    	; 0x2caa <__ultoa_invert+0x9c>
    2c32:	67 0f       	add	r22, r23
    2c34:	78 1f       	adc	r23, r24
    2c36:	89 1f       	adc	r24, r25
    2c38:	9a 1f       	adc	r25, r26
    2c3a:	a1 1d       	adc	r26, r1
    2c3c:	68 0f       	add	r22, r24
    2c3e:	79 1f       	adc	r23, r25
    2c40:	8a 1f       	adc	r24, r26
    2c42:	91 1d       	adc	r25, r1
    2c44:	a1 1d       	adc	r26, r1
    2c46:	6a 0f       	add	r22, r26
    2c48:	71 1d       	adc	r23, r1
    2c4a:	81 1d       	adc	r24, r1
    2c4c:	91 1d       	adc	r25, r1
    2c4e:	a1 1d       	adc	r26, r1
    2c50:	20 d0       	rcall	.+64     	; 0x2c92 <__ultoa_invert+0x84>
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <__ultoa_invert+0x48>
    2c54:	68 94       	set
    2c56:	3f 91       	pop	r19
    2c58:	2a e0       	ldi	r18, 0x0A	; 10
    2c5a:	26 9f       	mul	r18, r22
    2c5c:	11 24       	eor	r1, r1
    2c5e:	30 19       	sub	r19, r0
    2c60:	30 5d       	subi	r19, 0xD0	; 208
    2c62:	31 93       	st	Z+, r19
    2c64:	de f6       	brtc	.-74     	; 0x2c1c <__ultoa_invert+0xe>
    2c66:	cf 01       	movw	r24, r30
    2c68:	08 95       	ret
    2c6a:	46 2f       	mov	r20, r22
    2c6c:	47 70       	andi	r20, 0x07	; 7
    2c6e:	40 5d       	subi	r20, 0xD0	; 208
    2c70:	41 93       	st	Z+, r20
    2c72:	b3 e0       	ldi	r27, 0x03	; 3
    2c74:	0f d0       	rcall	.+30     	; 0x2c94 <__ultoa_invert+0x86>
    2c76:	c9 f7       	brne	.-14     	; 0x2c6a <__ultoa_invert+0x5c>
    2c78:	f6 cf       	rjmp	.-20     	; 0x2c66 <__ultoa_invert+0x58>
    2c7a:	46 2f       	mov	r20, r22
    2c7c:	4f 70       	andi	r20, 0x0F	; 15
    2c7e:	40 5d       	subi	r20, 0xD0	; 208
    2c80:	4a 33       	cpi	r20, 0x3A	; 58
    2c82:	18 f0       	brcs	.+6      	; 0x2c8a <__ultoa_invert+0x7c>
    2c84:	49 5d       	subi	r20, 0xD9	; 217
    2c86:	31 fd       	sbrc	r19, 1
    2c88:	40 52       	subi	r20, 0x20	; 32
    2c8a:	41 93       	st	Z+, r20
    2c8c:	02 d0       	rcall	.+4      	; 0x2c92 <__ultoa_invert+0x84>
    2c8e:	a9 f7       	brne	.-22     	; 0x2c7a <__ultoa_invert+0x6c>
    2c90:	ea cf       	rjmp	.-44     	; 0x2c66 <__ultoa_invert+0x58>
    2c92:	b4 e0       	ldi	r27, 0x04	; 4
    2c94:	a6 95       	lsr	r26
    2c96:	97 95       	ror	r25
    2c98:	87 95       	ror	r24
    2c9a:	77 95       	ror	r23
    2c9c:	67 95       	ror	r22
    2c9e:	ba 95       	dec	r27
    2ca0:	c9 f7       	brne	.-14     	; 0x2c94 <__ultoa_invert+0x86>
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	61 05       	cpc	r22, r1
    2ca6:	71 05       	cpc	r23, r1
    2ca8:	08 95       	ret
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	0a 2e       	mov	r0, r26
    2cb0:	06 94       	lsr	r0
    2cb2:	57 95       	ror	r21
    2cb4:	47 95       	ror	r20
    2cb6:	37 95       	ror	r19
    2cb8:	27 95       	ror	r18
    2cba:	ba 95       	dec	r27
    2cbc:	c9 f7       	brne	.-14     	; 0x2cb0 <__ultoa_invert+0xa2>
    2cbe:	62 0f       	add	r22, r18
    2cc0:	73 1f       	adc	r23, r19
    2cc2:	84 1f       	adc	r24, r20
    2cc4:	95 1f       	adc	r25, r21
    2cc6:	a0 1d       	adc	r26, r0
    2cc8:	08 95       	ret

00002cca <__prologue_saves__>:
    2cca:	2f 92       	push	r2
    2ccc:	3f 92       	push	r3
    2cce:	4f 92       	push	r4
    2cd0:	5f 92       	push	r5
    2cd2:	6f 92       	push	r6
    2cd4:	7f 92       	push	r7
    2cd6:	8f 92       	push	r8
    2cd8:	9f 92       	push	r9
    2cda:	af 92       	push	r10
    2cdc:	bf 92       	push	r11
    2cde:	cf 92       	push	r12
    2ce0:	df 92       	push	r13
    2ce2:	ef 92       	push	r14
    2ce4:	ff 92       	push	r15
    2ce6:	0f 93       	push	r16
    2ce8:	1f 93       	push	r17
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	ca 1b       	sub	r28, r26
    2cf4:	db 0b       	sbc	r29, r27
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	09 94       	ijmp

00002d02 <__epilogue_restores__>:
    2d02:	2a 88       	ldd	r2, Y+18	; 0x12
    2d04:	39 88       	ldd	r3, Y+17	; 0x11
    2d06:	48 88       	ldd	r4, Y+16	; 0x10
    2d08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d14:	b9 84       	ldd	r11, Y+9	; 0x09
    2d16:	c8 84       	ldd	r12, Y+8	; 0x08
    2d18:	df 80       	ldd	r13, Y+7	; 0x07
    2d1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d20:	1b 81       	ldd	r17, Y+3	; 0x03
    2d22:	aa 81       	ldd	r26, Y+2	; 0x02
    2d24:	b9 81       	ldd	r27, Y+1	; 0x01
    2d26:	ce 0f       	add	r28, r30
    2d28:	d1 1d       	adc	r29, r1
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	ed 01       	movw	r28, r26
    2d36:	08 95       	ret

00002d38 <_exit>:
    2d38:	f8 94       	cli

00002d3a <__stop_program>:
    2d3a:	ff cf       	rjmp	.-2      	; 0x2d3a <__stop_program>
