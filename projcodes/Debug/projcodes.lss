
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000168a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00800060  0000168a  0000171e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008001ee  008001ee  000018ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000370f  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001652  00000000  00000000  0000540b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002560  00000000  00000000  00006a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00008fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1c  00000000  00000000  000096dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d32  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000be2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 06 	call	0xd76	; 0xd76 <main>
      8a:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
      92:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
      96:	08 95       	ret

00000098 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
      98:	0f 93       	push	r16
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	2a 97       	sbiw	r28, 0x0a	; 10
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
      b0:	16 2f       	mov	r17, r22
      b2:	07 2f       	mov	r16, r23
	HC05_SendString(text);
      b4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	85 e6       	ldi	r24, 0x65	; 101
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	9f 93       	push	r25
      c2:	8f 93       	push	r24
      c4:	8e 01       	movw	r16, r28
      c6:	0f 5f       	subi	r16, 0xFF	; 255
      c8:	1f 4f       	sbci	r17, 0xFF	; 255
      ca:	1f 93       	push	r17
      cc:	0f 93       	push	r16
      ce:	0e 94 59 08 	call	0x10b2	; 0x10b2 <sprintf>
	HC05_SendString(temp);
      d2:	c8 01       	movw	r24, r16
      d4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
      d8:	8c e6       	ldi	r24, 0x6C	; 108
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	2a 96       	adiw	r28, 0x0a	; 10
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	08 95       	ret

00000102 <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	2a 97       	sbiw	r28, 0x0a	; 10
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     11c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     120:	fe 01       	movw	r30, r28
     122:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     128:	c8 01       	movw	r24, r16
     12a:	02 2e       	mov	r0, r18
     12c:	02 c0       	rjmp	.+4      	; 0x132 <Error_ErrorBin+0x30>
     12e:	95 95       	asr	r25
     130:	87 95       	ror	r24
     132:	0a 94       	dec	r0
     134:	e2 f7       	brpl	.-8      	; 0x12e <Error_ErrorBin+0x2c>
     136:	81 70       	andi	r24, 0x01	; 1
     138:	80 5d       	subi	r24, 0xD0	; 208
     13a:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     13c:	2f 5f       	subi	r18, 0xFF	; 255
     13e:	3f 4f       	sbci	r19, 0xFF	; 255
     140:	28 30       	cpi	r18, 0x08	; 8
     142:	31 05       	cpc	r19, r1
     144:	89 f7       	brne	.-30     	; 0x128 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     146:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     148:	ce 01       	movw	r24, r28
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
     150:	8c e6       	ldi	r24, 0x6C	; 108
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     158:	2a 96       	adiw	r28, 0x0a	; 10
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	08 95       	ret

0000016e <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	8b b9       	out	0x0b, r24	; 11
     172:	88 e1       	ldi	r24, 0x18	; 24
     174:	8a b9       	out	0x0a, r24	; 10
     176:	86 e8       	ldi	r24, 0x86	; 134
     178:	80 bd       	out	0x20, r24	; 32
     17a:	8c e0       	ldi	r24, 0x0C	; 12
     17c:	89 b9       	out	0x09, r24	; 9
     17e:	10 bc       	out	0x20, r1	; 32
     180:	08 95       	ret

00000182 <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     182:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     184:	5d 9b       	sbis	0x0b, 5	; 11
     186:	fe cf       	rjmp	.-4      	; 0x184 <HC05_SendChar+0x2>
}
     188:	08 95       	ret

0000018a <HC05_SendString>:
void HC05_SendString(char * s)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
	while(*s)
     190:	88 81       	ld	r24, Y
     192:	88 23       	and	r24, r24
     194:	31 f0       	breq	.+12     	; 0x1a2 <HC05_SendString+0x18>
     196:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     198:	0e 94 c1 00 	call	0x182	; 0x182 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     19c:	89 91       	ld	r24, Y+
     19e:	81 11       	cpse	r24, r1
     1a0:	fb cf       	rjmp	.-10     	; 0x198 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     1a8:	8a b3       	in	r24, 0x1a	; 26
     1aa:	83 70       	andi	r24, 0x03	; 3
     1ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     1b2:	88 bb       	out	0x18, r24	; 24
     1b4:	08 95       	ret

000001b6 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     1b6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <isNumber>
	isUpperCase = false;
     1ba:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <isUpperCase>
	position = 0;
     1be:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x1>
     1c2:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__data_end>
	keyBuffer[position] = 0;
     1c6:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <keyBuffer>
     1ca:	08 95       	ret

000001cc <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	59 f4       	brne	.+22     	; 0x1e6 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     1d0:	8f e6       	ldi	r24, 0x6F	; 111
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
		position = 0;
     1d8:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x1>
     1dc:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__data_end>
		keyBuffer[position]=0;
     1e0:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <keyBuffer>
     1e4:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     1e6:	fc 01       	movw	r30, r24
     1e8:	01 90       	ld	r0, Z+
     1ea:	00 20       	and	r0, r0
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <Keypad_WriteToBuffer+0x1c>
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	e8 1b       	sub	r30, r24
     1f2:	f9 0b       	sbc	r31, r25
     1f4:	e0 31       	cpi	r30, 0x10	; 16
     1f6:	f1 05       	cpc	r31, r1
     1f8:	28 f5       	brcc	.+74     	; 0x244 <Keypad_WriteToBuffer+0x78>
     1fa:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     1fc:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x1>
     200:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__data_end>
     204:	1e 16       	cp	r1, r30
     206:	1f 06       	cpc	r1, r31
     208:	b4 f4       	brge	.+44     	; 0x236 <Keypad_WriteToBuffer+0x6a>
     20a:	fc 01       	movw	r30, r24
     20c:	a2 ef       	ldi	r26, 0xF2	; 242
     20e:	b1 e0       	ldi	r27, 0x01	; 1
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     214:	81 91       	ld	r24, Z+
     216:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     218:	2f 5f       	subi	r18, 0xFF	; 255
     21a:	3f 4f       	sbci	r19, 0xFF	; 255
     21c:	30 93 ef 01 	sts	0x01EF, r19	; 0x8001ef <__data_end+0x1>
     220:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <__data_end>
     224:	24 17       	cp	r18, r20
     226:	35 07       	cpc	r19, r21
     228:	ac f3       	brlt	.-22     	; 0x214 <Keypad_WriteToBuffer+0x48>
     22a:	14 16       	cp	r1, r20
     22c:	15 06       	cpc	r1, r21
     22e:	2c f0       	brlt	.+10     	; 0x23a <Keypad_WriteToBuffer+0x6e>
     230:	41 e0       	ldi	r20, 0x01	; 1
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <Keypad_WriteToBuffer+0x6e>
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     23a:	fa 01       	movw	r30, r20
     23c:	ee 50       	subi	r30, 0x0E	; 14
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	10 82       	st	Z, r1
	}
}
     242:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     244:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x1>
     248:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__data_end>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     24c:	40 e1       	ldi	r20, 0x10	; 16
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	dc cf       	rjmp	.-72     	; 0x20a <Keypad_WriteToBuffer+0x3e>

00000252 <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <isNumber>
     258:	08 95       	ret

0000025a <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     25a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <isNumber>
     25e:	81 11       	cpse	r24, r1
     260:	07 c0       	rjmp	.+14     	; 0x270 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     262:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <isUpperCase>
     266:	81 11       	cpse	r24, r1
     268:	06 c0       	rjmp	.+12     	; 0x276 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     26a:	87 e8       	ldi	r24, 0x87	; 135
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     270:	8f e7       	ldi	r24, 0x7F	; 127
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     276:	83 e8       	ldi	r24, 0x83	; 131
     278:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     27a:	08 95       	ret

0000027c <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     280:	0e 94 2d 01 	call	0x25a	; 0x25a <Keypad_GetMode>
     284:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     286:	fc 01       	movw	r30, r24
     288:	01 90       	ld	r0, Z+
     28a:	00 20       	and	r0, r0
     28c:	e9 f7       	brne	.-6      	; 0x288 <Keypad_UpdateKeyMode+0xc>
     28e:	ac 01       	movw	r20, r24
     290:	4e 1b       	sub	r20, r30
     292:	5f 0b       	sbc	r21, r31
     294:	4f 5e       	subi	r20, 0xEF	; 239
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     2a2:	be 01       	movw	r22, r28
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 c1 02 	call	0x582	; 0x582 <Lcd_Prints>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     2b0:	89 b3       	in	r24, 0x19	; 25
}
     2b2:	82 95       	swap	r24
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	08 95       	ret

000002b8 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
	int pin = PINA >> 4;
     2be:	c9 b3       	in	r28, 0x19	; 25
     2c0:	c2 95       	swap	r28
     2c2:	cf 70       	andi	r28, 0x0F	; 15
     2c4:	0c 2f       	mov	r16, r28
     2c6:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     2c8:	b8 01       	movw	r22, r16
     2ca:	8b e8       	ldi	r24, 0x8B	; 139
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     2d2:	c0 fd       	sbrc	r28, 0
     2d4:	0c c0       	rjmp	.+24     	; 0x2ee <Keypad_GetRow+0x36>
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	98 01       	movw	r18, r16
     2dc:	08 2e       	mov	r0, r24
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <Keypad_GetRow+0x2c>
     2e0:	35 95       	asr	r19
     2e2:	27 95       	ror	r18
     2e4:	0a 94       	dec	r0
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <Keypad_GetRow+0x28>
     2e8:	20 ff       	sbrs	r18, 0
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <Keypad_GetRow+0x3c>
     2ec:	0c c0       	rjmp	.+24     	; 0x306 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     2f2:	09 c0       	rjmp	.+18     	; 0x306 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	91 05       	cpc	r25, r1
     2fa:	79 f7       	brne	.-34     	; 0x2da <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     2fc:	84 e9       	ldi	r24, 0x94	; 148
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	return -1;
     304:	8f ef       	ldi	r24, 0xFF	; 255
}
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
	int i = 7;
     316:	c7 e0       	ldi	r28, 0x07	; 7
     318:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     31a:	01 e0       	ldi	r16, 0x01	; 1
     31c:	10 e0       	ldi	r17, 0x00	; 0
     31e:	28 b3       	in	r18, 0x18	; 24
     320:	c8 01       	movw	r24, r16
     322:	0c 2e       	mov	r0, r28
     324:	02 c0       	rjmp	.+4      	; 0x32a <Keypad_GetCol+0x1c>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	0a 94       	dec	r0
     32c:	e2 f7       	brpl	.-8      	; 0x326 <Keypad_GetCol+0x18>
     32e:	82 27       	eor	r24, r18
     330:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     332:	66 b3       	in	r22, 0x16	; 22
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	82 ea       	ldi	r24, 0xA2	; 162
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     33e:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     340:	82 95       	swap	r24
     342:	8f 70       	andi	r24, 0x0F	; 15
     344:	11 f4       	brne	.+4      	; 0x34a <Keypad_GetCol+0x3c>
		{
			return i;
     346:	8c 2f       	mov	r24, r28
     348:	07 c0       	rjmp	.+14     	; 0x358 <Keypad_GetCol+0x4a>
		}
		i--;
     34a:	21 97       	sbiw	r28, 0x01	; 1
     34c:	40 f7       	brcc	.-48     	; 0x31e <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     34e:	88 ea       	ldi	r24, 0xA8	; 168
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	// report error
	return -1;
     356:	8f ef       	ldi	r24, 0xFF	; 255
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	08 95       	ret

00000362 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     362:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <__data_end>
     366:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <__data_end+0x1>
     36a:	f9 01       	movw	r30, r18
     36c:	ee 50       	subi	r30, 0x0E	; 14
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 83       	st	Z, r24
	if(position < 16)
     372:	20 31       	cpi	r18, 0x10	; 16
     374:	31 05       	cpc	r19, r1
     376:	34 f4       	brge	.+12     	; 0x384 <addChar+0x22>
		position = position +1;
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	30 93 ef 01 	sts	0x01EF, r19	; 0x8001ef <__data_end+0x1>
     380:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <__data_end>
	keyBuffer[position] = 0;
     384:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <__data_end>
     388:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <__data_end+0x1>
     38c:	ee 50       	subi	r30, 0x0E	; 14
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	10 82       	st	Z, r1
     392:	08 95       	ret

00000394 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     394:	cf 93       	push	r28
     396:	c8 2f       	mov	r28, r24
	if(key >= 30)
     398:	8e 31       	cpi	r24, 0x1E	; 30
     39a:	24 f0       	brlt	.+8      	; 0x3a4 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     39c:	86 eb       	ldi	r24, 0xB6	; 182
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	if(key == 29) 
     3a4:	cd 31       	cpi	r28, 0x1D	; 29
     3a6:	99 f4       	brne	.+38     	; 0x3ce <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     3a8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <__data_end>
     3ac:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <__data_end+0x1>
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	29 f0       	breq	.+10     	; 0x3be <Keypad_AddKey+0x2a>
			position--;
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <__data_end+0x1>
     3ba:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <__data_end>
		keyBuffer[position] = 0;
     3be:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <__data_end>
     3c2:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <__data_end+0x1>
     3c6:	ee 50       	subi	r30, 0x0E	; 14
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	10 82       	st	Z, r1
     3cc:	57 c0       	rjmp	.+174    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else if(key == 28)
     3ce:	cc 31       	cpi	r28, 0x1C	; 28
     3d0:	21 f4       	brne	.+8      	; 0x3da <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     3d2:	80 e2       	ldi	r24, 0x20	; 32
     3d4:	0e 94 b1 01 	call	0x362	; 0x362 <addChar>
     3d8:	51 c0       	rjmp	.+162    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else if(key == 27)
     3da:	cb 31       	cpi	r28, 0x1B	; 27
     3dc:	39 f4       	brne	.+14     	; 0x3ec <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     3de:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <isNumber>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	89 27       	eor	r24, r25
     3e6:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <isNumber>
     3ea:	48 c0       	rjmp	.+144    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else if(isNumber) 
     3ec:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <isNumber>
     3f0:	88 23       	and	r24, r24
     3f2:	e9 f0       	breq	.+58     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     3f4:	9c 2f       	mov	r25, r28
     3f6:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     3f8:	93 30       	cpi	r25, 0x03	; 3
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <Keypad_AddKey+0x6a>
     3fc:	3f c0       	rjmp	.+126    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     3fe:	c5 95       	asr	r28
     400:	c5 95       	asr	r28
     402:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     404:	c3 30       	cpi	r28, 0x03	; 3
     406:	38 f4       	brcc	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			c = '1' + row * 3 + col;
     408:	8c 2f       	mov	r24, r28
     40a:	88 0f       	add	r24, r24
     40c:	c8 0f       	add	r28, r24
     40e:	81 e3       	ldi	r24, 0x31	; 49
     410:	89 0f       	add	r24, r25
     412:	8c 0f       	add	r24, r28
     414:	09 c0       	rjmp	.+18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if(col == 0) {
     416:	99 23       	and	r25, r25
     418:	21 f0       	breq	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			c = '*';
		}
		else if(col == 1) {
     41a:	91 30       	cpi	r25, 0x01	; 1
     41c:	21 f0       	breq	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			c = '0';
		}
		else  {
			c = '#';
     41e:	83 e2       	ldi	r24, 0x23	; 35
     420:	03 c0       	rjmp	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     422:	8a e2       	ldi	r24, 0x2A	; 42
     424:	01 c0       	rjmp	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if(col == 1) {
			c = '0';
     426:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     428:	0e 94 b1 01 	call	0x362	; 0x362 <addChar>
     42c:	27 c0       	rjmp	.+78     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		
	}
	else if(key == 26)
     42e:	ca 31       	cpi	r28, 0x1A	; 26
     430:	39 f4       	brne	.+14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	{
		// capslock
		isUpperCase = !isUpperCase;
     432:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <isUpperCase>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	89 27       	eor	r24, r25
     43a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <isUpperCase>
     43e:	1e c0       	rjmp	.+60     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else
	{
		// char
		char row = key >> 3;
     440:	9c 2f       	mov	r25, r28
     442:	95 95       	asr	r25
     444:	95 95       	asr	r25
     446:	95 95       	asr	r25
		char col = key & 0b00000111;
     448:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     44a:	93 30       	cpi	r25, 0x03	; 3
     44c:	68 f4       	brcc	.+26     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     44e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <isUpperCase>
     452:	81 11       	cpse	r24, r1
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	81 e6       	ldi	r24, 0x61	; 97
     458:	01 c0       	rjmp	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	81 e4       	ldi	r24, 0x41	; 65
     45c:	99 0f       	add	r25, r25
     45e:	99 0f       	add	r25, r25
     460:	99 0f       	add	r25, r25
     462:	c9 0f       	add	r28, r25
     464:	8c 0f       	add	r24, r28
     466:	08 c0       	rjmp	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     468:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <isUpperCase>
     46c:	81 11       	cpse	r24, r1
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     470:	89 e7       	ldi	r24, 0x79	; 121
     472:	01 c0       	rjmp	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     474:	89 e5       	ldi	r24, 0x59	; 89
     476:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     478:	0e 94 b1 01 	call	0x362	; 0x362 <addChar>
	}
	return ;
}
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     484:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Keypad_GetRow>
     488:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     48a:	0e 94 87 01 	call	0x30e	; 0x30e <Keypad_GetCol>
     48e:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     490:	6c 2f       	mov	r22, r28
     492:	0c 2e       	mov	r0, r28
     494:	00 0c       	add	r0, r0
     496:	77 0b       	sbc	r23, r23
     498:	8b ec       	ldi	r24, 0xCB	; 203
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     4a0:	6d 2f       	mov	r22, r29
     4a2:	0d 2e       	mov	r0, r29
     4a4:	00 0c       	add	r0, r0
     4a6:	77 0b       	sbc	r23, r23
     4a8:	8f ec       	ldi	r24, 0xCF	; 207
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	return row * 8 + col;
     4b0:	8c 2f       	mov	r24, r28
     4b2:	88 0f       	add	r24, r24
     4b4:	88 0f       	add	r24, r24
     4b6:	88 0f       	add	r24, r24
     4b8:	8d 0f       	add	r24, r29
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     4c0:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <currentState>
     4c4:	92 30       	cpi	r25, 0x02	; 2
     4c6:	89 f0       	breq	.+34     	; 0x4ea <KeyProcessor_ProcessKey+0x2a>
     4c8:	2c f4       	brge	.+10     	; 0x4d4 <KeyProcessor_ProcessKey+0x14>
     4ca:	99 23       	and	r25, r25
     4cc:	41 f0       	breq	.+16     	; 0x4de <KeyProcessor_ProcessKey+0x1e>
     4ce:	91 30       	cpi	r25, 0x01	; 1
     4d0:	49 f0       	breq	.+18     	; 0x4e4 <KeyProcessor_ProcessKey+0x24>
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <KeyProcessor_ProcessKey+0x3c>
     4d4:	93 30       	cpi	r25, 0x03	; 3
     4d6:	61 f0       	breq	.+24     	; 0x4f0 <KeyProcessor_ProcessKey+0x30>
     4d8:	94 30       	cpi	r25, 0x04	; 4
     4da:	69 f0       	breq	.+26     	; 0x4f6 <KeyProcessor_ProcessKey+0x36>
     4dc:	0f c0       	rjmp	.+30     	; 0x4fc <KeyProcessor_ProcessKey+0x3c>
	{
		case IDLE:
			Idle_ProcessKey(key);
     4de:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <Idle_ProcessKey>
			break;
     4e2:	08 95       	ret
		case ENTERING_NAME :
		EnteringName_ProcessKey(key);
     4e4:	0e 94 52 07 	call	0xea4	; 0xea4 <EnteringName_ProcessKey>
		break;
     4e8:	08 95       	ret
		case ENTERING_AGE :
		EnteringAge_ProcessKey(key);
     4ea:	0e 94 09 07 	call	0xe12	; 0xe12 <EnteringAge_ProcessKey>
		break;
     4ee:	08 95       	ret
		case ENTERING_PHONE :
		EnteringPhone_ProcessKey(key);
     4f0:	0e 94 95 07 	call	0xf2a	; 0xf2a <EnteringPhone_ProcessKey>
		break;
     4f4:	08 95       	ret
		case GENERATE_SERIAL :
		GenerateSerial_ProcessKey(key);
     4f6:	0e 94 be 07 	call	0xf7c	; 0xf7c <GenerateSerial_ProcessKey>
		break;
     4fa:	08 95       	ret
		//case STORE_RECORD :
		//Store_ProcessKey(key);
		//break;
		default:
		Error_Error("ProcessKey: Undefined Current State");
     4fc:	83 ed       	ldi	r24, 0xD3	; 211
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     504:	08 95       	ret

00000506 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     506:	88 23       	and	r24, r24
     508:	19 f0       	breq	.+6      	; 0x510 <Lcd_Init+0xa>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	39 f0       	breq	.+14     	; 0x51c <Lcd_Init+0x16>
     50e:	24 c0       	rjmp	.+72     	; 0x558 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     510:	81 b3       	in	r24, 0x11	; 17
     512:	8c 6f       	ori	r24, 0xFC	; 252
     514:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     516:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Lcd4_Init>
			break;
     51a:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_init>
			lcd_backlight(0);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 b7 06 	call	0xd6e	; 0xd6e <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	2f e9       	ldi	r18, 0x9F	; 159
     52a:	86 e8       	ldi	r24, 0x86	; 134
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	80 40       	sbci	r24, 0x00	; 0
     532:	90 40       	sbci	r25, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <Lcd_Init+0x28>
     536:	00 c0       	rjmp	.+0      	; 0x538 <Lcd_Init+0x32>
     538:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <lcd_backlight>
     540:	2f e9       	ldi	r18, 0x9F	; 159
     542:	86 e8       	ldi	r24, 0x86	; 134
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	21 50       	subi	r18, 0x01	; 1
     548:	80 40       	sbci	r24, 0x00	; 0
     54a:	90 40       	sbci	r25, 0x00	; 0
     54c:	e1 f7       	brne	.-8      	; 0x546 <Lcd_Init+0x40>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <Lcd_Init+0x4a>
     550:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     552:	0e 94 05 06 	call	0xc0a	; 0xc0a <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     556:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     558:	87 ef       	ldi	r24, 0xF7	; 247
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     560:	08 95       	ret

00000562 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     562:	88 23       	and	r24, r24
     564:	19 f0       	breq	.+6      	; 0x56c <Lcd_ClearScreen+0xa>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	21 f0       	breq	.+8      	; 0x572 <Lcd_ClearScreen+0x10>
     56a:	06 c0       	rjmp	.+12     	; 0x578 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     56c:	0e 94 cd 04 	call	0x99a	; 0x99a <Lcd4_Clear>
			break;
     570:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     572:	0e 94 05 06 	call	0xc0a	; 0xc0a <lcd_clrscr>
			break;
     576:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     578:	86 e1       	ldi	r24, 0x16	; 22
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     580:	08 95       	ret

00000582 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     582:	88 23       	and	r24, r24
     584:	19 f0       	breq	.+6      	; 0x58c <Lcd_Prints+0xa>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	29 f0       	breq	.+10     	; 0x594 <Lcd_Prints+0x12>
     58a:	08 c0       	rjmp	.+16     	; 0x59c <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     58c:	cb 01       	movw	r24, r22
     58e:	0e 94 6a 05 	call	0xad4	; 0xad4 <Lcd4_Write_String>
			break;
     592:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     594:	cb 01       	movw	r24, r22
     596:	0e 94 37 06 	call	0xc6e	; 0xc6e <lcd_puts>
			break;
     59a:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     59c:	86 e1       	ldi	r24, 0x16	; 22
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     5a4:	08 95       	ret

000005a6 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     5a6:	96 2f       	mov	r25, r22
	switch(lcdType)
     5a8:	88 23       	and	r24, r24
     5aa:	19 f0       	breq	.+6      	; 0x5b2 <Lcd_Position+0xc>
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	31 f0       	breq	.+12     	; 0x5bc <Lcd_Position+0x16>
     5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     5b2:	64 2f       	mov	r22, r20
     5b4:	89 2f       	mov	r24, r25
     5b6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Lcd4_Set_Cursor>
		break;
     5ba:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     5bc:	84 2f       	mov	r24, r20
     5be:	0e 94 ef 05 	call	0xbde	; 0xbde <lcd_gotoxy>
		break;
     5c2:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     5c4:	8d e3       	ldi	r24, 0x3D	; 61
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     5cc:	08 95       	ret

000005ce <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <Lcd_Printc+0x6>
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     5d8:	69 83       	std	Y+1, r22	; 0x01
     5da:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     5dc:	be 01       	movw	r22, r28
     5de:	6f 5f       	subi	r22, 0xFF	; 255
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	0e 94 c1 02 	call	0x582	; 0x582 <Lcd_Prints>
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	f8 2e       	mov	r15, r24
     5fc:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd_Position>
	int i =0;
	while (str[i])
     606:	68 81       	ld	r22, Y
     608:	66 23       	and	r22, r22
     60a:	91 f0       	breq	.+36     	; 0x630 <Lcd_PrintLine+0x40>
     60c:	8e 01       	movw	r16, r28
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	8f 2d       	mov	r24, r15
     61a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     61e:	f8 01       	movw	r30, r16
     620:	61 91       	ld	r22, Z+
     622:	8f 01       	movw	r16, r30
     624:	61 11       	cpse	r22, r1
     626:	f7 cf       	rjmp	.-18     	; 0x616 <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     628:	c0 31       	cpi	r28, 0x10	; 16
     62a:	d1 05       	cpc	r29, r1
     62c:	1c f0       	brlt	.+6      	; 0x634 <Lcd_PrintLine+0x44>
     62e:	0a c0       	rjmp	.+20     	; 0x644 <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     634:	60 e2       	ldi	r22, 0x20	; 32
     636:	8f 2d       	mov	r24, r15
     638:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Lcd_Printc>
     63c:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     63e:	c0 31       	cpi	r28, 0x10	; 16
     640:	d1 05       	cpc	r29, r1
     642:	c4 f3       	brlt	.-16     	; 0x634 <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	08 95       	ret

00000650 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     650:	67 2b       	or	r22, r23
     652:	09 f0       	breq	.+2      	; 0x656 <pinChange+0x6>
     654:	9f c0       	rjmp	.+318    	; 0x794 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	11 f4       	brne	.+4      	; 0x65e <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     65a:	d8 98       	cbi	0x1b, 0	; 27
     65c:	08 95       	ret
		else if(a == eS_PORTA1)
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	91 05       	cpc	r25, r1
     662:	11 f4       	brne	.+4      	; 0x668 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     664:	d9 98       	cbi	0x1b, 1	; 27
     666:	08 95       	ret
		else if(a == eS_PORTA2)
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	91 05       	cpc	r25, r1
     66c:	11 f4       	brne	.+4      	; 0x672 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     66e:	da 98       	cbi	0x1b, 2	; 27
     670:	08 95       	ret
		else if(a == eS_PORTA3)
     672:	83 30       	cpi	r24, 0x03	; 3
     674:	91 05       	cpc	r25, r1
     676:	11 f4       	brne	.+4      	; 0x67c <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     678:	db 98       	cbi	0x1b, 3	; 27
     67a:	08 95       	ret
		else if(a == eS_PORTA4)
     67c:	84 30       	cpi	r24, 0x04	; 4
     67e:	91 05       	cpc	r25, r1
     680:	11 f4       	brne	.+4      	; 0x686 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     682:	dc 98       	cbi	0x1b, 4	; 27
     684:	08 95       	ret
		else if(a == eS_PORTA5)
     686:	85 30       	cpi	r24, 0x05	; 5
     688:	91 05       	cpc	r25, r1
     68a:	11 f4       	brne	.+4      	; 0x690 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     68c:	dd 98       	cbi	0x1b, 5	; 27
     68e:	08 95       	ret
		else if(a == eS_PORTA6)
     690:	86 30       	cpi	r24, 0x06	; 6
     692:	91 05       	cpc	r25, r1
     694:	11 f4       	brne	.+4      	; 0x69a <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     696:	de 98       	cbi	0x1b, 6	; 27
     698:	08 95       	ret
		else if(a == eS_PORTA7)
     69a:	87 30       	cpi	r24, 0x07	; 7
     69c:	91 05       	cpc	r25, r1
     69e:	11 f4       	brne	.+4      	; 0x6a4 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     6a0:	df 98       	cbi	0x1b, 7	; 27
     6a2:	08 95       	ret
		else if(a == eS_PORTB0)
     6a4:	8a 30       	cpi	r24, 0x0A	; 10
     6a6:	91 05       	cpc	r25, r1
     6a8:	11 f4       	brne	.+4      	; 0x6ae <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     6aa:	c0 98       	cbi	0x18, 0	; 24
     6ac:	08 95       	ret
		else if(a == eS_PORTB1)
     6ae:	8b 30       	cpi	r24, 0x0B	; 11
     6b0:	91 05       	cpc	r25, r1
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     6b4:	c1 98       	cbi	0x18, 1	; 24
     6b6:	08 95       	ret
		else if(a == eS_PORTB2)
     6b8:	8c 30       	cpi	r24, 0x0C	; 12
     6ba:	91 05       	cpc	r25, r1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     6be:	c2 98       	cbi	0x18, 2	; 24
     6c0:	08 95       	ret
		else if(a == eS_PORTB3)
     6c2:	8d 30       	cpi	r24, 0x0D	; 13
     6c4:	91 05       	cpc	r25, r1
     6c6:	11 f4       	brne	.+4      	; 0x6cc <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     6c8:	c3 98       	cbi	0x18, 3	; 24
     6ca:	08 95       	ret
		else if(a == eS_PORTB4)
     6cc:	8e 30       	cpi	r24, 0x0E	; 14
     6ce:	91 05       	cpc	r25, r1
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     6d2:	c4 98       	cbi	0x18, 4	; 24
     6d4:	08 95       	ret
		else if(a == eS_PORTB5)
     6d6:	8f 30       	cpi	r24, 0x0F	; 15
     6d8:	91 05       	cpc	r25, r1
     6da:	11 f4       	brne	.+4      	; 0x6e0 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     6dc:	c5 98       	cbi	0x18, 5	; 24
     6de:	08 95       	ret
		else if(a == eS_PORTB6)
     6e0:	80 31       	cpi	r24, 0x10	; 16
     6e2:	91 05       	cpc	r25, r1
     6e4:	11 f4       	brne	.+4      	; 0x6ea <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     6e6:	c6 98       	cbi	0x18, 6	; 24
     6e8:	08 95       	ret
		else if(a == eS_PORTB7)
     6ea:	81 31       	cpi	r24, 0x11	; 17
     6ec:	91 05       	cpc	r25, r1
     6ee:	11 f4       	brne	.+4      	; 0x6f4 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     6f0:	c7 98       	cbi	0x18, 7	; 24
     6f2:	08 95       	ret
		else if(a == eS_PORTC0)
     6f4:	84 31       	cpi	r24, 0x14	; 20
     6f6:	91 05       	cpc	r25, r1
     6f8:	11 f4       	brne	.+4      	; 0x6fe <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     6fa:	a8 98       	cbi	0x15, 0	; 21
     6fc:	08 95       	ret
		else if(a == eS_PORTC1)
     6fe:	85 31       	cpi	r24, 0x15	; 21
     700:	91 05       	cpc	r25, r1
     702:	11 f4       	brne	.+4      	; 0x708 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     704:	a9 98       	cbi	0x15, 1	; 21
     706:	08 95       	ret
		else if(a == eS_PORTC2)
     708:	86 31       	cpi	r24, 0x16	; 22
     70a:	91 05       	cpc	r25, r1
     70c:	11 f4       	brne	.+4      	; 0x712 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     70e:	aa 98       	cbi	0x15, 2	; 21
     710:	08 95       	ret
		else if(a == eS_PORTC3)
     712:	87 31       	cpi	r24, 0x17	; 23
     714:	91 05       	cpc	r25, r1
     716:	11 f4       	brne	.+4      	; 0x71c <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     718:	ab 98       	cbi	0x15, 3	; 21
     71a:	08 95       	ret
		else if(a == eS_PORTC4)
     71c:	88 31       	cpi	r24, 0x18	; 24
     71e:	91 05       	cpc	r25, r1
     720:	11 f4       	brne	.+4      	; 0x726 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     722:	ac 98       	cbi	0x15, 4	; 21
     724:	08 95       	ret
		else if(a == eS_PORTC5)
     726:	89 31       	cpi	r24, 0x19	; 25
     728:	91 05       	cpc	r25, r1
     72a:	11 f4       	brne	.+4      	; 0x730 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     72c:	ad 98       	cbi	0x15, 5	; 21
     72e:	08 95       	ret
		else if(a == eS_PORTC6)
     730:	8a 31       	cpi	r24, 0x1A	; 26
     732:	91 05       	cpc	r25, r1
     734:	11 f4       	brne	.+4      	; 0x73a <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     736:	ae 98       	cbi	0x15, 6	; 21
     738:	08 95       	ret
		else if(a == eS_PORTC7)
     73a:	8b 31       	cpi	r24, 0x1B	; 27
     73c:	91 05       	cpc	r25, r1
     73e:	11 f4       	brne	.+4      	; 0x744 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     740:	af 98       	cbi	0x15, 7	; 21
     742:	08 95       	ret
		else if(a == eS_PORTD0)
     744:	8e 31       	cpi	r24, 0x1E	; 30
     746:	91 05       	cpc	r25, r1
     748:	11 f4       	brne	.+4      	; 0x74e <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     74a:	90 98       	cbi	0x12, 0	; 18
     74c:	08 95       	ret
		else if(a == eS_PORTD1)
     74e:	8f 31       	cpi	r24, 0x1F	; 31
     750:	91 05       	cpc	r25, r1
     752:	11 f4       	brne	.+4      	; 0x758 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     754:	91 98       	cbi	0x12, 1	; 18
     756:	08 95       	ret
		else if(a == eS_PORTD2)
     758:	80 32       	cpi	r24, 0x20	; 32
     75a:	91 05       	cpc	r25, r1
     75c:	11 f4       	brne	.+4      	; 0x762 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     75e:	92 98       	cbi	0x12, 2	; 18
     760:	08 95       	ret
		else if(a == eS_PORTD3)
     762:	81 32       	cpi	r24, 0x21	; 33
     764:	91 05       	cpc	r25, r1
     766:	11 f4       	brne	.+4      	; 0x76c <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     768:	93 98       	cbi	0x12, 3	; 18
     76a:	08 95       	ret
		else if(a == eS_PORTD4)
     76c:	82 32       	cpi	r24, 0x22	; 34
     76e:	91 05       	cpc	r25, r1
     770:	11 f4       	brne	.+4      	; 0x776 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     772:	94 98       	cbi	0x12, 4	; 18
     774:	08 95       	ret
		else if(a == eS_PORTD5)
     776:	83 32       	cpi	r24, 0x23	; 35
     778:	91 05       	cpc	r25, r1
     77a:	11 f4       	brne	.+4      	; 0x780 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     77c:	95 98       	cbi	0x12, 5	; 18
     77e:	08 95       	ret
		else if(a == eS_PORTD6)
     780:	84 32       	cpi	r24, 0x24	; 36
     782:	91 05       	cpc	r25, r1
     784:	11 f4       	brne	.+4      	; 0x78a <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     786:	96 98       	cbi	0x12, 6	; 18
     788:	08 95       	ret
		else if(a == eS_PORTD7)
     78a:	85 97       	sbiw	r24, 0x25	; 37
     78c:	09 f0       	breq	.+2      	; 0x790 <pinChange+0x140>
     78e:	9f c0       	rjmp	.+318    	; 0x8ce <__stack+0x6f>
		PORTD &= ~(1<<PD7);
     790:	97 98       	cbi	0x12, 7	; 18
     792:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	11 f4       	brne	.+4      	; 0x79c <pinChange+0x14c>
		PORTA |= (1<<PA0);
     798:	d8 9a       	sbi	0x1b, 0	; 27
     79a:	08 95       	ret
		else if(a == eS_PORTA1)
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	91 05       	cpc	r25, r1
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <pinChange+0x156>
		PORTA |= (1<<PA1);
     7a2:	d9 9a       	sbi	0x1b, 1	; 27
     7a4:	08 95       	ret
		else if(a == eS_PORTA2)
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	91 05       	cpc	r25, r1
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <pinChange+0x160>
		PORTA |= (1<<PA2);
     7ac:	da 9a       	sbi	0x1b, 2	; 27
     7ae:	08 95       	ret
		else if(a == eS_PORTA3)
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	91 05       	cpc	r25, r1
     7b4:	11 f4       	brne	.+4      	; 0x7ba <pinChange+0x16a>
		PORTA |= (1<<PA3);
     7b6:	db 9a       	sbi	0x1b, 3	; 27
     7b8:	08 95       	ret
		else if(a == eS_PORTA4)
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <pinChange+0x174>
		PORTA |= (1<<PA4);
     7c0:	dc 9a       	sbi	0x1b, 4	; 27
     7c2:	08 95       	ret
		else if(a == eS_PORTA5)
     7c4:	85 30       	cpi	r24, 0x05	; 5
     7c6:	91 05       	cpc	r25, r1
     7c8:	11 f4       	brne	.+4      	; 0x7ce <pinChange+0x17e>
		PORTA |= (1<<PA5);
     7ca:	dd 9a       	sbi	0x1b, 5	; 27
     7cc:	08 95       	ret
		else if(a == eS_PORTA6)
     7ce:	86 30       	cpi	r24, 0x06	; 6
     7d0:	91 05       	cpc	r25, r1
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <pinChange+0x188>
		PORTA |= (1<<PA6);
     7d4:	de 9a       	sbi	0x1b, 6	; 27
     7d6:	08 95       	ret
		else if(a == eS_PORTA7)
     7d8:	87 30       	cpi	r24, 0x07	; 7
     7da:	91 05       	cpc	r25, r1
     7dc:	11 f4       	brne	.+4      	; 0x7e2 <pinChange+0x192>
		PORTA |= (1<<PA7);
     7de:	df 9a       	sbi	0x1b, 7	; 27
     7e0:	08 95       	ret
		else if(a == eS_PORTB0)
     7e2:	8a 30       	cpi	r24, 0x0A	; 10
     7e4:	91 05       	cpc	r25, r1
     7e6:	11 f4       	brne	.+4      	; 0x7ec <pinChange+0x19c>
		PORTB |= (1<<PB0);
     7e8:	c0 9a       	sbi	0x18, 0	; 24
     7ea:	08 95       	ret
		else if(a == eS_PORTB1)
     7ec:	8b 30       	cpi	r24, 0x0B	; 11
     7ee:	91 05       	cpc	r25, r1
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     7f2:	c1 9a       	sbi	0x18, 1	; 24
     7f4:	08 95       	ret
		else if(a == eS_PORTB2)
     7f6:	8c 30       	cpi	r24, 0x0C	; 12
     7f8:	91 05       	cpc	r25, r1
     7fa:	11 f4       	brne	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
		PORTB |= (1<<PB2);
     7fc:	c2 9a       	sbi	0x18, 2	; 24
     7fe:	08 95       	ret
		else if(a == eS_PORTB3)
     800:	8d 30       	cpi	r24, 0x0D	; 13
     802:	91 05       	cpc	r25, r1
     804:	11 f4       	brne	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		PORTB |= (1<<PB3);
     806:	c3 9a       	sbi	0x18, 3	; 24
     808:	08 95       	ret
		else if(a == eS_PORTB4)
     80a:	8e 30       	cpi	r24, 0x0E	; 14
     80c:	91 05       	cpc	r25, r1
     80e:	11 f4       	brne	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		PORTB |= (1<<PB4);
     810:	c4 9a       	sbi	0x18, 4	; 24
     812:	08 95       	ret
		else if(a == eS_PORTB5)
     814:	8f 30       	cpi	r24, 0x0F	; 15
     816:	91 05       	cpc	r25, r1
     818:	11 f4       	brne	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		PORTB |= (1<<PB5);
     81a:	c5 9a       	sbi	0x18, 5	; 24
     81c:	08 95       	ret
		else if(a == eS_PORTB6)
     81e:	80 31       	cpi	r24, 0x10	; 16
     820:	91 05       	cpc	r25, r1
     822:	11 f4       	brne	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		PORTB |= (1<<PB6);
     824:	c6 9a       	sbi	0x18, 6	; 24
     826:	08 95       	ret
		else if(a == eS_PORTB7)
     828:	81 31       	cpi	r24, 0x11	; 17
     82a:	91 05       	cpc	r25, r1
     82c:	11 f4       	brne	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		PORTB |= (1<<PB7);
     82e:	c7 9a       	sbi	0x18, 7	; 24
     830:	08 95       	ret
		else if(a == eS_PORTC0)
     832:	84 31       	cpi	r24, 0x14	; 20
     834:	91 05       	cpc	r25, r1
     836:	11 f4       	brne	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		PORTC |= (1<<PC0);
     838:	a8 9a       	sbi	0x15, 0	; 21
     83a:	08 95       	ret
		else if(a == eS_PORTC1)
     83c:	85 31       	cpi	r24, 0x15	; 21
     83e:	91 05       	cpc	r25, r1
     840:	11 f4       	brne	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		PORTC |= (1<<PC1);
     842:	a9 9a       	sbi	0x15, 1	; 21
     844:	08 95       	ret
		else if(a == eS_PORTC2)
     846:	86 31       	cpi	r24, 0x16	; 22
     848:	91 05       	cpc	r25, r1
     84a:	11 f4       	brne	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		PORTC |= (1<<PC2);
     84c:	aa 9a       	sbi	0x15, 2	; 21
     84e:	08 95       	ret
		else if(a == eS_PORTC3)
     850:	87 31       	cpi	r24, 0x17	; 23
     852:	91 05       	cpc	r25, r1
     854:	11 f4       	brne	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		PORTC |= (1<<PC3);
     856:	ab 9a       	sbi	0x15, 3	; 21
     858:	08 95       	ret
		else if(a == eS_PORTC4)
     85a:	88 31       	cpi	r24, 0x18	; 24
     85c:	91 05       	cpc	r25, r1
     85e:	11 f4       	brne	.+4      	; 0x864 <__stack+0x5>
		PORTC |= (1<<PC4);
     860:	ac 9a       	sbi	0x15, 4	; 21
     862:	08 95       	ret
		else if(a == eS_PORTC5)
     864:	89 31       	cpi	r24, 0x19	; 25
     866:	91 05       	cpc	r25, r1
     868:	11 f4       	brne	.+4      	; 0x86e <__stack+0xf>
		PORTC |= (1<<PC5);
     86a:	ad 9a       	sbi	0x15, 5	; 21
     86c:	08 95       	ret
		else if(a == eS_PORTC6)
     86e:	8a 31       	cpi	r24, 0x1A	; 26
     870:	91 05       	cpc	r25, r1
     872:	11 f4       	brne	.+4      	; 0x878 <__stack+0x19>
		PORTC |= (1<<PC6);
     874:	ae 9a       	sbi	0x15, 6	; 21
     876:	08 95       	ret
		else if(a == eS_PORTC7)
     878:	8b 31       	cpi	r24, 0x1B	; 27
     87a:	91 05       	cpc	r25, r1
     87c:	11 f4       	brne	.+4      	; 0x882 <__stack+0x23>
		PORTC |= (1<<PC7);
     87e:	af 9a       	sbi	0x15, 7	; 21
     880:	08 95       	ret
		else if(a == eS_PORTD0)
     882:	8e 31       	cpi	r24, 0x1E	; 30
     884:	91 05       	cpc	r25, r1
     886:	11 f4       	brne	.+4      	; 0x88c <__stack+0x2d>
		PORTD |= (1<<PD0);
     888:	90 9a       	sbi	0x12, 0	; 18
     88a:	08 95       	ret
		else if(a == eS_PORTD1)
     88c:	8f 31       	cpi	r24, 0x1F	; 31
     88e:	91 05       	cpc	r25, r1
     890:	11 f4       	brne	.+4      	; 0x896 <__stack+0x37>
		PORTD |= (1<<PD1);
     892:	91 9a       	sbi	0x12, 1	; 18
     894:	08 95       	ret
		else if(a == eS_PORTD2)
     896:	80 32       	cpi	r24, 0x20	; 32
     898:	91 05       	cpc	r25, r1
     89a:	11 f4       	brne	.+4      	; 0x8a0 <__stack+0x41>
		PORTD |= (1<<PD2);
     89c:	92 9a       	sbi	0x12, 2	; 18
     89e:	08 95       	ret
		else if(a == eS_PORTD3)
     8a0:	81 32       	cpi	r24, 0x21	; 33
     8a2:	91 05       	cpc	r25, r1
     8a4:	11 f4       	brne	.+4      	; 0x8aa <__stack+0x4b>
		PORTD |= (1<<PD3);
     8a6:	93 9a       	sbi	0x12, 3	; 18
     8a8:	08 95       	ret
		else if(a == eS_PORTD4)
     8aa:	82 32       	cpi	r24, 0x22	; 34
     8ac:	91 05       	cpc	r25, r1
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <__stack+0x55>
		PORTD |= (1<<PD4);
     8b0:	94 9a       	sbi	0x12, 4	; 18
     8b2:	08 95       	ret
		else if(a == eS_PORTD5)
     8b4:	83 32       	cpi	r24, 0x23	; 35
     8b6:	91 05       	cpc	r25, r1
     8b8:	11 f4       	brne	.+4      	; 0x8be <__stack+0x5f>
		PORTD |= (1<<PD5);
     8ba:	95 9a       	sbi	0x12, 5	; 18
     8bc:	08 95       	ret
		else if(a == eS_PORTD6)
     8be:	84 32       	cpi	r24, 0x24	; 36
     8c0:	91 05       	cpc	r25, r1
     8c2:	11 f4       	brne	.+4      	; 0x8c8 <__stack+0x69>
		PORTD |= (1<<PD6);
     8c4:	96 9a       	sbi	0x12, 6	; 18
     8c6:	08 95       	ret
		else if(a == eS_PORTD7)
     8c8:	85 97       	sbiw	r24, 0x25	; 37
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__stack+0x6f>
		PORTD |= (1<<PD7);
     8cc:	97 9a       	sbi	0x12, 7	; 18
     8ce:	08 95       	ret

000008d0 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     8d0:	cf 93       	push	r28
     8d2:	c8 2f       	mov	r28, r24
	if(a & 1)
     8d4:	80 ff       	sbrs	r24, 0
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <Lcd4_Port+0x16>
	pinChange(D4,1);
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	83 e2       	ldi	r24, 0x23	; 35
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	83 e2       	ldi	r24, 0x23	; 35
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
	
	if(a & 2)
     8f2:	c1 ff       	sbrs	r28, 1
     8f4:	07 c0       	rjmp	.+14     	; 0x904 <Lcd4_Port+0x34>
	pinChange(D5,1);
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	82 e2       	ldi	r24, 0x22	; 34
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     902:	06 c0       	rjmp	.+12     	; 0x910 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	82 e2       	ldi	r24, 0x22	; 34
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
	
	if(a & 4)
     910:	c2 ff       	sbrs	r28, 2
     912:	07 c0       	rjmp	.+14     	; 0x922 <Lcd4_Port+0x52>
	pinChange(D6,1);
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	81 e2       	ldi	r24, 0x21	; 33
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     920:	06 c0       	rjmp	.+12     	; 0x92e <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	81 e2       	ldi	r24, 0x21	; 33
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
	
	if(a & 8)
     92e:	c3 ff       	sbrs	r28, 3
     930:	07 c0       	rjmp	.+14     	; 0x940 <Lcd4_Port+0x70>
	pinChange(D7,1);
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     93e:	06 c0       	rjmp	.+12     	; 0x94c <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e2       	ldi	r24, 0x20	; 32
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
}
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     950:	cf 93       	push	r28
     952:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	85 e2       	ldi	r24, 0x25	; 37
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
	Lcd4_Port(a);
     960:	8c 2f       	mov	r24, r28
     962:	0e 94 68 04 	call	0x8d0	; 0x8d0 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	84 e2       	ldi	r24, 0x24	; 36
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     972:	89 ef       	ldi	r24, 0xF9	; 249
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	f1 f7       	brne	.-4      	; 0x976 <Lcd4_Cmd+0x26>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <Lcd4_Cmd+0x2c>
     97c:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	84 e2       	ldi	r24, 0x24	; 36
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     98a:	89 ef       	ldi	r24, 0xF9	; 249
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <Lcd4_Cmd+0x3e>
     992:	00 c0       	rjmp	.+0      	; 0x994 <Lcd4_Cmd+0x44>
     994:	00 00       	nop
	_delay_ms(1);
}
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
     9a6:	08 95       	ret

000009a8 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     9a8:	cf 93       	push	r28
     9aa:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     9ac:	81 11       	cpse	r24, r1
     9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     9b0:	80 e8       	ldi	r24, 0x80	; 128
     9b2:	86 0f       	add	r24, r22
     9b4:	82 95       	swap	r24
     9b6:	8f 70       	andi	r24, 0x0F	; 15
     9b8:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     9bc:	8c 2f       	mov	r24, r28
     9be:	8f 70       	andi	r24, 0x0F	; 15
     9c0:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
     9c4:	0c c0       	rjmp	.+24     	; 0x9de <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	51 f4       	brne	.+20     	; 0x9de <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     9ca:	80 ec       	ldi	r24, 0xC0	; 192
     9cc:	86 0f       	add	r24, r22
     9ce:	82 95       	swap	r24
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     9d6:	8c 2f       	mov	r24, r28
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	}
}
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <Lcd4_Port>
     9e8:	87 e8       	ldi	r24, 0x87	; 135
     9ea:	93 e1       	ldi	r25, 0x13	; 19
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <Lcd4_Init+0xa>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <Lcd4_Init+0x10>
     9f2:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
     9fa:	81 ee       	ldi	r24, 0xE1	; 225
     9fc:	94 e0       	ldi	r25, 0x04	; 4
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <Lcd4_Init+0x1c>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <Lcd4_Init+0x22>
     a04:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
     a0c:	8d eb       	ldi	r24, 0xBD	; 189
     a0e:	9a e0       	ldi	r25, 0x0A	; 10
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <Lcd4_Init+0x2e>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <Lcd4_Init+0x34>
     a16:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     a36:	8c e0       	ldi	r24, 0x0C	; 12
     a38:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     a42:	86 e0       	ldi	r24, 0x06	; 6
     a44:	0e 94 a8 04 	call	0x950	; 0x950 <Lcd4_Cmd>
	Lcd4_Clear();
     a48:	0e 94 cd 04 	call	0x99a	; 0x99a <Lcd4_Clear>
     a4c:	08 95       	ret

00000a4e <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     a4e:	cf 93       	push	r28
     a50:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	85 e2       	ldi	r24, 0x25	; 37
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     a5e:	8c 2f       	mov	r24, r28
     a60:	82 95       	swap	r24
     a62:	8f 70       	andi	r24, 0x0F	; 15
     a64:	0e 94 68 04 	call	0x8d0	; 0x8d0 <Lcd4_Port>
	pinChange(EN,1);
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	84 e2       	ldi	r24, 0x24	; 36
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     a74:	89 ef       	ldi	r24, 0xF9	; 249
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <Lcd4_Write_Char+0x2a>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <Lcd4_Write_Char+0x30>
     a7e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     a8c:	89 ef       	ldi	r24, 0xF9	; 249
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <Lcd4_Write_Char+0x42>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <Lcd4_Write_Char+0x48>
     a96:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     a98:	8c 2f       	mov	r24, r28
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <Lcd4_Port>
	pinChange(EN,1);
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	84 e2       	ldi	r24, 0x24	; 36
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     aac:	89 ef       	ldi	r24, 0xF9	; 249
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <Lcd4_Write_Char+0x62>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <Lcd4_Write_Char+0x68>
     ab6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	84 e2       	ldi	r24, 0x24	; 36
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 28 03 	call	0x650	; 0x650 <pinChange>
     ac4:	89 ef       	ldi	r24, 0xF9	; 249
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <Lcd4_Write_Char+0x7a>
     acc:	00 c0       	rjmp	.+0      	; 0xace <Lcd4_Write_Char+0x80>
     ace:	00 00       	nop
	_delay_ms(1);
}
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     ada:	88 81       	ld	r24, Y
     adc:	88 23       	and	r24, r24
     ade:	31 f0       	breq	.+12     	; 0xaec <Lcd4_Write_String+0x18>
     ae0:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     ae2:	0e 94 27 05 	call	0xa4e	; 0xa4e <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     ae6:	89 91       	ld	r24, Y+
     ae8:	81 11       	cpse	r24, r1
     aea:	fb cf       	rjmp	.-10     	; 0xae2 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	7b 01       	movw	r14, r22
     b00:	14 2f       	mov	r17, r20
     b02:	88 0f       	add	r24, r24
     b04:	0e 94 21 08 	call	0x1042	; 0x1042 <i2c_start>
     b08:	81 11       	cpse	r24, r1
     b0a:	12 c0       	rjmp	.+36     	; 0xb30 <I2C_WRITESEQ+0x3e>
     b0c:	11 23       	and	r17, r17
     b0e:	91 f0       	breq	.+36     	; 0xb34 <I2C_WRITESEQ+0x42>
     b10:	e7 01       	movw	r28, r14
     b12:	11 50       	subi	r17, 0x01	; 1
     b14:	01 2f       	mov	r16, r17
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	0f 5f       	subi	r16, 0xFF	; 255
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	0e 0d       	add	r16, r14
     b1e:	1f 1d       	adc	r17, r15
     b20:	89 91       	ld	r24, Y+
     b22:	0e 94 45 08 	call	0x108a	; 0x108a <i2c_write>
     b26:	c0 17       	cp	r28, r16
     b28:	d1 07       	cpc	r29, r17
     b2a:	d1 f7       	brne	.-12     	; 0xb20 <I2C_WRITESEQ+0x2e>
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <I2C_WRITESEQ+0x44>
     b30:	c1 e0       	ldi	r28, 0x01	; 1
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <I2C_WRITESEQ+0x44>
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	0e 94 3f 08 	call	0x107e	; 0x107e <i2c_stop>
     b3a:	8c 2f       	mov	r24, r28
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <wr_lcd_mode>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <wr_lcd_mode+0xa>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <wr_lcd_mode+0xc>
     b56:	1f 92       	push	r1
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	08 2f       	mov	r16, r24
     b5e:	68 30       	cpi	r22, 0x08	; 8
     b60:	71 f4       	brne	.+28     	; 0xb7e <wr_lcd_mode+0x34>
     b62:	81 11       	cpse	r24, r1
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <wr_lcd_mode+0x20>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <wr_lcd_mode+0x22>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	60 e6       	ldi	r22, 0x60	; 96
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	87 e2       	ldi	r24, 0x27	; 39
     b78:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_WRITESEQ>
     b7c:	26 c0       	rjmp	.+76     	; 0xbca <wr_lcd_mode+0x80>
     b7e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b82:	16 2f       	mov	r17, r22
     b84:	18 2b       	or	r17, r24
     b86:	19 83       	std	Y+1, r17	; 0x01
     b88:	80 2f       	mov	r24, r16
     b8a:	80 7f       	andi	r24, 0xF0	; 240
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	81 2b       	or	r24, r17
     b90:	8a 83       	std	Y+2, r24	; 0x02
     b92:	8b 7f       	andi	r24, 0xFB	; 251
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	20 e1       	ldi	r18, 0x10	; 16
     b98:	02 9f       	mul	r16, r18
     b9a:	c0 01       	movw	r24, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	81 2b       	or	r24, r17
     ba0:	84 60       	ori	r24, 0x04	; 4
     ba2:	8c 83       	std	Y+4, r24	; 0x04
     ba4:	8b 7f       	andi	r24, 0xFB	; 251
     ba6:	8d 83       	std	Y+5, r24	; 0x05
     ba8:	45 e0       	ldi	r20, 0x05	; 5
     baa:	be 01       	movw	r22, r28
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	87 e2       	ldi	r24, 0x27	; 39
     bb2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_WRITESEQ>
     bb6:	10 fd       	sbrc	r17, 0
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <wr_lcd_mode+0x80>
     bba:	03 30       	cpi	r16, 0x03	; 3
     bbc:	30 f4       	brcc	.+12     	; 0xbca <wr_lcd_mode+0x80>
     bbe:	e3 ef       	ldi	r30, 0xF3	; 243
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <wr_lcd_mode+0x78>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <wr_lcd_mode+0x7e>
     bc8:	00 00       	nop
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <lcd_gotoxy>:
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	d8 2f       	mov	r29, r24
     be4:	c6 2f       	mov	r28, r22
     be6:	e6 2f       	mov	r30, r22
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	ef 59       	subi	r30, 0x9F	; 159
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	98 2f       	mov	r25, r24
     bf0:	90 68       	ori	r25, 0x80	; 128
     bf2:	80 81       	ld	r24, Z
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	89 2b       	or	r24, r25
     bf8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
     bfc:	d0 93 04 02 	sts	0x0204, r29	; 0x800204 <_lcd_x>
     c00:	c0 93 05 02 	sts	0x0205, r28	; 0x800205 <_lcd_y>
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <lcd_clrscr>:
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
     c12:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_lcd_y>
     c16:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_lcd_x>
     c1a:	08 95       	ret

00000c1c <lcd_putc>:
     c1c:	cf 93       	push	r28
     c1e:	c8 2f       	mov	r28, r24
     c20:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <_lcd_x>
     c24:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <_lcd_maxx>
     c28:	98 17       	cp	r25, r24
     c2a:	18 f4       	brcc	.+6      	; 0xc32 <lcd_putc+0x16>
     c2c:	ca 30       	cpi	r28, 0x0A	; 10
     c2e:	59 f4       	brne	.+22     	; 0xc46 <lcd_putc+0x2a>
     c30:	14 c0       	rjmp	.+40     	; 0xc5a <lcd_putc+0x3e>
     c32:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <_lcd_y>
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <_lcd_y>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 ef 05 	call	0xbde	; 0xbde <lcd_gotoxy>
     c42:	ca 30       	cpi	r28, 0x0A	; 10
     c44:	91 f0       	breq	.+36     	; 0xc6a <lcd_putc+0x4e>
     c46:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_lcd_x>
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_lcd_x>
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	8c 2f       	mov	r24, r28
     c54:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <lcd_putc+0x4e>
     c5a:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <_lcd_y>
     c5e:	6f 5f       	subi	r22, 0xFF	; 255
     c60:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <_lcd_y>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	0e 94 ef 05 	call	0xbde	; 0xbde <lcd_gotoxy>
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <lcd_puts>:
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ec 01       	movw	r28, r24
     c74:	88 81       	ld	r24, Y
     c76:	88 23       	and	r24, r24
     c78:	31 f0       	breq	.+12     	; 0xc86 <lcd_puts+0x18>
     c7a:	21 96       	adiw	r28, 0x01	; 1
     c7c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <lcd_putc>
     c80:	89 91       	ld	r24, Y+
     c82:	81 11       	cpse	r24, r1
     c84:	fb cf       	rjmp	.-10     	; 0xc7c <lcd_puts+0xe>
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	00 d0       	rcall	.+0      	; 0xc96 <lcd_init+0xa>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <lcd_init+0xc>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <lcd_init+0xe>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     ca0:	80 e3       	ldi	r24, 0x30	; 48
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	94 e3       	ldi	r25, 0x34	; 52
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	8c 83       	std	Y+4, r24	; 0x04
     cae:	94 e2       	ldi	r25, 0x24	; 36
     cb0:	9d 83       	std	Y+5, r25	; 0x05
     cb2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     cb4:	80 e1       	ldi	r24, 0x10	; 16
     cb6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 5f       	subi	r24, 0xF0	; 240
     cc2:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     cc4:	81 81       	ldd	r24, Z+1	; 0x01
     cc6:	80 5f       	subi	r24, 0xF0	; 240
     cc8:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     cca:	bd 9a       	sbi	0x17, 5	; 23
     ccc:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
     cce:	0e 94 1d 08 	call	0x103a	; 0x103a <i2c_init>
     cd2:	8b e4       	ldi	r24, 0x4B	; 75
     cd4:	9d e1       	ldi	r25, 0x1D	; 29
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <lcd_init+0x4a>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <lcd_init+0x50>
     cdc:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     cde:	43 e0       	ldi	r20, 0x03	; 3
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	87 e2       	ldi	r24, 0x27	; 39
     ce8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_WRITESEQ>
     cec:	18 2f       	mov	r17, r24
     cee:	81 ee       	ldi	r24, 0xE1	; 225
     cf0:	94 e0       	ldi	r25, 0x04	; 4
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <lcd_init+0x66>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <lcd_init+0x6c>
     cf8:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     cfa:	43 e0       	ldi	r20, 0x03	; 3
     cfc:	be 01       	movw	r22, r28
     cfe:	6f 5f       	subi	r22, 0xFF	; 255
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	87 e2       	ldi	r24, 0x27	; 39
     d04:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_WRITESEQ>
     d08:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     d0a:	43 e0       	ldi	r20, 0x03	; 3
     d0c:	be 01       	movw	r22, r28
     d0e:	6f 5f       	subi	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	87 e2       	ldi	r24, 0x27	; 39
     d14:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_WRITESEQ>
     d18:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     d1a:	43 e0       	ldi	r20, 0x03	; 3
     d1c:	be 01       	movw	r22, r28
     d1e:	6c 5f       	subi	r22, 0xFC	; 252
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	87 e2       	ldi	r24, 0x27	; 39
     d24:	0e 94 79 05 	call	0xaf2	; 0xaf2 <I2C_WRITESEQ>
     d28:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	88 e2       	ldi	r24, 0x28	; 40
     d2e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
     d32:	81 2b       	or	r24, r17
     d34:	09 f0       	breq	.+2      	; 0xd38 <lcd_init+0xac>
     d36:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	8c e0       	ldi	r24, 0x0C	; 12
     d3c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	80 2f       	mov	r24, r16
     d54:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
}
     d58:	26 96       	adiw	r28, 0x06	; 6
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     d6e:	68 e0       	ldi	r22, 0x08	; 8
     d70:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wr_lcd_mode>
     d74:	08 95       	ret

00000d76 <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
     d76:	0e 94 b7 00 	call	0x16e	; 0x16e <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
     d7a:	81 e6       	ldi	r24, 0x61	; 97
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 83 02 	call	0x506	; 0x506 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 83 02 	call	0x506	; 0x506 <Lcd_Init>
	
	States_GotoState(IDLE);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
	Keypad_Init();
     d94:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
     d98:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_KeyPressed>
     d9c:	88 23       	and	r24, r24
     d9e:	e1 f3       	breq	.-8      	; 0xd98 <main+0x22>
     da0:	87 e8       	ldi	r24, 0x87	; 135
     da2:	93 e1       	ldi	r25, 0x13	; 19
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <main+0x2e>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <main+0x34>
     daa:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
     dac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_KeyPressed>
     db0:	88 23       	and	r24, r24
     db2:	91 f3       	breq	.-28     	; 0xd98 <main+0x22>
			{
				int_fast8_t x = Keypad_GetKey();
     db4:	0e 94 40 02 	call	0x480	; 0x480 <Keypad_GetKey>
     db8:	e7 e8       	ldi	r30, 0x87	; 135
     dba:	f3 e1       	ldi	r31, 0x13	; 19
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <main+0x46>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <main+0x4c>
     dc2:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
     dc4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <KeyProcessor_ProcessKey>
				Keypad_Init();
     dc8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
     dcc:	e5 cf       	rjmp	.-54     	; 0xd98 <main+0x22>

00000dce <Patient_UpdateName>:
struct PatientsList patientsList;


void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
     dce:	0e 94 52 08 	call	0x10a4	; 0x10a4 <strcpy>
     dd2:	08 95       	ret

00000dd4 <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
     dd4:	41 96       	adiw	r24, 0x11	; 17
     dd6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <strcpy>
     dda:	08 95       	ret

00000ddc <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
     ddc:	82 96       	adiw	r24, 0x22	; 34
     dde:	0e 94 52 08 	call	0x10a4	; 0x10a4 <strcpy>
     de2:	08 95       	ret

00000de4 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
     de4:	4d e6       	ldi	r20, 0x6D	; 109
     de6:	51 e0       	ldi	r21, 0x01	; 1
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
	Keypad_InitNumpad();
     df2:	0e 94 29 01 	call	0x252	; 0x252 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     df6:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
     dfa:	87 e1       	ldi	r24, 0x17	; 23
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     e02:	42 ef       	ldi	r20, 0xF2	; 242
     e04:	51 e0       	ldi	r21, 0x01	; 1
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
     e10:	08 95       	ret

00000e12 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     e12:	8f 31       	cpi	r24, 0x1F	; 31
     e14:	61 f4       	brne	.+24     	; 0xe2e <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
     e16:	62 ef       	ldi	r22, 0xF2	; 242
     e18:	71 e0       	ldi	r23, 0x01	; 1
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
     e22:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     e2c:	08 95       	ret
	}
	else if(key == 30)
     e2e:	8e 31       	cpi	r24, 0x1E	; 30
     e30:	61 f4       	brne	.+24     	; 0xe4a <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
     e32:	62 ef       	ldi	r22, 0xF2	; 242
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
     e3e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     e48:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     e4a:	0e 94 ca 01 	call	0x394	; 0x394 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     e4e:	42 ef       	ldi	r20, 0xF2	; 242
     e50:	51 e0       	ldi	r21, 0x01	; 1
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
     e5c:	82 ef       	ldi	r24, 0xF2	; 242
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     e64:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
     e68:	08 95       	ret

00000e6a <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
     e7e:	68 e7       	ldi	r22, 0x78	; 120
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	0e 94 c1 02 	call	0x582	; 0x582 <Lcd_Prints>
	Keypad_UpdateKeyMode();
     e88:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     e94:	42 ef       	ldi	r20, 0xF2	; 242
     e96:	51 e0       	ldi	r21, 0x01	; 1
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
     ea2:	08 95       	ret

00000ea4 <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     ea4:	8f 31       	cpi	r24, 0x1F	; 31
     ea6:	61 f4       	brne	.+24     	; 0xec0 <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
     ea8:	62 ef       	ldi	r22, 0xF2	; 242
     eaa:	71 e0       	ldi	r23, 0x01	; 1
     eac:	86 e0       	ldi	r24, 0x06	; 6
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	0e 94 e7 06 	call	0xdce	; 0xdce <Patient_UpdateName>
		Keypad_ResetBuffer();
     eb4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     ebe:	08 95       	ret
	}
	else if(key == 30)
     ec0:	8e 31       	cpi	r24, 0x1E	; 30
     ec2:	61 f4       	brne	.+24     	; 0xedc <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
     ec4:	62 ef       	ldi	r22, 0xF2	; 242
     ec6:	71 e0       	ldi	r23, 0x01	; 1
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	0e 94 e7 06 	call	0xdce	; 0xdce <Patient_UpdateName>
		Keypad_ResetBuffer();
     ed0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     eda:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     edc:	0e 94 ca 01 	call	0x394	; 0x394 <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     ee0:	42 ef       	ldi	r20, 0xF2	; 242
     ee2:	51 e0       	ldi	r21, 0x01	; 1
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
     eee:	82 ef       	ldi	r24, 0xF2	; 242
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     ef6:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
     efa:	08 95       	ret

00000efc <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
     efc:	44 e8       	ldi	r20, 0x84	; 132
     efe:	51 e0       	ldi	r21, 0x01	; 1
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
	
	Keypad_InitNumpad();
     f0a:	0e 94 29 01 	call	0x252	; 0x252 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     f0e:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
     f12:	88 e2       	ldi	r24, 0x28	; 40
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f1a:	42 ef       	ldi	r20, 0xF2	; 242
     f1c:	51 e0       	ldi	r21, 0x01	; 1
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
     f28:	08 95       	ret

00000f2a <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     f2a:	8f 31       	cpi	r24, 0x1F	; 31
     f2c:	39 f4       	brne	.+14     	; 0xf3c <EnteringPhone_ProcessKey+0x12>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
     f2e:	62 ef       	ldi	r22, 0xF2	; 242
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	0e 94 ee 06 	call	0xddc	; 0xddc <Patient_UpdatePhone>
     f3a:	08 95       	ret
		
		// print serial
	}
	else if(key == 30)
     f3c:	8e 31       	cpi	r24, 0x1E	; 30
     f3e:	61 f4       	brne	.+24     	; 0xf58 <EnteringPhone_ProcessKey+0x2e>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
     f40:	62 ef       	ldi	r22, 0xF2	; 242
     f42:	71 e0       	ldi	r23, 0x01	; 1
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 ee 06 	call	0xddc	; 0xddc <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
     f4c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     f56:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     f58:	0e 94 ca 01 	call	0x394	; 0x394 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f5c:	42 ef       	ldi	r20, 0xF2	; 242
     f5e:	51 e0       	ldi	r21, 0x01	; 1
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
     f6a:	82 ef       	ldi	r24, 0xF2	; 242
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_InitNumpad();
     f72:	0e 94 29 01 	call	0x252	; 0x252 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
     f76:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
     f7a:	08 95       	ret

00000f7c <GenerateSerial_ProcessKey>:
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     f7c:	8f 31       	cpi	r24, 0x1F	; 31
     f7e:	d9 f4       	brne	.+54     	; 0xfb6 <GenerateSerial_ProcessKey+0x3a>
	{
		Lcd_ClearScreen(LCDKEYPAD);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
     f86:	43 e0       	ldi	r20, 0x03	; 3
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd_Position>
		Lcd_Prints(LCDKEYPAD,"Thank You");
     f94:	6d ea       	ldi	r22, 0xAD	; 173
     f96:	71 e0       	ldi	r23, 0x01	; 1
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	0e 94 c1 02 	call	0x582	; 0x582 <Lcd_Prints>
     f9e:	2f e7       	ldi	r18, 0x7F	; 127
     fa0:	8a e1       	ldi	r24, 0x1A	; 26
     fa2:	96 e0       	ldi	r25, 0x06	; 6
     fa4:	21 50       	subi	r18, 0x01	; 1
     fa6:	80 40       	sbci	r24, 0x00	; 0
     fa8:	90 40       	sbci	r25, 0x00	; 0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <GenerateSerial_ProcessKey+0x28>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <GenerateSerial_ProcessKey+0x32>
     fae:	00 00       	nop
		_delay_ms(2000);
		States_GotoState(IDLE);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     fb6:	08 95       	ret

00000fb8 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 fc 07 	call	0xff8	; 0xff8 <States_GotoState>
     fbe:	08 95       	ret

00000fc0 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
     fd4:	67 eb       	ldi	r22, 0xB7	; 183
     fd6:	71 e0       	ldi	r23, 0x01	; 1
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 c1 02 	call	0x582	; 0x582 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
     fec:	60 ec       	ldi	r22, 0xC0	; 192
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 c1 02 	call	0x582	; 0x582 <Lcd_Prints>
     ff6:	08 95       	ret

00000ff8 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
     ff8:	cf 93       	push	r28
     ffa:	c8 2f       	mov	r28, r24
	switch(newState)
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	61 f0       	breq	.+24     	; 0x1018 <States_GotoState+0x20>
    1000:	1c f4       	brge	.+6      	; 0x1008 <States_GotoState+0x10>
    1002:	88 23       	and	r24, r24
    1004:	31 f0       	breq	.+12     	; 0x1012 <States_GotoState+0x1a>
    1006:	11 c0       	rjmp	.+34     	; 0x102a <States_GotoState+0x32>
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	49 f0       	breq	.+18     	; 0x101e <States_GotoState+0x26>
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	51 f0       	breq	.+20     	; 0x1024 <States_GotoState+0x2c>
    1010:	0c c0       	rjmp	.+24     	; 0x102a <States_GotoState+0x32>
	{
		case IDLE:
			Idle_Init();
    1012:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Idle_Init>
			break;
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <States_GotoState+0x3a>
		case ENTERING_NAME:
			EnteringName_Init();
    1018:	0e 94 35 07 	call	0xe6a	; 0xe6a <EnteringName_Init>
			break;
    101c:	0a c0       	rjmp	.+20     	; 0x1032 <States_GotoState+0x3a>
		case ENTERING_AGE:
			EnteringAge_Init();
    101e:	0e 94 f2 06 	call	0xde4	; 0xde4 <EnteringAge_Init>
			break;
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <States_GotoState+0x3a>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    1024:	0e 94 7e 07 	call	0xefc	; 0xefc <EnteringPhone_Init>
			break;
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <States_GotoState+0x3a>
			//break;
		//case STORE_RECORD:
			//Store_Init();
			//break;
		default:
			Error_Error("GotoState: newState not defined");
    102a:	8d ec       	ldi	r24, 0xCD	; 205
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	}
	currentState = newState;
    1032:	c0 93 3b 02 	sts	0x023B, r28	; 0x80023b <currentState>
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    103a:	11 b8       	out	0x01, r1	; 1
    103c:	8c e0       	ldi	r24, 0x0C	; 12
    103e:	80 b9       	out	0x00, r24	; 0
    1040:	08 95       	ret

00001042 <i2c_start>:
    1042:	94 ea       	ldi	r25, 0xA4	; 164
    1044:	96 bf       	out	0x36, r25	; 54
    1046:	06 b6       	in	r0, 0x36	; 54
    1048:	07 fe       	sbrs	r0, 7
    104a:	fd cf       	rjmp	.-6      	; 0x1046 <i2c_start+0x4>
    104c:	91 b1       	in	r25, 0x01	; 1
    104e:	98 7f       	andi	r25, 0xF8	; 248
    1050:	98 30       	cpi	r25, 0x08	; 8
    1052:	11 f0       	breq	.+4      	; 0x1058 <i2c_start+0x16>
    1054:	90 31       	cpi	r25, 0x10	; 16
    1056:	79 f4       	brne	.+30     	; 0x1076 <i2c_start+0x34>
    1058:	83 b9       	out	0x03, r24	; 3
    105a:	84 e8       	ldi	r24, 0x84	; 132
    105c:	86 bf       	out	0x36, r24	; 54
    105e:	06 b6       	in	r0, 0x36	; 54
    1060:	07 fe       	sbrs	r0, 7
    1062:	fd cf       	rjmp	.-6      	; 0x105e <i2c_start+0x1c>
    1064:	91 b1       	in	r25, 0x01	; 1
    1066:	98 7f       	andi	r25, 0xF8	; 248
    1068:	98 31       	cpi	r25, 0x18	; 24
    106a:	39 f0       	breq	.+14     	; 0x107a <i2c_start+0x38>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 34       	cpi	r25, 0x40	; 64
    1070:	29 f4       	brne	.+10     	; 0x107c <i2c_start+0x3a>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	08 95       	ret
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	08 95       	ret
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret

0000107e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    107e:	84 e9       	ldi	r24, 0x94	; 148
    1080:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1082:	06 b6       	in	r0, 0x36	; 54
    1084:	04 fc       	sbrc	r0, 4
    1086:	fd cf       	rjmp	.-6      	; 0x1082 <i2c_stop+0x4>

}/* i2c_stop */
    1088:	08 95       	ret

0000108a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    108a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    108c:	84 e8       	ldi	r24, 0x84	; 132
    108e:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1090:	06 b6       	in	r0, 0x36	; 54
    1092:	07 fe       	sbrs	r0, 7
    1094:	fd cf       	rjmp	.-6      	; 0x1090 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1096:	91 b1       	in	r25, 0x01	; 1
    1098:	98 7f       	andi	r25, 0xF8	; 248
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	98 32       	cpi	r25, 0x28	; 40
    109e:	09 f4       	brne	.+2      	; 0x10a2 <i2c_write+0x18>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    10a2:	08 95       	ret

000010a4 <strcpy>:
    10a4:	fb 01       	movw	r30, r22
    10a6:	dc 01       	movw	r26, r24
    10a8:	01 90       	ld	r0, Z+
    10aa:	0d 92       	st	X+, r0
    10ac:	00 20       	and	r0, r0
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <strcpy+0x4>
    10b0:	08 95       	ret

000010b2 <sprintf>:
    10b2:	ae e0       	ldi	r26, 0x0E	; 14
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ef e5       	ldi	r30, 0x5F	; 95
    10b8:	f8 e0       	ldi	r31, 0x08	; 8
    10ba:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__prologue_saves__+0x1c>
    10be:	0d 89       	ldd	r16, Y+21	; 0x15
    10c0:	1e 89       	ldd	r17, Y+22	; 0x16
    10c2:	86 e0       	ldi	r24, 0x06	; 6
    10c4:	8c 83       	std	Y+4, r24	; 0x04
    10c6:	1a 83       	std	Y+2, r17	; 0x02
    10c8:	09 83       	std	Y+1, r16	; 0x01
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	9f e7       	ldi	r25, 0x7F	; 127
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	ae 01       	movw	r20, r28
    10d4:	47 5e       	subi	r20, 0xE7	; 231
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	6f 89       	ldd	r22, Y+23	; 0x17
    10da:	78 8d       	ldd	r23, Y+24	; 0x18
    10dc:	ce 01       	movw	r24, r28
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <vfprintf>
    10e4:	ef 81       	ldd	r30, Y+7	; 0x07
    10e6:	f8 85       	ldd	r31, Y+8	; 0x08
    10e8:	e0 0f       	add	r30, r16
    10ea:	f1 1f       	adc	r31, r17
    10ec:	10 82       	st	Z, r1
    10ee:	2e 96       	adiw	r28, 0x0e	; 14
    10f0:	e4 e0       	ldi	r30, 0x04	; 4
    10f2:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__epilogue_restores__+0x1c>

000010f6 <vfprintf>:
    10f6:	ab e0       	ldi	r26, 0x0B	; 11
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e8       	ldi	r30, 0x81	; 129
    10fc:	f8 e0       	ldi	r31, 0x08	; 8
    10fe:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__prologue_saves__>
    1102:	6c 01       	movw	r12, r24
    1104:	7b 01       	movw	r14, r22
    1106:	8a 01       	movw	r16, r20
    1108:	fc 01       	movw	r30, r24
    110a:	17 82       	std	Z+7, r1	; 0x07
    110c:	16 82       	std	Z+6, r1	; 0x06
    110e:	83 81       	ldd	r24, Z+3	; 0x03
    1110:	81 ff       	sbrs	r24, 1
    1112:	cc c1       	rjmp	.+920    	; 0x14ac <vfprintf+0x3b6>
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	3c 01       	movw	r6, r24
    111a:	f6 01       	movw	r30, r12
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	f7 01       	movw	r30, r14
    1120:	93 fd       	sbrc	r25, 3
    1122:	85 91       	lpm	r24, Z+
    1124:	93 ff       	sbrs	r25, 3
    1126:	81 91       	ld	r24, Z+
    1128:	7f 01       	movw	r14, r30
    112a:	88 23       	and	r24, r24
    112c:	09 f4       	brne	.+2      	; 0x1130 <vfprintf+0x3a>
    112e:	ba c1       	rjmp	.+884    	; 0x14a4 <vfprintf+0x3ae>
    1130:	85 32       	cpi	r24, 0x25	; 37
    1132:	39 f4       	brne	.+14     	; 0x1142 <vfprintf+0x4c>
    1134:	93 fd       	sbrc	r25, 3
    1136:	85 91       	lpm	r24, Z+
    1138:	93 ff       	sbrs	r25, 3
    113a:	81 91       	ld	r24, Z+
    113c:	7f 01       	movw	r14, r30
    113e:	85 32       	cpi	r24, 0x25	; 37
    1140:	29 f4       	brne	.+10     	; 0x114c <vfprintf+0x56>
    1142:	b6 01       	movw	r22, r12
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    114a:	e7 cf       	rjmp	.-50     	; 0x111a <vfprintf+0x24>
    114c:	91 2c       	mov	r9, r1
    114e:	21 2c       	mov	r2, r1
    1150:	31 2c       	mov	r3, r1
    1152:	ff e1       	ldi	r31, 0x1F	; 31
    1154:	f3 15       	cp	r31, r3
    1156:	d8 f0       	brcs	.+54     	; 0x118e <vfprintf+0x98>
    1158:	8b 32       	cpi	r24, 0x2B	; 43
    115a:	79 f0       	breq	.+30     	; 0x117a <vfprintf+0x84>
    115c:	38 f4       	brcc	.+14     	; 0x116c <vfprintf+0x76>
    115e:	80 32       	cpi	r24, 0x20	; 32
    1160:	79 f0       	breq	.+30     	; 0x1180 <vfprintf+0x8a>
    1162:	83 32       	cpi	r24, 0x23	; 35
    1164:	a1 f4       	brne	.+40     	; 0x118e <vfprintf+0x98>
    1166:	23 2d       	mov	r18, r3
    1168:	20 61       	ori	r18, 0x10	; 16
    116a:	1d c0       	rjmp	.+58     	; 0x11a6 <vfprintf+0xb0>
    116c:	8d 32       	cpi	r24, 0x2D	; 45
    116e:	61 f0       	breq	.+24     	; 0x1188 <vfprintf+0x92>
    1170:	80 33       	cpi	r24, 0x30	; 48
    1172:	69 f4       	brne	.+26     	; 0x118e <vfprintf+0x98>
    1174:	23 2d       	mov	r18, r3
    1176:	21 60       	ori	r18, 0x01	; 1
    1178:	16 c0       	rjmp	.+44     	; 0x11a6 <vfprintf+0xb0>
    117a:	83 2d       	mov	r24, r3
    117c:	82 60       	ori	r24, 0x02	; 2
    117e:	38 2e       	mov	r3, r24
    1180:	e3 2d       	mov	r30, r3
    1182:	e4 60       	ori	r30, 0x04	; 4
    1184:	3e 2e       	mov	r3, r30
    1186:	2a c0       	rjmp	.+84     	; 0x11dc <vfprintf+0xe6>
    1188:	f3 2d       	mov	r31, r3
    118a:	f8 60       	ori	r31, 0x08	; 8
    118c:	1d c0       	rjmp	.+58     	; 0x11c8 <vfprintf+0xd2>
    118e:	37 fc       	sbrc	r3, 7
    1190:	2d c0       	rjmp	.+90     	; 0x11ec <vfprintf+0xf6>
    1192:	20 ed       	ldi	r18, 0xD0	; 208
    1194:	28 0f       	add	r18, r24
    1196:	2a 30       	cpi	r18, 0x0A	; 10
    1198:	40 f0       	brcs	.+16     	; 0x11aa <vfprintf+0xb4>
    119a:	8e 32       	cpi	r24, 0x2E	; 46
    119c:	b9 f4       	brne	.+46     	; 0x11cc <vfprintf+0xd6>
    119e:	36 fc       	sbrc	r3, 6
    11a0:	81 c1       	rjmp	.+770    	; 0x14a4 <vfprintf+0x3ae>
    11a2:	23 2d       	mov	r18, r3
    11a4:	20 64       	ori	r18, 0x40	; 64
    11a6:	32 2e       	mov	r3, r18
    11a8:	19 c0       	rjmp	.+50     	; 0x11dc <vfprintf+0xe6>
    11aa:	36 fe       	sbrs	r3, 6
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <vfprintf+0xc4>
    11ae:	8a e0       	ldi	r24, 0x0A	; 10
    11b0:	98 9e       	mul	r9, r24
    11b2:	20 0d       	add	r18, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	92 2e       	mov	r9, r18
    11b8:	11 c0       	rjmp	.+34     	; 0x11dc <vfprintf+0xe6>
    11ba:	ea e0       	ldi	r30, 0x0A	; 10
    11bc:	2e 9e       	mul	r2, r30
    11be:	20 0d       	add	r18, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	22 2e       	mov	r2, r18
    11c4:	f3 2d       	mov	r31, r3
    11c6:	f0 62       	ori	r31, 0x20	; 32
    11c8:	3f 2e       	mov	r3, r31
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <vfprintf+0xe6>
    11cc:	8c 36       	cpi	r24, 0x6C	; 108
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <vfprintf+0xe2>
    11d0:	83 2d       	mov	r24, r3
    11d2:	80 68       	ori	r24, 0x80	; 128
    11d4:	38 2e       	mov	r3, r24
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <vfprintf+0xe6>
    11d8:	88 36       	cpi	r24, 0x68	; 104
    11da:	41 f4       	brne	.+16     	; 0x11ec <vfprintf+0xf6>
    11dc:	f7 01       	movw	r30, r14
    11de:	93 fd       	sbrc	r25, 3
    11e0:	85 91       	lpm	r24, Z+
    11e2:	93 ff       	sbrs	r25, 3
    11e4:	81 91       	ld	r24, Z+
    11e6:	7f 01       	movw	r14, r30
    11e8:	81 11       	cpse	r24, r1
    11ea:	b3 cf       	rjmp	.-154    	; 0x1152 <vfprintf+0x5c>
    11ec:	98 2f       	mov	r25, r24
    11ee:	9f 7d       	andi	r25, 0xDF	; 223
    11f0:	95 54       	subi	r25, 0x45	; 69
    11f2:	93 30       	cpi	r25, 0x03	; 3
    11f4:	28 f4       	brcc	.+10     	; 0x1200 <vfprintf+0x10a>
    11f6:	0c 5f       	subi	r16, 0xFC	; 252
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	9f e3       	ldi	r25, 0x3F	; 63
    11fc:	99 83       	std	Y+1, r25	; 0x01
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <vfprintf+0x124>
    1200:	83 36       	cpi	r24, 0x63	; 99
    1202:	31 f0       	breq	.+12     	; 0x1210 <vfprintf+0x11a>
    1204:	83 37       	cpi	r24, 0x73	; 115
    1206:	71 f0       	breq	.+28     	; 0x1224 <vfprintf+0x12e>
    1208:	83 35       	cpi	r24, 0x53	; 83
    120a:	09 f0       	breq	.+2      	; 0x120e <vfprintf+0x118>
    120c:	59 c0       	rjmp	.+178    	; 0x12c0 <vfprintf+0x1ca>
    120e:	21 c0       	rjmp	.+66     	; 0x1252 <vfprintf+0x15c>
    1210:	f8 01       	movw	r30, r16
    1212:	80 81       	ld	r24, Z
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	0e 5f       	subi	r16, 0xFE	; 254
    1218:	1f 4f       	sbci	r17, 0xFF	; 255
    121a:	88 24       	eor	r8, r8
    121c:	83 94       	inc	r8
    121e:	91 2c       	mov	r9, r1
    1220:	53 01       	movw	r10, r6
    1222:	13 c0       	rjmp	.+38     	; 0x124a <vfprintf+0x154>
    1224:	28 01       	movw	r4, r16
    1226:	f2 e0       	ldi	r31, 0x02	; 2
    1228:	4f 0e       	add	r4, r31
    122a:	51 1c       	adc	r5, r1
    122c:	f8 01       	movw	r30, r16
    122e:	a0 80       	ld	r10, Z
    1230:	b1 80       	ldd	r11, Z+1	; 0x01
    1232:	36 fe       	sbrs	r3, 6
    1234:	03 c0       	rjmp	.+6      	; 0x123c <vfprintf+0x146>
    1236:	69 2d       	mov	r22, r9
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x14a>
    123c:	6f ef       	ldi	r22, 0xFF	; 255
    123e:	7f ef       	ldi	r23, 0xFF	; 255
    1240:	c5 01       	movw	r24, r10
    1242:	0e 94 67 0a 	call	0x14ce	; 0x14ce <strnlen>
    1246:	4c 01       	movw	r8, r24
    1248:	82 01       	movw	r16, r4
    124a:	f3 2d       	mov	r31, r3
    124c:	ff 77       	andi	r31, 0x7F	; 127
    124e:	3f 2e       	mov	r3, r31
    1250:	16 c0       	rjmp	.+44     	; 0x127e <vfprintf+0x188>
    1252:	28 01       	movw	r4, r16
    1254:	22 e0       	ldi	r18, 0x02	; 2
    1256:	42 0e       	add	r4, r18
    1258:	51 1c       	adc	r5, r1
    125a:	f8 01       	movw	r30, r16
    125c:	a0 80       	ld	r10, Z
    125e:	b1 80       	ldd	r11, Z+1	; 0x01
    1260:	36 fe       	sbrs	r3, 6
    1262:	03 c0       	rjmp	.+6      	; 0x126a <vfprintf+0x174>
    1264:	69 2d       	mov	r22, r9
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <vfprintf+0x178>
    126a:	6f ef       	ldi	r22, 0xFF	; 255
    126c:	7f ef       	ldi	r23, 0xFF	; 255
    126e:	c5 01       	movw	r24, r10
    1270:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <strnlen_P>
    1274:	4c 01       	movw	r8, r24
    1276:	f3 2d       	mov	r31, r3
    1278:	f0 68       	ori	r31, 0x80	; 128
    127a:	3f 2e       	mov	r3, r31
    127c:	82 01       	movw	r16, r4
    127e:	33 fc       	sbrc	r3, 3
    1280:	1b c0       	rjmp	.+54     	; 0x12b8 <vfprintf+0x1c2>
    1282:	82 2d       	mov	r24, r2
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	88 16       	cp	r8, r24
    1288:	99 06       	cpc	r9, r25
    128a:	b0 f4       	brcc	.+44     	; 0x12b8 <vfprintf+0x1c2>
    128c:	b6 01       	movw	r22, r12
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    1296:	2a 94       	dec	r2
    1298:	f4 cf       	rjmp	.-24     	; 0x1282 <vfprintf+0x18c>
    129a:	f5 01       	movw	r30, r10
    129c:	37 fc       	sbrc	r3, 7
    129e:	85 91       	lpm	r24, Z+
    12a0:	37 fe       	sbrs	r3, 7
    12a2:	81 91       	ld	r24, Z+
    12a4:	5f 01       	movw	r10, r30
    12a6:	b6 01       	movw	r22, r12
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    12ae:	21 10       	cpse	r2, r1
    12b0:	2a 94       	dec	r2
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	82 1a       	sub	r8, r18
    12b6:	91 08       	sbc	r9, r1
    12b8:	81 14       	cp	r8, r1
    12ba:	91 04       	cpc	r9, r1
    12bc:	71 f7       	brne	.-36     	; 0x129a <vfprintf+0x1a4>
    12be:	e8 c0       	rjmp	.+464    	; 0x1490 <vfprintf+0x39a>
    12c0:	84 36       	cpi	r24, 0x64	; 100
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <vfprintf+0x1d2>
    12c4:	89 36       	cpi	r24, 0x69	; 105
    12c6:	41 f5       	brne	.+80     	; 0x1318 <vfprintf+0x222>
    12c8:	f8 01       	movw	r30, r16
    12ca:	37 fe       	sbrs	r3, 7
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <vfprintf+0x1e6>
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	0c 5f       	subi	r16, 0xFC	; 252
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <vfprintf+0x1f6>
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	07 2e       	mov	r0, r23
    12e2:	00 0c       	add	r0, r0
    12e4:	88 0b       	sbc	r24, r24
    12e6:	99 0b       	sbc	r25, r25
    12e8:	0e 5f       	subi	r16, 0xFE	; 254
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	f3 2d       	mov	r31, r3
    12ee:	ff 76       	andi	r31, 0x6F	; 111
    12f0:	3f 2e       	mov	r3, r31
    12f2:	97 ff       	sbrs	r25, 7
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <vfprintf+0x212>
    12f6:	90 95       	com	r25
    12f8:	80 95       	com	r24
    12fa:	70 95       	com	r23
    12fc:	61 95       	neg	r22
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	8f 4f       	sbci	r24, 0xFF	; 255
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	f0 68       	ori	r31, 0x80	; 128
    1306:	3f 2e       	mov	r3, r31
    1308:	2a e0       	ldi	r18, 0x0A	; 10
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	a3 01       	movw	r20, r6
    130e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__ultoa_invert>
    1312:	88 2e       	mov	r8, r24
    1314:	86 18       	sub	r8, r6
    1316:	45 c0       	rjmp	.+138    	; 0x13a2 <vfprintf+0x2ac>
    1318:	85 37       	cpi	r24, 0x75	; 117
    131a:	31 f4       	brne	.+12     	; 0x1328 <vfprintf+0x232>
    131c:	23 2d       	mov	r18, r3
    131e:	2f 7e       	andi	r18, 0xEF	; 239
    1320:	b2 2e       	mov	r11, r18
    1322:	2a e0       	ldi	r18, 0x0A	; 10
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	25 c0       	rjmp	.+74     	; 0x1372 <vfprintf+0x27c>
    1328:	93 2d       	mov	r25, r3
    132a:	99 7f       	andi	r25, 0xF9	; 249
    132c:	b9 2e       	mov	r11, r25
    132e:	8f 36       	cpi	r24, 0x6F	; 111
    1330:	c1 f0       	breq	.+48     	; 0x1362 <vfprintf+0x26c>
    1332:	18 f4       	brcc	.+6      	; 0x133a <vfprintf+0x244>
    1334:	88 35       	cpi	r24, 0x58	; 88
    1336:	79 f0       	breq	.+30     	; 0x1356 <vfprintf+0x260>
    1338:	b5 c0       	rjmp	.+362    	; 0x14a4 <vfprintf+0x3ae>
    133a:	80 37       	cpi	r24, 0x70	; 112
    133c:	19 f0       	breq	.+6      	; 0x1344 <vfprintf+0x24e>
    133e:	88 37       	cpi	r24, 0x78	; 120
    1340:	21 f0       	breq	.+8      	; 0x134a <vfprintf+0x254>
    1342:	b0 c0       	rjmp	.+352    	; 0x14a4 <vfprintf+0x3ae>
    1344:	e9 2f       	mov	r30, r25
    1346:	e0 61       	ori	r30, 0x10	; 16
    1348:	be 2e       	mov	r11, r30
    134a:	b4 fe       	sbrs	r11, 4
    134c:	0d c0       	rjmp	.+26     	; 0x1368 <vfprintf+0x272>
    134e:	fb 2d       	mov	r31, r11
    1350:	f4 60       	ori	r31, 0x04	; 4
    1352:	bf 2e       	mov	r11, r31
    1354:	09 c0       	rjmp	.+18     	; 0x1368 <vfprintf+0x272>
    1356:	34 fe       	sbrs	r3, 4
    1358:	0a c0       	rjmp	.+20     	; 0x136e <vfprintf+0x278>
    135a:	29 2f       	mov	r18, r25
    135c:	26 60       	ori	r18, 0x06	; 6
    135e:	b2 2e       	mov	r11, r18
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x278>
    1362:	28 e0       	ldi	r18, 0x08	; 8
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <vfprintf+0x27c>
    1368:	20 e1       	ldi	r18, 0x10	; 16
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x27c>
    136e:	20 e1       	ldi	r18, 0x10	; 16
    1370:	32 e0       	ldi	r19, 0x02	; 2
    1372:	f8 01       	movw	r30, r16
    1374:	b7 fe       	sbrs	r11, 7
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <vfprintf+0x290>
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	0c 5f       	subi	r16, 0xFC	; 252
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <vfprintf+0x29c>
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 5f       	subi	r16, 0xFE	; 254
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	a3 01       	movw	r20, r6
    1394:	0e 94 ae 0a 	call	0x155c	; 0x155c <__ultoa_invert>
    1398:	88 2e       	mov	r8, r24
    139a:	86 18       	sub	r8, r6
    139c:	fb 2d       	mov	r31, r11
    139e:	ff 77       	andi	r31, 0x7F	; 127
    13a0:	3f 2e       	mov	r3, r31
    13a2:	36 fe       	sbrs	r3, 6
    13a4:	0d c0       	rjmp	.+26     	; 0x13c0 <vfprintf+0x2ca>
    13a6:	23 2d       	mov	r18, r3
    13a8:	2e 7f       	andi	r18, 0xFE	; 254
    13aa:	a2 2e       	mov	r10, r18
    13ac:	89 14       	cp	r8, r9
    13ae:	58 f4       	brcc	.+22     	; 0x13c6 <vfprintf+0x2d0>
    13b0:	34 fe       	sbrs	r3, 4
    13b2:	0b c0       	rjmp	.+22     	; 0x13ca <vfprintf+0x2d4>
    13b4:	32 fc       	sbrc	r3, 2
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <vfprintf+0x2d4>
    13b8:	83 2d       	mov	r24, r3
    13ba:	8e 7e       	andi	r24, 0xEE	; 238
    13bc:	a8 2e       	mov	r10, r24
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <vfprintf+0x2d4>
    13c0:	b8 2c       	mov	r11, r8
    13c2:	a3 2c       	mov	r10, r3
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <vfprintf+0x2d6>
    13c6:	b8 2c       	mov	r11, r8
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <vfprintf+0x2d6>
    13ca:	b9 2c       	mov	r11, r9
    13cc:	a4 fe       	sbrs	r10, 4
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <vfprintf+0x2f8>
    13d0:	fe 01       	movw	r30, r28
    13d2:	e8 0d       	add	r30, r8
    13d4:	f1 1d       	adc	r31, r1
    13d6:	80 81       	ld	r24, Z
    13d8:	80 33       	cpi	r24, 0x30	; 48
    13da:	21 f4       	brne	.+8      	; 0x13e4 <vfprintf+0x2ee>
    13dc:	9a 2d       	mov	r25, r10
    13de:	99 7e       	andi	r25, 0xE9	; 233
    13e0:	a9 2e       	mov	r10, r25
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <vfprintf+0x300>
    13e4:	a2 fe       	sbrs	r10, 2
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <vfprintf+0x2fe>
    13e8:	b3 94       	inc	r11
    13ea:	b3 94       	inc	r11
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <vfprintf+0x300>
    13ee:	8a 2d       	mov	r24, r10
    13f0:	86 78       	andi	r24, 0x86	; 134
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <vfprintf+0x300>
    13f4:	b3 94       	inc	r11
    13f6:	a3 fc       	sbrc	r10, 3
    13f8:	11 c0       	rjmp	.+34     	; 0x141c <vfprintf+0x326>
    13fa:	a0 fe       	sbrs	r10, 0
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0x314>
    13fe:	b2 14       	cp	r11, r2
    1400:	88 f4       	brcc	.+34     	; 0x1424 <vfprintf+0x32e>
    1402:	28 0c       	add	r2, r8
    1404:	92 2c       	mov	r9, r2
    1406:	9b 18       	sub	r9, r11
    1408:	0e c0       	rjmp	.+28     	; 0x1426 <vfprintf+0x330>
    140a:	b2 14       	cp	r11, r2
    140c:	60 f4       	brcc	.+24     	; 0x1426 <vfprintf+0x330>
    140e:	b6 01       	movw	r22, r12
    1410:	80 e2       	ldi	r24, 0x20	; 32
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    1418:	b3 94       	inc	r11
    141a:	f7 cf       	rjmp	.-18     	; 0x140a <vfprintf+0x314>
    141c:	b2 14       	cp	r11, r2
    141e:	18 f4       	brcc	.+6      	; 0x1426 <vfprintf+0x330>
    1420:	2b 18       	sub	r2, r11
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <vfprintf+0x332>
    1424:	98 2c       	mov	r9, r8
    1426:	21 2c       	mov	r2, r1
    1428:	a4 fe       	sbrs	r10, 4
    142a:	10 c0       	rjmp	.+32     	; 0x144c <vfprintf+0x356>
    142c:	b6 01       	movw	r22, r12
    142e:	80 e3       	ldi	r24, 0x30	; 48
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    1436:	a2 fe       	sbrs	r10, 2
    1438:	17 c0       	rjmp	.+46     	; 0x1468 <vfprintf+0x372>
    143a:	a1 fc       	sbrc	r10, 1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x34e>
    143e:	88 e7       	ldi	r24, 0x78	; 120
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x352>
    1444:	88 e5       	ldi	r24, 0x58	; 88
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	b6 01       	movw	r22, r12
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <vfprintf+0x36e>
    144c:	8a 2d       	mov	r24, r10
    144e:	86 78       	andi	r24, 0x86	; 134
    1450:	59 f0       	breq	.+22     	; 0x1468 <vfprintf+0x372>
    1452:	a1 fe       	sbrs	r10, 1
    1454:	02 c0       	rjmp	.+4      	; 0x145a <vfprintf+0x364>
    1456:	8b e2       	ldi	r24, 0x2B	; 43
    1458:	01 c0       	rjmp	.+2      	; 0x145c <vfprintf+0x366>
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	a7 fc       	sbrc	r10, 7
    145e:	8d e2       	ldi	r24, 0x2D	; 45
    1460:	b6 01       	movw	r22, r12
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    1468:	89 14       	cp	r8, r9
    146a:	38 f4       	brcc	.+14     	; 0x147a <vfprintf+0x384>
    146c:	b6 01       	movw	r22, r12
    146e:	80 e3       	ldi	r24, 0x30	; 48
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    1476:	9a 94       	dec	r9
    1478:	f7 cf       	rjmp	.-18     	; 0x1468 <vfprintf+0x372>
    147a:	8a 94       	dec	r8
    147c:	f3 01       	movw	r30, r6
    147e:	e8 0d       	add	r30, r8
    1480:	f1 1d       	adc	r31, r1
    1482:	80 81       	ld	r24, Z
    1484:	b6 01       	movw	r22, r12
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    148c:	81 10       	cpse	r8, r1
    148e:	f5 cf       	rjmp	.-22     	; 0x147a <vfprintf+0x384>
    1490:	22 20       	and	r2, r2
    1492:	09 f4       	brne	.+2      	; 0x1496 <vfprintf+0x3a0>
    1494:	42 ce       	rjmp	.-892    	; 0x111a <vfprintf+0x24>
    1496:	b6 01       	movw	r22, r12
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fputc>
    14a0:	2a 94       	dec	r2
    14a2:	f6 cf       	rjmp	.-20     	; 0x1490 <vfprintf+0x39a>
    14a4:	f6 01       	movw	r30, r12
    14a6:	86 81       	ldd	r24, Z+6	; 0x06
    14a8:	97 81       	ldd	r25, Z+7	; 0x07
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x3ba>
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	2b 96       	adiw	r28, 0x0b	; 11
    14b2:	e2 e1       	ldi	r30, 0x12	; 18
    14b4:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__epilogue_restores__>

000014b8 <strnlen_P>:
    14b8:	fc 01       	movw	r30, r24
    14ba:	05 90       	lpm	r0, Z+
    14bc:	61 50       	subi	r22, 0x01	; 1
    14be:	70 40       	sbci	r23, 0x00	; 0
    14c0:	01 10       	cpse	r0, r1
    14c2:	d8 f7       	brcc	.-10     	; 0x14ba <strnlen_P+0x2>
    14c4:	80 95       	com	r24
    14c6:	90 95       	com	r25
    14c8:	8e 0f       	add	r24, r30
    14ca:	9f 1f       	adc	r25, r31
    14cc:	08 95       	ret

000014ce <strnlen>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	61 50       	subi	r22, 0x01	; 1
    14d2:	70 40       	sbci	r23, 0x00	; 0
    14d4:	01 90       	ld	r0, Z+
    14d6:	01 10       	cpse	r0, r1
    14d8:	d8 f7       	brcc	.-10     	; 0x14d0 <strnlen+0x2>
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	8e 0f       	add	r24, r30
    14e0:	9f 1f       	adc	r25, r31
    14e2:	08 95       	ret

000014e4 <fputc>:
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	fb 01       	movw	r30, r22
    14ee:	23 81       	ldd	r18, Z+3	; 0x03
    14f0:	21 fd       	sbrc	r18, 1
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <fputc+0x16>
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	2c c0       	rjmp	.+88     	; 0x1552 <fputc+0x6e>
    14fa:	22 ff       	sbrs	r18, 2
    14fc:	16 c0       	rjmp	.+44     	; 0x152a <fputc+0x46>
    14fe:	46 81       	ldd	r20, Z+6	; 0x06
    1500:	57 81       	ldd	r21, Z+7	; 0x07
    1502:	24 81       	ldd	r18, Z+4	; 0x04
    1504:	35 81       	ldd	r19, Z+5	; 0x05
    1506:	42 17       	cp	r20, r18
    1508:	53 07       	cpc	r21, r19
    150a:	44 f4       	brge	.+16     	; 0x151c <fputc+0x38>
    150c:	a0 81       	ld	r26, Z
    150e:	b1 81       	ldd	r27, Z+1	; 0x01
    1510:	9d 01       	movw	r18, r26
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	31 83       	std	Z+1, r19	; 0x01
    1518:	20 83       	st	Z, r18
    151a:	8c 93       	st	X, r24
    151c:	26 81       	ldd	r18, Z+6	; 0x06
    151e:	37 81       	ldd	r19, Z+7	; 0x07
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	37 83       	std	Z+7, r19	; 0x07
    1526:	26 83       	std	Z+6, r18	; 0x06
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <fputc+0x6e>
    152a:	8b 01       	movw	r16, r22
    152c:	ec 01       	movw	r28, r24
    152e:	fb 01       	movw	r30, r22
    1530:	00 84       	ldd	r0, Z+8	; 0x08
    1532:	f1 85       	ldd	r31, Z+9	; 0x09
    1534:	e0 2d       	mov	r30, r0
    1536:	09 95       	icall
    1538:	89 2b       	or	r24, r25
    153a:	e1 f6       	brne	.-72     	; 0x14f4 <fputc+0x10>
    153c:	d8 01       	movw	r26, r16
    153e:	16 96       	adiw	r26, 0x06	; 6
    1540:	8d 91       	ld	r24, X+
    1542:	9c 91       	ld	r25, X
    1544:	17 97       	sbiw	r26, 0x07	; 7
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	17 96       	adiw	r26, 0x07	; 7
    154a:	9c 93       	st	X, r25
    154c:	8e 93       	st	-X, r24
    154e:	16 97       	sbiw	r26, 0x06	; 6
    1550:	ce 01       	movw	r24, r28
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <__ultoa_invert>:
    155c:	fa 01       	movw	r30, r20
    155e:	aa 27       	eor	r26, r26
    1560:	28 30       	cpi	r18, 0x08	; 8
    1562:	51 f1       	breq	.+84     	; 0x15b8 <__ultoa_invert+0x5c>
    1564:	20 31       	cpi	r18, 0x10	; 16
    1566:	81 f1       	breq	.+96     	; 0x15c8 <__ultoa_invert+0x6c>
    1568:	e8 94       	clt
    156a:	6f 93       	push	r22
    156c:	6e 7f       	andi	r22, 0xFE	; 254
    156e:	6e 5f       	subi	r22, 0xFE	; 254
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	af 4f       	sbci	r26, 0xFF	; 255
    1578:	b1 e0       	ldi	r27, 0x01	; 1
    157a:	3e d0       	rcall	.+124    	; 0x15f8 <__ultoa_invert+0x9c>
    157c:	b4 e0       	ldi	r27, 0x04	; 4
    157e:	3c d0       	rcall	.+120    	; 0x15f8 <__ultoa_invert+0x9c>
    1580:	67 0f       	add	r22, r23
    1582:	78 1f       	adc	r23, r24
    1584:	89 1f       	adc	r24, r25
    1586:	9a 1f       	adc	r25, r26
    1588:	a1 1d       	adc	r26, r1
    158a:	68 0f       	add	r22, r24
    158c:	79 1f       	adc	r23, r25
    158e:	8a 1f       	adc	r24, r26
    1590:	91 1d       	adc	r25, r1
    1592:	a1 1d       	adc	r26, r1
    1594:	6a 0f       	add	r22, r26
    1596:	71 1d       	adc	r23, r1
    1598:	81 1d       	adc	r24, r1
    159a:	91 1d       	adc	r25, r1
    159c:	a1 1d       	adc	r26, r1
    159e:	20 d0       	rcall	.+64     	; 0x15e0 <__ultoa_invert+0x84>
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <__ultoa_invert+0x48>
    15a2:	68 94       	set
    15a4:	3f 91       	pop	r19
    15a6:	2a e0       	ldi	r18, 0x0A	; 10
    15a8:	26 9f       	mul	r18, r22
    15aa:	11 24       	eor	r1, r1
    15ac:	30 19       	sub	r19, r0
    15ae:	30 5d       	subi	r19, 0xD0	; 208
    15b0:	31 93       	st	Z+, r19
    15b2:	de f6       	brtc	.-74     	; 0x156a <__ultoa_invert+0xe>
    15b4:	cf 01       	movw	r24, r30
    15b6:	08 95       	ret
    15b8:	46 2f       	mov	r20, r22
    15ba:	47 70       	andi	r20, 0x07	; 7
    15bc:	40 5d       	subi	r20, 0xD0	; 208
    15be:	41 93       	st	Z+, r20
    15c0:	b3 e0       	ldi	r27, 0x03	; 3
    15c2:	0f d0       	rcall	.+30     	; 0x15e2 <__ultoa_invert+0x86>
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0x5c>
    15c6:	f6 cf       	rjmp	.-20     	; 0x15b4 <__ultoa_invert+0x58>
    15c8:	46 2f       	mov	r20, r22
    15ca:	4f 70       	andi	r20, 0x0F	; 15
    15cc:	40 5d       	subi	r20, 0xD0	; 208
    15ce:	4a 33       	cpi	r20, 0x3A	; 58
    15d0:	18 f0       	brcs	.+6      	; 0x15d8 <__ultoa_invert+0x7c>
    15d2:	49 5d       	subi	r20, 0xD9	; 217
    15d4:	31 fd       	sbrc	r19, 1
    15d6:	40 52       	subi	r20, 0x20	; 32
    15d8:	41 93       	st	Z+, r20
    15da:	02 d0       	rcall	.+4      	; 0x15e0 <__ultoa_invert+0x84>
    15dc:	a9 f7       	brne	.-22     	; 0x15c8 <__ultoa_invert+0x6c>
    15de:	ea cf       	rjmp	.-44     	; 0x15b4 <__ultoa_invert+0x58>
    15e0:	b4 e0       	ldi	r27, 0x04	; 4
    15e2:	a6 95       	lsr	r26
    15e4:	97 95       	ror	r25
    15e6:	87 95       	ror	r24
    15e8:	77 95       	ror	r23
    15ea:	67 95       	ror	r22
    15ec:	ba 95       	dec	r27
    15ee:	c9 f7       	brne	.-14     	; 0x15e2 <__ultoa_invert+0x86>
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	61 05       	cpc	r22, r1
    15f4:	71 05       	cpc	r23, r1
    15f6:	08 95       	ret
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	0a 2e       	mov	r0, r26
    15fe:	06 94       	lsr	r0
    1600:	57 95       	ror	r21
    1602:	47 95       	ror	r20
    1604:	37 95       	ror	r19
    1606:	27 95       	ror	r18
    1608:	ba 95       	dec	r27
    160a:	c9 f7       	brne	.-14     	; 0x15fe <__ultoa_invert+0xa2>
    160c:	62 0f       	add	r22, r18
    160e:	73 1f       	adc	r23, r19
    1610:	84 1f       	adc	r24, r20
    1612:	95 1f       	adc	r25, r21
    1614:	a0 1d       	adc	r26, r0
    1616:	08 95       	ret

00001618 <__prologue_saves__>:
    1618:	2f 92       	push	r2
    161a:	3f 92       	push	r3
    161c:	4f 92       	push	r4
    161e:	5f 92       	push	r5
    1620:	6f 92       	push	r6
    1622:	7f 92       	push	r7
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	ca 1b       	sub	r28, r26
    1642:	db 0b       	sbc	r29, r27
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	09 94       	ijmp

00001650 <__epilogue_restores__>:
    1650:	2a 88       	ldd	r2, Y+18	; 0x12
    1652:	39 88       	ldd	r3, Y+17	; 0x11
    1654:	48 88       	ldd	r4, Y+16	; 0x10
    1656:	5f 84       	ldd	r5, Y+15	; 0x0f
    1658:	6e 84       	ldd	r6, Y+14	; 0x0e
    165a:	7d 84       	ldd	r7, Y+13	; 0x0d
    165c:	8c 84       	ldd	r8, Y+12	; 0x0c
    165e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1660:	aa 84       	ldd	r10, Y+10	; 0x0a
    1662:	b9 84       	ldd	r11, Y+9	; 0x09
    1664:	c8 84       	ldd	r12, Y+8	; 0x08
    1666:	df 80       	ldd	r13, Y+7	; 0x07
    1668:	ee 80       	ldd	r14, Y+6	; 0x06
    166a:	fd 80       	ldd	r15, Y+5	; 0x05
    166c:	0c 81       	ldd	r16, Y+4	; 0x04
    166e:	1b 81       	ldd	r17, Y+3	; 0x03
    1670:	aa 81       	ldd	r26, Y+2	; 0x02
    1672:	b9 81       	ldd	r27, Y+1	; 0x01
    1674:	ce 0f       	add	r28, r30
    1676:	d1 1d       	adc	r29, r1
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	ed 01       	movw	r28, r26
    1684:	08 95       	ret

00001686 <_exit>:
    1686:	f8 94       	cli

00001688 <__stop_program>:
    1688:	ff cf       	rjmp	.-2      	; 0x1688 <__stop_program>
