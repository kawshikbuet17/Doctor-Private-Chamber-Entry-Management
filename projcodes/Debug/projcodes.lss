
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  00001cc8  00001d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008001de  008001de  00001eda  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000362c  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001616  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025a6  00000000  00000000  00006f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  000094fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000993  00000000  00000000  00009c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d9a  00000000  00000000  0000a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000c365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <Lcd4_Cmd+0x2e>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <pinChange+0x1a>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <Keypad_GetCol+0x40>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <Error_ErrorNum+0x28>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 ec       	ldi	r30, 0xC8	; 200
     162:	fc e1       	ldi	r31, 0x1C	; 28
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	ae 3d       	cpi	r26, 0xDE	; 222
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	ae ed       	ldi	r26, 0xDE	; 222
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a9 3f       	cpi	r26, 0xF9	; 249
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 d3 06 	call	0xda6	; 0xda6 <main>
     184:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
     18c:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
     190:	08 95       	ret

00000192 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	2a 97       	sbiw	r28, 0x0a	; 10
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	16 2f       	mov	r17, r22
     1ac:	07 2f       	mov	r16, r23
	HC05_SendString(text);
     1ae:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	85 e6       	ldi	r24, 0x65	; 101
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	9f 93       	push	r25
     1bc:	8f 93       	push	r24
     1be:	8e 01       	movw	r16, r28
     1c0:	0f 5f       	subi	r16, 0xFF	; 255
     1c2:	1f 4f       	sbci	r17, 0xFF	; 255
     1c4:	1f 93       	push	r17
     1c6:	0f 93       	push	r16
     1c8:	0e 94 46 09 	call	0x128c	; 0x128c <sprintf>
	HC05_SendString(temp);
     1cc:	c8 01       	movw	r24, r16
     1ce:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	HC05_SendString("\r\n");
     1d2:	8c e6       	ldi	r24, 0x6C	; 108
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
}
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	2a 96       	adiw	r28, 0x0a	; 10
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	2a 97       	sbiw	r28, 0x0a	; 10
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     216:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
     21a:	fe 01       	movw	r30, r28
     21c:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
	temp[i]='0' + ((val>>i)&1);
     222:	c8 01       	movw	r24, r16
     224:	02 2e       	mov	r0, r18
     226:	02 c0       	rjmp	.+4      	; 0x22c <Error_ErrorBin+0x30>
     228:	95 95       	asr	r25
     22a:	87 95       	ror	r24
     22c:	0a 94       	dec	r0
     22e:	e2 f7       	brpl	.-8      	; 0x228 <Error_ErrorBin+0x2c>
     230:	81 70       	andi	r24, 0x01	; 1
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     236:	2f 5f       	subi	r18, 0xFF	; 255
     238:	3f 4f       	sbci	r19, 0xFF	; 255
     23a:	28 30       	cpi	r18, 0x08	; 8
     23c:	31 05       	cpc	r19, r1
     23e:	89 f7       	brne	.-30     	; 0x222 <Error_ErrorBin+0x26>
	temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     240:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	HC05_SendString("\r\n");
     24a:	8c e6       	ldi	r24, 0x6C	; 108
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
     252:	2a 96       	adiw	r28, 0x0a	; 10
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	8b b9       	out	0x0b, r24	; 11
     26c:	88 e1       	ldi	r24, 0x18	; 24
     26e:	8a b9       	out	0x0a, r24	; 10
     270:	86 e8       	ldi	r24, 0x86	; 134
     272:	80 bd       	out	0x20, r24	; 32
     274:	8c e0       	ldi	r24, 0x0C	; 12
     276:	89 b9       	out	0x09, r24	; 9
     278:	10 bc       	out	0x20, r1	; 32
     27a:	08 95       	ret

0000027c <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     27c:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     27e:	5d 9b       	sbis	0x0b, 5	; 11
     280:	fe cf       	rjmp	.-4      	; 0x27e <HC05_SendChar+0x2>
}
     282:	08 95       	ret

00000284 <HC05_SendString>:
void HC05_SendString(char * s)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
	while(*s)
     28a:	88 81       	ld	r24, Y
     28c:	88 23       	and	r24, r24
     28e:	31 f0       	breq	.+12     	; 0x29c <HC05_SendString+0x18>
     290:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     292:	0e 94 3e 01 	call	0x27c	; 0x27c <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     296:	89 91       	ld	r24, Y+
     298:	81 11       	cpse	r24, r1
     29a:	fb cf       	rjmp	.-10     	; 0x292 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
	DDRA = (DDRA & 0b00000011) | 0x00;
     2a2:	8a b3       	in	r24, 0x1a	; 26
     2a4:	83 70       	andi	r24, 0x03	; 3
     2a6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     2ac:	88 bb       	out	0x18, r24	; 24
     2ae:	08 95       	ret

000002b0 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     2b0:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <isNumber>
	isUpperCase = false;
     2b4:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <isUpperCase>
	position = 0;
     2b8:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <__data_end+0x1>
     2bc:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__data_end>
	keyBuffer[position] = 0;
     2c0:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__data_end>
     2c4:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__data_end+0x1>
     2c8:	ec 51       	subi	r30, 0x1C	; 28
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	10 82       	st	Z, r1
     2ce:	08 95       	ret

000002d0 <Keypad_InitNumpad>:
}
void Keypad_InitNumpad()
{
	isNumber = true;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <isNumber>
     2d6:	08 95       	ret

000002d8 <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     2d8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <isNumber>
     2dc:	81 11       	cpse	r24, r1
     2de:	07 c0       	rjmp	.+14     	; 0x2ee <Keypad_GetMode+0x16>
	return "123";
	else if(isUpperCase)
     2e0:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <isUpperCase>
     2e4:	81 11       	cpse	r24, r1
     2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <Keypad_GetMode+0x1c>
	return "ABC";
	else return "abc";
     2e8:	87 e7       	ldi	r24, 0x77	; 119
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
	return "123";
     2ee:	8f e6       	ldi	r24, 0x6F	; 111
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	08 95       	ret
	else if(isUpperCase)
	return "ABC";
     2f4:	83 e7       	ldi	r24, 0x73	; 115
     2f6:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     2f8:	08 95       	ret

000002fa <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     2fe:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Keypad_GetMode>
     302:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     304:	fc 01       	movw	r30, r24
     306:	01 90       	ld	r0, Z+
     308:	00 20       	and	r0, r0
     30a:	e9 f7       	brne	.-6      	; 0x306 <Keypad_UpdateKeyMode+0xc>
     30c:	ac 01       	movw	r20, r24
     30e:	4e 1b       	sub	r20, r30
     310:	5f 0b       	sbc	r21, r31
     312:	4f 5e       	subi	r20, 0xEF	; 239
     314:	5f 4f       	sbci	r21, 0xFF	; 255
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     320:	be 01       	movw	r22, r28
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <Keypad_KeyPressed>:

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     32e:	89 b3       	in	r24, 0x19	; 25
}
     330:	82 95       	swap	r24
     332:	8f 70       	andi	r24, 0x0F	; 15
     334:	08 95       	ret

00000336 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
	int pin = PINA >> 4;
     33c:	c9 b3       	in	r28, 0x19	; 25
     33e:	c2 95       	swap	r28
     340:	cf 70       	andi	r28, 0x0F	; 15
     342:	0c 2f       	mov	r16, r28
     344:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     346:	b8 01       	movw	r22, r16
     348:	8b e7       	ldi	r24, 0x7B	; 123
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     350:	c0 fd       	sbrc	r28, 0
     352:	0c c0       	rjmp	.+24     	; 0x36c <Keypad_GetRow+0x36>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	98 01       	movw	r18, r16
     35a:	08 2e       	mov	r0, r24
     35c:	02 c0       	rjmp	.+4      	; 0x362 <Keypad_GetRow+0x2c>
     35e:	35 95       	asr	r19
     360:	27 95       	ror	r18
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <Keypad_GetRow+0x28>
     366:	20 ff       	sbrs	r18, 0
     368:	04 c0       	rjmp	.+8      	; 0x372 <Keypad_GetRow+0x3c>
     36a:	0c c0       	rjmp	.+24     	; 0x384 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
		return i;
     370:	09 c0       	rjmp	.+18     	; 0x384 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	84 30       	cpi	r24, 0x04	; 4
     376:	91 05       	cpc	r25, r1
     378:	79 f7       	brne	.-34     	; 0x358 <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
		return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     37a:	84 e8       	ldi	r24, 0x84	; 132
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	return -1;
     382:	8f ef       	ldi	r24, 0xFF	; 255
}
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
	int i = 7;
     394:	c7 e0       	ldi	r28, 0x07	; 7
     396:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     398:	01 e0       	ldi	r16, 0x01	; 1
     39a:	10 e0       	ldi	r17, 0x00	; 0
     39c:	28 b3       	in	r18, 0x18	; 24
     39e:	c8 01       	movw	r24, r16
     3a0:	0c 2e       	mov	r0, r28
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Keypad_GetCol+0x1c>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	0a 94       	dec	r0
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Keypad_GetCol+0x18>
     3ac:	82 27       	eor	r24, r18
     3ae:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     3b0:	66 b3       	in	r22, 0x16	; 22
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	82 e9       	ldi	r24, 0x92	; 146
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     3bc:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     3be:	82 95       	swap	r24
     3c0:	8f 70       	andi	r24, 0x0F	; 15
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <Keypad_GetCol+0x3c>
		{
			return i;
     3c4:	8c 2f       	mov	r24, r28
     3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <Keypad_GetCol+0x4a>
		}
		i--;
     3c8:	21 97       	sbiw	r28, 0x01	; 1
     3ca:	40 f7       	brcc	.-48     	; 0x39c <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     3cc:	88 e9       	ldi	r24, 0x98	; 152
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	// report error
	return -1;
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     3e0:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__data_end>
     3e4:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__data_end+0x1>
     3e8:	ec 51       	subi	r30, 0x1C	; 28
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	80 83       	st	Z, r24
	if(position < 16)
     3ee:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     3f2:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__data_end+0x1>
     3f6:	40 97       	sbiw	r24, 0x10	; 16
     3f8:	4c f4       	brge	.+18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	position = position +1;
     3fa:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     3fe:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__data_end+0x1>
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__data_end+0x1>
     408:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
	keyBuffer[position] = 0;
     40c:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__data_end>
     410:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__data_end+0x1>
     414:	ec 51       	subi	r30, 0x1C	; 28
     416:	fe 4f       	sbci	r31, 0xFE	; 254
     418:	10 82       	st	Z, r1
     41a:	08 95       	ret

0000041c <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     41c:	cf 93       	push	r28
     41e:	c8 2f       	mov	r28, r24
	if(key >= 30)
     420:	8e 31       	cpi	r24, 0x1E	; 30
     422:	24 f0       	brlt	.+8      	; 0x42c <Keypad_AddKey+0x10>
	Error_Error("KeyPad_AddKey: 31|30");
     424:	86 ea       	ldi	r24, 0xA6	; 166
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	if(key == 29)
     42c:	cd 31       	cpi	r28, 0x1D	; 29
     42e:	b9 f4       	brne	.+46     	; 0x45e <Keypad_AddKey+0x42>
	{
		// backspace = delete char
		if(position)
     430:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     434:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__data_end+0x1>
     438:	89 2b       	or	r24, r25
     43a:	49 f0       	breq	.+18     	; 0x44e <Keypad_AddKey+0x32>
		position--;
     43c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     440:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__data_end+0x1>
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__data_end+0x1>
     44a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
		keyBuffer[position] = 0;
     44e:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__data_end>
     452:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__data_end+0x1>
     456:	ec 51       	subi	r30, 0x1C	; 28
     458:	fe 4f       	sbci	r31, 0xFE	; 254
     45a:	10 82       	st	Z, r1
     45c:	57 c0       	rjmp	.+174    	; 0x50c <Keypad_AddKey+0xf0>
	}
	else if(key == 28)
     45e:	cc 31       	cpi	r28, 0x1C	; 28
     460:	21 f4       	brne	.+8      	; 0x46a <Keypad_AddKey+0x4e>
	{
		// space
		addChar(' ');
     462:	80 e2       	ldi	r24, 0x20	; 32
     464:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <addChar>
     468:	51 c0       	rjmp	.+162    	; 0x50c <Keypad_AddKey+0xf0>
	}
	else if(key == 27)
     46a:	cb 31       	cpi	r28, 0x1B	; 27
     46c:	39 f4       	brne	.+14     	; 0x47c <Keypad_AddKey+0x60>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     46e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <isNumber>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	89 27       	eor	r24, r25
     476:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <isNumber>
     47a:	48 c0       	rjmp	.+144    	; 0x50c <Keypad_AddKey+0xf0>
	}
	else if(isNumber)
     47c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <isNumber>
     480:	88 23       	and	r24, r24
     482:	e9 f0       	breq	.+58     	; 0x4be <Keypad_AddKey+0xa2>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     484:	9c 2f       	mov	r25, r28
     486:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     488:	93 30       	cpi	r25, 0x03	; 3
     48a:	08 f0       	brcs	.+2      	; 0x48e <Keypad_AddKey+0x72>
     48c:	3f c0       	rjmp	.+126    	; 0x50c <Keypad_AddKey+0xf0>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber)
	{
		char row = key >> 3;
     48e:	c5 95       	asr	r28
     490:	c5 95       	asr	r28
     492:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     494:	c3 30       	cpi	r28, 0x03	; 3
     496:	38 f4       	brcc	.+14     	; 0x4a6 <Keypad_AddKey+0x8a>
			c = '1' + row * 3 + col;
     498:	8c 2f       	mov	r24, r28
     49a:	88 0f       	add	r24, r24
     49c:	c8 0f       	add	r28, r24
     49e:	81 e3       	ldi	r24, 0x31	; 49
     4a0:	89 0f       	add	r24, r25
     4a2:	8c 0f       	add	r24, r28
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <Keypad_AddKey+0x9c>
		}
		else if(col == 0) {
     4a6:	99 23       	and	r25, r25
     4a8:	21 f0       	breq	.+8      	; 0x4b2 <Keypad_AddKey+0x96>
			c = '*';
		}
		else if(col == 1) {
     4aa:	91 30       	cpi	r25, 0x01	; 1
     4ac:	21 f0       	breq	.+8      	; 0x4b6 <Keypad_AddKey+0x9a>
			c = '0';
		}
		else  {
			c = '#';
     4ae:	83 e2       	ldi	r24, 0x23	; 35
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <Keypad_AddKey+0x9c>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     4b2:	8a e2       	ldi	r24, 0x2A	; 42
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <Keypad_AddKey+0x9c>
		}
		else if(col == 1) {
			c = '0';
     4b6:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     4b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <addChar>
     4bc:	27 c0       	rjmp	.+78     	; 0x50c <Keypad_AddKey+0xf0>
		
	}
	else if(key == 26)
     4be:	ca 31       	cpi	r28, 0x1A	; 26
     4c0:	39 f4       	brne	.+14     	; 0x4d0 <Keypad_AddKey+0xb4>
	{
		// capslock
		isUpperCase = !isUpperCase;
     4c2:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <isUpperCase>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	89 27       	eor	r24, r25
     4ca:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <isUpperCase>
     4ce:	1e c0       	rjmp	.+60     	; 0x50c <Keypad_AddKey+0xf0>
	}
	else
	{
		// char
		char row = key >> 3;
     4d0:	9c 2f       	mov	r25, r28
     4d2:	95 95       	asr	r25
     4d4:	95 95       	asr	r25
     4d6:	95 95       	asr	r25
		char col = key & 0b00000111;
     4d8:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     4da:	93 30       	cpi	r25, 0x03	; 3
     4dc:	68 f4       	brcc	.+26     	; 0x4f8 <Keypad_AddKey+0xdc>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     4de:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <isUpperCase>
     4e2:	81 11       	cpse	r24, r1
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <Keypad_AddKey+0xce>
     4e6:	81 e6       	ldi	r24, 0x61	; 97
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <Keypad_AddKey+0xd0>
     4ea:	81 e4       	ldi	r24, 0x41	; 65
     4ec:	99 0f       	add	r25, r25
     4ee:	99 0f       	add	r25, r25
     4f0:	99 0f       	add	r25, r25
     4f2:	c9 0f       	add	r28, r25
     4f4:	8c 0f       	add	r24, r28
     4f6:	08 c0       	rjmp	.+16     	; 0x508 <Keypad_AddKey+0xec>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     4f8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <isUpperCase>
     4fc:	81 11       	cpse	r24, r1
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <Keypad_AddKey+0xe8>
     500:	89 e7       	ldi	r24, 0x79	; 121
     502:	01 c0       	rjmp	.+2      	; 0x506 <Keypad_AddKey+0xea>
     504:	89 e5       	ldi	r24, 0x59	; 89
     506:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     508:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <addChar>
	}
	return ;
}
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     514:	0e 94 9b 01 	call	0x336	; 0x336 <Keypad_GetRow>
     518:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     51a:	0e 94 c6 01 	call	0x38c	; 0x38c <Keypad_GetCol>
     51e:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     520:	6c 2f       	mov	r22, r28
     522:	0c 2e       	mov	r0, r28
     524:	00 0c       	add	r0, r0
     526:	77 0b       	sbc	r23, r23
     528:	8b eb       	ldi	r24, 0xBB	; 187
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 c9 00 	call	0x192	; 0x192 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     530:	6d 2f       	mov	r22, r29
     532:	0d 2e       	mov	r0, r29
     534:	00 0c       	add	r0, r0
     536:	77 0b       	sbc	r23, r23
     538:	8f eb       	ldi	r24, 0xBF	; 191
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 c9 00 	call	0x192	; 0x192 <Error_ErrorNum>
	return row * 8 + col;
     540:	8c 2f       	mov	r24, r28
     542:	88 0f       	add	r24, r24
     544:	88 0f       	add	r24, r24
     546:	88 0f       	add	r24, r24
     548:	8d 0f       	add	r24, r29
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     550:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <currentState>
     554:	92 30       	cpi	r25, 0x02	; 2
     556:	89 f0       	breq	.+34     	; 0x57a <KeyProcessor_ProcessKey+0x2a>
     558:	2c f4       	brge	.+10     	; 0x564 <KeyProcessor_ProcessKey+0x14>
     55a:	99 23       	and	r25, r25
     55c:	41 f0       	breq	.+16     	; 0x56e <KeyProcessor_ProcessKey+0x1e>
     55e:	91 30       	cpi	r25, 0x01	; 1
     560:	49 f0       	breq	.+18     	; 0x574 <KeyProcessor_ProcessKey+0x24>
     562:	14 c0       	rjmp	.+40     	; 0x58c <KeyProcessor_ProcessKey+0x3c>
     564:	93 30       	cpi	r25, 0x03	; 3
     566:	61 f0       	breq	.+24     	; 0x580 <KeyProcessor_ProcessKey+0x30>
     568:	94 30       	cpi	r25, 0x04	; 4
     56a:	69 f0       	breq	.+26     	; 0x586 <KeyProcessor_ProcessKey+0x36>
     56c:	0f c0       	rjmp	.+30     	; 0x58c <KeyProcessor_ProcessKey+0x3c>
	{
		case IDLE:
		Idle_ProcessKey(key);
     56e:	0e 94 40 08 	call	0x1080	; 0x1080 <Idle_ProcessKey>
		break;
     572:	08 95       	ret
		case ENTERING_NAME :
		EnteringName_ProcessKey(key);
     574:	0e 94 68 07 	call	0xed0	; 0xed0 <EnteringName_ProcessKey>
		break;
     578:	08 95       	ret
		case ENTERING_AGE :
		EnteringAge_ProcessKey(key);
     57a:	0e 94 13 07 	call	0xe26	; 0xe26 <EnteringAge_ProcessKey>
		break;
     57e:	08 95       	ret
		case ENTERING_PHONE :
		EnteringPhone_ProcessKey(key);
     580:	0e 94 bf 07 	call	0xf7e	; 0xf7e <EnteringPhone_ProcessKey>
		break;
     584:	08 95       	ret
		case GENERATE_SERIAL :
		GenerateSerial_ProcessKey(key);
     586:	0e 94 22 08 	call	0x1044	; 0x1044 <GenerateSerial_ProcessKey>
		break;
     58a:	08 95       	ret
		//case STORE_RECORD :
		//Store_ProcessKey(key);
		//break;
		default:
		Error_Error("ProcessKey: Undefined Current State");
     58c:	83 ec       	ldi	r24, 0xC3	; 195
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     594:	08 95       	ret

00000596 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     596:	88 23       	and	r24, r24
     598:	19 f0       	breq	.+6      	; 0x5a0 <Lcd_Init+0xa>
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	39 f0       	breq	.+14     	; 0x5ac <Lcd_Init+0x16>
     59e:	24 c0       	rjmp	.+72     	; 0x5e8 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     5a0:	81 b3       	in	r24, 0x11	; 17
     5a2:	8c 6f       	ori	r24, 0xFC	; 252
     5a4:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     5a6:	0e 94 09 05 	call	0xa12	; 0xa12 <Lcd4_Init>
			break;
     5aa:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	0e 94 5e 06 	call	0xcbc	; 0xcbc <lcd_init>
			lcd_backlight(0);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b8:	2f e9       	ldi	r18, 0x9F	; 159
     5ba:	86 e8       	ldi	r24, 0x86	; 134
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	80 40       	sbci	r24, 0x00	; 0
     5c2:	90 40       	sbci	r25, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <Lcd_Init+0x28>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <Lcd_Init+0x32>
     5c8:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_backlight>
     5d0:	2f e9       	ldi	r18, 0x9F	; 159
     5d2:	86 e8       	ldi	r24, 0x86	; 134
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	21 50       	subi	r18, 0x01	; 1
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	90 40       	sbci	r25, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <Lcd_Init+0x40>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <Lcd_Init+0x4a>
     5e0:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     5e2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     5e6:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     5e8:	87 ee       	ldi	r24, 0xE7	; 231
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     5f0:	08 95       	ret

000005f2 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     5f2:	88 23       	and	r24, r24
     5f4:	19 f0       	breq	.+6      	; 0x5fc <Lcd_ClearScreen+0xa>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	21 f0       	breq	.+8      	; 0x602 <Lcd_ClearScreen+0x10>
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     5fc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Lcd4_Clear>
			break;
     600:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     602:	0e 94 1d 06 	call	0xc3a	; 0xc3a <lcd_clrscr>
			break;
     606:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     610:	08 95       	ret

00000612 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     612:	88 23       	and	r24, r24
     614:	19 f0       	breq	.+6      	; 0x61c <Lcd_Prints+0xa>
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	29 f0       	breq	.+10     	; 0x624 <Lcd_Prints+0x12>
     61a:	08 c0       	rjmp	.+16     	; 0x62c <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     61c:	cb 01       	movw	r24, r22
     61e:	0e 94 82 05 	call	0xb04	; 0xb04 <Lcd4_Write_String>
			break;
     622:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     624:	cb 01       	movw	r24, r22
     626:	0e 94 4f 06 	call	0xc9e	; 0xc9e <lcd_puts>
			break;
     62a:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     62c:	86 e0       	ldi	r24, 0x06	; 6
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     634:	08 95       	ret

00000636 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     636:	96 2f       	mov	r25, r22
	switch(lcdType)
     638:	88 23       	and	r24, r24
     63a:	19 f0       	breq	.+6      	; 0x642 <Lcd_Position+0xc>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	31 f0       	breq	.+12     	; 0x64c <Lcd_Position+0x16>
     640:	09 c0       	rjmp	.+18     	; 0x654 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     642:	64 2f       	mov	r22, r20
     644:	89 2f       	mov	r24, r25
     646:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Lcd4_Set_Cursor>
		break;
     64a:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     64c:	84 2f       	mov	r24, r20
     64e:	0e 94 07 06 	call	0xc0e	; 0xc0e <lcd_gotoxy>
		break;
     652:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     654:	8d e2       	ldi	r24, 0x2D	; 45
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     65c:	08 95       	ret

0000065e <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	00 d0       	rcall	.+0      	; 0x664 <Lcd_Printc+0x6>
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     668:	69 83       	std	Y+1, r22	; 0x01
     66a:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     680:	67 2b       	or	r22, r23
     682:	09 f0       	breq	.+2      	; 0x686 <pinChange+0x6>
     684:	9f c0       	rjmp	.+318    	; 0x7c4 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	11 f4       	brne	.+4      	; 0x68e <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     68a:	d8 98       	cbi	0x1b, 0	; 27
     68c:	08 95       	ret
		else if(a == eS_PORTA1)
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	91 05       	cpc	r25, r1
     692:	11 f4       	brne	.+4      	; 0x698 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     694:	d9 98       	cbi	0x1b, 1	; 27
     696:	08 95       	ret
		else if(a == eS_PORTA2)
     698:	82 30       	cpi	r24, 0x02	; 2
     69a:	91 05       	cpc	r25, r1
     69c:	11 f4       	brne	.+4      	; 0x6a2 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     69e:	da 98       	cbi	0x1b, 2	; 27
     6a0:	08 95       	ret
		else if(a == eS_PORTA3)
     6a2:	83 30       	cpi	r24, 0x03	; 3
     6a4:	91 05       	cpc	r25, r1
     6a6:	11 f4       	brne	.+4      	; 0x6ac <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     6a8:	db 98       	cbi	0x1b, 3	; 27
     6aa:	08 95       	ret
		else if(a == eS_PORTA4)
     6ac:	84 30       	cpi	r24, 0x04	; 4
     6ae:	91 05       	cpc	r25, r1
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     6b2:	dc 98       	cbi	0x1b, 4	; 27
     6b4:	08 95       	ret
		else if(a == eS_PORTA5)
     6b6:	85 30       	cpi	r24, 0x05	; 5
     6b8:	91 05       	cpc	r25, r1
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     6bc:	dd 98       	cbi	0x1b, 5	; 27
     6be:	08 95       	ret
		else if(a == eS_PORTA6)
     6c0:	86 30       	cpi	r24, 0x06	; 6
     6c2:	91 05       	cpc	r25, r1
     6c4:	11 f4       	brne	.+4      	; 0x6ca <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     6c6:	de 98       	cbi	0x1b, 6	; 27
     6c8:	08 95       	ret
		else if(a == eS_PORTA7)
     6ca:	87 30       	cpi	r24, 0x07	; 7
     6cc:	91 05       	cpc	r25, r1
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     6d0:	df 98       	cbi	0x1b, 7	; 27
     6d2:	08 95       	ret
		else if(a == eS_PORTB0)
     6d4:	8a 30       	cpi	r24, 0x0A	; 10
     6d6:	91 05       	cpc	r25, r1
     6d8:	11 f4       	brne	.+4      	; 0x6de <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     6da:	c0 98       	cbi	0x18, 0	; 24
     6dc:	08 95       	ret
		else if(a == eS_PORTB1)
     6de:	8b 30       	cpi	r24, 0x0B	; 11
     6e0:	91 05       	cpc	r25, r1
     6e2:	11 f4       	brne	.+4      	; 0x6e8 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     6e4:	c1 98       	cbi	0x18, 1	; 24
     6e6:	08 95       	ret
		else if(a == eS_PORTB2)
     6e8:	8c 30       	cpi	r24, 0x0C	; 12
     6ea:	91 05       	cpc	r25, r1
     6ec:	11 f4       	brne	.+4      	; 0x6f2 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     6ee:	c2 98       	cbi	0x18, 2	; 24
     6f0:	08 95       	ret
		else if(a == eS_PORTB3)
     6f2:	8d 30       	cpi	r24, 0x0D	; 13
     6f4:	91 05       	cpc	r25, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     6f8:	c3 98       	cbi	0x18, 3	; 24
     6fa:	08 95       	ret
		else if(a == eS_PORTB4)
     6fc:	8e 30       	cpi	r24, 0x0E	; 14
     6fe:	91 05       	cpc	r25, r1
     700:	11 f4       	brne	.+4      	; 0x706 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     702:	c4 98       	cbi	0x18, 4	; 24
     704:	08 95       	ret
		else if(a == eS_PORTB5)
     706:	8f 30       	cpi	r24, 0x0F	; 15
     708:	91 05       	cpc	r25, r1
     70a:	11 f4       	brne	.+4      	; 0x710 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     70c:	c5 98       	cbi	0x18, 5	; 24
     70e:	08 95       	ret
		else if(a == eS_PORTB6)
     710:	80 31       	cpi	r24, 0x10	; 16
     712:	91 05       	cpc	r25, r1
     714:	11 f4       	brne	.+4      	; 0x71a <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     716:	c6 98       	cbi	0x18, 6	; 24
     718:	08 95       	ret
		else if(a == eS_PORTB7)
     71a:	81 31       	cpi	r24, 0x11	; 17
     71c:	91 05       	cpc	r25, r1
     71e:	11 f4       	brne	.+4      	; 0x724 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     720:	c7 98       	cbi	0x18, 7	; 24
     722:	08 95       	ret
		else if(a == eS_PORTC0)
     724:	84 31       	cpi	r24, 0x14	; 20
     726:	91 05       	cpc	r25, r1
     728:	11 f4       	brne	.+4      	; 0x72e <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     72a:	a8 98       	cbi	0x15, 0	; 21
     72c:	08 95       	ret
		else if(a == eS_PORTC1)
     72e:	85 31       	cpi	r24, 0x15	; 21
     730:	91 05       	cpc	r25, r1
     732:	11 f4       	brne	.+4      	; 0x738 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     734:	a9 98       	cbi	0x15, 1	; 21
     736:	08 95       	ret
		else if(a == eS_PORTC2)
     738:	86 31       	cpi	r24, 0x16	; 22
     73a:	91 05       	cpc	r25, r1
     73c:	11 f4       	brne	.+4      	; 0x742 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     73e:	aa 98       	cbi	0x15, 2	; 21
     740:	08 95       	ret
		else if(a == eS_PORTC3)
     742:	87 31       	cpi	r24, 0x17	; 23
     744:	91 05       	cpc	r25, r1
     746:	11 f4       	brne	.+4      	; 0x74c <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     748:	ab 98       	cbi	0x15, 3	; 21
     74a:	08 95       	ret
		else if(a == eS_PORTC4)
     74c:	88 31       	cpi	r24, 0x18	; 24
     74e:	91 05       	cpc	r25, r1
     750:	11 f4       	brne	.+4      	; 0x756 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     752:	ac 98       	cbi	0x15, 4	; 21
     754:	08 95       	ret
		else if(a == eS_PORTC5)
     756:	89 31       	cpi	r24, 0x19	; 25
     758:	91 05       	cpc	r25, r1
     75a:	11 f4       	brne	.+4      	; 0x760 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     75c:	ad 98       	cbi	0x15, 5	; 21
     75e:	08 95       	ret
		else if(a == eS_PORTC6)
     760:	8a 31       	cpi	r24, 0x1A	; 26
     762:	91 05       	cpc	r25, r1
     764:	11 f4       	brne	.+4      	; 0x76a <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     766:	ae 98       	cbi	0x15, 6	; 21
     768:	08 95       	ret
		else if(a == eS_PORTC7)
     76a:	8b 31       	cpi	r24, 0x1B	; 27
     76c:	91 05       	cpc	r25, r1
     76e:	11 f4       	brne	.+4      	; 0x774 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     770:	af 98       	cbi	0x15, 7	; 21
     772:	08 95       	ret
		else if(a == eS_PORTD0)
     774:	8e 31       	cpi	r24, 0x1E	; 30
     776:	91 05       	cpc	r25, r1
     778:	11 f4       	brne	.+4      	; 0x77e <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     77a:	90 98       	cbi	0x12, 0	; 18
     77c:	08 95       	ret
		else if(a == eS_PORTD1)
     77e:	8f 31       	cpi	r24, 0x1F	; 31
     780:	91 05       	cpc	r25, r1
     782:	11 f4       	brne	.+4      	; 0x788 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     784:	91 98       	cbi	0x12, 1	; 18
     786:	08 95       	ret
		else if(a == eS_PORTD2)
     788:	80 32       	cpi	r24, 0x20	; 32
     78a:	91 05       	cpc	r25, r1
     78c:	11 f4       	brne	.+4      	; 0x792 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     78e:	92 98       	cbi	0x12, 2	; 18
     790:	08 95       	ret
		else if(a == eS_PORTD3)
     792:	81 32       	cpi	r24, 0x21	; 33
     794:	91 05       	cpc	r25, r1
     796:	11 f4       	brne	.+4      	; 0x79c <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     798:	93 98       	cbi	0x12, 3	; 18
     79a:	08 95       	ret
		else if(a == eS_PORTD4)
     79c:	82 32       	cpi	r24, 0x22	; 34
     79e:	91 05       	cpc	r25, r1
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     7a2:	94 98       	cbi	0x12, 4	; 18
     7a4:	08 95       	ret
		else if(a == eS_PORTD5)
     7a6:	83 32       	cpi	r24, 0x23	; 35
     7a8:	91 05       	cpc	r25, r1
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     7ac:	95 98       	cbi	0x12, 5	; 18
     7ae:	08 95       	ret
		else if(a == eS_PORTD6)
     7b0:	84 32       	cpi	r24, 0x24	; 36
     7b2:	91 05       	cpc	r25, r1
     7b4:	11 f4       	brne	.+4      	; 0x7ba <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     7b6:	96 98       	cbi	0x12, 6	; 18
     7b8:	08 95       	ret
		else if(a == eS_PORTD7)
     7ba:	85 97       	sbiw	r24, 0x25	; 37
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <pinChange+0x140>
     7be:	9f c0       	rjmp	.+318    	; 0x8fe <__stack+0x9f>
		PORTD &= ~(1<<PD7);
     7c0:	97 98       	cbi	0x12, 7	; 18
     7c2:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	11 f4       	brne	.+4      	; 0x7cc <pinChange+0x14c>
		PORTA |= (1<<PA0);
     7c8:	d8 9a       	sbi	0x1b, 0	; 27
     7ca:	08 95       	ret
		else if(a == eS_PORTA1)
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	91 05       	cpc	r25, r1
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <pinChange+0x156>
		PORTA |= (1<<PA1);
     7d2:	d9 9a       	sbi	0x1b, 1	; 27
     7d4:	08 95       	ret
		else if(a == eS_PORTA2)
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	91 05       	cpc	r25, r1
     7da:	11 f4       	brne	.+4      	; 0x7e0 <pinChange+0x160>
		PORTA |= (1<<PA2);
     7dc:	da 9a       	sbi	0x1b, 2	; 27
     7de:	08 95       	ret
		else if(a == eS_PORTA3)
     7e0:	83 30       	cpi	r24, 0x03	; 3
     7e2:	91 05       	cpc	r25, r1
     7e4:	11 f4       	brne	.+4      	; 0x7ea <pinChange+0x16a>
		PORTA |= (1<<PA3);
     7e6:	db 9a       	sbi	0x1b, 3	; 27
     7e8:	08 95       	ret
		else if(a == eS_PORTA4)
     7ea:	84 30       	cpi	r24, 0x04	; 4
     7ec:	91 05       	cpc	r25, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <pinChange+0x174>
		PORTA |= (1<<PA4);
     7f0:	dc 9a       	sbi	0x1b, 4	; 27
     7f2:	08 95       	ret
		else if(a == eS_PORTA5)
     7f4:	85 30       	cpi	r24, 0x05	; 5
     7f6:	91 05       	cpc	r25, r1
     7f8:	11 f4       	brne	.+4      	; 0x7fe <pinChange+0x17e>
		PORTA |= (1<<PA5);
     7fa:	dd 9a       	sbi	0x1b, 5	; 27
     7fc:	08 95       	ret
		else if(a == eS_PORTA6)
     7fe:	86 30       	cpi	r24, 0x06	; 6
     800:	91 05       	cpc	r25, r1
     802:	11 f4       	brne	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		PORTA |= (1<<PA6);
     804:	de 9a       	sbi	0x1b, 6	; 27
     806:	08 95       	ret
		else if(a == eS_PORTA7)
     808:	87 30       	cpi	r24, 0x07	; 7
     80a:	91 05       	cpc	r25, r1
     80c:	11 f4       	brne	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		PORTA |= (1<<PA7);
     80e:	df 9a       	sbi	0x1b, 7	; 27
     810:	08 95       	ret
		else if(a == eS_PORTB0)
     812:	8a 30       	cpi	r24, 0x0A	; 10
     814:	91 05       	cpc	r25, r1
     816:	11 f4       	brne	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		PORTB |= (1<<PB0);
     818:	c0 9a       	sbi	0x18, 0	; 24
     81a:	08 95       	ret
		else if(a == eS_PORTB1)
     81c:	8b 30       	cpi	r24, 0x0B	; 11
     81e:	91 05       	cpc	r25, r1
     820:	11 f4       	brne	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		PORTB |= (1<<PB1);
     822:	c1 9a       	sbi	0x18, 1	; 24
     824:	08 95       	ret
		else if(a == eS_PORTB2)
     826:	8c 30       	cpi	r24, 0x0C	; 12
     828:	91 05       	cpc	r25, r1
     82a:	11 f4       	brne	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		PORTB |= (1<<PB2);
     82c:	c2 9a       	sbi	0x18, 2	; 24
     82e:	08 95       	ret
		else if(a == eS_PORTB3)
     830:	8d 30       	cpi	r24, 0x0D	; 13
     832:	91 05       	cpc	r25, r1
     834:	11 f4       	brne	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		PORTB |= (1<<PB3);
     836:	c3 9a       	sbi	0x18, 3	; 24
     838:	08 95       	ret
		else if(a == eS_PORTB4)
     83a:	8e 30       	cpi	r24, 0x0E	; 14
     83c:	91 05       	cpc	r25, r1
     83e:	11 f4       	brne	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		PORTB |= (1<<PB4);
     840:	c4 9a       	sbi	0x18, 4	; 24
     842:	08 95       	ret
		else if(a == eS_PORTB5)
     844:	8f 30       	cpi	r24, 0x0F	; 15
     846:	91 05       	cpc	r25, r1
     848:	11 f4       	brne	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		PORTB |= (1<<PB5);
     84a:	c5 9a       	sbi	0x18, 5	; 24
     84c:	08 95       	ret
		else if(a == eS_PORTB6)
     84e:	80 31       	cpi	r24, 0x10	; 16
     850:	91 05       	cpc	r25, r1
     852:	11 f4       	brne	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		PORTB |= (1<<PB6);
     854:	c6 9a       	sbi	0x18, 6	; 24
     856:	08 95       	ret
		else if(a == eS_PORTB7)
     858:	81 31       	cpi	r24, 0x11	; 17
     85a:	91 05       	cpc	r25, r1
     85c:	11 f4       	brne	.+4      	; 0x862 <__stack+0x3>
		PORTB |= (1<<PB7);
     85e:	c7 9a       	sbi	0x18, 7	; 24
     860:	08 95       	ret
		else if(a == eS_PORTC0)
     862:	84 31       	cpi	r24, 0x14	; 20
     864:	91 05       	cpc	r25, r1
     866:	11 f4       	brne	.+4      	; 0x86c <__stack+0xd>
		PORTC |= (1<<PC0);
     868:	a8 9a       	sbi	0x15, 0	; 21
     86a:	08 95       	ret
		else if(a == eS_PORTC1)
     86c:	85 31       	cpi	r24, 0x15	; 21
     86e:	91 05       	cpc	r25, r1
     870:	11 f4       	brne	.+4      	; 0x876 <__stack+0x17>
		PORTC |= (1<<PC1);
     872:	a9 9a       	sbi	0x15, 1	; 21
     874:	08 95       	ret
		else if(a == eS_PORTC2)
     876:	86 31       	cpi	r24, 0x16	; 22
     878:	91 05       	cpc	r25, r1
     87a:	11 f4       	brne	.+4      	; 0x880 <__stack+0x21>
		PORTC |= (1<<PC2);
     87c:	aa 9a       	sbi	0x15, 2	; 21
     87e:	08 95       	ret
		else if(a == eS_PORTC3)
     880:	87 31       	cpi	r24, 0x17	; 23
     882:	91 05       	cpc	r25, r1
     884:	11 f4       	brne	.+4      	; 0x88a <__stack+0x2b>
		PORTC |= (1<<PC3);
     886:	ab 9a       	sbi	0x15, 3	; 21
     888:	08 95       	ret
		else if(a == eS_PORTC4)
     88a:	88 31       	cpi	r24, 0x18	; 24
     88c:	91 05       	cpc	r25, r1
     88e:	11 f4       	brne	.+4      	; 0x894 <__stack+0x35>
		PORTC |= (1<<PC4);
     890:	ac 9a       	sbi	0x15, 4	; 21
     892:	08 95       	ret
		else if(a == eS_PORTC5)
     894:	89 31       	cpi	r24, 0x19	; 25
     896:	91 05       	cpc	r25, r1
     898:	11 f4       	brne	.+4      	; 0x89e <__stack+0x3f>
		PORTC |= (1<<PC5);
     89a:	ad 9a       	sbi	0x15, 5	; 21
     89c:	08 95       	ret
		else if(a == eS_PORTC6)
     89e:	8a 31       	cpi	r24, 0x1A	; 26
     8a0:	91 05       	cpc	r25, r1
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <__stack+0x49>
		PORTC |= (1<<PC6);
     8a4:	ae 9a       	sbi	0x15, 6	; 21
     8a6:	08 95       	ret
		else if(a == eS_PORTC7)
     8a8:	8b 31       	cpi	r24, 0x1B	; 27
     8aa:	91 05       	cpc	r25, r1
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <__stack+0x53>
		PORTC |= (1<<PC7);
     8ae:	af 9a       	sbi	0x15, 7	; 21
     8b0:	08 95       	ret
		else if(a == eS_PORTD0)
     8b2:	8e 31       	cpi	r24, 0x1E	; 30
     8b4:	91 05       	cpc	r25, r1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <__stack+0x5d>
		PORTD |= (1<<PD0);
     8b8:	90 9a       	sbi	0x12, 0	; 18
     8ba:	08 95       	ret
		else if(a == eS_PORTD1)
     8bc:	8f 31       	cpi	r24, 0x1F	; 31
     8be:	91 05       	cpc	r25, r1
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <__stack+0x67>
		PORTD |= (1<<PD1);
     8c2:	91 9a       	sbi	0x12, 1	; 18
     8c4:	08 95       	ret
		else if(a == eS_PORTD2)
     8c6:	80 32       	cpi	r24, 0x20	; 32
     8c8:	91 05       	cpc	r25, r1
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <__stack+0x71>
		PORTD |= (1<<PD2);
     8cc:	92 9a       	sbi	0x12, 2	; 18
     8ce:	08 95       	ret
		else if(a == eS_PORTD3)
     8d0:	81 32       	cpi	r24, 0x21	; 33
     8d2:	91 05       	cpc	r25, r1
     8d4:	11 f4       	brne	.+4      	; 0x8da <__stack+0x7b>
		PORTD |= (1<<PD3);
     8d6:	93 9a       	sbi	0x12, 3	; 18
     8d8:	08 95       	ret
		else if(a == eS_PORTD4)
     8da:	82 32       	cpi	r24, 0x22	; 34
     8dc:	91 05       	cpc	r25, r1
     8de:	11 f4       	brne	.+4      	; 0x8e4 <__stack+0x85>
		PORTD |= (1<<PD4);
     8e0:	94 9a       	sbi	0x12, 4	; 18
     8e2:	08 95       	ret
		else if(a == eS_PORTD5)
     8e4:	83 32       	cpi	r24, 0x23	; 35
     8e6:	91 05       	cpc	r25, r1
     8e8:	11 f4       	brne	.+4      	; 0x8ee <__stack+0x8f>
		PORTD |= (1<<PD5);
     8ea:	95 9a       	sbi	0x12, 5	; 18
     8ec:	08 95       	ret
		else if(a == eS_PORTD6)
     8ee:	84 32       	cpi	r24, 0x24	; 36
     8f0:	91 05       	cpc	r25, r1
     8f2:	11 f4       	brne	.+4      	; 0x8f8 <__stack+0x99>
		PORTD |= (1<<PD6);
     8f4:	96 9a       	sbi	0x12, 6	; 18
     8f6:	08 95       	ret
		else if(a == eS_PORTD7)
     8f8:	85 97       	sbiw	r24, 0x25	; 37
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__stack+0x9f>
		PORTD |= (1<<PD7);
     8fc:	97 9a       	sbi	0x12, 7	; 18
     8fe:	08 95       	ret

00000900 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     900:	cf 93       	push	r28
     902:	c8 2f       	mov	r28, r24
	if(a & 1)
     904:	80 ff       	sbrs	r24, 0
     906:	07 c0       	rjmp	.+14     	; 0x916 <Lcd4_Port+0x16>
	pinChange(D4,1);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	83 e2       	ldi	r24, 0x23	; 35
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     914:	06 c0       	rjmp	.+12     	; 0x922 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	83 e2       	ldi	r24, 0x23	; 35
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
	
	if(a & 2)
     922:	c1 ff       	sbrs	r28, 1
     924:	07 c0       	rjmp	.+14     	; 0x934 <Lcd4_Port+0x34>
	pinChange(D5,1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	82 e2       	ldi	r24, 0x22	; 34
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     932:	06 c0       	rjmp	.+12     	; 0x940 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	82 e2       	ldi	r24, 0x22	; 34
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
	
	if(a & 4)
     940:	c2 ff       	sbrs	r28, 2
     942:	07 c0       	rjmp	.+14     	; 0x952 <Lcd4_Port+0x52>
	pinChange(D6,1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	81 e2       	ldi	r24, 0x21	; 33
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     950:	06 c0       	rjmp	.+12     	; 0x95e <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	81 e2       	ldi	r24, 0x21	; 33
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
	
	if(a & 8)
     95e:	c3 ff       	sbrs	r28, 3
     960:	07 c0       	rjmp	.+14     	; 0x970 <Lcd4_Port+0x70>
	pinChange(D7,1);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     96e:	06 c0       	rjmp	.+12     	; 0x97c <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
}
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     980:	cf 93       	push	r28
     982:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	85 e2       	ldi	r24, 0x25	; 37
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
	Lcd4_Port(a);
     990:	8c 2f       	mov	r24, r28
     992:	0e 94 80 04 	call	0x900	; 0x900 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	84 e2       	ldi	r24, 0x24	; 36
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     9a2:	89 ef       	ldi	r24, 0xF9	; 249
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <Lcd4_Cmd+0x26>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <Lcd4_Cmd+0x2c>
     9ac:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	84 e2       	ldi	r24, 0x24	; 36
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     9ba:	89 ef       	ldi	r24, 0xF9	; 249
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <Lcd4_Cmd+0x3e>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <Lcd4_Cmd+0x44>
     9c4:	00 00       	nop
	_delay_ms(1);
}
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
     9d6:	08 95       	ret

000009d8 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     9d8:	cf 93       	push	r28
     9da:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     9dc:	81 11       	cpse	r24, r1
     9de:	0b c0       	rjmp	.+22     	; 0x9f6 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     9e0:	80 e8       	ldi	r24, 0x80	; 128
     9e2:	86 0f       	add	r24, r22
     9e4:	82 95       	swap	r24
     9e6:	8f 70       	andi	r24, 0x0F	; 15
     9e8:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     9ec:	8c 2f       	mov	r24, r28
     9ee:	8f 70       	andi	r24, 0x0F	; 15
     9f0:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
     9f4:	0c c0       	rjmp	.+24     	; 0xa0e <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	51 f4       	brne	.+20     	; 0xa0e <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     9fa:	80 ec       	ldi	r24, 0xC0	; 192
     9fc:	86 0f       	add	r24, r22
     9fe:	82 95       	swap	r24
     a00:	8f 70       	andi	r24, 0x0F	; 15
     a02:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     a06:	8c 2f       	mov	r24, r28
     a08:	8f 70       	andi	r24, 0x0F	; 15
     a0a:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	}
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 80 04 	call	0x900	; 0x900 <Lcd4_Port>
     a18:	87 e8       	ldi	r24, 0x87	; 135
     a1a:	93 e1       	ldi	r25, 0x13	; 19
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <Lcd4_Init+0xa>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <Lcd4_Init+0x10>
     a22:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
     a2a:	81 ee       	ldi	r24, 0xE1	; 225
     a2c:	94 e0       	ldi	r25, 0x04	; 4
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <Lcd4_Init+0x1c>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <Lcd4_Init+0x22>
     a34:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
     a3c:	8d eb       	ldi	r24, 0xBD	; 189
     a3e:	9a e0       	ldi	r25, 0x0A	; 10
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <Lcd4_Init+0x2e>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <Lcd4_Init+0x34>
     a46:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	0e 94 c0 04 	call	0x980	; 0x980 <Lcd4_Cmd>
	Lcd4_Clear();
     a78:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Lcd4_Clear>
     a7c:	08 95       	ret

00000a7e <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     a7e:	cf 93       	push	r28
     a80:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	85 e2       	ldi	r24, 0x25	; 37
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     a8e:	8c 2f       	mov	r24, r28
     a90:	82 95       	swap	r24
     a92:	8f 70       	andi	r24, 0x0F	; 15
     a94:	0e 94 80 04 	call	0x900	; 0x900 <Lcd4_Port>
	pinChange(EN,1);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	84 e2       	ldi	r24, 0x24	; 36
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     aa4:	89 ef       	ldi	r24, 0xF9	; 249
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <Lcd4_Write_Char+0x2a>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <Lcd4_Write_Char+0x30>
     aae:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	84 e2       	ldi	r24, 0x24	; 36
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     abc:	89 ef       	ldi	r24, 0xF9	; 249
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <Lcd4_Write_Char+0x42>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <Lcd4_Write_Char+0x48>
     ac6:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     ac8:	8c 2f       	mov	r24, r28
     aca:	8f 70       	andi	r24, 0x0F	; 15
     acc:	0e 94 80 04 	call	0x900	; 0x900 <Lcd4_Port>
	pinChange(EN,1);
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	84 e2       	ldi	r24, 0x24	; 36
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     adc:	89 ef       	ldi	r24, 0xF9	; 249
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <Lcd4_Write_Char+0x62>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <Lcd4_Write_Char+0x68>
     ae6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	84 e2       	ldi	r24, 0x24	; 36
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 40 03 	call	0x680	; 0x680 <pinChange>
     af4:	89 ef       	ldi	r24, 0xF9	; 249
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <Lcd4_Write_Char+0x7a>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <Lcd4_Write_Char+0x80>
     afe:	00 00       	nop
	_delay_ms(1);
}
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     b0a:	88 81       	ld	r24, Y
     b0c:	88 23       	and	r24, r24
     b0e:	31 f0       	breq	.+12     	; 0xb1c <Lcd4_Write_String+0x18>
     b10:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     b12:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     b16:	89 91       	ld	r24, Y+
     b18:	81 11       	cpse	r24, r1
     b1a:	fb cf       	rjmp	.-10     	; 0xb12 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	7b 01       	movw	r14, r22
     b30:	14 2f       	mov	r17, r20
     b32:	88 0f       	add	r24, r24
     b34:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_start>
     b38:	81 11       	cpse	r24, r1
     b3a:	12 c0       	rjmp	.+36     	; 0xb60 <I2C_WRITESEQ+0x3e>
     b3c:	11 23       	and	r17, r17
     b3e:	91 f0       	breq	.+36     	; 0xb64 <I2C_WRITESEQ+0x42>
     b40:	e7 01       	movw	r28, r14
     b42:	11 50       	subi	r17, 0x01	; 1
     b44:	01 2f       	mov	r16, r17
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	0f 5f       	subi	r16, 0xFF	; 255
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	0e 0d       	add	r16, r14
     b4e:	1f 1d       	adc	r17, r15
     b50:	89 91       	ld	r24, Y+
     b52:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <i2c_write>
     b56:	c0 17       	cp	r28, r16
     b58:	d1 07       	cpc	r29, r17
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <I2C_WRITESEQ+0x2e>
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	03 c0       	rjmp	.+6      	; 0xb66 <I2C_WRITESEQ+0x44>
     b60:	c1 e0       	ldi	r28, 0x01	; 1
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <I2C_WRITESEQ+0x44>
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	0e 94 d6 08 	call	0x11ac	; 0x11ac <i2c_stop>
     b6a:	8c 2f       	mov	r24, r28
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	08 95       	ret

00000b7a <wr_lcd_mode>:
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <wr_lcd_mode+0xa>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <wr_lcd_mode+0xc>
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	08 2f       	mov	r16, r24
     b8e:	68 30       	cpi	r22, 0x08	; 8
     b90:	71 f4       	brne	.+28     	; 0xbae <wr_lcd_mode+0x34>
     b92:	81 11       	cpse	r24, r1
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <wr_lcd_mode+0x20>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <wr_lcd_mode+0x22>
     b9a:	88 e0       	ldi	r24, 0x08	; 8
     b9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	60 e6       	ldi	r22, 0x60	; 96
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	87 e2       	ldi	r24, 0x27	; 39
     ba8:	0e 94 91 05 	call	0xb22	; 0xb22 <I2C_WRITESEQ>
     bac:	26 c0       	rjmp	.+76     	; 0xbfa <wr_lcd_mode+0x80>
     bae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bb2:	16 2f       	mov	r17, r22
     bb4:	18 2b       	or	r17, r24
     bb6:	19 83       	std	Y+1, r17	; 0x01
     bb8:	80 2f       	mov	r24, r16
     bba:	80 7f       	andi	r24, 0xF0	; 240
     bbc:	84 60       	ori	r24, 0x04	; 4
     bbe:	81 2b       	or	r24, r17
     bc0:	8a 83       	std	Y+2, r24	; 0x02
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	20 e1       	ldi	r18, 0x10	; 16
     bc8:	02 9f       	mul	r16, r18
     bca:	c0 01       	movw	r24, r0
     bcc:	11 24       	eor	r1, r1
     bce:	81 2b       	or	r24, r17
     bd0:	84 60       	ori	r24, 0x04	; 4
     bd2:	8c 83       	std	Y+4, r24	; 0x04
     bd4:	8b 7f       	andi	r24, 0xFB	; 251
     bd6:	8d 83       	std	Y+5, r24	; 0x05
     bd8:	45 e0       	ldi	r20, 0x05	; 5
     bda:	be 01       	movw	r22, r28
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	87 e2       	ldi	r24, 0x27	; 39
     be2:	0e 94 91 05 	call	0xb22	; 0xb22 <I2C_WRITESEQ>
     be6:	10 fd       	sbrc	r17, 0
     be8:	08 c0       	rjmp	.+16     	; 0xbfa <wr_lcd_mode+0x80>
     bea:	03 30       	cpi	r16, 0x03	; 3
     bec:	30 f4       	brcc	.+12     	; 0xbfa <wr_lcd_mode+0x80>
     bee:	e3 ef       	ldi	r30, 0xF3	; 243
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	31 97       	sbiw	r30, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <wr_lcd_mode+0x78>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <wr_lcd_mode+0x7e>
     bf8:	00 00       	nop
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <lcd_gotoxy>:
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	d8 2f       	mov	r29, r24
     c14:	c6 2f       	mov	r28, r22
     c16:	e6 2f       	mov	r30, r22
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ef 59       	subi	r30, 0x9F	; 159
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	98 2f       	mov	r25, r24
     c20:	90 68       	ori	r25, 0x80	; 128
     c22:	80 81       	ld	r24, Z
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	89 2b       	or	r24, r25
     c28:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
     c2c:	d0 93 f6 01 	sts	0x01F6, r29	; 0x8001f6 <_lcd_x>
     c30:	c0 93 f7 01 	sts	0x01F7, r28	; 0x8001f7 <_lcd_y>
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <lcd_clrscr>:
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
     c42:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <_lcd_y>
     c46:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <_lcd_x>
     c4a:	08 95       	ret

00000c4c <lcd_putc>:
     c4c:	cf 93       	push	r28
     c4e:	c8 2f       	mov	r28, r24
     c50:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <_lcd_x>
     c54:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <_lcd_maxx>
     c58:	98 17       	cp	r25, r24
     c5a:	18 f4       	brcc	.+6      	; 0xc62 <lcd_putc+0x16>
     c5c:	ca 30       	cpi	r28, 0x0A	; 10
     c5e:	59 f4       	brne	.+22     	; 0xc76 <lcd_putc+0x2a>
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <lcd_putc+0x3e>
     c62:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <_lcd_y>
     c66:	6f 5f       	subi	r22, 0xFF	; 255
     c68:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <_lcd_y>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 07 06 	call	0xc0e	; 0xc0e <lcd_gotoxy>
     c72:	ca 30       	cpi	r28, 0x0A	; 10
     c74:	91 f0       	breq	.+36     	; 0xc9a <lcd_putc+0x4e>
     c76:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <_lcd_x>
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <_lcd_x>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	8c 2f       	mov	r24, r28
     c84:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <lcd_putc+0x4e>
     c8a:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <_lcd_y>
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <_lcd_y>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 07 06 	call	0xc0e	; 0xc0e <lcd_gotoxy>
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <lcd_puts>:
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
     ca4:	88 81       	ld	r24, Y
     ca6:	88 23       	and	r24, r24
     ca8:	31 f0       	breq	.+12     	; 0xcb6 <lcd_puts+0x18>
     caa:	21 96       	adiw	r28, 0x01	; 1
     cac:	0e 94 26 06 	call	0xc4c	; 0xc4c <lcd_putc>
     cb0:	89 91       	ld	r24, Y+
     cb2:	81 11       	cpse	r24, r1
     cb4:	fb cf       	rjmp	.-10     	; 0xcac <lcd_puts+0xe>
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <lcd_init+0xa>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <lcd_init+0xc>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <lcd_init+0xe>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     cd0:	80 e3       	ldi	r24, 0x30	; 48
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	94 e3       	ldi	r25, 0x34	; 52
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     cda:	80 e2       	ldi	r24, 0x20	; 32
     cdc:	8c 83       	std	Y+4, r24	; 0x04
     cde:	94 e2       	ldi	r25, 0x24	; 36
     ce0:	9d 83       	std	Y+5, r25	; 0x05
     ce2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     ce4:	80 e1       	ldi	r24, 0x10	; 16
     ce6:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     cea:	e1 e6       	ldi	r30, 0x61	; 97
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 5f       	subi	r24, 0xF0	; 240
     cf2:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     cf4:	81 81       	ldd	r24, Z+1	; 0x01
     cf6:	80 5f       	subi	r24, 0xF0	; 240
     cf8:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     cfa:	bd 9a       	sbi	0x17, 5	; 23
     cfc:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
     cfe:	0e 94 b4 08 	call	0x1168	; 0x1168 <i2c_init>
     d02:	8b e4       	ldi	r24, 0x4B	; 75
     d04:	9d e1       	ldi	r25, 0x1D	; 29
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <lcd_init+0x4a>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <lcd_init+0x50>
     d0c:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     d0e:	43 e0       	ldi	r20, 0x03	; 3
     d10:	be 01       	movw	r22, r28
     d12:	6f 5f       	subi	r22, 0xFF	; 255
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	87 e2       	ldi	r24, 0x27	; 39
     d18:	0e 94 91 05 	call	0xb22	; 0xb22 <I2C_WRITESEQ>
     d1c:	18 2f       	mov	r17, r24
     d1e:	81 ee       	ldi	r24, 0xE1	; 225
     d20:	94 e0       	ldi	r25, 0x04	; 4
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <lcd_init+0x66>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <lcd_init+0x6c>
     d28:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     d2a:	43 e0       	ldi	r20, 0x03	; 3
     d2c:	be 01       	movw	r22, r28
     d2e:	6f 5f       	subi	r22, 0xFF	; 255
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	87 e2       	ldi	r24, 0x27	; 39
     d34:	0e 94 91 05 	call	0xb22	; 0xb22 <I2C_WRITESEQ>
     d38:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     d3a:	43 e0       	ldi	r20, 0x03	; 3
     d3c:	be 01       	movw	r22, r28
     d3e:	6f 5f       	subi	r22, 0xFF	; 255
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	87 e2       	ldi	r24, 0x27	; 39
     d44:	0e 94 91 05 	call	0xb22	; 0xb22 <I2C_WRITESEQ>
     d48:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     d4a:	43 e0       	ldi	r20, 0x03	; 3
     d4c:	be 01       	movw	r22, r28
     d4e:	6c 5f       	subi	r22, 0xFC	; 252
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	87 e2       	ldi	r24, 0x27	; 39
     d54:	0e 94 91 05 	call	0xb22	; 0xb22 <I2C_WRITESEQ>
     d58:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	88 e2       	ldi	r24, 0x28	; 40
     d5e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
     d62:	81 2b       	or	r24, r17
     d64:	09 f0       	breq	.+2      	; 0xd68 <lcd_init+0xac>
     d66:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	8c e0       	ldi	r24, 0x0C	; 12
     d6c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	86 e0       	ldi	r24, 0x06	; 6
     d74:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	80 2f       	mov	r24, r16
     d84:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
}
     d88:	26 96       	adiw	r28, 0x06	; 6
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	08 95       	ret

00000d9e <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     d9e:	68 e0       	ldi	r22, 0x08	; 8
     da0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <wr_lcd_mode>
     da4:	08 95       	ret

00000da6 <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
     da6:	0e 94 34 01 	call	0x268	; 0x268 <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
     daa:	81 e5       	ldi	r24, 0x51	; 81
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd_Init>
	
	States_GotoState(IDLE);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
	Keypad_Init();
     dc4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
     dc8:	0e 94 97 01 	call	0x32e	; 0x32e <Keypad_KeyPressed>
     dcc:	88 23       	and	r24, r24
     dce:	e1 f3       	breq	.-8      	; 0xdc8 <main+0x22>
     dd0:	87 e8       	ldi	r24, 0x87	; 135
     dd2:	93 e1       	ldi	r25, 0x13	; 19
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <main+0x2e>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <main+0x34>
     dda:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
     ddc:	0e 94 97 01 	call	0x32e	; 0x32e <Keypad_KeyPressed>
     de0:	88 23       	and	r24, r24
     de2:	91 f3       	breq	.-28     	; 0xdc8 <main+0x22>
			{
				int_fast8_t x = Keypad_GetKey();
     de4:	0e 94 88 02 	call	0x510	; 0x510 <Keypad_GetKey>
     de8:	e7 e8       	ldi	r30, 0x87	; 135
     dea:	f3 e1       	ldi	r31, 0x13	; 19
     dec:	31 97       	sbiw	r30, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <main+0x46>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <main+0x4c>
     df2:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
     df4:	0e 94 a8 02 	call	0x550	; 0x550 <KeyProcessor_ProcessKey>
				Keypad_Init();
     df8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Keypad_Init>
     dfc:	e5 cf       	rjmp	.-54     	; 0xdc8 <main+0x22>

00000dfe <EnteringAge_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringAge_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Enter Age:");
     e12:	6d e5       	ldi	r22, 0x5D	; 93
     e14:	71 e0       	ldi	r23, 0x01	; 1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
	Keypad_InitNumpad();
     e1c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     e20:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Keypad_UpdateKeyMode>
     e24:	08 95       	ret

00000e26 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
	if(key == 31)
     e2e:	8f 31       	cpi	r24, 0x1F	; 31
     e30:	31 f4       	brne	.+12     	; 0xe3e <EnteringAge_ProcessKey+0x18>
	{
		// nxt
		//records[serial].age = atoi(keyBuffer);
		// save age
		Keypad_ResetBuffer();
     e32:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
     e3c:	32 c0       	rjmp	.+100    	; 0xea2 <EnteringAge_ProcessKey+0x7c>
	}
	else if(key == 30)
     e3e:	8e 31       	cpi	r24, 0x1E	; 30
     e40:	31 f4       	brne	.+12     	; 0xe4e <EnteringAge_ProcessKey+0x28>
	{
		// prev
		
		Keypad_ResetBuffer();
     e42:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
     e4c:	2a c0       	rjmp	.+84     	; 0xea2 <EnteringAge_ProcessKey+0x7c>
	}
	else
	{
		Keypad_AddKey(key);
     e4e:	0e 94 0e 02 	call	0x41c	; 0x41c <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
		int sz = strlen(keyBuffer);
     e60:	e4 ee       	ldi	r30, 0xE4	; 228
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	01 90       	ld	r0, Z+
     e66:	00 20       	and	r0, r0
     e68:	e9 f7       	brne	.-6      	; 0xe64 <EnteringAge_ProcessKey+0x3e>
     e6a:	31 97       	sbiw	r30, 0x01	; 1
     e6c:	8f 01       	movw	r16, r30
     e6e:	04 5e       	subi	r16, 0xE4	; 228
     e70:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     e72:	64 ee       	ldi	r22, 0xE4	; 228
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     e7c:	cf e0       	ldi	r28, 0x0F	; 15
     e7e:	d0 e0       	ldi	r29, 0x00	; 0
     e80:	c0 1b       	sub	r28, r16
     e82:	d1 0b       	sbc	r29, r17
     e84:	00 31       	cpi	r16, 0x10	; 16
     e86:	11 05       	cpc	r17, r1
     e88:	31 f0       	breq	.+12     	; 0xe96 <EnteringAge_ProcessKey+0x70>
		Lcd_Printc(LCDKEYPAD,' ');
     e8a:	60 e2       	ldi	r22, 0x20	; 32
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0e 94 2f 03 	call	0x65e	; 0x65e <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     e92:	21 97       	sbiw	r28, 0x01	; 1
     e94:	d0 f7       	brcc	.-12     	; 0xe8a <EnteringAge_ProcessKey+0x64>
		Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     e96:	84 ee       	ldi	r24, 0xE4	; 228
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     e9e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Keypad_UpdateKeyMode>
	}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Enter Name:");
     ec0:	68 e6       	ldi	r22, 0x68	; 104
     ec2:	71 e0       	ldi	r23, 0x01	; 1
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
	Keypad_UpdateKeyMode();
     eca:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Keypad_UpdateKeyMode>
     ece:	08 95       	ret

00000ed0 <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
	if(key == 31)
     ed8:	8f 31       	cpi	r24, 0x1F	; 31
     eda:	31 f4       	brne	.+12     	; 0xee8 <EnteringName_ProcessKey+0x18>
	{
		// nxt
		// save name and procced
		//records[serial].name = keyBuffer;
		Keypad_ResetBuffer();
     edc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
     ee6:	32 c0       	rjmp	.+100    	; 0xf4c <EnteringName_ProcessKey+0x7c>
	}
	else if(key == 30)
     ee8:	8e 31       	cpi	r24, 0x1E	; 30
     eea:	31 f4       	brne	.+12     	; 0xef8 <EnteringName_ProcessKey+0x28>
	{
		//prev
		Keypad_ResetBuffer();
     eec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
     ef6:	2a c0       	rjmp	.+84     	; 0xf4c <EnteringName_ProcessKey+0x7c>
	}
	else
	{
		Keypad_AddKey(key);
     ef8:	0e 94 0e 02 	call	0x41c	; 0x41c <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
		int sz = strlen(keyBuffer);
     f0a:	e4 ee       	ldi	r30, 0xE4	; 228
     f0c:	f1 e0       	ldi	r31, 0x01	; 1
     f0e:	01 90       	ld	r0, Z+
     f10:	00 20       	and	r0, r0
     f12:	e9 f7       	brne	.-6      	; 0xf0e <EnteringName_ProcessKey+0x3e>
     f14:	31 97       	sbiw	r30, 0x01	; 1
     f16:	8f 01       	movw	r16, r30
     f18:	04 5e       	subi	r16, 0xE4	; 228
     f1a:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     f1c:	64 ee       	ldi	r22, 0xE4	; 228
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     f26:	cf e0       	ldi	r28, 0x0F	; 15
     f28:	d0 e0       	ldi	r29, 0x00	; 0
     f2a:	c0 1b       	sub	r28, r16
     f2c:	d1 0b       	sbc	r29, r17
     f2e:	00 31       	cpi	r16, 0x10	; 16
     f30:	11 05       	cpc	r17, r1
     f32:	31 f0       	breq	.+12     	; 0xf40 <EnteringName_ProcessKey+0x70>
		Lcd_Printc(LCDKEYPAD,' ');
     f34:	60 e2       	ldi	r22, 0x20	; 32
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 2f 03 	call	0x65e	; 0x65e <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     f3c:	21 97       	sbiw	r28, 0x01	; 1
     f3e:	d0 f7       	brcc	.-12     	; 0xf34 <EnteringName_ProcessKey+0x64>
		Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     f40:	84 ee       	ldi	r24, 0xE4	; 228
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     f48:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Keypad_UpdateKeyMode>
	}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <EnteringPhone_Init>:
//extern unsigned int serial;


void EnteringPhone_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Phone no:");
     f6a:	64 e7       	ldi	r22, 0x74	; 116
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
	Keypad_InitNumpad();
     f74:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     f78:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Keypad_UpdateKeyMode>
     f7c:	08 95       	ret

00000f7e <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
	if(key == 31)
     f86:	8f 31       	cpi	r24, 0x1F	; 31
     f88:	31 f4       	brne	.+12     	; 0xf96 <EnteringPhone_ProcessKey+0x18>
	{
		// nxt
		//records[serial].phone = keyBuffer;
		// save phone information
		// print serial
		Keypad_ResetBuffer();
     f8a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(GENERATE_SERIAL);
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
     f94:	34 c0       	rjmp	.+104    	; 0xffe <EnteringPhone_ProcessKey+0x80>
	}
	else if(key == 30)
     f96:	8e 31       	cpi	r24, 0x1E	; 30
     f98:	31 f4       	brne	.+12     	; 0xfa6 <EnteringPhone_ProcessKey+0x28>
	{
		// prev
		Keypad_ResetBuffer();
     f9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <EnteringPhone_ProcessKey+0x80>
	}
	else
	{
		Keypad_AddKey(key);
     fa6:	0e 94 0e 02 	call	0x41c	; 0x41c <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
		int sz = strlen(keyBuffer);
     fb8:	e4 ee       	ldi	r30, 0xE4	; 228
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	01 90       	ld	r0, Z+
     fbe:	00 20       	and	r0, r0
     fc0:	e9 f7       	brne	.-6      	; 0xfbc <EnteringPhone_ProcessKey+0x3e>
     fc2:	31 97       	sbiw	r30, 0x01	; 1
     fc4:	8f 01       	movw	r16, r30
     fc6:	04 5e       	subi	r16, 0xE4	; 228
     fc8:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     fca:	64 ee       	ldi	r22, 0xE4	; 228
     fcc:	71 e0       	ldi	r23, 0x01	; 1
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     fd4:	cf e0       	ldi	r28, 0x0F	; 15
     fd6:	d0 e0       	ldi	r29, 0x00	; 0
     fd8:	c0 1b       	sub	r28, r16
     fda:	d1 0b       	sbc	r29, r17
     fdc:	00 31       	cpi	r16, 0x10	; 16
     fde:	11 05       	cpc	r17, r1
     fe0:	31 f0       	breq	.+12     	; 0xfee <EnteringPhone_ProcessKey+0x70>
		Lcd_Printc(LCDKEYPAD,' ');
     fe2:	60 e2       	ldi	r22, 0x20	; 32
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 2f 03 	call	0x65e	; 0x65e <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     fea:	21 97       	sbiw	r28, 0x01	; 1
     fec:	d0 f7       	brcc	.-12     	; 0xfe2 <EnteringPhone_ProcessKey+0x64>
		Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     fee:	84 ee       	ldi	r24, 0xE4	; 228
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
		
		Keypad_InitNumpad();
     ff6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
     ffa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Keypad_UpdateKeyMode>
	}
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <GenerateSerial_Init>:

#include "../../all.h"

void GenerateSerial_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Your Serial: ");
    101c:	6e e7       	ldi	r22, 0x7E	; 126
    101e:	71 e0       	ldi	r23, 0x01	; 1
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
	Store_Update();
    1026:	0e 94 86 08 	call	0x110c	; 0x110c <Store_Update>
	Lcd_Position(LCDKEYPAD,1,0);
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
    1038:	6c e8       	ldi	r22, 0x8C	; 140
    103a:	71 e0       	ldi	r23, 0x01	; 1
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
    1042:	08 95       	ret

00001044 <GenerateSerial_ProcessKey>:
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1044:	8f 31       	cpi	r24, 0x1F	; 31
    1046:	d9 f4       	brne	.+54     	; 0x107e <GenerateSerial_ProcessKey+0x3a>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    104e:	43 e0       	ldi	r20, 0x03	; 3
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    105c:	6d e9       	ldi	r22, 0x9D	; 157
    105e:	71 e0       	ldi	r23, 0x01	; 1
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
    1066:	2f e7       	ldi	r18, 0x7F	; 127
    1068:	8a e1       	ldi	r24, 0x1A	; 26
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	21 50       	subi	r18, 0x01	; 1
    106e:	80 40       	sbci	r24, 0x00	; 0
    1070:	90 40       	sbci	r25, 0x00	; 0
    1072:	e1 f7       	brne	.-8      	; 0x106c <GenerateSerial_ProcessKey+0x28>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <GenerateSerial_ProcessKey+0x32>
    1076:	00 00       	nop
		_delay_ms(2000);
		States_GotoState(IDLE);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
    107e:	08 95       	ret

00001080 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 60 08 	call	0x10c0	; 0x10c0 <States_GotoState>
    1086:	08 95       	ret

00001088 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    109c:	67 ea       	ldi	r22, 0xA7	; 167
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    10b4:	60 eb       	ldi	r22, 0xB0	; 176
    10b6:	71 e0       	ldi	r23, 0x01	; 1
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
    10be:	08 95       	ret

000010c0 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    10c0:	cf 93       	push	r28
    10c2:	c8 2f       	mov	r28, r24
	switch(newState)
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	89 f0       	breq	.+34     	; 0x10ea <States_GotoState+0x2a>
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <States_GotoState+0x14>
    10ca:	88 23       	and	r24, r24
    10cc:	41 f0       	breq	.+16     	; 0x10de <States_GotoState+0x1e>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	49 f0       	breq	.+18     	; 0x10e4 <States_GotoState+0x24>
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <States_GotoState+0x3c>
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <States_GotoState+0x30>
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	69 f0       	breq	.+26     	; 0x10f6 <States_GotoState+0x36>
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <States_GotoState+0x3c>
	{
		case IDLE:
		Idle_Init();
    10de:	0e 94 44 08 	call	0x1088	; 0x1088 <Idle_Init>
		break;
    10e2:	10 c0       	rjmp	.+32     	; 0x1104 <States_GotoState+0x44>
		case ENTERING_NAME:
		EnteringName_Init();
    10e4:	0e 94 56 07 	call	0xeac	; 0xeac <EnteringName_Init>
		break;
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <States_GotoState+0x44>
		case ENTERING_AGE:
		EnteringAge_Init();
    10ea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <EnteringAge_Init>
		break;
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <States_GotoState+0x44>
		case ENTERING_PHONE:
		EnteringPhone_Init();
    10f0:	0e 94 ab 07 	call	0xf56	; 0xf56 <EnteringPhone_Init>
		break;
    10f4:	07 c0       	rjmp	.+14     	; 0x1104 <States_GotoState+0x44>
		case GENERATE_SERIAL:
		GenerateSerial_Init();
    10f6:	0e 94 04 08 	call	0x1008	; 0x1008 <GenerateSerial_Init>
		break;
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <States_GotoState+0x44>
		//case STORE_RECORD:
		//Store_Init();
		//break;
		default:
		Error_Error("GotoState: newState not defined");
    10fc:	8d eb       	ldi	r24, 0xBD	; 189
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	}
	currentState = newState;
    1104:	c0 93 f8 01 	sts	0x01F8, r28	; 0x8001f8 <currentState>
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <Store_Update>:

struct storeRecords records[100];
unsigned int serial = 0;

void Store_Update()
{
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
	const char * s;
	dtostrf((float)(serial+1), 3, 0, s);
    1114:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <serial>
    1118:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <serial+0x1>
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__floatunsisf>
    1128:	c0 e0       	ldi	r28, 0x00	; 0
    112a:	d0 e0       	ldi	r29, 0x00	; 0
    112c:	8e 01       	movw	r16, r28
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	43 e0       	ldi	r20, 0x03	; 3
    1132:	0e 94 26 09 	call	0x124c	; 0x124c <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    1136:	4d e0       	ldi	r20, 0x0D	; 13
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 1b 03 	call	0x636	; 0x636 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    1144:	be 01       	movw	r22, r28
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	0e 94 09 03 	call	0x612	; 0x612 <Lcd_Prints>
	serial++;
    114c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <serial>
    1150:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <serial+0x1>
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <serial+0x1>
    115a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <serial>
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	08 95       	ret

00001168 <i2c_init>:
    1168:	11 b8       	out	0x01, r1	; 1
    116a:	8c e0       	ldi	r24, 0x0C	; 12
    116c:	80 b9       	out	0x00, r24	; 0
    116e:	08 95       	ret

00001170 <i2c_start>:
    1170:	94 ea       	ldi	r25, 0xA4	; 164
    1172:	96 bf       	out	0x36, r25	; 54
    1174:	06 b6       	in	r0, 0x36	; 54
    1176:	07 fe       	sbrs	r0, 7
    1178:	fd cf       	rjmp	.-6      	; 0x1174 <i2c_start+0x4>
    117a:	91 b1       	in	r25, 0x01	; 1
    117c:	98 7f       	andi	r25, 0xF8	; 248
    117e:	98 30       	cpi	r25, 0x08	; 8
    1180:	11 f0       	breq	.+4      	; 0x1186 <i2c_start+0x16>
    1182:	90 31       	cpi	r25, 0x10	; 16
    1184:	79 f4       	brne	.+30     	; 0x11a4 <i2c_start+0x34>
    1186:	83 b9       	out	0x03, r24	; 3
    1188:	84 e8       	ldi	r24, 0x84	; 132
    118a:	86 bf       	out	0x36, r24	; 54
    118c:	06 b6       	in	r0, 0x36	; 54
    118e:	07 fe       	sbrs	r0, 7
    1190:	fd cf       	rjmp	.-6      	; 0x118c <i2c_start+0x1c>
    1192:	91 b1       	in	r25, 0x01	; 1
    1194:	98 7f       	andi	r25, 0xF8	; 248
    1196:	98 31       	cpi	r25, 0x18	; 24
    1198:	39 f0       	breq	.+14     	; 0x11a8 <i2c_start+0x38>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 34       	cpi	r25, 0x40	; 64
    119e:	29 f4       	brne	.+10     	; 0x11aa <i2c_start+0x3a>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	08 95       	ret
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret

000011ac <i2c_stop>:
    11ac:	84 e9       	ldi	r24, 0x94	; 148
    11ae:	86 bf       	out	0x36, r24	; 54
    11b0:	06 b6       	in	r0, 0x36	; 54
    11b2:	04 fc       	sbrc	r0, 4
    11b4:	fd cf       	rjmp	.-6      	; 0x11b0 <i2c_stop+0x4>
    11b6:	08 95       	ret

000011b8 <i2c_write>:
    11b8:	83 b9       	out	0x03, r24	; 3
    11ba:	84 e8       	ldi	r24, 0x84	; 132
    11bc:	86 bf       	out	0x36, r24	; 54
    11be:	06 b6       	in	r0, 0x36	; 54
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	fd cf       	rjmp	.-6      	; 0x11be <i2c_write+0x6>
    11c4:	91 b1       	in	r25, 0x01	; 1
    11c6:	98 7f       	andi	r25, 0xF8	; 248
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	98 32       	cpi	r25, 0x28	; 40
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <i2c_write+0x18>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	08 95       	ret

000011d2 <__floatunsisf>:
    11d2:	e8 94       	clt
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <__floatsisf+0x12>

000011d6 <__floatsisf>:
    11d6:	97 fb       	bst	r25, 7
    11d8:	3e f4       	brtc	.+14     	; 0x11e8 <__floatsisf+0x12>
    11da:	90 95       	com	r25
    11dc:	80 95       	com	r24
    11de:	70 95       	com	r23
    11e0:	61 95       	neg	r22
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	99 23       	and	r25, r25
    11ea:	a9 f0       	breq	.+42     	; 0x1216 <__floatsisf+0x40>
    11ec:	f9 2f       	mov	r31, r25
    11ee:	96 e9       	ldi	r25, 0x96	; 150
    11f0:	bb 27       	eor	r27, r27
    11f2:	93 95       	inc	r25
    11f4:	f6 95       	lsr	r31
    11f6:	87 95       	ror	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f1 11       	cpse	r31, r1
    1200:	f8 cf       	rjmp	.-16     	; 0x11f2 <__floatsisf+0x1c>
    1202:	fa f4       	brpl	.+62     	; 0x1242 <__floatsisf+0x6c>
    1204:	bb 0f       	add	r27, r27
    1206:	11 f4       	brne	.+4      	; 0x120c <__floatsisf+0x36>
    1208:	60 ff       	sbrs	r22, 0
    120a:	1b c0       	rjmp	.+54     	; 0x1242 <__floatsisf+0x6c>
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <__floatsisf+0x6c>
    1216:	88 23       	and	r24, r24
    1218:	11 f0       	breq	.+4      	; 0x121e <__floatsisf+0x48>
    121a:	96 e9       	ldi	r25, 0x96	; 150
    121c:	11 c0       	rjmp	.+34     	; 0x1240 <__floatsisf+0x6a>
    121e:	77 23       	and	r23, r23
    1220:	21 f0       	breq	.+8      	; 0x122a <__floatsisf+0x54>
    1222:	9e e8       	ldi	r25, 0x8E	; 142
    1224:	87 2f       	mov	r24, r23
    1226:	76 2f       	mov	r23, r22
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <__floatsisf+0x5e>
    122a:	66 23       	and	r22, r22
    122c:	71 f0       	breq	.+28     	; 0x124a <__floatsisf+0x74>
    122e:	96 e8       	ldi	r25, 0x86	; 134
    1230:	86 2f       	mov	r24, r22
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	2a f0       	brmi	.+10     	; 0x1242 <__floatsisf+0x6c>
    1238:	9a 95       	dec	r25
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	da f7       	brpl	.-10     	; 0x1238 <__floatsisf+0x62>
    1242:	88 0f       	add	r24, r24
    1244:	96 95       	lsr	r25
    1246:	87 95       	ror	r24
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret

0000124c <dtostrf>:
    124c:	ef 92       	push	r14
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	e8 01       	movw	r28, r16
    1258:	47 fd       	sbrc	r20, 7
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <dtostrf+0x14>
    125c:	34 e0       	ldi	r19, 0x04	; 4
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <dtostrf+0x16>
    1260:	34 e1       	ldi	r19, 0x14	; 20
    1262:	04 2e       	mov	r0, r20
    1264:	00 0c       	add	r0, r0
    1266:	55 0b       	sbc	r21, r21
    1268:	57 ff       	sbrs	r21, 7
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <dtostrf+0x26>
    126c:	51 95       	neg	r21
    126e:	41 95       	neg	r20
    1270:	51 09       	sbc	r21, r1
    1272:	e3 2e       	mov	r14, r19
    1274:	02 2f       	mov	r16, r18
    1276:	24 2f       	mov	r18, r20
    1278:	ae 01       	movw	r20, r28
    127a:	0e 94 49 0b 	call	0x1692	; 0x1692 <dtoa_prf>
    127e:	ce 01       	movw	r24, r28
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ef 90       	pop	r14
    128a:	08 95       	ret

0000128c <sprintf>:
    128c:	ae e0       	ldi	r26, 0x0E	; 14
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ec e4       	ldi	r30, 0x4C	; 76
    1292:	f9 e0       	ldi	r31, 0x09	; 9
    1294:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__prologue_saves__+0x1c>
    1298:	0d 89       	ldd	r16, Y+21	; 0x15
    129a:	1e 89       	ldd	r17, Y+22	; 0x16
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	8c 83       	std	Y+4, r24	; 0x04
    12a0:	1a 83       	std	Y+2, r17	; 0x02
    12a2:	09 83       	std	Y+1, r16	; 0x01
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	9f e7       	ldi	r25, 0x7F	; 127
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	ae 01       	movw	r20, r28
    12ae:	47 5e       	subi	r20, 0xE7	; 231
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	6f 89       	ldd	r22, Y+23	; 0x17
    12b4:	78 8d       	ldd	r23, Y+24	; 0x18
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	0e 94 68 09 	call	0x12d0	; 0x12d0 <vfprintf>
    12be:	ef 81       	ldd	r30, Y+7	; 0x07
    12c0:	f8 85       	ldd	r31, Y+8	; 0x08
    12c2:	e0 0f       	add	r30, r16
    12c4:	f1 1f       	adc	r31, r17
    12c6:	10 82       	st	Z, r1
    12c8:	2e 96       	adiw	r28, 0x0e	; 14
    12ca:	e4 e0       	ldi	r30, 0x04	; 4
    12cc:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__epilogue_restores__+0x1c>

000012d0 <vfprintf>:
    12d0:	ab e0       	ldi	r26, 0x0B	; 11
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e6       	ldi	r30, 0x6E	; 110
    12d6:	f9 e0       	ldi	r31, 0x09	; 9
    12d8:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__prologue_saves__>
    12dc:	6c 01       	movw	r12, r24
    12de:	7b 01       	movw	r14, r22
    12e0:	8a 01       	movw	r16, r20
    12e2:	fc 01       	movw	r30, r24
    12e4:	17 82       	std	Z+7, r1	; 0x07
    12e6:	16 82       	std	Z+6, r1	; 0x06
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	81 ff       	sbrs	r24, 1
    12ec:	cc c1       	rjmp	.+920    	; 0x1686 <vfprintf+0x3b6>
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	3c 01       	movw	r6, r24
    12f4:	f6 01       	movw	r30, r12
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	f7 01       	movw	r30, r14
    12fa:	93 fd       	sbrc	r25, 3
    12fc:	85 91       	lpm	r24, Z+
    12fe:	93 ff       	sbrs	r25, 3
    1300:	81 91       	ld	r24, Z+
    1302:	7f 01       	movw	r14, r30
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <vfprintf+0x3a>
    1308:	ba c1       	rjmp	.+884    	; 0x167e <vfprintf+0x3ae>
    130a:	85 32       	cpi	r24, 0x25	; 37
    130c:	39 f4       	brne	.+14     	; 0x131c <vfprintf+0x4c>
    130e:	93 fd       	sbrc	r25, 3
    1310:	85 91       	lpm	r24, Z+
    1312:	93 ff       	sbrs	r25, 3
    1314:	81 91       	ld	r24, Z+
    1316:	7f 01       	movw	r14, r30
    1318:	85 32       	cpi	r24, 0x25	; 37
    131a:	29 f4       	brne	.+10     	; 0x1326 <vfprintf+0x56>
    131c:	b6 01       	movw	r22, r12
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1324:	e7 cf       	rjmp	.-50     	; 0x12f4 <vfprintf+0x24>
    1326:	91 2c       	mov	r9, r1
    1328:	21 2c       	mov	r2, r1
    132a:	31 2c       	mov	r3, r1
    132c:	ff e1       	ldi	r31, 0x1F	; 31
    132e:	f3 15       	cp	r31, r3
    1330:	d8 f0       	brcs	.+54     	; 0x1368 <vfprintf+0x98>
    1332:	8b 32       	cpi	r24, 0x2B	; 43
    1334:	79 f0       	breq	.+30     	; 0x1354 <vfprintf+0x84>
    1336:	38 f4       	brcc	.+14     	; 0x1346 <vfprintf+0x76>
    1338:	80 32       	cpi	r24, 0x20	; 32
    133a:	79 f0       	breq	.+30     	; 0x135a <vfprintf+0x8a>
    133c:	83 32       	cpi	r24, 0x23	; 35
    133e:	a1 f4       	brne	.+40     	; 0x1368 <vfprintf+0x98>
    1340:	23 2d       	mov	r18, r3
    1342:	20 61       	ori	r18, 0x10	; 16
    1344:	1d c0       	rjmp	.+58     	; 0x1380 <vfprintf+0xb0>
    1346:	8d 32       	cpi	r24, 0x2D	; 45
    1348:	61 f0       	breq	.+24     	; 0x1362 <vfprintf+0x92>
    134a:	80 33       	cpi	r24, 0x30	; 48
    134c:	69 f4       	brne	.+26     	; 0x1368 <vfprintf+0x98>
    134e:	23 2d       	mov	r18, r3
    1350:	21 60       	ori	r18, 0x01	; 1
    1352:	16 c0       	rjmp	.+44     	; 0x1380 <vfprintf+0xb0>
    1354:	83 2d       	mov	r24, r3
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	38 2e       	mov	r3, r24
    135a:	e3 2d       	mov	r30, r3
    135c:	e4 60       	ori	r30, 0x04	; 4
    135e:	3e 2e       	mov	r3, r30
    1360:	2a c0       	rjmp	.+84     	; 0x13b6 <vfprintf+0xe6>
    1362:	f3 2d       	mov	r31, r3
    1364:	f8 60       	ori	r31, 0x08	; 8
    1366:	1d c0       	rjmp	.+58     	; 0x13a2 <vfprintf+0xd2>
    1368:	37 fc       	sbrc	r3, 7
    136a:	2d c0       	rjmp	.+90     	; 0x13c6 <vfprintf+0xf6>
    136c:	20 ed       	ldi	r18, 0xD0	; 208
    136e:	28 0f       	add	r18, r24
    1370:	2a 30       	cpi	r18, 0x0A	; 10
    1372:	40 f0       	brcs	.+16     	; 0x1384 <vfprintf+0xb4>
    1374:	8e 32       	cpi	r24, 0x2E	; 46
    1376:	b9 f4       	brne	.+46     	; 0x13a6 <vfprintf+0xd6>
    1378:	36 fc       	sbrc	r3, 6
    137a:	81 c1       	rjmp	.+770    	; 0x167e <vfprintf+0x3ae>
    137c:	23 2d       	mov	r18, r3
    137e:	20 64       	ori	r18, 0x40	; 64
    1380:	32 2e       	mov	r3, r18
    1382:	19 c0       	rjmp	.+50     	; 0x13b6 <vfprintf+0xe6>
    1384:	36 fe       	sbrs	r3, 6
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0xc4>
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	98 9e       	mul	r9, r24
    138c:	20 0d       	add	r18, r0
    138e:	11 24       	eor	r1, r1
    1390:	92 2e       	mov	r9, r18
    1392:	11 c0       	rjmp	.+34     	; 0x13b6 <vfprintf+0xe6>
    1394:	ea e0       	ldi	r30, 0x0A	; 10
    1396:	2e 9e       	mul	r2, r30
    1398:	20 0d       	add	r18, r0
    139a:	11 24       	eor	r1, r1
    139c:	22 2e       	mov	r2, r18
    139e:	f3 2d       	mov	r31, r3
    13a0:	f0 62       	ori	r31, 0x20	; 32
    13a2:	3f 2e       	mov	r3, r31
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <vfprintf+0xe6>
    13a6:	8c 36       	cpi	r24, 0x6C	; 108
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <vfprintf+0xe2>
    13aa:	83 2d       	mov	r24, r3
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	38 2e       	mov	r3, r24
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0xe6>
    13b2:	88 36       	cpi	r24, 0x68	; 104
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <vfprintf+0xf6>
    13b6:	f7 01       	movw	r30, r14
    13b8:	93 fd       	sbrc	r25, 3
    13ba:	85 91       	lpm	r24, Z+
    13bc:	93 ff       	sbrs	r25, 3
    13be:	81 91       	ld	r24, Z+
    13c0:	7f 01       	movw	r14, r30
    13c2:	81 11       	cpse	r24, r1
    13c4:	b3 cf       	rjmp	.-154    	; 0x132c <vfprintf+0x5c>
    13c6:	98 2f       	mov	r25, r24
    13c8:	9f 7d       	andi	r25, 0xDF	; 223
    13ca:	95 54       	subi	r25, 0x45	; 69
    13cc:	93 30       	cpi	r25, 0x03	; 3
    13ce:	28 f4       	brcc	.+10     	; 0x13da <vfprintf+0x10a>
    13d0:	0c 5f       	subi	r16, 0xFC	; 252
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	9f e3       	ldi	r25, 0x3F	; 63
    13d6:	99 83       	std	Y+1, r25	; 0x01
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <vfprintf+0x124>
    13da:	83 36       	cpi	r24, 0x63	; 99
    13dc:	31 f0       	breq	.+12     	; 0x13ea <vfprintf+0x11a>
    13de:	83 37       	cpi	r24, 0x73	; 115
    13e0:	71 f0       	breq	.+28     	; 0x13fe <vfprintf+0x12e>
    13e2:	83 35       	cpi	r24, 0x53	; 83
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <vfprintf+0x118>
    13e6:	59 c0       	rjmp	.+178    	; 0x149a <vfprintf+0x1ca>
    13e8:	21 c0       	rjmp	.+66     	; 0x142c <vfprintf+0x15c>
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	0e 5f       	subi	r16, 0xFE	; 254
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	88 24       	eor	r8, r8
    13f6:	83 94       	inc	r8
    13f8:	91 2c       	mov	r9, r1
    13fa:	53 01       	movw	r10, r6
    13fc:	13 c0       	rjmp	.+38     	; 0x1424 <vfprintf+0x154>
    13fe:	28 01       	movw	r4, r16
    1400:	f2 e0       	ldi	r31, 0x02	; 2
    1402:	4f 0e       	add	r4, r31
    1404:	51 1c       	adc	r5, r1
    1406:	f8 01       	movw	r30, r16
    1408:	a0 80       	ld	r10, Z
    140a:	b1 80       	ldd	r11, Z+1	; 0x01
    140c:	36 fe       	sbrs	r3, 6
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x146>
    1410:	69 2d       	mov	r22, r9
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x14a>
    1416:	6f ef       	ldi	r22, 0xFF	; 255
    1418:	7f ef       	ldi	r23, 0xFF	; 255
    141a:	c5 01       	movw	r24, r10
    141c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <strnlen>
    1420:	4c 01       	movw	r8, r24
    1422:	82 01       	movw	r16, r4
    1424:	f3 2d       	mov	r31, r3
    1426:	ff 77       	andi	r31, 0x7F	; 127
    1428:	3f 2e       	mov	r3, r31
    142a:	16 c0       	rjmp	.+44     	; 0x1458 <vfprintf+0x188>
    142c:	28 01       	movw	r4, r16
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	42 0e       	add	r4, r18
    1432:	51 1c       	adc	r5, r1
    1434:	f8 01       	movw	r30, r16
    1436:	a0 80       	ld	r10, Z
    1438:	b1 80       	ldd	r11, Z+1	; 0x01
    143a:	36 fe       	sbrs	r3, 6
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x174>
    143e:	69 2d       	mov	r22, r9
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x178>
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	7f ef       	ldi	r23, 0xFF	; 255
    1448:	c5 01       	movw	r24, r10
    144a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <strnlen_P>
    144e:	4c 01       	movw	r8, r24
    1450:	f3 2d       	mov	r31, r3
    1452:	f0 68       	ori	r31, 0x80	; 128
    1454:	3f 2e       	mov	r3, r31
    1456:	82 01       	movw	r16, r4
    1458:	33 fc       	sbrc	r3, 3
    145a:	1b c0       	rjmp	.+54     	; 0x1492 <vfprintf+0x1c2>
    145c:	82 2d       	mov	r24, r2
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	88 16       	cp	r8, r24
    1462:	99 06       	cpc	r9, r25
    1464:	b0 f4       	brcc	.+44     	; 0x1492 <vfprintf+0x1c2>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1470:	2a 94       	dec	r2
    1472:	f4 cf       	rjmp	.-24     	; 0x145c <vfprintf+0x18c>
    1474:	f5 01       	movw	r30, r10
    1476:	37 fc       	sbrc	r3, 7
    1478:	85 91       	lpm	r24, Z+
    147a:	37 fe       	sbrs	r3, 7
    147c:	81 91       	ld	r24, Z+
    147e:	5f 01       	movw	r10, r30
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1488:	21 10       	cpse	r2, r1
    148a:	2a 94       	dec	r2
    148c:	21 e0       	ldi	r18, 0x01	; 1
    148e:	82 1a       	sub	r8, r18
    1490:	91 08       	sbc	r9, r1
    1492:	81 14       	cp	r8, r1
    1494:	91 04       	cpc	r9, r1
    1496:	71 f7       	brne	.-36     	; 0x1474 <vfprintf+0x1a4>
    1498:	e8 c0       	rjmp	.+464    	; 0x166a <vfprintf+0x39a>
    149a:	84 36       	cpi	r24, 0x64	; 100
    149c:	11 f0       	breq	.+4      	; 0x14a2 <vfprintf+0x1d2>
    149e:	89 36       	cpi	r24, 0x69	; 105
    14a0:	41 f5       	brne	.+80     	; 0x14f2 <vfprintf+0x222>
    14a2:	f8 01       	movw	r30, r16
    14a4:	37 fe       	sbrs	r3, 7
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <vfprintf+0x1e6>
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0c 5f       	subi	r16, 0xFC	; 252
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <vfprintf+0x1f6>
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	07 2e       	mov	r0, r23
    14bc:	00 0c       	add	r0, r0
    14be:	88 0b       	sbc	r24, r24
    14c0:	99 0b       	sbc	r25, r25
    14c2:	0e 5f       	subi	r16, 0xFE	; 254
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	f3 2d       	mov	r31, r3
    14c8:	ff 76       	andi	r31, 0x6F	; 111
    14ca:	3f 2e       	mov	r3, r31
    14cc:	97 ff       	sbrs	r25, 7
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <vfprintf+0x212>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	f0 68       	ori	r31, 0x80	; 128
    14e0:	3f 2e       	mov	r3, r31
    14e2:	2a e0       	ldi	r18, 0x0A	; 10
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a3 01       	movw	r20, r6
    14e8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__ultoa_invert>
    14ec:	88 2e       	mov	r8, r24
    14ee:	86 18       	sub	r8, r6
    14f0:	45 c0       	rjmp	.+138    	; 0x157c <vfprintf+0x2ac>
    14f2:	85 37       	cpi	r24, 0x75	; 117
    14f4:	31 f4       	brne	.+12     	; 0x1502 <vfprintf+0x232>
    14f6:	23 2d       	mov	r18, r3
    14f8:	2f 7e       	andi	r18, 0xEF	; 239
    14fa:	b2 2e       	mov	r11, r18
    14fc:	2a e0       	ldi	r18, 0x0A	; 10
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	25 c0       	rjmp	.+74     	; 0x154c <vfprintf+0x27c>
    1502:	93 2d       	mov	r25, r3
    1504:	99 7f       	andi	r25, 0xF9	; 249
    1506:	b9 2e       	mov	r11, r25
    1508:	8f 36       	cpi	r24, 0x6F	; 111
    150a:	c1 f0       	breq	.+48     	; 0x153c <vfprintf+0x26c>
    150c:	18 f4       	brcc	.+6      	; 0x1514 <vfprintf+0x244>
    150e:	88 35       	cpi	r24, 0x58	; 88
    1510:	79 f0       	breq	.+30     	; 0x1530 <vfprintf+0x260>
    1512:	b5 c0       	rjmp	.+362    	; 0x167e <vfprintf+0x3ae>
    1514:	80 37       	cpi	r24, 0x70	; 112
    1516:	19 f0       	breq	.+6      	; 0x151e <vfprintf+0x24e>
    1518:	88 37       	cpi	r24, 0x78	; 120
    151a:	21 f0       	breq	.+8      	; 0x1524 <vfprintf+0x254>
    151c:	b0 c0       	rjmp	.+352    	; 0x167e <vfprintf+0x3ae>
    151e:	e9 2f       	mov	r30, r25
    1520:	e0 61       	ori	r30, 0x10	; 16
    1522:	be 2e       	mov	r11, r30
    1524:	b4 fe       	sbrs	r11, 4
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <vfprintf+0x272>
    1528:	fb 2d       	mov	r31, r11
    152a:	f4 60       	ori	r31, 0x04	; 4
    152c:	bf 2e       	mov	r11, r31
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x272>
    1530:	34 fe       	sbrs	r3, 4
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <vfprintf+0x278>
    1534:	29 2f       	mov	r18, r25
    1536:	26 60       	ori	r18, 0x06	; 6
    1538:	b2 2e       	mov	r11, r18
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <vfprintf+0x278>
    153c:	28 e0       	ldi	r18, 0x08	; 8
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	05 c0       	rjmp	.+10     	; 0x154c <vfprintf+0x27c>
    1542:	20 e1       	ldi	r18, 0x10	; 16
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x27c>
    1548:	20 e1       	ldi	r18, 0x10	; 16
    154a:	32 e0       	ldi	r19, 0x02	; 2
    154c:	f8 01       	movw	r30, r16
    154e:	b7 fe       	sbrs	r11, 7
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <vfprintf+0x290>
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	0c 5f       	subi	r16, 0xFC	; 252
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x29c>
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 5f       	subi	r16, 0xFE	; 254
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	a3 01       	movw	r20, r6
    156e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__ultoa_invert>
    1572:	88 2e       	mov	r8, r24
    1574:	86 18       	sub	r8, r6
    1576:	fb 2d       	mov	r31, r11
    1578:	ff 77       	andi	r31, 0x7F	; 127
    157a:	3f 2e       	mov	r3, r31
    157c:	36 fe       	sbrs	r3, 6
    157e:	0d c0       	rjmp	.+26     	; 0x159a <vfprintf+0x2ca>
    1580:	23 2d       	mov	r18, r3
    1582:	2e 7f       	andi	r18, 0xFE	; 254
    1584:	a2 2e       	mov	r10, r18
    1586:	89 14       	cp	r8, r9
    1588:	58 f4       	brcc	.+22     	; 0x15a0 <vfprintf+0x2d0>
    158a:	34 fe       	sbrs	r3, 4
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <vfprintf+0x2d4>
    158e:	32 fc       	sbrc	r3, 2
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <vfprintf+0x2d4>
    1592:	83 2d       	mov	r24, r3
    1594:	8e 7e       	andi	r24, 0xEE	; 238
    1596:	a8 2e       	mov	r10, r24
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <vfprintf+0x2d4>
    159a:	b8 2c       	mov	r11, r8
    159c:	a3 2c       	mov	r10, r3
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <vfprintf+0x2d6>
    15a0:	b8 2c       	mov	r11, r8
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <vfprintf+0x2d6>
    15a4:	b9 2c       	mov	r11, r9
    15a6:	a4 fe       	sbrs	r10, 4
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <vfprintf+0x2f8>
    15aa:	fe 01       	movw	r30, r28
    15ac:	e8 0d       	add	r30, r8
    15ae:	f1 1d       	adc	r31, r1
    15b0:	80 81       	ld	r24, Z
    15b2:	80 33       	cpi	r24, 0x30	; 48
    15b4:	21 f4       	brne	.+8      	; 0x15be <vfprintf+0x2ee>
    15b6:	9a 2d       	mov	r25, r10
    15b8:	99 7e       	andi	r25, 0xE9	; 233
    15ba:	a9 2e       	mov	r10, r25
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <vfprintf+0x300>
    15be:	a2 fe       	sbrs	r10, 2
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x2fe>
    15c2:	b3 94       	inc	r11
    15c4:	b3 94       	inc	r11
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <vfprintf+0x300>
    15c8:	8a 2d       	mov	r24, r10
    15ca:	86 78       	andi	r24, 0x86	; 134
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <vfprintf+0x300>
    15ce:	b3 94       	inc	r11
    15d0:	a3 fc       	sbrc	r10, 3
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <vfprintf+0x326>
    15d4:	a0 fe       	sbrs	r10, 0
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0x314>
    15d8:	b2 14       	cp	r11, r2
    15da:	88 f4       	brcc	.+34     	; 0x15fe <vfprintf+0x32e>
    15dc:	28 0c       	add	r2, r8
    15de:	92 2c       	mov	r9, r2
    15e0:	9b 18       	sub	r9, r11
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <vfprintf+0x330>
    15e4:	b2 14       	cp	r11, r2
    15e6:	60 f4       	brcc	.+24     	; 0x1600 <vfprintf+0x330>
    15e8:	b6 01       	movw	r22, r12
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    15f2:	b3 94       	inc	r11
    15f4:	f7 cf       	rjmp	.-18     	; 0x15e4 <vfprintf+0x314>
    15f6:	b2 14       	cp	r11, r2
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <vfprintf+0x330>
    15fa:	2b 18       	sub	r2, r11
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x332>
    15fe:	98 2c       	mov	r9, r8
    1600:	21 2c       	mov	r2, r1
    1602:	a4 fe       	sbrs	r10, 4
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <vfprintf+0x356>
    1606:	b6 01       	movw	r22, r12
    1608:	80 e3       	ldi	r24, 0x30	; 48
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1610:	a2 fe       	sbrs	r10, 2
    1612:	17 c0       	rjmp	.+46     	; 0x1642 <vfprintf+0x372>
    1614:	a1 fc       	sbrc	r10, 1
    1616:	03 c0       	rjmp	.+6      	; 0x161e <vfprintf+0x34e>
    1618:	88 e7       	ldi	r24, 0x78	; 120
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0x352>
    161e:	88 e5       	ldi	r24, 0x58	; 88
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	b6 01       	movw	r22, r12
    1624:	0c c0       	rjmp	.+24     	; 0x163e <vfprintf+0x36e>
    1626:	8a 2d       	mov	r24, r10
    1628:	86 78       	andi	r24, 0x86	; 134
    162a:	59 f0       	breq	.+22     	; 0x1642 <vfprintf+0x372>
    162c:	a1 fe       	sbrs	r10, 1
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfprintf+0x364>
    1630:	8b e2       	ldi	r24, 0x2B	; 43
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <vfprintf+0x366>
    1634:	80 e2       	ldi	r24, 0x20	; 32
    1636:	a7 fc       	sbrc	r10, 7
    1638:	8d e2       	ldi	r24, 0x2D	; 45
    163a:	b6 01       	movw	r22, r12
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1642:	89 14       	cp	r8, r9
    1644:	38 f4       	brcc	.+14     	; 0x1654 <vfprintf+0x384>
    1646:	b6 01       	movw	r22, r12
    1648:	80 e3       	ldi	r24, 0x30	; 48
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1650:	9a 94       	dec	r9
    1652:	f7 cf       	rjmp	.-18     	; 0x1642 <vfprintf+0x372>
    1654:	8a 94       	dec	r8
    1656:	f3 01       	movw	r30, r6
    1658:	e8 0d       	add	r30, r8
    165a:	f1 1d       	adc	r31, r1
    165c:	80 81       	ld	r24, Z
    165e:	b6 01       	movw	r22, r12
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    1666:	81 10       	cpse	r8, r1
    1668:	f5 cf       	rjmp	.-22     	; 0x1654 <vfprintf+0x384>
    166a:	22 20       	and	r2, r2
    166c:	09 f4       	brne	.+2      	; 0x1670 <vfprintf+0x3a0>
    166e:	42 ce       	rjmp	.-892    	; 0x12f4 <vfprintf+0x24>
    1670:	b6 01       	movw	r22, r12
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <fputc>
    167a:	2a 94       	dec	r2
    167c:	f6 cf       	rjmp	.-20     	; 0x166a <vfprintf+0x39a>
    167e:	f6 01       	movw	r30, r12
    1680:	86 81       	ldd	r24, Z+6	; 0x06
    1682:	97 81       	ldd	r25, Z+7	; 0x07
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0x3ba>
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	9f ef       	ldi	r25, 0xFF	; 255
    168a:	2b 96       	adiw	r28, 0x0b	; 11
    168c:	e2 e1       	ldi	r30, 0x12	; 18
    168e:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__epilogue_restores__>

00001692 <dtoa_prf>:
    1692:	a9 e0       	ldi	r26, 0x09	; 9
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__prologue_saves__+0xc>
    169e:	6a 01       	movw	r12, r20
    16a0:	12 2f       	mov	r17, r18
    16a2:	b0 2e       	mov	r11, r16
    16a4:	2b e3       	ldi	r18, 0x3B	; 59
    16a6:	20 17       	cp	r18, r16
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <dtoa_prf+0x20>
    16aa:	ff 24       	eor	r15, r15
    16ac:	f3 94       	inc	r15
    16ae:	f0 0e       	add	r15, r16
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <dtoa_prf+0x24>
    16b2:	2c e3       	ldi	r18, 0x3C	; 60
    16b4:	f2 2e       	mov	r15, r18
    16b6:	0f 2d       	mov	r16, r15
    16b8:	27 e0       	ldi	r18, 0x07	; 7
    16ba:	ae 01       	movw	r20, r28
    16bc:	4f 5f       	subi	r20, 0xFF	; 255
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
    16c0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__ftoa_engine>
    16c4:	bc 01       	movw	r22, r24
    16c6:	49 81       	ldd	r20, Y+1	; 0x01
    16c8:	84 2f       	mov	r24, r20
    16ca:	89 70       	andi	r24, 0x09	; 9
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	31 f0       	breq	.+12     	; 0x16dc <dtoa_prf+0x4a>
    16d0:	e1 fc       	sbrc	r14, 1
    16d2:	06 c0       	rjmp	.+12     	; 0x16e0 <dtoa_prf+0x4e>
    16d4:	e0 fe       	sbrs	r14, 0
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <dtoa_prf+0x52>
    16d8:	90 e2       	ldi	r25, 0x20	; 32
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <dtoa_prf+0x54>
    16dc:	9d e2       	ldi	r25, 0x2D	; 45
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <dtoa_prf+0x54>
    16e0:	9b e2       	ldi	r25, 0x2B	; 43
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <dtoa_prf+0x54>
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	5e 2d       	mov	r21, r14
    16e8:	50 71       	andi	r21, 0x10	; 16
    16ea:	43 ff       	sbrs	r20, 3
    16ec:	3c c0       	rjmp	.+120    	; 0x1766 <dtoa_prf+0xd4>
    16ee:	91 11       	cpse	r25, r1
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <dtoa_prf+0x64>
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <dtoa_prf+0x66>
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	81 17       	cp	r24, r17
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <dtoa_prf+0x70>
    16fc:	21 2f       	mov	r18, r17
    16fe:	28 1b       	sub	r18, r24
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <dtoa_prf+0x72>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	51 11       	cpse	r21, r1
    1706:	0b c0       	rjmp	.+22     	; 0x171e <dtoa_prf+0x8c>
    1708:	f6 01       	movw	r30, r12
    170a:	82 2f       	mov	r24, r18
    170c:	30 e2       	ldi	r19, 0x20	; 32
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <dtoa_prf+0x86>
    1712:	31 93       	st	Z+, r19
    1714:	81 50       	subi	r24, 0x01	; 1
    1716:	fb cf       	rjmp	.-10     	; 0x170e <dtoa_prf+0x7c>
    1718:	c2 0e       	add	r12, r18
    171a:	d1 1c       	adc	r13, r1
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	99 23       	and	r25, r25
    1720:	29 f0       	breq	.+10     	; 0x172c <dtoa_prf+0x9a>
    1722:	d6 01       	movw	r26, r12
    1724:	9c 93       	st	X, r25
    1726:	f6 01       	movw	r30, r12
    1728:	31 96       	adiw	r30, 0x01	; 1
    172a:	6f 01       	movw	r12, r30
    172c:	c6 01       	movw	r24, r12
    172e:	03 96       	adiw	r24, 0x03	; 3
    1730:	e2 fe       	sbrs	r14, 2
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <dtoa_prf+0xb6>
    1734:	3e e4       	ldi	r19, 0x4E	; 78
    1736:	d6 01       	movw	r26, r12
    1738:	3c 93       	st	X, r19
    173a:	41 e4       	ldi	r20, 0x41	; 65
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	4c 93       	st	X, r20
    1740:	11 97       	sbiw	r26, 0x01	; 1
    1742:	12 96       	adiw	r26, 0x02	; 2
    1744:	3c 93       	st	X, r19
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <dtoa_prf+0xc2>
    1748:	3e e6       	ldi	r19, 0x6E	; 110
    174a:	f6 01       	movw	r30, r12
    174c:	30 83       	st	Z, r19
    174e:	41 e6       	ldi	r20, 0x61	; 97
    1750:	41 83       	std	Z+1, r20	; 0x01
    1752:	32 83       	std	Z+2, r19	; 0x02
    1754:	fc 01       	movw	r30, r24
    1756:	32 2f       	mov	r19, r18
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	33 23       	and	r19, r19
    175c:	09 f4       	brne	.+2      	; 0x1760 <dtoa_prf+0xce>
    175e:	42 c0       	rjmp	.+132    	; 0x17e4 <dtoa_prf+0x152>
    1760:	41 93       	st	Z+, r20
    1762:	31 50       	subi	r19, 0x01	; 1
    1764:	fa cf       	rjmp	.-12     	; 0x175a <dtoa_prf+0xc8>
    1766:	42 ff       	sbrs	r20, 2
    1768:	44 c0       	rjmp	.+136    	; 0x17f2 <dtoa_prf+0x160>
    176a:	91 11       	cpse	r25, r1
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <dtoa_prf+0xe0>
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <dtoa_prf+0xe2>
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	81 17       	cp	r24, r17
    1776:	18 f4       	brcc	.+6      	; 0x177e <dtoa_prf+0xec>
    1778:	21 2f       	mov	r18, r17
    177a:	28 1b       	sub	r18, r24
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <dtoa_prf+0xee>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	51 11       	cpse	r21, r1
    1782:	0b c0       	rjmp	.+22     	; 0x179a <dtoa_prf+0x108>
    1784:	f6 01       	movw	r30, r12
    1786:	82 2f       	mov	r24, r18
    1788:	30 e2       	ldi	r19, 0x20	; 32
    178a:	88 23       	and	r24, r24
    178c:	19 f0       	breq	.+6      	; 0x1794 <dtoa_prf+0x102>
    178e:	31 93       	st	Z+, r19
    1790:	81 50       	subi	r24, 0x01	; 1
    1792:	fb cf       	rjmp	.-10     	; 0x178a <dtoa_prf+0xf8>
    1794:	c2 0e       	add	r12, r18
    1796:	d1 1c       	adc	r13, r1
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	99 23       	and	r25, r25
    179c:	29 f0       	breq	.+10     	; 0x17a8 <dtoa_prf+0x116>
    179e:	d6 01       	movw	r26, r12
    17a0:	9c 93       	st	X, r25
    17a2:	f6 01       	movw	r30, r12
    17a4:	31 96       	adiw	r30, 0x01	; 1
    17a6:	6f 01       	movw	r12, r30
    17a8:	c6 01       	movw	r24, r12
    17aa:	03 96       	adiw	r24, 0x03	; 3
    17ac:	e2 fe       	sbrs	r14, 2
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <dtoa_prf+0x134>
    17b0:	39 e4       	ldi	r19, 0x49	; 73
    17b2:	d6 01       	movw	r26, r12
    17b4:	3c 93       	st	X, r19
    17b6:	3e e4       	ldi	r19, 0x4E	; 78
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	3c 93       	st	X, r19
    17bc:	11 97       	sbiw	r26, 0x01	; 1
    17be:	36 e4       	ldi	r19, 0x46	; 70
    17c0:	12 96       	adiw	r26, 0x02	; 2
    17c2:	3c 93       	st	X, r19
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <dtoa_prf+0x142>
    17c6:	39 e6       	ldi	r19, 0x69	; 105
    17c8:	f6 01       	movw	r30, r12
    17ca:	30 83       	st	Z, r19
    17cc:	3e e6       	ldi	r19, 0x6E	; 110
    17ce:	31 83       	std	Z+1, r19	; 0x01
    17d0:	36 e6       	ldi	r19, 0x66	; 102
    17d2:	32 83       	std	Z+2, r19	; 0x02
    17d4:	fc 01       	movw	r30, r24
    17d6:	32 2f       	mov	r19, r18
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	33 23       	and	r19, r19
    17dc:	19 f0       	breq	.+6      	; 0x17e4 <dtoa_prf+0x152>
    17de:	41 93       	st	Z+, r20
    17e0:	31 50       	subi	r19, 0x01	; 1
    17e2:	fb cf       	rjmp	.-10     	; 0x17da <dtoa_prf+0x148>
    17e4:	fc 01       	movw	r30, r24
    17e6:	e2 0f       	add	r30, r18
    17e8:	f1 1d       	adc	r31, r1
    17ea:	10 82       	st	Z, r1
    17ec:	8e ef       	ldi	r24, 0xFE	; 254
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	a6 c0       	rjmp	.+332    	; 0x193e <dtoa_prf+0x2ac>
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	91 11       	cpse	r25, r1
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <dtoa_prf+0x16c>
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	16 16       	cp	r1, r22
    1800:	17 06       	cpc	r1, r23
    1802:	1c f4       	brge	.+6      	; 0x180a <dtoa_prf+0x178>
    1804:	fb 01       	movw	r30, r22
    1806:	31 96       	adiw	r30, 0x01	; 1
    1808:	02 c0       	rjmp	.+4      	; 0x180e <dtoa_prf+0x17c>
    180a:	e1 e0       	ldi	r30, 0x01	; 1
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	2e 0f       	add	r18, r30
    1810:	3f 1f       	adc	r19, r31
    1812:	bb 20       	and	r11, r11
    1814:	21 f0       	breq	.+8      	; 0x181e <dtoa_prf+0x18c>
    1816:	eb 2d       	mov	r30, r11
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	31 96       	adiw	r30, 0x01	; 1
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <dtoa_prf+0x190>
    181e:	e0 e0       	ldi	r30, 0x00	; 0
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	2e 0f       	add	r18, r30
    1824:	3f 1f       	adc	r19, r31
    1826:	e1 2f       	mov	r30, r17
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	2e 17       	cp	r18, r30
    182c:	3f 07       	cpc	r19, r31
    182e:	1c f4       	brge	.+6      	; 0x1836 <dtoa_prf+0x1a4>
    1830:	12 1b       	sub	r17, r18
    1832:	21 2f       	mov	r18, r17
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <dtoa_prf+0x1a6>
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	8e 2d       	mov	r24, r14
    183a:	88 71       	andi	r24, 0x18	; 24
    183c:	59 f4       	brne	.+22     	; 0x1854 <dtoa_prf+0x1c2>
    183e:	f6 01       	movw	r30, r12
    1840:	82 2f       	mov	r24, r18
    1842:	30 e2       	ldi	r19, 0x20	; 32
    1844:	88 23       	and	r24, r24
    1846:	19 f0       	breq	.+6      	; 0x184e <dtoa_prf+0x1bc>
    1848:	31 93       	st	Z+, r19
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	fb cf       	rjmp	.-10     	; 0x1844 <dtoa_prf+0x1b2>
    184e:	c2 0e       	add	r12, r18
    1850:	d1 1c       	adc	r13, r1
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	99 23       	and	r25, r25
    1856:	29 f0       	breq	.+10     	; 0x1862 <dtoa_prf+0x1d0>
    1858:	d6 01       	movw	r26, r12
    185a:	9c 93       	st	X, r25
    185c:	f6 01       	movw	r30, r12
    185e:	31 96       	adiw	r30, 0x01	; 1
    1860:	6f 01       	movw	r12, r30
    1862:	51 11       	cpse	r21, r1
    1864:	0b c0       	rjmp	.+22     	; 0x187c <dtoa_prf+0x1ea>
    1866:	f6 01       	movw	r30, r12
    1868:	82 2f       	mov	r24, r18
    186a:	90 e3       	ldi	r25, 0x30	; 48
    186c:	88 23       	and	r24, r24
    186e:	19 f0       	breq	.+6      	; 0x1876 <dtoa_prf+0x1e4>
    1870:	91 93       	st	Z+, r25
    1872:	81 50       	subi	r24, 0x01	; 1
    1874:	fb cf       	rjmp	.-10     	; 0x186c <dtoa_prf+0x1da>
    1876:	c2 0e       	add	r12, r18
    1878:	d1 1c       	adc	r13, r1
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	0f 2d       	mov	r16, r15
    187e:	06 0f       	add	r16, r22
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	34 2f       	mov	r19, r20
    1884:	30 71       	andi	r19, 0x10	; 16
    1886:	44 ff       	sbrs	r20, 4
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <dtoa_prf+0x1fe>
    188a:	91 33       	cpi	r25, 0x31	; 49
    188c:	09 f4       	brne	.+2      	; 0x1890 <dtoa_prf+0x1fe>
    188e:	01 50       	subi	r16, 0x01	; 1
    1890:	10 16       	cp	r1, r16
    1892:	24 f4       	brge	.+8      	; 0x189c <dtoa_prf+0x20a>
    1894:	09 30       	cpi	r16, 0x09	; 9
    1896:	18 f0       	brcs	.+6      	; 0x189e <dtoa_prf+0x20c>
    1898:	08 e0       	ldi	r16, 0x08	; 8
    189a:	01 c0       	rjmp	.+2      	; 0x189e <dtoa_prf+0x20c>
    189c:	01 e0       	ldi	r16, 0x01	; 1
    189e:	ab 01       	movw	r20, r22
    18a0:	77 ff       	sbrs	r23, 7
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <dtoa_prf+0x216>
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	fb 01       	movw	r30, r22
    18aa:	e4 1b       	sub	r30, r20
    18ac:	f5 0b       	sbc	r31, r21
    18ae:	a1 e0       	ldi	r26, 0x01	; 1
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ac 0f       	add	r26, r28
    18b4:	bd 1f       	adc	r27, r29
    18b6:	ea 0f       	add	r30, r26
    18b8:	fb 1f       	adc	r31, r27
    18ba:	8e e2       	ldi	r24, 0x2E	; 46
    18bc:	a8 2e       	mov	r10, r24
    18be:	4b 01       	movw	r8, r22
    18c0:	80 1a       	sub	r8, r16
    18c2:	91 08       	sbc	r9, r1
    18c4:	0b 2d       	mov	r16, r11
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	11 95       	neg	r17
    18ca:	01 95       	neg	r16
    18cc:	11 09       	sbc	r17, r1
    18ce:	4f 3f       	cpi	r20, 0xFF	; 255
    18d0:	bf ef       	ldi	r27, 0xFF	; 255
    18d2:	5b 07       	cpc	r21, r27
    18d4:	21 f4       	brne	.+8      	; 0x18de <dtoa_prf+0x24c>
    18d6:	d6 01       	movw	r26, r12
    18d8:	ac 92       	st	X, r10
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	6d 01       	movw	r12, r26
    18de:	64 17       	cp	r22, r20
    18e0:	75 07       	cpc	r23, r21
    18e2:	2c f0       	brlt	.+10     	; 0x18ee <dtoa_prf+0x25c>
    18e4:	84 16       	cp	r8, r20
    18e6:	95 06       	cpc	r9, r21
    18e8:	14 f4       	brge	.+4      	; 0x18ee <dtoa_prf+0x25c>
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <dtoa_prf+0x25e>
    18ee:	80 e3       	ldi	r24, 0x30	; 48
    18f0:	41 50       	subi	r20, 0x01	; 1
    18f2:	51 09       	sbc	r21, r1
    18f4:	31 96       	adiw	r30, 0x01	; 1
    18f6:	d6 01       	movw	r26, r12
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	7d 01       	movw	r14, r26
    18fc:	40 17       	cp	r20, r16
    18fe:	51 07       	cpc	r21, r17
    1900:	24 f0       	brlt	.+8      	; 0x190a <dtoa_prf+0x278>
    1902:	d6 01       	movw	r26, r12
    1904:	8c 93       	st	X, r24
    1906:	67 01       	movw	r12, r14
    1908:	e2 cf       	rjmp	.-60     	; 0x18ce <dtoa_prf+0x23c>
    190a:	64 17       	cp	r22, r20
    190c:	75 07       	cpc	r23, r21
    190e:	39 f4       	brne	.+14     	; 0x191e <dtoa_prf+0x28c>
    1910:	96 33       	cpi	r25, 0x36	; 54
    1912:	20 f4       	brcc	.+8      	; 0x191c <dtoa_prf+0x28a>
    1914:	95 33       	cpi	r25, 0x35	; 53
    1916:	19 f4       	brne	.+6      	; 0x191e <dtoa_prf+0x28c>
    1918:	31 11       	cpse	r19, r1
    191a:	01 c0       	rjmp	.+2      	; 0x191e <dtoa_prf+0x28c>
    191c:	81 e3       	ldi	r24, 0x31	; 49
    191e:	f6 01       	movw	r30, r12
    1920:	80 83       	st	Z, r24
    1922:	f7 01       	movw	r30, r14
    1924:	82 2f       	mov	r24, r18
    1926:	90 e2       	ldi	r25, 0x20	; 32
    1928:	88 23       	and	r24, r24
    192a:	19 f0       	breq	.+6      	; 0x1932 <dtoa_prf+0x2a0>
    192c:	91 93       	st	Z+, r25
    192e:	81 50       	subi	r24, 0x01	; 1
    1930:	fb cf       	rjmp	.-10     	; 0x1928 <dtoa_prf+0x296>
    1932:	f7 01       	movw	r30, r14
    1934:	e2 0f       	add	r30, r18
    1936:	f1 1d       	adc	r31, r1
    1938:	10 82       	st	Z, r1
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	29 96       	adiw	r28, 0x09	; 9
    1940:	ec e0       	ldi	r30, 0x0C	; 12
    1942:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__epilogue_restores__+0xc>

00001946 <__ftoa_engine>:
    1946:	28 30       	cpi	r18, 0x08	; 8
    1948:	08 f0       	brcs	.+2      	; 0x194c <__ftoa_engine+0x6>
    194a:	27 e0       	ldi	r18, 0x07	; 7
    194c:	33 27       	eor	r19, r19
    194e:	da 01       	movw	r26, r20
    1950:	99 0f       	add	r25, r25
    1952:	31 1d       	adc	r19, r1
    1954:	87 fd       	sbrc	r24, 7
    1956:	91 60       	ori	r25, 0x01	; 1
    1958:	00 96       	adiw	r24, 0x00	; 0
    195a:	61 05       	cpc	r22, r1
    195c:	71 05       	cpc	r23, r1
    195e:	39 f4       	brne	.+14     	; 0x196e <__ftoa_engine+0x28>
    1960:	32 60       	ori	r19, 0x02	; 2
    1962:	2e 5f       	subi	r18, 0xFE	; 254
    1964:	3d 93       	st	X+, r19
    1966:	30 e3       	ldi	r19, 0x30	; 48
    1968:	2a 95       	dec	r18
    196a:	e1 f7       	brne	.-8      	; 0x1964 <__ftoa_engine+0x1e>
    196c:	08 95       	ret
    196e:	9f 3f       	cpi	r25, 0xFF	; 255
    1970:	30 f0       	brcs	.+12     	; 0x197e <__ftoa_engine+0x38>
    1972:	80 38       	cpi	r24, 0x80	; 128
    1974:	71 05       	cpc	r23, r1
    1976:	61 05       	cpc	r22, r1
    1978:	09 f0       	breq	.+2      	; 0x197c <__ftoa_engine+0x36>
    197a:	3c 5f       	subi	r19, 0xFC	; 252
    197c:	3c 5f       	subi	r19, 0xFC	; 252
    197e:	3d 93       	st	X+, r19
    1980:	91 30       	cpi	r25, 0x01	; 1
    1982:	08 f0       	brcs	.+2      	; 0x1986 <__ftoa_engine+0x40>
    1984:	80 68       	ori	r24, 0x80	; 128
    1986:	91 1d       	adc	r25, r1
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	1f 93       	push	r17
    198e:	0f 93       	push	r16
    1990:	ff 92       	push	r15
    1992:	ef 92       	push	r14
    1994:	19 2f       	mov	r17, r25
    1996:	98 7f       	andi	r25, 0xF8	; 248
    1998:	96 95       	lsr	r25
    199a:	e9 2f       	mov	r30, r25
    199c:	96 95       	lsr	r25
    199e:	96 95       	lsr	r25
    19a0:	e9 0f       	add	r30, r25
    19a2:	ff 27       	eor	r31, r31
    19a4:	e2 55       	subi	r30, 0x52	; 82
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	99 27       	eor	r25, r25
    19aa:	33 27       	eor	r19, r19
    19ac:	ee 24       	eor	r14, r14
    19ae:	ff 24       	eor	r15, r15
    19b0:	a7 01       	movw	r20, r14
    19b2:	e7 01       	movw	r28, r14
    19b4:	05 90       	lpm	r0, Z+
    19b6:	08 94       	sec
    19b8:	07 94       	ror	r0
    19ba:	28 f4       	brcc	.+10     	; 0x19c6 <__ftoa_engine+0x80>
    19bc:	36 0f       	add	r19, r22
    19be:	e7 1e       	adc	r14, r23
    19c0:	f8 1e       	adc	r15, r24
    19c2:	49 1f       	adc	r20, r25
    19c4:	51 1d       	adc	r21, r1
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	06 94       	lsr	r0
    19d0:	a1 f7       	brne	.-24     	; 0x19ba <__ftoa_engine+0x74>
    19d2:	05 90       	lpm	r0, Z+
    19d4:	07 94       	ror	r0
    19d6:	28 f4       	brcc	.+10     	; 0x19e2 <__ftoa_engine+0x9c>
    19d8:	e7 0e       	add	r14, r23
    19da:	f8 1e       	adc	r15, r24
    19dc:	49 1f       	adc	r20, r25
    19de:	56 1f       	adc	r21, r22
    19e0:	c1 1d       	adc	r28, r1
    19e2:	77 0f       	add	r23, r23
    19e4:	88 1f       	adc	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	66 1f       	adc	r22, r22
    19ea:	06 94       	lsr	r0
    19ec:	a1 f7       	brne	.-24     	; 0x19d6 <__ftoa_engine+0x90>
    19ee:	05 90       	lpm	r0, Z+
    19f0:	07 94       	ror	r0
    19f2:	28 f4       	brcc	.+10     	; 0x19fe <__ftoa_engine+0xb8>
    19f4:	f8 0e       	add	r15, r24
    19f6:	49 1f       	adc	r20, r25
    19f8:	56 1f       	adc	r21, r22
    19fa:	c7 1f       	adc	r28, r23
    19fc:	d1 1d       	adc	r29, r1
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	66 1f       	adc	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	06 94       	lsr	r0
    1a08:	a1 f7       	brne	.-24     	; 0x19f2 <__ftoa_engine+0xac>
    1a0a:	05 90       	lpm	r0, Z+
    1a0c:	07 94       	ror	r0
    1a0e:	20 f4       	brcc	.+8      	; 0x1a18 <__ftoa_engine+0xd2>
    1a10:	49 0f       	add	r20, r25
    1a12:	56 1f       	adc	r21, r22
    1a14:	c7 1f       	adc	r28, r23
    1a16:	d8 1f       	adc	r29, r24
    1a18:	99 0f       	add	r25, r25
    1a1a:	66 1f       	adc	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	06 94       	lsr	r0
    1a22:	a9 f7       	brne	.-22     	; 0x1a0e <__ftoa_engine+0xc8>
    1a24:	84 91       	lpm	r24, Z
    1a26:	10 95       	com	r17
    1a28:	17 70       	andi	r17, 0x07	; 7
    1a2a:	41 f0       	breq	.+16     	; 0x1a3c <__ftoa_engine+0xf6>
    1a2c:	d6 95       	lsr	r29
    1a2e:	c7 95       	ror	r28
    1a30:	57 95       	ror	r21
    1a32:	47 95       	ror	r20
    1a34:	f7 94       	ror	r15
    1a36:	e7 94       	ror	r14
    1a38:	1a 95       	dec	r17
    1a3a:	c1 f7       	brne	.-16     	; 0x1a2c <__ftoa_engine+0xe6>
    1a3c:	e4 e5       	ldi	r30, 0x54	; 84
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	68 94       	set
    1a42:	15 90       	lpm	r1, Z+
    1a44:	15 91       	lpm	r17, Z+
    1a46:	35 91       	lpm	r19, Z+
    1a48:	65 91       	lpm	r22, Z+
    1a4a:	95 91       	lpm	r25, Z+
    1a4c:	05 90       	lpm	r0, Z+
    1a4e:	7f e2       	ldi	r23, 0x2F	; 47
    1a50:	73 95       	inc	r23
    1a52:	e1 18       	sub	r14, r1
    1a54:	f1 0a       	sbc	r15, r17
    1a56:	43 0b       	sbc	r20, r19
    1a58:	56 0b       	sbc	r21, r22
    1a5a:	c9 0b       	sbc	r28, r25
    1a5c:	d0 09       	sbc	r29, r0
    1a5e:	c0 f7       	brcc	.-16     	; 0x1a50 <__ftoa_engine+0x10a>
    1a60:	e1 0c       	add	r14, r1
    1a62:	f1 1e       	adc	r15, r17
    1a64:	43 1f       	adc	r20, r19
    1a66:	56 1f       	adc	r21, r22
    1a68:	c9 1f       	adc	r28, r25
    1a6a:	d0 1d       	adc	r29, r0
    1a6c:	7e f4       	brtc	.+30     	; 0x1a8c <__ftoa_engine+0x146>
    1a6e:	70 33       	cpi	r23, 0x30	; 48
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <__ftoa_engine+0x130>
    1a72:	8a 95       	dec	r24
    1a74:	e6 cf       	rjmp	.-52     	; 0x1a42 <__ftoa_engine+0xfc>
    1a76:	e8 94       	clt
    1a78:	01 50       	subi	r16, 0x01	; 1
    1a7a:	30 f0       	brcs	.+12     	; 0x1a88 <__ftoa_engine+0x142>
    1a7c:	08 0f       	add	r16, r24
    1a7e:	0a f4       	brpl	.+2      	; 0x1a82 <__ftoa_engine+0x13c>
    1a80:	00 27       	eor	r16, r16
    1a82:	02 17       	cp	r16, r18
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <__ftoa_engine+0x142>
    1a86:	20 2f       	mov	r18, r16
    1a88:	23 95       	inc	r18
    1a8a:	02 2f       	mov	r16, r18
    1a8c:	7a 33       	cpi	r23, 0x3A	; 58
    1a8e:	28 f0       	brcs	.+10     	; 0x1a9a <__ftoa_engine+0x154>
    1a90:	79 e3       	ldi	r23, 0x39	; 57
    1a92:	7d 93       	st	X+, r23
    1a94:	2a 95       	dec	r18
    1a96:	e9 f7       	brne	.-6      	; 0x1a92 <__ftoa_engine+0x14c>
    1a98:	10 c0       	rjmp	.+32     	; 0x1aba <__ftoa_engine+0x174>
    1a9a:	7d 93       	st	X+, r23
    1a9c:	2a 95       	dec	r18
    1a9e:	89 f6       	brne	.-94     	; 0x1a42 <__ftoa_engine+0xfc>
    1aa0:	06 94       	lsr	r0
    1aa2:	97 95       	ror	r25
    1aa4:	67 95       	ror	r22
    1aa6:	37 95       	ror	r19
    1aa8:	17 95       	ror	r17
    1aaa:	17 94       	ror	r1
    1aac:	e1 18       	sub	r14, r1
    1aae:	f1 0a       	sbc	r15, r17
    1ab0:	43 0b       	sbc	r20, r19
    1ab2:	56 0b       	sbc	r21, r22
    1ab4:	c9 0b       	sbc	r28, r25
    1ab6:	d0 09       	sbc	r29, r0
    1ab8:	98 f0       	brcs	.+38     	; 0x1ae0 <__ftoa_engine+0x19a>
    1aba:	23 95       	inc	r18
    1abc:	7e 91       	ld	r23, -X
    1abe:	73 95       	inc	r23
    1ac0:	7a 33       	cpi	r23, 0x3A	; 58
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <__ftoa_engine+0x180>
    1ac4:	70 e3       	ldi	r23, 0x30	; 48
    1ac6:	7c 93       	st	X, r23
    1ac8:	20 13       	cpse	r18, r16
    1aca:	b8 f7       	brcc	.-18     	; 0x1aba <__ftoa_engine+0x174>
    1acc:	7e 91       	ld	r23, -X
    1ace:	70 61       	ori	r23, 0x10	; 16
    1ad0:	7d 93       	st	X+, r23
    1ad2:	30 f0       	brcs	.+12     	; 0x1ae0 <__ftoa_engine+0x19a>
    1ad4:	83 95       	inc	r24
    1ad6:	71 e3       	ldi	r23, 0x31	; 49
    1ad8:	7d 93       	st	X+, r23
    1ada:	70 e3       	ldi	r23, 0x30	; 48
    1adc:	2a 95       	dec	r18
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <__ftoa_engine+0x192>
    1ae0:	11 24       	eor	r1, r1
    1ae2:	ef 90       	pop	r14
    1ae4:	ff 90       	pop	r15
    1ae6:	0f 91       	pop	r16
    1ae8:	1f 91       	pop	r17
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	99 27       	eor	r25, r25
    1af0:	87 fd       	sbrc	r24, 7
    1af2:	90 95       	com	r25
    1af4:	08 95       	ret

00001af6 <strnlen_P>:
    1af6:	fc 01       	movw	r30, r24
    1af8:	05 90       	lpm	r0, Z+
    1afa:	61 50       	subi	r22, 0x01	; 1
    1afc:	70 40       	sbci	r23, 0x00	; 0
    1afe:	01 10       	cpse	r0, r1
    1b00:	d8 f7       	brcc	.-10     	; 0x1af8 <strnlen_P+0x2>
    1b02:	80 95       	com	r24
    1b04:	90 95       	com	r25
    1b06:	8e 0f       	add	r24, r30
    1b08:	9f 1f       	adc	r25, r31
    1b0a:	08 95       	ret

00001b0c <strnlen>:
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	61 50       	subi	r22, 0x01	; 1
    1b10:	70 40       	sbci	r23, 0x00	; 0
    1b12:	01 90       	ld	r0, Z+
    1b14:	01 10       	cpse	r0, r1
    1b16:	d8 f7       	brcc	.-10     	; 0x1b0e <strnlen+0x2>
    1b18:	80 95       	com	r24
    1b1a:	90 95       	com	r25
    1b1c:	8e 0f       	add	r24, r30
    1b1e:	9f 1f       	adc	r25, r31
    1b20:	08 95       	ret

00001b22 <fputc>:
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	fb 01       	movw	r30, r22
    1b2c:	23 81       	ldd	r18, Z+3	; 0x03
    1b2e:	21 fd       	sbrc	r18, 1
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <fputc+0x16>
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	2c c0       	rjmp	.+88     	; 0x1b90 <fputc+0x6e>
    1b38:	22 ff       	sbrs	r18, 2
    1b3a:	16 c0       	rjmp	.+44     	; 0x1b68 <fputc+0x46>
    1b3c:	46 81       	ldd	r20, Z+6	; 0x06
    1b3e:	57 81       	ldd	r21, Z+7	; 0x07
    1b40:	24 81       	ldd	r18, Z+4	; 0x04
    1b42:	35 81       	ldd	r19, Z+5	; 0x05
    1b44:	42 17       	cp	r20, r18
    1b46:	53 07       	cpc	r21, r19
    1b48:	44 f4       	brge	.+16     	; 0x1b5a <fputc+0x38>
    1b4a:	a0 81       	ld	r26, Z
    1b4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b4e:	9d 01       	movw	r18, r26
    1b50:	2f 5f       	subi	r18, 0xFF	; 255
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	31 83       	std	Z+1, r19	; 0x01
    1b56:	20 83       	st	Z, r18
    1b58:	8c 93       	st	X, r24
    1b5a:	26 81       	ldd	r18, Z+6	; 0x06
    1b5c:	37 81       	ldd	r19, Z+7	; 0x07
    1b5e:	2f 5f       	subi	r18, 0xFF	; 255
    1b60:	3f 4f       	sbci	r19, 0xFF	; 255
    1b62:	37 83       	std	Z+7, r19	; 0x07
    1b64:	26 83       	std	Z+6, r18	; 0x06
    1b66:	14 c0       	rjmp	.+40     	; 0x1b90 <fputc+0x6e>
    1b68:	8b 01       	movw	r16, r22
    1b6a:	ec 01       	movw	r28, r24
    1b6c:	fb 01       	movw	r30, r22
    1b6e:	00 84       	ldd	r0, Z+8	; 0x08
    1b70:	f1 85       	ldd	r31, Z+9	; 0x09
    1b72:	e0 2d       	mov	r30, r0
    1b74:	09 95       	icall
    1b76:	89 2b       	or	r24, r25
    1b78:	e1 f6       	brne	.-72     	; 0x1b32 <fputc+0x10>
    1b7a:	d8 01       	movw	r26, r16
    1b7c:	16 96       	adiw	r26, 0x06	; 6
    1b7e:	8d 91       	ld	r24, X+
    1b80:	9c 91       	ld	r25, X
    1b82:	17 97       	sbiw	r26, 0x07	; 7
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	17 96       	adiw	r26, 0x07	; 7
    1b88:	9c 93       	st	X, r25
    1b8a:	8e 93       	st	-X, r24
    1b8c:	16 97       	sbiw	r26, 0x06	; 6
    1b8e:	ce 01       	movw	r24, r28
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <__ultoa_invert>:
    1b9a:	fa 01       	movw	r30, r20
    1b9c:	aa 27       	eor	r26, r26
    1b9e:	28 30       	cpi	r18, 0x08	; 8
    1ba0:	51 f1       	breq	.+84     	; 0x1bf6 <__ultoa_invert+0x5c>
    1ba2:	20 31       	cpi	r18, 0x10	; 16
    1ba4:	81 f1       	breq	.+96     	; 0x1c06 <__ultoa_invert+0x6c>
    1ba6:	e8 94       	clt
    1ba8:	6f 93       	push	r22
    1baa:	6e 7f       	andi	r22, 0xFE	; 254
    1bac:	6e 5f       	subi	r22, 0xFE	; 254
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	af 4f       	sbci	r26, 0xFF	; 255
    1bb6:	b1 e0       	ldi	r27, 0x01	; 1
    1bb8:	3e d0       	rcall	.+124    	; 0x1c36 <__ultoa_invert+0x9c>
    1bba:	b4 e0       	ldi	r27, 0x04	; 4
    1bbc:	3c d0       	rcall	.+120    	; 0x1c36 <__ultoa_invert+0x9c>
    1bbe:	67 0f       	add	r22, r23
    1bc0:	78 1f       	adc	r23, r24
    1bc2:	89 1f       	adc	r24, r25
    1bc4:	9a 1f       	adc	r25, r26
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	68 0f       	add	r22, r24
    1bca:	79 1f       	adc	r23, r25
    1bcc:	8a 1f       	adc	r24, r26
    1bce:	91 1d       	adc	r25, r1
    1bd0:	a1 1d       	adc	r26, r1
    1bd2:	6a 0f       	add	r22, r26
    1bd4:	71 1d       	adc	r23, r1
    1bd6:	81 1d       	adc	r24, r1
    1bd8:	91 1d       	adc	r25, r1
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	20 d0       	rcall	.+64     	; 0x1c1e <__ultoa_invert+0x84>
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <__ultoa_invert+0x48>
    1be0:	68 94       	set
    1be2:	3f 91       	pop	r19
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	26 9f       	mul	r18, r22
    1be8:	11 24       	eor	r1, r1
    1bea:	30 19       	sub	r19, r0
    1bec:	30 5d       	subi	r19, 0xD0	; 208
    1bee:	31 93       	st	Z+, r19
    1bf0:	de f6       	brtc	.-74     	; 0x1ba8 <__ultoa_invert+0xe>
    1bf2:	cf 01       	movw	r24, r30
    1bf4:	08 95       	ret
    1bf6:	46 2f       	mov	r20, r22
    1bf8:	47 70       	andi	r20, 0x07	; 7
    1bfa:	40 5d       	subi	r20, 0xD0	; 208
    1bfc:	41 93       	st	Z+, r20
    1bfe:	b3 e0       	ldi	r27, 0x03	; 3
    1c00:	0f d0       	rcall	.+30     	; 0x1c20 <__ultoa_invert+0x86>
    1c02:	c9 f7       	brne	.-14     	; 0x1bf6 <__ultoa_invert+0x5c>
    1c04:	f6 cf       	rjmp	.-20     	; 0x1bf2 <__ultoa_invert+0x58>
    1c06:	46 2f       	mov	r20, r22
    1c08:	4f 70       	andi	r20, 0x0F	; 15
    1c0a:	40 5d       	subi	r20, 0xD0	; 208
    1c0c:	4a 33       	cpi	r20, 0x3A	; 58
    1c0e:	18 f0       	brcs	.+6      	; 0x1c16 <__ultoa_invert+0x7c>
    1c10:	49 5d       	subi	r20, 0xD9	; 217
    1c12:	31 fd       	sbrc	r19, 1
    1c14:	40 52       	subi	r20, 0x20	; 32
    1c16:	41 93       	st	Z+, r20
    1c18:	02 d0       	rcall	.+4      	; 0x1c1e <__ultoa_invert+0x84>
    1c1a:	a9 f7       	brne	.-22     	; 0x1c06 <__ultoa_invert+0x6c>
    1c1c:	ea cf       	rjmp	.-44     	; 0x1bf2 <__ultoa_invert+0x58>
    1c1e:	b4 e0       	ldi	r27, 0x04	; 4
    1c20:	a6 95       	lsr	r26
    1c22:	97 95       	ror	r25
    1c24:	87 95       	ror	r24
    1c26:	77 95       	ror	r23
    1c28:	67 95       	ror	r22
    1c2a:	ba 95       	dec	r27
    1c2c:	c9 f7       	brne	.-14     	; 0x1c20 <__ultoa_invert+0x86>
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	61 05       	cpc	r22, r1
    1c32:	71 05       	cpc	r23, r1
    1c34:	08 95       	ret
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
    1c3a:	0a 2e       	mov	r0, r26
    1c3c:	06 94       	lsr	r0
    1c3e:	57 95       	ror	r21
    1c40:	47 95       	ror	r20
    1c42:	37 95       	ror	r19
    1c44:	27 95       	ror	r18
    1c46:	ba 95       	dec	r27
    1c48:	c9 f7       	brne	.-14     	; 0x1c3c <__ultoa_invert+0xa2>
    1c4a:	62 0f       	add	r22, r18
    1c4c:	73 1f       	adc	r23, r19
    1c4e:	84 1f       	adc	r24, r20
    1c50:	95 1f       	adc	r25, r21
    1c52:	a0 1d       	adc	r26, r0
    1c54:	08 95       	ret

00001c56 <__prologue_saves__>:
    1c56:	2f 92       	push	r2
    1c58:	3f 92       	push	r3
    1c5a:	4f 92       	push	r4
    1c5c:	5f 92       	push	r5
    1c5e:	6f 92       	push	r6
    1c60:	7f 92       	push	r7
    1c62:	8f 92       	push	r8
    1c64:	9f 92       	push	r9
    1c66:	af 92       	push	r10
    1c68:	bf 92       	push	r11
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	ca 1b       	sub	r28, r26
    1c80:	db 0b       	sbc	r29, r27
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	09 94       	ijmp

00001c8e <__epilogue_restores__>:
    1c8e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c90:	39 88       	ldd	r3, Y+17	; 0x11
    1c92:	48 88       	ldd	r4, Y+16	; 0x10
    1c94:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c96:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c98:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ca2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ca4:	df 80       	ldd	r13, Y+7	; 0x07
    1ca6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca8:	fd 80       	ldd	r15, Y+5	; 0x05
    1caa:	0c 81       	ldd	r16, Y+4	; 0x04
    1cac:	1b 81       	ldd	r17, Y+3	; 0x03
    1cae:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb2:	ce 0f       	add	r28, r30
    1cb4:	d1 1d       	adc	r29, r1
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	ed 01       	movw	r28, r26
    1cc2:	08 95       	ret

00001cc4 <_exit>:
    1cc4:	f8 94       	cli

00001cc6 <__stop_program>:
    1cc6:	ff cf       	rjmp	.-2      	; 0x1cc6 <__stop_program>
