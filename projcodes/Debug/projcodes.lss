
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  00002054  000020e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008001f4  008001f4  0000227c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a67  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001770  00000000  00000000  00006153  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002778  00000000  00000000  000078c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  0000a03c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a35  00000000  00000000  0000a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e32  00000000  00000000  0000b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000d027  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__stack+0x14f>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <Lcd_Prints+0x1e>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <Keypad_GetRow+0x1a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <Error_ErrorNum+0x28>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< HEAD
     160:	e4 e5       	ldi	r30, 0x54	; 84
=======
     160:	ea e1       	ldi	r30, 0x1A	; 26
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     162:	f0 e2       	ldi	r31, 0x20	; 32
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a4 3f       	cpi	r26, 0xF4	; 244
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	22 e0       	ldi	r18, 0x02	; 2
     172:	a4 ef       	ldi	r26, 0xF4	; 244
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 34       	cpi	r26, 0x4C	; 76
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 38 07 	call	0xe70	; 0xe70 <main>
<<<<<<< HEAD
     184:	0c 94 28 10 	jmp	0x2050	; 0x2050 <_exit>
=======
     184:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <_exit>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
     18c:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
     190:	08 95       	ret

00000192 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	2a 97       	sbiw	r28, 0x0a	; 10
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	16 2f       	mov	r17, r22
     1ac:	07 2f       	mov	r16, r23
	HC05_SendString(text);
     1ae:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	8b e6       	ldi	r24, 0x6B	; 107
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	9f 93       	push	r25
     1bc:	8f 93       	push	r24
     1be:	8e 01       	movw	r16, r28
     1c0:	0f 5f       	subi	r16, 0xFF	; 255
     1c2:	1f 4f       	sbci	r17, 0xFF	; 255
     1c4:	1f 93       	push	r17
     1c6:	0f 93       	push	r16
<<<<<<< HEAD
     1c8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <sprintf>
=======
     1c8:	0e 94 ef 0a 	call	0x15de	; 0x15de <sprintf>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
	HC05_SendString(temp);
     1cc:	c8 01       	movw	r24, r16
     1ce:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	HC05_SendString("\r\n");
     1d2:	82 e7       	ldi	r24, 0x72	; 114
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
}
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	2a 96       	adiw	r28, 0x0a	; 10
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	2a 97       	sbiw	r28, 0x0a	; 10
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     216:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
     21a:	fe 01       	movw	r30, r28
     21c:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     222:	c8 01       	movw	r24, r16
     224:	02 2e       	mov	r0, r18
     226:	02 c0       	rjmp	.+4      	; 0x22c <Error_ErrorBin+0x30>
     228:	95 95       	asr	r25
     22a:	87 95       	ror	r24
     22c:	0a 94       	dec	r0
     22e:	e2 f7       	brpl	.-8      	; 0x228 <Error_ErrorBin+0x2c>
     230:	81 70       	andi	r24, 0x01	; 1
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     236:	2f 5f       	subi	r18, 0xFF	; 255
     238:	3f 4f       	sbci	r19, 0xFF	; 255
     23a:	28 30       	cpi	r18, 0x08	; 8
     23c:	31 05       	cpc	r19, r1
     23e:	89 f7       	brne	.-30     	; 0x222 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     240:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	HC05_SendString("\r\n");
     24a:	82 e7       	ldi	r24, 0x72	; 114
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
     252:	2a 96       	adiw	r28, 0x0a	; 10
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	8b b9       	out	0x0b, r24	; 11
     26c:	88 e1       	ldi	r24, 0x18	; 24
     26e:	8a b9       	out	0x0a, r24	; 10
     270:	86 e8       	ldi	r24, 0x86	; 134
     272:	80 bd       	out	0x20, r24	; 32
     274:	8c e0       	ldi	r24, 0x0C	; 12
     276:	89 b9       	out	0x09, r24	; 9
     278:	10 bc       	out	0x20, r1	; 32
     27a:	08 95       	ret

0000027c <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     27c:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     27e:	5d 9b       	sbis	0x0b, 5	; 11
     280:	fe cf       	rjmp	.-4      	; 0x27e <HC05_SendChar+0x2>
}
     282:	08 95       	ret

00000284 <HC05_SendString>:
void HC05_SendString(char * s)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
	while(*s)
     28a:	88 81       	ld	r24, Y
     28c:	88 23       	and	r24, r24
     28e:	31 f0       	breq	.+12     	; 0x29c <HC05_SendString+0x18>
     290:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     292:	0e 94 3e 01 	call	0x27c	; 0x27c <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     296:	89 91       	ld	r24, Y+
     298:	81 11       	cpse	r24, r1
     29a:	fb cf       	rjmp	.-10     	; 0x292 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     2a2:	8a b3       	in	r24, 0x1a	; 26
     2a4:	83 70       	andi	r24, 0x03	; 3
     2a6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     2ac:	88 bb       	out	0x18, r24	; 24
     2ae:	08 95       	ret

000002b0 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     2b0:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <isNumber>
	isUpperCase = false;
     2b4:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <isUpperCase>
	position = 0;
     2b8:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__data_end+0x1>
     2bc:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
	keyBuffer[position] = 0;
     2c0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <keyBuffer>
     2c4:	08 95       	ret

000002c6 <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	59 f4       	brne	.+22     	; 0x2e0 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     2ca:	85 e7       	ldi	r24, 0x75	; 117
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
		position = 0;
     2d2:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__data_end+0x1>
     2d6:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
		keyBuffer[position]=0;
     2da:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <keyBuffer>
     2de:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     2e0:	fc 01       	movw	r30, r24
     2e2:	01 90       	ld	r0, Z+
     2e4:	00 20       	and	r0, r0
     2e6:	e9 f7       	brne	.-6      	; 0x2e2 <Keypad_WriteToBuffer+0x1c>
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	e8 1b       	sub	r30, r24
     2ec:	f9 0b       	sbc	r31, r25
     2ee:	e0 31       	cpi	r30, 0x10	; 16
     2f0:	f1 05       	cpc	r31, r1
     2f2:	28 f5       	brcc	.+74     	; 0x33e <Keypad_WriteToBuffer+0x78>
     2f4:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     2f6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__data_end+0x1>
     2fa:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
     2fe:	1e 16       	cp	r1, r30
     300:	1f 06       	cpc	r1, r31
     302:	b4 f4       	brge	.+44     	; 0x330 <Keypad_WriteToBuffer+0x6a>
     304:	fc 01       	movw	r30, r24
     306:	aa ef       	ldi	r26, 0xFA	; 250
     308:	b1 e0       	ldi	r27, 0x01	; 1
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     30e:	81 91       	ld	r24, Z+
     310:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     312:	2f 5f       	subi	r18, 0xFF	; 255
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <__data_end+0x1>
     31a:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <__data_end>
     31e:	24 17       	cp	r18, r20
     320:	35 07       	cpc	r19, r21
     322:	ac f3       	brlt	.-22     	; 0x30e <Keypad_WriteToBuffer+0x48>
     324:	14 16       	cp	r1, r20
     326:	15 06       	cpc	r1, r21
     328:	2c f0       	brlt	.+10     	; 0x334 <Keypad_WriteToBuffer+0x6e>
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <Keypad_WriteToBuffer+0x6e>
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     334:	fa 01       	movw	r30, r20
     336:	e6 50       	subi	r30, 0x06	; 6
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	10 82       	st	Z, r1
	}
}
     33c:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     33e:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__data_end+0x1>
     342:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     346:	40 e1       	ldi	r20, 0x10	; 16
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	dc cf       	rjmp	.-72     	; 0x304 <Keypad_WriteToBuffer+0x3e>

0000034c <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <isNumber>
     352:	08 95       	ret

00000354 <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     354:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <isNumber>
     358:	81 11       	cpse	r24, r1
     35a:	07 c0       	rjmp	.+14     	; 0x36a <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     35c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <isUpperCase>
     360:	81 11       	cpse	r24, r1
     362:	06 c0       	rjmp	.+12     	; 0x370 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     364:	8d e8       	ldi	r24, 0x8D	; 141
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     36a:	85 e8       	ldi	r24, 0x85	; 133
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     370:	89 e8       	ldi	r24, 0x89	; 137
     372:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     374:	08 95       	ret

00000376 <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     37a:	0e 94 aa 01 	call	0x354	; 0x354 <Keypad_GetMode>
     37e:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     380:	fc 01       	movw	r30, r24
     382:	01 90       	ld	r0, Z+
     384:	00 20       	and	r0, r0
     386:	e9 f7       	brne	.-6      	; 0x382 <Keypad_UpdateKeyMode+0xc>
     388:	ac 01       	movw	r20, r24
     38a:	4e 1b       	sub	r20, r30
     38c:	5f 0b       	sbc	r21, r31
     38e:	4f 5e       	subi	r20, 0xEF	; 239
     390:	5f 4f       	sbci	r21, 0xFF	; 255
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     39c:	be 01       	movw	r22, r28
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     3aa:	89 b3       	in	r24, 0x19	; 25
}
     3ac:	82 95       	swap	r24
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	08 95       	ret

000003b2 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
	int pin = PINA >> 4;
     3b8:	c9 b3       	in	r28, 0x19	; 25
     3ba:	c2 95       	swap	r28
     3bc:	cf 70       	andi	r28, 0x0F	; 15
     3be:	0c 2f       	mov	r16, r28
     3c0:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     3c2:	b8 01       	movw	r22, r16
     3c4:	81 e9       	ldi	r24, 0x91	; 145
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     3cc:	c0 fd       	sbrc	r28, 0
     3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <Keypad_GetRow+0x36>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	98 01       	movw	r18, r16
     3d6:	08 2e       	mov	r0, r24
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <Keypad_GetRow+0x2c>
     3da:	35 95       	asr	r19
     3dc:	27 95       	ror	r18
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <Keypad_GetRow+0x28>
     3e2:	20 ff       	sbrs	r18, 0
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <Keypad_GetRow+0x3c>
     3e6:	0c c0       	rjmp	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     3ec:	09 c0       	rjmp	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	84 30       	cpi	r24, 0x04	; 4
     3f2:	91 05       	cpc	r25, r1
     3f4:	79 f7       	brne	.-34     	; 0x3d4 <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     3f6:	8a e9       	ldi	r24, 0x9A	; 154
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	return -1;
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
}
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
	int i = 7;
     410:	c7 e0       	ldi	r28, 0x07	; 7
     412:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     414:	01 e0       	ldi	r16, 0x01	; 1
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	28 b3       	in	r18, 0x18	; 24
     41a:	c8 01       	movw	r24, r16
     41c:	0c 2e       	mov	r0, r28
     41e:	02 c0       	rjmp	.+4      	; 0x424 <Keypad_GetCol+0x1c>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	0a 94       	dec	r0
     426:	e2 f7       	brpl	.-8      	; 0x420 <Keypad_GetCol+0x18>
     428:	82 27       	eor	r24, r18
     42a:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     42c:	66 b3       	in	r22, 0x16	; 22
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	88 ea       	ldi	r24, 0xA8	; 168
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     438:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     43a:	82 95       	swap	r24
     43c:	8f 70       	andi	r24, 0x0F	; 15
     43e:	11 f4       	brne	.+4      	; 0x444 <Keypad_GetCol+0x3c>
		{
			return i;
     440:	8c 2f       	mov	r24, r28
     442:	07 c0       	rjmp	.+14     	; 0x452 <Keypad_GetCol+0x4a>
		}
		i--;
     444:	21 97       	sbiw	r28, 0x01	; 1
     446:	40 f7       	brcc	.-48     	; 0x418 <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     448:	8e ea       	ldi	r24, 0xAE	; 174
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	// report error
	return -1;
     450:	8f ef       	ldi	r24, 0xFF	; 255
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     45c:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <__data_end>
     460:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <__data_end+0x1>
     464:	f9 01       	movw	r30, r18
     466:	e6 50       	subi	r30, 0x06	; 6
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	80 83       	st	Z, r24
	if(position < 16)
     46c:	20 31       	cpi	r18, 0x10	; 16
     46e:	31 05       	cpc	r19, r1
     470:	34 f4       	brge	.+12     	; 0x47e <addChar+0x22>
		position = position +1;
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <__data_end+0x1>
     47a:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <__data_end>
	keyBuffer[position] = 0;
     47e:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <__data_end>
     482:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <__data_end+0x1>
     486:	e6 50       	subi	r30, 0x06	; 6
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	10 82       	st	Z, r1
     48c:	08 95       	ret

0000048e <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     48e:	cf 93       	push	r28
     490:	c8 2f       	mov	r28, r24
	if(key >= 30)
     492:	8e 31       	cpi	r24, 0x1E	; 30
     494:	24 f0       	brlt	.+8      	; 0x49e <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     496:	8c eb       	ldi	r24, 0xBC	; 188
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	if(key == 29) 
     49e:	cd 31       	cpi	r28, 0x1D	; 29
     4a0:	99 f4       	brne	.+38     	; 0x4c8 <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     4a2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <__data_end>
     4a6:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <__data_end+0x1>
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	29 f0       	breq	.+10     	; 0x4b8 <Keypad_AddKey+0x2a>
			position--;
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <__data_end+0x1>
     4b4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <__data_end>
		keyBuffer[position] = 0;
     4b8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <__data_end>
     4bc:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <__data_end+0x1>
     4c0:	e6 50       	subi	r30, 0x06	; 6
     4c2:	fe 4f       	sbci	r31, 0xFE	; 254
     4c4:	10 82       	st	Z, r1
     4c6:	57 c0       	rjmp	.+174    	; 0x576 <Keypad_AddKey+0xe8>
	}
	else if(key == 28)
     4c8:	cc 31       	cpi	r28, 0x1C	; 28
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     4cc:	80 e2       	ldi	r24, 0x20	; 32
     4ce:	0e 94 2e 02 	call	0x45c	; 0x45c <addChar>
     4d2:	51 c0       	rjmp	.+162    	; 0x576 <Keypad_AddKey+0xe8>
	}
	else if(key == 27)
     4d4:	cb 31       	cpi	r28, 0x1B	; 27
     4d6:	39 f4       	brne	.+14     	; 0x4e6 <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     4d8:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <isNumber>
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	89 27       	eor	r24, r25
     4e0:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <isNumber>
     4e4:	48 c0       	rjmp	.+144    	; 0x576 <Keypad_AddKey+0xe8>
	}
	else if(isNumber) 
     4e6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <isNumber>
     4ea:	88 23       	and	r24, r24
     4ec:	e9 f0       	breq	.+58     	; 0x528 <Keypad_AddKey+0x9a>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     4ee:	9c 2f       	mov	r25, r28
     4f0:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     4f2:	93 30       	cpi	r25, 0x03	; 3
     4f4:	08 f0       	brcs	.+2      	; 0x4f8 <Keypad_AddKey+0x6a>
     4f6:	3f c0       	rjmp	.+126    	; 0x576 <Keypad_AddKey+0xe8>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     4f8:	c5 95       	asr	r28
     4fa:	c5 95       	asr	r28
     4fc:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     4fe:	c3 30       	cpi	r28, 0x03	; 3
     500:	38 f4       	brcc	.+14     	; 0x510 <Keypad_AddKey+0x82>
			c = '1' + row * 3 + col;
     502:	8c 2f       	mov	r24, r28
     504:	88 0f       	add	r24, r24
     506:	c8 0f       	add	r28, r24
     508:	81 e3       	ldi	r24, 0x31	; 49
     50a:	89 0f       	add	r24, r25
     50c:	8c 0f       	add	r24, r28
     50e:	09 c0       	rjmp	.+18     	; 0x522 <Keypad_AddKey+0x94>
		}
		else if(col == 0) {
     510:	99 23       	and	r25, r25
     512:	21 f0       	breq	.+8      	; 0x51c <Keypad_AddKey+0x8e>
			c = '*';
		}
		else if(col == 1) {
     514:	91 30       	cpi	r25, 0x01	; 1
     516:	21 f0       	breq	.+8      	; 0x520 <Keypad_AddKey+0x92>
			c = '0';
		}
		else  {
			c = '#';
     518:	83 e2       	ldi	r24, 0x23	; 35
     51a:	03 c0       	rjmp	.+6      	; 0x522 <Keypad_AddKey+0x94>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     51c:	8a e2       	ldi	r24, 0x2A	; 42
     51e:	01 c0       	rjmp	.+2      	; 0x522 <Keypad_AddKey+0x94>
		}
		else if(col == 1) {
			c = '0';
     520:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     522:	0e 94 2e 02 	call	0x45c	; 0x45c <addChar>
     526:	27 c0       	rjmp	.+78     	; 0x576 <Keypad_AddKey+0xe8>
		
	}
	else if(key == 26)
     528:	ca 31       	cpi	r28, 0x1A	; 26
     52a:	39 f4       	brne	.+14     	; 0x53a <Keypad_AddKey+0xac>
	{
		// capslock
		isUpperCase = !isUpperCase;
     52c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <isUpperCase>
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	89 27       	eor	r24, r25
     534:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <isUpperCase>
     538:	1e c0       	rjmp	.+60     	; 0x576 <Keypad_AddKey+0xe8>
	}
	else
	{
		// char
		char row = key >> 3;
     53a:	9c 2f       	mov	r25, r28
     53c:	95 95       	asr	r25
     53e:	95 95       	asr	r25
     540:	95 95       	asr	r25
		char col = key & 0b00000111;
     542:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     544:	93 30       	cpi	r25, 0x03	; 3
     546:	68 f4       	brcc	.+26     	; 0x562 <Keypad_AddKey+0xd4>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     548:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <isUpperCase>
     54c:	81 11       	cpse	r24, r1
     54e:	02 c0       	rjmp	.+4      	; 0x554 <Keypad_AddKey+0xc6>
     550:	81 e6       	ldi	r24, 0x61	; 97
     552:	01 c0       	rjmp	.+2      	; 0x556 <Keypad_AddKey+0xc8>
     554:	81 e4       	ldi	r24, 0x41	; 65
     556:	99 0f       	add	r25, r25
     558:	99 0f       	add	r25, r25
     55a:	99 0f       	add	r25, r25
     55c:	c9 0f       	add	r28, r25
     55e:	8c 0f       	add	r24, r28
     560:	08 c0       	rjmp	.+16     	; 0x572 <Keypad_AddKey+0xe4>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     562:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <isUpperCase>
     566:	81 11       	cpse	r24, r1
     568:	02 c0       	rjmp	.+4      	; 0x56e <Keypad_AddKey+0xe0>
     56a:	89 e7       	ldi	r24, 0x79	; 121
     56c:	01 c0       	rjmp	.+2      	; 0x570 <Keypad_AddKey+0xe2>
     56e:	89 e5       	ldi	r24, 0x59	; 89
     570:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     572:	0e 94 2e 02 	call	0x45c	; 0x45c <addChar>
	}
	return ;
}
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     57e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Keypad_GetRow>
     582:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     584:	0e 94 04 02 	call	0x408	; 0x408 <Keypad_GetCol>
     588:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     58a:	6c 2f       	mov	r22, r28
     58c:	0c 2e       	mov	r0, r28
     58e:	00 0c       	add	r0, r0
     590:	77 0b       	sbc	r23, r23
     592:	81 ed       	ldi	r24, 0xD1	; 209
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 c9 00 	call	0x192	; 0x192 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     59a:	6d 2f       	mov	r22, r29
     59c:	0d 2e       	mov	r0, r29
     59e:	00 0c       	add	r0, r0
     5a0:	77 0b       	sbc	r23, r23
     5a2:	85 ed       	ldi	r24, 0xD5	; 213
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 c9 00 	call	0x192	; 0x192 <Error_ErrorNum>
	return row * 8 + col;
     5aa:	8c 2f       	mov	r24, r28
     5ac:	88 0f       	add	r24, r24
     5ae:	88 0f       	add	r24, r24
     5b0:	88 0f       	add	r24, r24
     5b2:	8d 0f       	add	r24, r29
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     5ba:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <currentState>
     5be:	92 30       	cpi	r25, 0x02	; 2
     5c0:	89 f0       	breq	.+34     	; 0x5e4 <KeyProcessor_ProcessKey+0x2a>
     5c2:	2c f4       	brge	.+10     	; 0x5ce <KeyProcessor_ProcessKey+0x14>
     5c4:	99 23       	and	r25, r25
     5c6:	41 f0       	breq	.+16     	; 0x5d8 <KeyProcessor_ProcessKey+0x1e>
     5c8:	91 30       	cpi	r25, 0x01	; 1
     5ca:	49 f0       	breq	.+18     	; 0x5de <KeyProcessor_ProcessKey+0x24>
     5cc:	14 c0       	rjmp	.+40     	; 0x5f6 <KeyProcessor_ProcessKey+0x3c>
     5ce:	93 30       	cpi	r25, 0x03	; 3
     5d0:	61 f0       	breq	.+24     	; 0x5ea <KeyProcessor_ProcessKey+0x30>
     5d2:	94 30       	cpi	r25, 0x04	; 4
     5d4:	69 f0       	breq	.+26     	; 0x5f0 <KeyProcessor_ProcessKey+0x36>
     5d6:	0f c0       	rjmp	.+30     	; 0x5f6 <KeyProcessor_ProcessKey+0x3c>
	{
		case IDLE:
			Idle_ProcessKey(key);
<<<<<<< HEAD
     5d8:	0e 94 0c 09 	call	0x1218	; 0x1218 <Idle_ProcessKey>
=======
     5d8:	0e 94 ef 08 	call	0x11de	; 0x11de <Idle_ProcessKey>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
			break;
     5dc:	08 95       	ret
		case ENTERING_NAME :
		EnteringName_ProcessKey(key);
     5de:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <EnteringName_ProcessKey>
		break;
     5e2:	08 95       	ret
		case ENTERING_AGE :
		EnteringAge_ProcessKey(key);
     5e4:	0e 94 8a 07 	call	0xf14	; 0xf14 <EnteringAge_ProcessKey>
		break;
     5e8:	08 95       	ret
		case ENTERING_PHONE :
		EnteringPhone_ProcessKey(key);
     5ea:	0e 94 16 08 	call	0x102c	; 0x102c <EnteringPhone_ProcessKey>
		break;
     5ee:	08 95       	ret
		case GENERATE_SERIAL :
		GenerateSerial_ProcessKey(key);
<<<<<<< HEAD
     5f0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GenerateSerial_ProcessKey>
=======
     5f0:	0e 94 44 08 	call	0x1088	; 0x1088 <GenerateSerial_ProcessKey>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
		break;
     5f4:	08 95       	ret
		//case STORE_RECORD :
		//Store_ProcessKey(key);
		//break;
		default:
		Error_Error("ProcessKey: Undefined Current State");
     5f6:	89 ed       	ldi	r24, 0xD9	; 217
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     5fe:	08 95       	ret

00000600 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     600:	88 23       	and	r24, r24
     602:	19 f0       	breq	.+6      	; 0x60a <Lcd_Init+0xa>
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	39 f0       	breq	.+14     	; 0x616 <Lcd_Init+0x16>
     608:	24 c0       	rjmp	.+72     	; 0x652 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     60a:	81 b3       	in	r24, 0x11	; 17
     60c:	8c 6f       	ori	r24, 0xFC	; 252
     60e:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     610:	0e 94 6e 05 	call	0xadc	; 0xadc <Lcd4_Init>
			break;
     614:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	0e 94 c3 06 	call	0xd86	; 0xd86 <lcd_init>
			lcd_backlight(0);
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 34 07 	call	0xe68	; 0xe68 <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     622:	2f e9       	ldi	r18, 0x9F	; 159
     624:	86 e8       	ldi	r24, 0x86	; 134
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	80 40       	sbci	r24, 0x00	; 0
     62c:	90 40       	sbci	r25, 0x00	; 0
     62e:	e1 f7       	brne	.-8      	; 0x628 <Lcd_Init+0x28>
     630:	00 c0       	rjmp	.+0      	; 0x632 <Lcd_Init+0x32>
     632:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 34 07 	call	0xe68	; 0xe68 <lcd_backlight>
     63a:	2f e9       	ldi	r18, 0x9F	; 159
     63c:	86 e8       	ldi	r24, 0x86	; 134
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	21 50       	subi	r18, 0x01	; 1
     642:	80 40       	sbci	r24, 0x00	; 0
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <Lcd_Init+0x40>
     648:	00 c0       	rjmp	.+0      	; 0x64a <Lcd_Init+0x4a>
     64a:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     64c:	0e 94 82 06 	call	0xd04	; 0xd04 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     650:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     652:	8d ef       	ldi	r24, 0xFD	; 253
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     65a:	08 95       	ret

0000065c <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     65c:	88 23       	and	r24, r24
     65e:	19 f0       	breq	.+6      	; 0x666 <Lcd_ClearScreen+0xa>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	21 f0       	breq	.+8      	; 0x66c <Lcd_ClearScreen+0x10>
     664:	06 c0       	rjmp	.+12     	; 0x672 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     666:	0e 94 4a 05 	call	0xa94	; 0xa94 <Lcd4_Clear>
			break;
     66a:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     66c:	0e 94 82 06 	call	0xd04	; 0xd04 <lcd_clrscr>
			break;
     670:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     672:	8c e1       	ldi	r24, 0x1C	; 28
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     67a:	08 95       	ret

0000067c <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     67c:	88 23       	and	r24, r24
     67e:	19 f0       	breq	.+6      	; 0x686 <Lcd_Prints+0xa>
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	29 f0       	breq	.+10     	; 0x68e <Lcd_Prints+0x12>
     684:	08 c0       	rjmp	.+16     	; 0x696 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     686:	cb 01       	movw	r24, r22
     688:	0e 94 e7 05 	call	0xbce	; 0xbce <Lcd4_Write_String>
			break;
     68c:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     68e:	cb 01       	movw	r24, r22
     690:	0e 94 b4 06 	call	0xd68	; 0xd68 <lcd_puts>
			break;
     694:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     696:	8c e1       	ldi	r24, 0x1C	; 28
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     69e:	08 95       	ret

000006a0 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     6a0:	96 2f       	mov	r25, r22
	switch(lcdType)
     6a2:	88 23       	and	r24, r24
     6a4:	19 f0       	breq	.+6      	; 0x6ac <Lcd_Position+0xc>
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	31 f0       	breq	.+12     	; 0x6b6 <Lcd_Position+0x16>
     6aa:	09 c0       	rjmp	.+18     	; 0x6be <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     6ac:	64 2f       	mov	r22, r20
     6ae:	89 2f       	mov	r24, r25
     6b0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <Lcd4_Set_Cursor>
		break;
     6b4:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     6b6:	84 2f       	mov	r24, r20
     6b8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <lcd_gotoxy>
		break;
     6bc:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     6be:	83 e4       	ldi	r24, 0x43	; 67
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
     6c6:	08 95       	ret

000006c8 <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <Lcd_Printc+0x6>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     6d2:	69 83       	std	Y+1, r22	; 0x01
     6d4:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     6d6:	be 01       	movw	r22, r28
     6d8:	6f 5f       	subi	r22, 0xFF	; 255
     6da:	7f 4f       	sbci	r23, 0xFF	; 255
     6dc:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	f8 2e       	mov	r15, r24
     6f6:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	int i =0;
	while (str[i])
     700:	68 81       	ld	r22, Y
     702:	66 23       	and	r22, r22
     704:	91 f0       	breq	.+36     	; 0x72a <Lcd_PrintLine+0x40>
     706:	8e 01       	movw	r16, r28
     708:	0f 5f       	subi	r16, 0xFF	; 255
     70a:	1f 4f       	sbci	r17, 0xFF	; 255
     70c:	c0 e0       	ldi	r28, 0x00	; 0
     70e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     710:	21 96       	adiw	r28, 0x01	; 1
     712:	8f 2d       	mov	r24, r15
     714:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     718:	f8 01       	movw	r30, r16
     71a:	61 91       	ld	r22, Z+
     71c:	8f 01       	movw	r16, r30
     71e:	61 11       	cpse	r22, r1
     720:	f7 cf       	rjmp	.-18     	; 0x710 <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     722:	c0 31       	cpi	r28, 0x10	; 16
     724:	d1 05       	cpc	r29, r1
     726:	1c f0       	brlt	.+6      	; 0x72e <Lcd_PrintLine+0x44>
     728:	0a c0       	rjmp	.+20     	; 0x73e <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     72a:	c0 e0       	ldi	r28, 0x00	; 0
     72c:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     72e:	60 e2       	ldi	r22, 0x20	; 32
     730:	8f 2d       	mov	r24, r15
     732:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd_Printc>
     736:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     738:	c0 31       	cpi	r28, 0x10	; 16
     73a:	d1 05       	cpc	r29, r1
     73c:	c4 f3       	brlt	.-16     	; 0x72e <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	08 95       	ret

0000074a <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     74a:	67 2b       	or	r22, r23
     74c:	09 f0       	breq	.+2      	; 0x750 <pinChange+0x6>
     74e:	9f c0       	rjmp	.+318    	; 0x88e <__stack+0x2f>
	{
		if(a == eS_PORTA0)
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	11 f4       	brne	.+4      	; 0x758 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     754:	d8 98       	cbi	0x1b, 0	; 27
     756:	08 95       	ret
		else if(a == eS_PORTA1)
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	91 05       	cpc	r25, r1
     75c:	11 f4       	brne	.+4      	; 0x762 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     75e:	d9 98       	cbi	0x1b, 1	; 27
     760:	08 95       	ret
		else if(a == eS_PORTA2)
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	91 05       	cpc	r25, r1
     766:	11 f4       	brne	.+4      	; 0x76c <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     768:	da 98       	cbi	0x1b, 2	; 27
     76a:	08 95       	ret
		else if(a == eS_PORTA3)
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	91 05       	cpc	r25, r1
     770:	11 f4       	brne	.+4      	; 0x776 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     772:	db 98       	cbi	0x1b, 3	; 27
     774:	08 95       	ret
		else if(a == eS_PORTA4)
     776:	84 30       	cpi	r24, 0x04	; 4
     778:	91 05       	cpc	r25, r1
     77a:	11 f4       	brne	.+4      	; 0x780 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     77c:	dc 98       	cbi	0x1b, 4	; 27
     77e:	08 95       	ret
		else if(a == eS_PORTA5)
     780:	85 30       	cpi	r24, 0x05	; 5
     782:	91 05       	cpc	r25, r1
     784:	11 f4       	brne	.+4      	; 0x78a <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     786:	dd 98       	cbi	0x1b, 5	; 27
     788:	08 95       	ret
		else if(a == eS_PORTA6)
     78a:	86 30       	cpi	r24, 0x06	; 6
     78c:	91 05       	cpc	r25, r1
     78e:	11 f4       	brne	.+4      	; 0x794 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     790:	de 98       	cbi	0x1b, 6	; 27
     792:	08 95       	ret
		else if(a == eS_PORTA7)
     794:	87 30       	cpi	r24, 0x07	; 7
     796:	91 05       	cpc	r25, r1
     798:	11 f4       	brne	.+4      	; 0x79e <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     79a:	df 98       	cbi	0x1b, 7	; 27
     79c:	08 95       	ret
		else if(a == eS_PORTB0)
     79e:	8a 30       	cpi	r24, 0x0A	; 10
     7a0:	91 05       	cpc	r25, r1
     7a2:	11 f4       	brne	.+4      	; 0x7a8 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     7a4:	c0 98       	cbi	0x18, 0	; 24
     7a6:	08 95       	ret
		else if(a == eS_PORTB1)
     7a8:	8b 30       	cpi	r24, 0x0B	; 11
     7aa:	91 05       	cpc	r25, r1
     7ac:	11 f4       	brne	.+4      	; 0x7b2 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     7ae:	c1 98       	cbi	0x18, 1	; 24
     7b0:	08 95       	ret
		else if(a == eS_PORTB2)
     7b2:	8c 30       	cpi	r24, 0x0C	; 12
     7b4:	91 05       	cpc	r25, r1
     7b6:	11 f4       	brne	.+4      	; 0x7bc <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     7b8:	c2 98       	cbi	0x18, 2	; 24
     7ba:	08 95       	ret
		else if(a == eS_PORTB3)
     7bc:	8d 30       	cpi	r24, 0x0D	; 13
     7be:	91 05       	cpc	r25, r1
     7c0:	11 f4       	brne	.+4      	; 0x7c6 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     7c2:	c3 98       	cbi	0x18, 3	; 24
     7c4:	08 95       	ret
		else if(a == eS_PORTB4)
     7c6:	8e 30       	cpi	r24, 0x0E	; 14
     7c8:	91 05       	cpc	r25, r1
     7ca:	11 f4       	brne	.+4      	; 0x7d0 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     7cc:	c4 98       	cbi	0x18, 4	; 24
     7ce:	08 95       	ret
		else if(a == eS_PORTB5)
     7d0:	8f 30       	cpi	r24, 0x0F	; 15
     7d2:	91 05       	cpc	r25, r1
     7d4:	11 f4       	brne	.+4      	; 0x7da <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     7d6:	c5 98       	cbi	0x18, 5	; 24
     7d8:	08 95       	ret
		else if(a == eS_PORTB6)
     7da:	80 31       	cpi	r24, 0x10	; 16
     7dc:	91 05       	cpc	r25, r1
     7de:	11 f4       	brne	.+4      	; 0x7e4 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     7e0:	c6 98       	cbi	0x18, 6	; 24
     7e2:	08 95       	ret
		else if(a == eS_PORTB7)
     7e4:	81 31       	cpi	r24, 0x11	; 17
     7e6:	91 05       	cpc	r25, r1
     7e8:	11 f4       	brne	.+4      	; 0x7ee <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     7ea:	c7 98       	cbi	0x18, 7	; 24
     7ec:	08 95       	ret
		else if(a == eS_PORTC0)
     7ee:	84 31       	cpi	r24, 0x14	; 20
     7f0:	91 05       	cpc	r25, r1
     7f2:	11 f4       	brne	.+4      	; 0x7f8 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     7f4:	a8 98       	cbi	0x15, 0	; 21
     7f6:	08 95       	ret
		else if(a == eS_PORTC1)
     7f8:	85 31       	cpi	r24, 0x15	; 21
     7fa:	91 05       	cpc	r25, r1
     7fc:	11 f4       	brne	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		PORTC &= ~(1<<PC1);
     7fe:	a9 98       	cbi	0x15, 1	; 21
     800:	08 95       	ret
		else if(a == eS_PORTC2)
     802:	86 31       	cpi	r24, 0x16	; 22
     804:	91 05       	cpc	r25, r1
     806:	11 f4       	brne	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		PORTC &= ~(1<<PC2);
     808:	aa 98       	cbi	0x15, 2	; 21
     80a:	08 95       	ret
		else if(a == eS_PORTC3)
     80c:	87 31       	cpi	r24, 0x17	; 23
     80e:	91 05       	cpc	r25, r1
     810:	11 f4       	brne	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		PORTC &= ~(1<<PC3);
     812:	ab 98       	cbi	0x15, 3	; 21
     814:	08 95       	ret
		else if(a == eS_PORTC4)
     816:	88 31       	cpi	r24, 0x18	; 24
     818:	91 05       	cpc	r25, r1
     81a:	11 f4       	brne	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		PORTC &= ~(1<<PC4);
     81c:	ac 98       	cbi	0x15, 4	; 21
     81e:	08 95       	ret
		else if(a == eS_PORTC5)
     820:	89 31       	cpi	r24, 0x19	; 25
     822:	91 05       	cpc	r25, r1
     824:	11 f4       	brne	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		PORTC &= ~(1<<PC5);
     826:	ad 98       	cbi	0x15, 5	; 21
     828:	08 95       	ret
		else if(a == eS_PORTC6)
     82a:	8a 31       	cpi	r24, 0x1A	; 26
     82c:	91 05       	cpc	r25, r1
     82e:	11 f4       	brne	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		PORTC &= ~(1<<PC6);
     830:	ae 98       	cbi	0x15, 6	; 21
     832:	08 95       	ret
		else if(a == eS_PORTC7)
     834:	8b 31       	cpi	r24, 0x1B	; 27
     836:	91 05       	cpc	r25, r1
     838:	11 f4       	brne	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		PORTC &= ~(1<<PC7);
     83a:	af 98       	cbi	0x15, 7	; 21
     83c:	08 95       	ret
		else if(a == eS_PORTD0)
     83e:	8e 31       	cpi	r24, 0x1E	; 30
     840:	91 05       	cpc	r25, r1
     842:	11 f4       	brne	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		PORTD &= ~(1<<PD0);
     844:	90 98       	cbi	0x12, 0	; 18
     846:	08 95       	ret
		else if(a == eS_PORTD1)
     848:	8f 31       	cpi	r24, 0x1F	; 31
     84a:	91 05       	cpc	r25, r1
     84c:	11 f4       	brne	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		PORTD &= ~(1<<PD1);
     84e:	91 98       	cbi	0x12, 1	; 18
     850:	08 95       	ret
		else if(a == eS_PORTD2)
     852:	80 32       	cpi	r24, 0x20	; 32
     854:	91 05       	cpc	r25, r1
     856:	11 f4       	brne	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		PORTD &= ~(1<<PD2);
     858:	92 98       	cbi	0x12, 2	; 18
     85a:	08 95       	ret
		else if(a == eS_PORTD3)
     85c:	81 32       	cpi	r24, 0x21	; 33
     85e:	91 05       	cpc	r25, r1
     860:	11 f4       	brne	.+4      	; 0x866 <__stack+0x7>
		PORTD &= ~(1<<PD3);
     862:	93 98       	cbi	0x12, 3	; 18
     864:	08 95       	ret
		else if(a == eS_PORTD4)
     866:	82 32       	cpi	r24, 0x22	; 34
     868:	91 05       	cpc	r25, r1
     86a:	11 f4       	brne	.+4      	; 0x870 <__stack+0x11>
		PORTD &= ~(1<<PD4);
     86c:	94 98       	cbi	0x12, 4	; 18
     86e:	08 95       	ret
		else if(a == eS_PORTD5)
     870:	83 32       	cpi	r24, 0x23	; 35
     872:	91 05       	cpc	r25, r1
     874:	11 f4       	brne	.+4      	; 0x87a <__stack+0x1b>
		PORTD &= ~(1<<PD5);
     876:	95 98       	cbi	0x12, 5	; 18
     878:	08 95       	ret
		else if(a == eS_PORTD6)
     87a:	84 32       	cpi	r24, 0x24	; 36
     87c:	91 05       	cpc	r25, r1
     87e:	11 f4       	brne	.+4      	; 0x884 <__stack+0x25>
		PORTD &= ~(1<<PD6);
     880:	96 98       	cbi	0x12, 6	; 18
     882:	08 95       	ret
		else if(a == eS_PORTD7)
     884:	85 97       	sbiw	r24, 0x25	; 37
     886:	09 f0       	breq	.+2      	; 0x88a <__stack+0x2b>
     888:	9f c0       	rjmp	.+318    	; 0x9c8 <__stack+0x169>
		PORTD &= ~(1<<PD7);
     88a:	97 98       	cbi	0x12, 7	; 18
     88c:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	11 f4       	brne	.+4      	; 0x896 <__stack+0x37>
		PORTA |= (1<<PA0);
     892:	d8 9a       	sbi	0x1b, 0	; 27
     894:	08 95       	ret
		else if(a == eS_PORTA1)
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	91 05       	cpc	r25, r1
     89a:	11 f4       	brne	.+4      	; 0x8a0 <__stack+0x41>
		PORTA |= (1<<PA1);
     89c:	d9 9a       	sbi	0x1b, 1	; 27
     89e:	08 95       	ret
		else if(a == eS_PORTA2)
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	91 05       	cpc	r25, r1
     8a4:	11 f4       	brne	.+4      	; 0x8aa <__stack+0x4b>
		PORTA |= (1<<PA2);
     8a6:	da 9a       	sbi	0x1b, 2	; 27
     8a8:	08 95       	ret
		else if(a == eS_PORTA3)
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <__stack+0x55>
		PORTA |= (1<<PA3);
     8b0:	db 9a       	sbi	0x1b, 3	; 27
     8b2:	08 95       	ret
		else if(a == eS_PORTA4)
     8b4:	84 30       	cpi	r24, 0x04	; 4
     8b6:	91 05       	cpc	r25, r1
     8b8:	11 f4       	brne	.+4      	; 0x8be <__stack+0x5f>
		PORTA |= (1<<PA4);
     8ba:	dc 9a       	sbi	0x1b, 4	; 27
     8bc:	08 95       	ret
		else if(a == eS_PORTA5)
     8be:	85 30       	cpi	r24, 0x05	; 5
     8c0:	91 05       	cpc	r25, r1
     8c2:	11 f4       	brne	.+4      	; 0x8c8 <__stack+0x69>
		PORTA |= (1<<PA5);
     8c4:	dd 9a       	sbi	0x1b, 5	; 27
     8c6:	08 95       	ret
		else if(a == eS_PORTA6)
     8c8:	86 30       	cpi	r24, 0x06	; 6
     8ca:	91 05       	cpc	r25, r1
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <__stack+0x73>
		PORTA |= (1<<PA6);
     8ce:	de 9a       	sbi	0x1b, 6	; 27
     8d0:	08 95       	ret
		else if(a == eS_PORTA7)
     8d2:	87 30       	cpi	r24, 0x07	; 7
     8d4:	91 05       	cpc	r25, r1
     8d6:	11 f4       	brne	.+4      	; 0x8dc <__stack+0x7d>
		PORTA |= (1<<PA7);
     8d8:	df 9a       	sbi	0x1b, 7	; 27
     8da:	08 95       	ret
		else if(a == eS_PORTB0)
     8dc:	8a 30       	cpi	r24, 0x0A	; 10
     8de:	91 05       	cpc	r25, r1
     8e0:	11 f4       	brne	.+4      	; 0x8e6 <__stack+0x87>
		PORTB |= (1<<PB0);
     8e2:	c0 9a       	sbi	0x18, 0	; 24
     8e4:	08 95       	ret
		else if(a == eS_PORTB1)
     8e6:	8b 30       	cpi	r24, 0x0B	; 11
     8e8:	91 05       	cpc	r25, r1
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <__stack+0x91>
		PORTB |= (1<<PB1);
     8ec:	c1 9a       	sbi	0x18, 1	; 24
     8ee:	08 95       	ret
		else if(a == eS_PORTB2)
     8f0:	8c 30       	cpi	r24, 0x0C	; 12
     8f2:	91 05       	cpc	r25, r1
     8f4:	11 f4       	brne	.+4      	; 0x8fa <__stack+0x9b>
		PORTB |= (1<<PB2);
     8f6:	c2 9a       	sbi	0x18, 2	; 24
     8f8:	08 95       	ret
		else if(a == eS_PORTB3)
     8fa:	8d 30       	cpi	r24, 0x0D	; 13
     8fc:	91 05       	cpc	r25, r1
     8fe:	11 f4       	brne	.+4      	; 0x904 <__stack+0xa5>
		PORTB |= (1<<PB3);
     900:	c3 9a       	sbi	0x18, 3	; 24
     902:	08 95       	ret
		else if(a == eS_PORTB4)
     904:	8e 30       	cpi	r24, 0x0E	; 14
     906:	91 05       	cpc	r25, r1
     908:	11 f4       	brne	.+4      	; 0x90e <__stack+0xaf>
		PORTB |= (1<<PB4);
     90a:	c4 9a       	sbi	0x18, 4	; 24
     90c:	08 95       	ret
		else if(a == eS_PORTB5)
     90e:	8f 30       	cpi	r24, 0x0F	; 15
     910:	91 05       	cpc	r25, r1
     912:	11 f4       	brne	.+4      	; 0x918 <__stack+0xb9>
		PORTB |= (1<<PB5);
     914:	c5 9a       	sbi	0x18, 5	; 24
     916:	08 95       	ret
		else if(a == eS_PORTB6)
     918:	80 31       	cpi	r24, 0x10	; 16
     91a:	91 05       	cpc	r25, r1
     91c:	11 f4       	brne	.+4      	; 0x922 <__stack+0xc3>
		PORTB |= (1<<PB6);
     91e:	c6 9a       	sbi	0x18, 6	; 24
     920:	08 95       	ret
		else if(a == eS_PORTB7)
     922:	81 31       	cpi	r24, 0x11	; 17
     924:	91 05       	cpc	r25, r1
     926:	11 f4       	brne	.+4      	; 0x92c <__stack+0xcd>
		PORTB |= (1<<PB7);
     928:	c7 9a       	sbi	0x18, 7	; 24
     92a:	08 95       	ret
		else if(a == eS_PORTC0)
     92c:	84 31       	cpi	r24, 0x14	; 20
     92e:	91 05       	cpc	r25, r1
     930:	11 f4       	brne	.+4      	; 0x936 <__stack+0xd7>
		PORTC |= (1<<PC0);
     932:	a8 9a       	sbi	0x15, 0	; 21
     934:	08 95       	ret
		else if(a == eS_PORTC1)
     936:	85 31       	cpi	r24, 0x15	; 21
     938:	91 05       	cpc	r25, r1
     93a:	11 f4       	brne	.+4      	; 0x940 <__stack+0xe1>
		PORTC |= (1<<PC1);
     93c:	a9 9a       	sbi	0x15, 1	; 21
     93e:	08 95       	ret
		else if(a == eS_PORTC2)
     940:	86 31       	cpi	r24, 0x16	; 22
     942:	91 05       	cpc	r25, r1
     944:	11 f4       	brne	.+4      	; 0x94a <__stack+0xeb>
		PORTC |= (1<<PC2);
     946:	aa 9a       	sbi	0x15, 2	; 21
     948:	08 95       	ret
		else if(a == eS_PORTC3)
     94a:	87 31       	cpi	r24, 0x17	; 23
     94c:	91 05       	cpc	r25, r1
     94e:	11 f4       	brne	.+4      	; 0x954 <__stack+0xf5>
		PORTC |= (1<<PC3);
     950:	ab 9a       	sbi	0x15, 3	; 21
     952:	08 95       	ret
		else if(a == eS_PORTC4)
     954:	88 31       	cpi	r24, 0x18	; 24
     956:	91 05       	cpc	r25, r1
     958:	11 f4       	brne	.+4      	; 0x95e <__stack+0xff>
		PORTC |= (1<<PC4);
     95a:	ac 9a       	sbi	0x15, 4	; 21
     95c:	08 95       	ret
		else if(a == eS_PORTC5)
     95e:	89 31       	cpi	r24, 0x19	; 25
     960:	91 05       	cpc	r25, r1
     962:	11 f4       	brne	.+4      	; 0x968 <__stack+0x109>
		PORTC |= (1<<PC5);
     964:	ad 9a       	sbi	0x15, 5	; 21
     966:	08 95       	ret
		else if(a == eS_PORTC6)
     968:	8a 31       	cpi	r24, 0x1A	; 26
     96a:	91 05       	cpc	r25, r1
     96c:	11 f4       	brne	.+4      	; 0x972 <__stack+0x113>
		PORTC |= (1<<PC6);
     96e:	ae 9a       	sbi	0x15, 6	; 21
     970:	08 95       	ret
		else if(a == eS_PORTC7)
     972:	8b 31       	cpi	r24, 0x1B	; 27
     974:	91 05       	cpc	r25, r1
     976:	11 f4       	brne	.+4      	; 0x97c <__stack+0x11d>
		PORTC |= (1<<PC7);
     978:	af 9a       	sbi	0x15, 7	; 21
     97a:	08 95       	ret
		else if(a == eS_PORTD0)
     97c:	8e 31       	cpi	r24, 0x1E	; 30
     97e:	91 05       	cpc	r25, r1
     980:	11 f4       	brne	.+4      	; 0x986 <__stack+0x127>
		PORTD |= (1<<PD0);
     982:	90 9a       	sbi	0x12, 0	; 18
     984:	08 95       	ret
		else if(a == eS_PORTD1)
     986:	8f 31       	cpi	r24, 0x1F	; 31
     988:	91 05       	cpc	r25, r1
     98a:	11 f4       	brne	.+4      	; 0x990 <__stack+0x131>
		PORTD |= (1<<PD1);
     98c:	91 9a       	sbi	0x12, 1	; 18
     98e:	08 95       	ret
		else if(a == eS_PORTD2)
     990:	80 32       	cpi	r24, 0x20	; 32
     992:	91 05       	cpc	r25, r1
     994:	11 f4       	brne	.+4      	; 0x99a <__stack+0x13b>
		PORTD |= (1<<PD2);
     996:	92 9a       	sbi	0x12, 2	; 18
     998:	08 95       	ret
		else if(a == eS_PORTD3)
     99a:	81 32       	cpi	r24, 0x21	; 33
     99c:	91 05       	cpc	r25, r1
     99e:	11 f4       	brne	.+4      	; 0x9a4 <__stack+0x145>
		PORTD |= (1<<PD3);
     9a0:	93 9a       	sbi	0x12, 3	; 18
     9a2:	08 95       	ret
		else if(a == eS_PORTD4)
     9a4:	82 32       	cpi	r24, 0x22	; 34
     9a6:	91 05       	cpc	r25, r1
     9a8:	11 f4       	brne	.+4      	; 0x9ae <__stack+0x14f>
		PORTD |= (1<<PD4);
     9aa:	94 9a       	sbi	0x12, 4	; 18
     9ac:	08 95       	ret
		else if(a == eS_PORTD5)
     9ae:	83 32       	cpi	r24, 0x23	; 35
     9b0:	91 05       	cpc	r25, r1
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <__stack+0x159>
		PORTD |= (1<<PD5);
     9b4:	95 9a       	sbi	0x12, 5	; 18
     9b6:	08 95       	ret
		else if(a == eS_PORTD6)
     9b8:	84 32       	cpi	r24, 0x24	; 36
     9ba:	91 05       	cpc	r25, r1
     9bc:	11 f4       	brne	.+4      	; 0x9c2 <__stack+0x163>
		PORTD |= (1<<PD6);
     9be:	96 9a       	sbi	0x12, 6	; 18
     9c0:	08 95       	ret
		else if(a == eS_PORTD7)
     9c2:	85 97       	sbiw	r24, 0x25	; 37
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0x169>
		PORTD |= (1<<PD7);
     9c6:	97 9a       	sbi	0x12, 7	; 18
     9c8:	08 95       	ret

000009ca <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     9ca:	cf 93       	push	r28
     9cc:	c8 2f       	mov	r28, r24
	if(a & 1)
     9ce:	80 ff       	sbrs	r24, 0
     9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <Lcd4_Port+0x16>
	pinChange(D4,1);
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	83 e2       	ldi	r24, 0x23	; 35
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     9de:	06 c0       	rjmp	.+12     	; 0x9ec <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	83 e2       	ldi	r24, 0x23	; 35
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
	
	if(a & 2)
     9ec:	c1 ff       	sbrs	r28, 1
     9ee:	07 c0       	rjmp	.+14     	; 0x9fe <Lcd4_Port+0x34>
	pinChange(D5,1);
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	82 e2       	ldi	r24, 0x22	; 34
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     9fc:	06 c0       	rjmp	.+12     	; 0xa0a <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	82 e2       	ldi	r24, 0x22	; 34
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
	
	if(a & 4)
     a0a:	c2 ff       	sbrs	r28, 2
     a0c:	07 c0       	rjmp	.+14     	; 0xa1c <Lcd4_Port+0x52>
	pinChange(D6,1);
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	81 e2       	ldi	r24, 0x21	; 33
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     a1a:	06 c0       	rjmp	.+12     	; 0xa28 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	81 e2       	ldi	r24, 0x21	; 33
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
	
	if(a & 8)
     a28:	c3 ff       	sbrs	r28, 3
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <Lcd4_Port+0x70>
	pinChange(D7,1);
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	80 e2       	ldi	r24, 0x20	; 32
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
}
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     a4a:	cf 93       	push	r28
     a4c:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	85 e2       	ldi	r24, 0x25	; 37
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
	Lcd4_Port(a);
     a5a:	8c 2f       	mov	r24, r28
     a5c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	84 e2       	ldi	r24, 0x24	; 36
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     a6c:	89 ef       	ldi	r24, 0xF9	; 249
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <Lcd4_Cmd+0x26>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <Lcd4_Cmd+0x2c>
     a76:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	84 e2       	ldi	r24, 0x24	; 36
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     a84:	89 ef       	ldi	r24, 0xF9	; 249
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <Lcd4_Cmd+0x3e>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <Lcd4_Cmd+0x44>
     a8e:	00 00       	nop
	_delay_ms(1);
}
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(1);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
     aa0:	08 95       	ret

00000aa2 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     aa2:	cf 93       	push	r28
     aa4:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     aa6:	81 11       	cpse	r24, r1
     aa8:	0b c0       	rjmp	.+22     	; 0xac0 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     aaa:	80 e8       	ldi	r24, 0x80	; 128
     aac:	86 0f       	add	r24, r22
     aae:	82 95       	swap	r24
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
		Lcd4_Cmd(y);
     ab6:	8c 2f       	mov	r24, r28
     ab8:	8f 70       	andi	r24, 0x0F	; 15
     aba:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
     abe:	0c c0       	rjmp	.+24     	; 0xad8 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	51 f4       	brne	.+20     	; 0xad8 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     ac4:	80 ec       	ldi	r24, 0xC0	; 192
     ac6:	86 0f       	add	r24, r22
     ac8:	82 95       	swap	r24
     aca:	8f 70       	andi	r24, 0x0F	; 15
     acc:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
		Lcd4_Cmd(y);
     ad0:	8c 2f       	mov	r24, r28
     ad2:	8f 70       	andi	r24, 0x0F	; 15
     ad4:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	}
}
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Lcd4_Port>
     ae2:	87 e8       	ldi	r24, 0x87	; 135
     ae4:	93 e1       	ldi	r25, 0x13	; 19
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <Lcd4_Init+0xa>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <Lcd4_Init+0x10>
     aec:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
     af4:	81 ee       	ldi	r24, 0xE1	; 225
     af6:	94 e0       	ldi	r25, 0x04	; 4
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <Lcd4_Init+0x1c>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <Lcd4_Init+0x22>
     afe:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
     b06:	8d eb       	ldi	r24, 0xBD	; 189
     b08:	9a e0       	ldi	r25, 0x0A	; 10
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <Lcd4_Init+0x2e>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <Lcd4_Init+0x34>
     b10:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     b24:	88 e0       	ldi	r24, 0x08	; 8
     b26:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     b30:	8c e0       	ldi	r24, 0x0C	; 12
     b32:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	0e 94 25 05 	call	0xa4a	; 0xa4a <Lcd4_Cmd>
	Lcd4_Clear();
     b42:	0e 94 4a 05 	call	0xa94	; 0xa94 <Lcd4_Clear>
     b46:	08 95       	ret

00000b48 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     b48:	cf 93       	push	r28
     b4a:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	85 e2       	ldi	r24, 0x25	; 37
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     b58:	8c 2f       	mov	r24, r28
     b5a:	82 95       	swap	r24
     b5c:	8f 70       	andi	r24, 0x0F	; 15
     b5e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Lcd4_Port>
	pinChange(EN,1);
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	84 e2       	ldi	r24, 0x24	; 36
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     b6e:	89 ef       	ldi	r24, 0xF9	; 249
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	f1 f7       	brne	.-4      	; 0xb72 <Lcd4_Write_Char+0x2a>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <Lcd4_Write_Char+0x30>
     b78:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	84 e2       	ldi	r24, 0x24	; 36
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     b86:	89 ef       	ldi	r24, 0xF9	; 249
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <Lcd4_Write_Char+0x42>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <Lcd4_Write_Char+0x48>
     b90:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     b92:	8c 2f       	mov	r24, r28
     b94:	8f 70       	andi	r24, 0x0F	; 15
     b96:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Lcd4_Port>
	pinChange(EN,1);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	84 e2       	ldi	r24, 0x24	; 36
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     ba6:	89 ef       	ldi	r24, 0xF9	; 249
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <Lcd4_Write_Char+0x62>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <Lcd4_Write_Char+0x68>
     bb0:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 e2       	ldi	r24, 0x24	; 36
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 a5 03 	call	0x74a	; 0x74a <pinChange>
     bbe:	89 ef       	ldi	r24, 0xF9	; 249
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <Lcd4_Write_Char+0x7a>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <Lcd4_Write_Char+0x80>
     bc8:	00 00       	nop
	_delay_ms(1);
}
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     bd4:	88 81       	ld	r24, Y
     bd6:	88 23       	and	r24, r24
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <Lcd4_Write_String+0x18>
     bda:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     bdc:	0e 94 a4 05 	call	0xb48	; 0xb48 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     be0:	89 91       	ld	r24, Y+
     be2:	81 11       	cpse	r24, r1
     be4:	fb cf       	rjmp	.-10     	; 0xbdc <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	7b 01       	movw	r14, r22
     bfa:	14 2f       	mov	r17, r20
     bfc:	88 0f       	add	r24, r24
<<<<<<< HEAD
     bfe:	0e 94 56 09 	call	0x12ac	; 0x12ac <i2c_start>
=======
     bfe:	0e 94 39 09 	call	0x1272	; 0x1272 <i2c_start>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     c02:	81 11       	cpse	r24, r1
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <I2C_WRITESEQ+0x3e>
     c06:	11 23       	and	r17, r17
     c08:	91 f0       	breq	.+36     	; 0xc2e <I2C_WRITESEQ+0x42>
     c0a:	e7 01       	movw	r28, r14
     c0c:	11 50       	subi	r17, 0x01	; 1
     c0e:	01 2f       	mov	r16, r17
     c10:	10 e0       	ldi	r17, 0x00	; 0
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	0e 0d       	add	r16, r14
     c18:	1f 1d       	adc	r17, r15
     c1a:	89 91       	ld	r24, Y+
<<<<<<< HEAD
     c1c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <i2c_write>
=======
     c1c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <i2c_write>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     c20:	c0 17       	cp	r28, r16
     c22:	d1 07       	cpc	r29, r17
     c24:	d1 f7       	brne	.-12     	; 0xc1a <I2C_WRITESEQ+0x2e>
     c26:	c0 e0       	ldi	r28, 0x00	; 0
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <I2C_WRITESEQ+0x44>
     c2a:	c1 e0       	ldi	r28, 0x01	; 1
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <I2C_WRITESEQ+0x44>
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
<<<<<<< HEAD
     c30:	0e 94 74 09 	call	0x12e8	; 0x12e8 <i2c_stop>
=======
     c30:	0e 94 57 09 	call	0x12ae	; 0x12ae <i2c_stop>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     c34:	8c 2f       	mov	r24, r28
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <wr_lcd_mode>:
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <wr_lcd_mode+0xa>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <wr_lcd_mode+0xc>
     c50:	1f 92       	push	r1
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	08 2f       	mov	r16, r24
     c58:	68 30       	cpi	r22, 0x08	; 8
     c5a:	71 f4       	brne	.+28     	; 0xc78 <wr_lcd_mode+0x34>
     c5c:	81 11       	cpse	r24, r1
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <wr_lcd_mode+0x20>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <wr_lcd_mode+0x22>
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <backlight.1943>
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	66 e6       	ldi	r22, 0x66	; 102
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	87 e2       	ldi	r24, 0x27	; 39
     c72:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_WRITESEQ>
     c76:	26 c0       	rjmp	.+76     	; 0xcc4 <wr_lcd_mode+0x80>
     c78:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <backlight.1943>
     c7c:	16 2f       	mov	r17, r22
     c7e:	18 2b       	or	r17, r24
     c80:	19 83       	std	Y+1, r17	; 0x01
     c82:	80 2f       	mov	r24, r16
     c84:	80 7f       	andi	r24, 0xF0	; 240
     c86:	84 60       	ori	r24, 0x04	; 4
     c88:	81 2b       	or	r24, r17
     c8a:	8a 83       	std	Y+2, r24	; 0x02
     c8c:	8b 7f       	andi	r24, 0xFB	; 251
     c8e:	8b 83       	std	Y+3, r24	; 0x03
     c90:	20 e1       	ldi	r18, 0x10	; 16
     c92:	02 9f       	mul	r16, r18
     c94:	c0 01       	movw	r24, r0
     c96:	11 24       	eor	r1, r1
     c98:	81 2b       	or	r24, r17
     c9a:	84 60       	ori	r24, 0x04	; 4
     c9c:	8c 83       	std	Y+4, r24	; 0x04
     c9e:	8b 7f       	andi	r24, 0xFB	; 251
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	45 e0       	ldi	r20, 0x05	; 5
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5f       	subi	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	87 e2       	ldi	r24, 0x27	; 39
     cac:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_WRITESEQ>
     cb0:	10 fd       	sbrc	r17, 0
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <wr_lcd_mode+0x80>
     cb4:	03 30       	cpi	r16, 0x03	; 3
     cb6:	30 f4       	brcc	.+12     	; 0xcc4 <wr_lcd_mode+0x80>
     cb8:	e3 ef       	ldi	r30, 0xF3	; 243
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <wr_lcd_mode+0x78>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <wr_lcd_mode+0x7e>
     cc2:	00 00       	nop
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <lcd_gotoxy>:
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	d8 2f       	mov	r29, r24
     cde:	c6 2f       	mov	r28, r22
     ce0:	e6 2f       	mov	r30, r22
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	e9 59       	subi	r30, 0x99	; 153
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	98 2f       	mov	r25, r24
     cea:	90 68       	ori	r25, 0x80	; 128
     cec:	80 81       	ld	r24, Z
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	89 2b       	or	r24, r25
     cf2:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
     cf6:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <_lcd_x>
     cfa:	c0 93 0d 02 	sts	0x020D, r28	; 0x80020d <_lcd_y>
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <lcd_clrscr>:
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
     d0c:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <_lcd_y>
     d10:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <_lcd_x>
     d14:	08 95       	ret

00000d16 <lcd_putc>:
     d16:	cf 93       	push	r28
     d18:	c8 2f       	mov	r28, r24
     d1a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_lcd_x>
     d1e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_lcd_maxx>
     d22:	98 17       	cp	r25, r24
     d24:	18 f4       	brcc	.+6      	; 0xd2c <lcd_putc+0x16>
     d26:	ca 30       	cpi	r28, 0x0A	; 10
     d28:	59 f4       	brne	.+22     	; 0xd40 <lcd_putc+0x2a>
     d2a:	14 c0       	rjmp	.+40     	; 0xd54 <lcd_putc+0x3e>
     d2c:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_lcd_y>
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <_lcd_y>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <lcd_gotoxy>
     d3c:	ca 30       	cpi	r28, 0x0A	; 10
     d3e:	91 f0       	breq	.+36     	; 0xd64 <lcd_putc+0x4e>
     d40:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_lcd_x>
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_lcd_x>
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	8c 2f       	mov	r24, r28
     d4e:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <lcd_putc+0x4e>
     d54:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_lcd_y>
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <_lcd_y>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <lcd_gotoxy>
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <lcd_puts>:
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ec 01       	movw	r28, r24
     d6e:	88 81       	ld	r24, Y
     d70:	88 23       	and	r24, r24
     d72:	31 f0       	breq	.+12     	; 0xd80 <lcd_puts+0x18>
     d74:	21 96       	adiw	r28, 0x01	; 1
     d76:	0e 94 8b 06 	call	0xd16	; 0xd16 <lcd_putc>
     d7a:	89 91       	ld	r24, Y+
     d7c:	81 11       	cpse	r24, r1
     d7e:	fb cf       	rjmp	.-10     	; 0xd76 <lcd_puts+0xe>
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <lcd_init+0xa>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <lcd_init+0xc>
     d92:	00 d0       	rcall	.+0      	; 0xd94 <lcd_init+0xe>
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     d9a:	80 e3       	ldi	r24, 0x30	; 48
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	94 e3       	ldi	r25, 0x34	; 52
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	8c 83       	std	Y+4, r24	; 0x04
     da8:	94 e2       	ldi	r25, 0x24	; 36
     daa:	9d 83       	std	Y+5, r25	; 0x05
     dac:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     dae:	80 e1       	ldi	r24, 0x10	; 16
     db0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     db4:	e7 e6       	ldi	r30, 0x67	; 103
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 5f       	subi	r24, 0xF0	; 240
     dbc:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	80 5f       	subi	r24, 0xF0	; 240
     dc2:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     dc4:	bd 9a       	sbi	0x17, 5	; 23
     dc6:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
<<<<<<< HEAD
     dc8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <i2c_init>
=======
     dc8:	0e 94 35 09 	call	0x126a	; 0x126a <i2c_init>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     dcc:	8b e4       	ldi	r24, 0x4B	; 75
     dce:	9d e1       	ldi	r25, 0x1D	; 29
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <lcd_init+0x4a>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <lcd_init+0x50>
     dd6:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     dd8:	43 e0       	ldi	r20, 0x03	; 3
     dda:	be 01       	movw	r22, r28
     ddc:	6f 5f       	subi	r22, 0xFF	; 255
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	87 e2       	ldi	r24, 0x27	; 39
     de2:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_WRITESEQ>
     de6:	18 2f       	mov	r17, r24
     de8:	81 ee       	ldi	r24, 0xE1	; 225
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <lcd_init+0x66>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <lcd_init+0x6c>
     df2:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     df4:	43 e0       	ldi	r20, 0x03	; 3
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	87 e2       	ldi	r24, 0x27	; 39
     dfe:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_WRITESEQ>
     e02:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     e04:	43 e0       	ldi	r20, 0x03	; 3
     e06:	be 01       	movw	r22, r28
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	87 e2       	ldi	r24, 0x27	; 39
     e0e:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_WRITESEQ>
     e12:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     e14:	43 e0       	ldi	r20, 0x03	; 3
     e16:	be 01       	movw	r22, r28
     e18:	6c 5f       	subi	r22, 0xFC	; 252
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	87 e2       	ldi	r24, 0x27	; 39
     e1e:	0e 94 f6 05 	call	0xbec	; 0xbec <I2C_WRITESEQ>
     e22:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	88 e2       	ldi	r24, 0x28	; 40
     e28:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
     e2c:	81 2b       	or	r24, r17
     e2e:	09 f0       	breq	.+2      	; 0xe32 <lcd_init+0xac>
     e30:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	8c e0       	ldi	r24, 0x0C	; 12
     e36:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	86 e0       	ldi	r24, 0x06	; 6
     e3e:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	80 2f       	mov	r24, r16
     e4e:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
}
     e52:	26 96       	adiw	r28, 0x06	; 6
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     e68:	68 e0       	ldi	r22, 0x08	; 8
     e6a:	0e 94 22 06 	call	0xc44	; 0xc44 <wr_lcd_mode>
     e6e:	08 95       	ret

00000e70 <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
     e70:	0e 94 34 01 	call	0x268	; 0x268 <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
     e74:	87 e6       	ldi	r24, 0x67	; 103
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 00 03 	call	0x600	; 0x600 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	0e 94 00 03 	call	0x600	; 0x600 <Lcd_Init>
	
	States_GotoState(IDLE);
     e88:	80 e0       	ldi	r24, 0x00	; 0
<<<<<<< HEAD
     e8a:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
     e8a:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
	Keypad_Init();
     e8e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
     e92:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Keypad_KeyPressed>
     e96:	88 23       	and	r24, r24
     e98:	e1 f3       	breq	.-8      	; 0xe92 <main+0x22>
     e9a:	87 e8       	ldi	r24, 0x87	; 135
     e9c:	93 e1       	ldi	r25, 0x13	; 19
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <main+0x2e>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <main+0x34>
     ea4:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
     ea6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Keypad_KeyPressed>
     eaa:	88 23       	and	r24, r24
     eac:	91 f3       	breq	.-28     	; 0xe92 <main+0x22>
			{
				int_fast8_t x = Keypad_GetKey();
     eae:	0e 94 bd 02 	call	0x57a	; 0x57a <Keypad_GetKey>
     eb2:	e7 e8       	ldi	r30, 0x87	; 135
     eb4:	f3 e1       	ldi	r31, 0x13	; 19
     eb6:	31 97       	sbiw	r30, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <main+0x46>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <main+0x4c>
     ebc:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
     ebe:	0e 94 dd 02 	call	0x5ba	; 0x5ba <KeyProcessor_ProcessKey>
				Keypad_Init();
     ec2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Keypad_Init>
     ec6:	e5 cf       	rjmp	.-54     	; 0xe92 <main+0x22>

00000ec8 <Patient_UpdateName>:
struct PatientsList patientsList;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
<<<<<<< HEAD
     ec8:	0e 94 05 0b 	call	0x160a	; 0x160a <strcpy>
=======
     ec8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <strcpy>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     ecc:	08 95       	ret

00000ece <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
     ece:	41 96       	adiw	r24, 0x11	; 17
<<<<<<< HEAD
     ed0:	0e 94 05 0b 	call	0x160a	; 0x160a <strcpy>
=======
     ed0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <strcpy>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     ed4:	08 95       	ret

00000ed6 <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
     ed6:	82 96       	adiw	r24, 0x22	; 34
<<<<<<< HEAD
     ed8:	0e 94 05 0b 	call	0x160a	; 0x160a <strcpy>
     edc:	08 95       	ret

00000ede <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
     ede:	fc 01       	movw	r30, r24
     ee0:	74 ab       	std	Z+52, r23	; 0x34
     ee2:	63 ab       	std	Z+51, r22	; 0x33
     ee4:	08 95       	ret

=======
     ed8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <strcpy>
     edc:	08 95       	ret

00000ede <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
     ede:	fc 01       	movw	r30, r24
     ee0:	74 ab       	std	Z+52, r23	; 0x34
     ee2:	63 ab       	std	Z+51, r22	; 0x33
     ee4:	08 95       	ret

>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
00000ee6 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
     ee6:	43 e7       	ldi	r20, 0x73	; 115
     ee8:	51 e0       	ldi	r21, 0x01	; 1
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
	Keypad_InitNumpad();
     ef4:	0e 94 a6 01 	call	0x34c	; 0x34c <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     ef8:	0e 94 bb 01 	call	0x376	; 0x376 <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
     efc:	81 e2       	ldi	r24, 0x21	; 33
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f04:	4a ef       	ldi	r20, 0xFA	; 250
     f06:	51 e0       	ldi	r21, 0x01	; 1
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
     f12:	08 95       	ret

00000f14 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     f14:	8f 31       	cpi	r24, 0x1F	; 31
     f16:	61 f4       	brne	.+24     	; 0xf30 <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
     f18:	6a ef       	ldi	r22, 0xFA	; 250
     f1a:	71 e0       	ldi	r23, 0x01	; 1
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	92 e0       	ldi	r25, 0x02	; 2
     f20:	0e 94 67 07 	call	0xece	; 0xece <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
     f24:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
     f28:	83 e0       	ldi	r24, 0x03	; 3
<<<<<<< HEAD
     f2a:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
     f2a:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     f2e:	08 95       	ret
	}
	else if(key == 30)
     f30:	8e 31       	cpi	r24, 0x1E	; 30
     f32:	61 f4       	brne	.+24     	; 0xf4c <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
     f34:	6a ef       	ldi	r22, 0xFA	; 250
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	0e 94 67 07 	call	0xece	; 0xece <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
     f40:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
     f44:	81 e0       	ldi	r24, 0x01	; 1
<<<<<<< HEAD
     f46:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
     f46:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     f4a:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     f4c:	0e 94 47 02 	call	0x48e	; 0x48e <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f50:	4a ef       	ldi	r20, 0xFA	; 250
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
     f5e:	8a ef       	ldi	r24, 0xFA	; 250
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     f66:	0e 94 bb 01 	call	0x376	; 0x376 <Keypad_UpdateKeyMode>
     f6a:	08 95       	ret

00000f6c <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
     f80:	6e e7       	ldi	r22, 0x7E	; 126
     f82:	71 e0       	ldi	r23, 0x01	; 1
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Keypad_UpdateKeyMode();
     f8a:	0e 94 bb 01 	call	0x376	; 0x376 <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f96:	4a ef       	ldi	r20, 0xFA	; 250
     f98:	51 e0       	ldi	r21, 0x01	; 1
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
     fa4:	08 95       	ret

00000fa6 <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     fa6:	8f 31       	cpi	r24, 0x1F	; 31
     fa8:	61 f4       	brne	.+24     	; 0xfc2 <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
     faa:	6a ef       	ldi	r22, 0xFA	; 250
     fac:	71 e0       	ldi	r23, 0x01	; 1
     fae:	80 e1       	ldi	r24, 0x10	; 16
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	0e 94 64 07 	call	0xec8	; 0xec8 <Patient_UpdateName>
		Keypad_ResetBuffer();
     fb6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     fba:	82 e0       	ldi	r24, 0x02	; 2
<<<<<<< HEAD
     fbc:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
     fbc:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     fc0:	08 95       	ret
	}
	else if(key == 30)
     fc2:	8e 31       	cpi	r24, 0x1E	; 30
     fc4:	61 f4       	brne	.+24     	; 0xfde <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
     fc6:	6a ef       	ldi	r22, 0xFA	; 250
     fc8:	71 e0       	ldi	r23, 0x01	; 1
     fca:	80 e1       	ldi	r24, 0x10	; 16
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 64 07 	call	0xec8	; 0xec8 <Patient_UpdateName>
		Keypad_ResetBuffer();
     fd2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
<<<<<<< HEAD
     fd8:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
     fd8:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
     fdc:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     fde:	0e 94 47 02 	call	0x48e	; 0x48e <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     fe2:	4a ef       	ldi	r20, 0xFA	; 250
     fe4:	51 e0       	ldi	r21, 0x01	; 1
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
     ff0:	8a ef       	ldi	r24, 0xFA	; 250
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     ff8:	0e 94 bb 01 	call	0x376	; 0x376 <Keypad_UpdateKeyMode>
     ffc:	08 95       	ret

00000ffe <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
     ffe:	4a e8       	ldi	r20, 0x8A	; 138
    1000:	51 e0       	ldi	r21, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    100c:	0e 94 a6 01 	call	0x34c	; 0x34c <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1010:	0e 94 bb 01 	call	0x376	; 0x376 <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    1014:	82 e3       	ldi	r24, 0x32	; 50
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    101c:	4a ef       	ldi	r20, 0xFA	; 250
    101e:	51 e0       	ldi	r21, 0x01	; 1
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
    102a:	08 95       	ret

0000102c <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    102c:	8f 31       	cpi	r24, 0x1F	; 31
    102e:	61 f4       	brne	.+24     	; 0x1048 <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    1030:	6a ef       	ldi	r22, 0xFA	; 250
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	0e 94 6b 07 	call	0xed6	; 0xed6 <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    103c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(GENERATE_SERIAL);
    1040:	84 e0       	ldi	r24, 0x04	; 4
<<<<<<< HEAD
    1042:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
    1042:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
    1046:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    1048:	8e 31       	cpi	r24, 0x1E	; 30
    104a:	61 f4       	brne	.+24     	; 0x1064 <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    104c:	6a ef       	ldi	r22, 0xFA	; 250
    104e:	71 e0       	ldi	r23, 0x01	; 1
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	0e 94 6b 07 	call	0xed6	; 0xed6 <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    1058:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    105c:	82 e0       	ldi	r24, 0x02	; 2
<<<<<<< HEAD
    105e:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
=======
    105e:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
    1062:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1064:	0e 94 47 02 	call	0x48e	; 0x48e <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1068:	4a ef       	ldi	r20, 0xFA	; 250
    106a:	51 e0       	ldi	r21, 0x01	; 1
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	0e 94 75 03 	call	0x6ea	; 0x6ea <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    1076:	8a ef       	ldi	r24, 0xFA	; 250
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	0e 94 42 01 	call	0x284	; 0x284 <HC05_SendString>
		
		Keypad_InitNumpad();
    107e:	0e 94 a6 01 	call	0x34c	; 0x34c <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    1082:	0e 94 bb 01 	call	0x376	; 0x376 <Keypad_UpdateKeyMode>
    1086:	08 95       	ret
<<<<<<< HEAD

00001088 <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount);
	Update_PatientsList();
}

void Update_PatientsList()
{
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));	//didn't wanna change your code, so created a new pointer
    108c:	87 e3       	ldi	r24, 0x37	; 55
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <malloc>
    1094:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    1096:	60 e1       	ldi	r22, 0x10	; 16
    1098:	72 e0       	ldi	r23, 0x02	; 2
    109a:	0e 94 05 0b 	call	0x160a	; 0x160a <strcpy>
	strcpy(cp->age, currentPatient.age);
    109e:	61 e2       	ldi	r22, 0x21	; 33
    10a0:	72 e0       	ldi	r23, 0x02	; 2
    10a2:	ce 01       	movw	r24, r28
    10a4:	41 96       	adiw	r24, 0x11	; 17
    10a6:	0e 94 05 0b 	call	0x160a	; 0x160a <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    10aa:	62 e3       	ldi	r22, 0x32	; 50
    10ac:	72 e0       	ldi	r23, 0x02	; 2
    10ae:	ce 01       	movw	r24, r28
    10b0:	82 96       	adiw	r24, 0x22	; 34
    10b2:	0e 94 05 0b 	call	0x160a	; 0x160a <strcpy>
	cp->serial = currentPatient.serial;
    10b6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <currentPatient+0x33>
    10ba:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <currentPatient+0x34>
    10be:	9c ab       	std	Y+52, r25	; 0x34
    10c0:	8b ab       	std	Y+51, r24	; 0x33
	cp->nextPatient = NULL;
    10c2:	1e aa       	std	Y+54, r1	; 0x36
    10c4:	1d aa       	std	Y+53, r1	; 0x35
	if(!patientsList.root) {
    10c6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <patientsList>
    10ca:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <patientsList+0x1>
    10ce:	30 97       	sbiw	r30, 0x00	; 0
    10d0:	31 f4       	brne	.+12     	; 0x10de <Update_PatientsList+0x56>
		patientsList.root = cp;
    10d2:	d0 93 0f 02 	sts	0x020F, r29	; 0x80020f <patientsList+0x1>
    10d6:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <patientsList>
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <Update_PatientsList+0x62>
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
			p = p->nextPatient;
    10dc:	fc 01       	movw	r30, r24
	if(!patientsList.root) {
		patientsList.root = cp;
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
    10de:	85 a9       	ldd	r24, Z+53	; 0x35
    10e0:	96 a9       	ldd	r25, Z+54	; 0x36
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	d9 f7       	brne	.-10     	; 0x10dc <Update_PatientsList+0x54>
			p = p->nextPatient;
		}
		p->nextPatient = cp;
    10e6:	d6 ab       	std	Z+54, r29	; 0x36
    10e8:	c5 ab       	std	Z+53, r28	; 0x35
	}
	
}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <Update_Serial>:
		
	}
}

void Update_Serial()
{
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	c4 56       	subi	r28, 0x64	; 100
    10fe:	d1 09       	sbc	r29, r1
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    110a:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <patientsCount>
    110e:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <patientsCount+0x1>
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	07 2e       	mov	r0, r23
    1118:	00 0c       	add	r0, r0
    111a:	88 0b       	sbc	r24, r24
    111c:	99 0b       	sbc	r25, r25
    111e:	0e 94 89 09 	call	0x1312	; 0x1312 <__floatsisf>
    1122:	8e 01       	movw	r16, r28
    1124:	0f 5f       	subi	r16, 0xFF	; 255
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	43 e0       	ldi	r20, 0x03	; 3
    112c:	0e 94 c4 09 	call	0x1388	; 0x1388 <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    1130:	4d e0       	ldi	r20, 0x0D	; 13
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    113e:	b8 01       	movw	r22, r16
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount);
    1146:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <patientsCount>
    114a:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <patientsCount+0x1>
    114e:	80 e1       	ldi	r24, 0x10	; 16
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	0e 94 6f 07 	call	0xede	; 0xede <Patient_UpdateSerial>
	Update_PatientsList();
    1156:	0e 94 44 08 	call	0x1088	; 0x1088 <Update_PatientsList>
}
    115a:	cc 59       	subi	r28, 0x9C	; 156
    115c:	df 4f       	sbci	r29, 0xFF	; 255
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <GenerateSerial_Init>:
#include "../../all.h"


void GenerateSerial_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Your Serial: ");
    1186:	64 e9       	ldi	r22, 0x94	; 148
    1188:	71 e0       	ldi	r23, 0x01	; 1
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Update_Serial();
    1190:	0e 94 78 08 	call	0x10f0	; 0x10f0 <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
    11a2:	62 ea       	ldi	r22, 0xA2	; 162
    11a4:	71 e0       	ldi	r23, 0x01	; 1
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
    11ac:	08 95       	ret

000011ae <Clear_CurrentPatient_Data>:
	}
	
}

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    11ae:	e0 e1       	ldi	r30, 0x10	; 16
    11b0:	f2 e0       	ldi	r31, 0x02	; 2
    11b2:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    11b4:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    11b6:	12 a2       	std	Z+34, r1	; 0x22
    11b8:	08 95       	ret

000011ba <GenerateSerial_ProcessKey>:
=======

00001088 <GenerateSerial_ProcessKey>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
<<<<<<< HEAD
    11ba:	8f 31       	cpi	r24, 0x1F	; 31
    11bc:	39 f5       	brne	.+78     	; 0x120c <GenerateSerial_ProcessKey+0x52>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    11c4:	43 e0       	ldi	r20, 0x03	; 3
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
		patientsCount++;
    11d2:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <patientsCount>
    11d6:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <patientsCount+0x1>
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <patientsCount+0x1>
    11e0:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <patientsCount>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    11e4:	63 eb       	ldi	r22, 0xB3	; 179
    11e6:	71 e0       	ldi	r23, 0x01	; 1
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
    11ee:	2f e7       	ldi	r18, 0x7F	; 127
    11f0:	8a e1       	ldi	r24, 0x1A	; 26
    11f2:	96 e0       	ldi	r25, 0x06	; 6
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	80 40       	sbci	r24, 0x00	; 0
    11f8:	90 40       	sbci	r25, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <GenerateSerial_ProcessKey+0x3a>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <GenerateSerial_ProcessKey+0x44>
    11fe:	00 00       	nop
		_delay_ms(2000);

		/* Here, can first prompt for providing temperature through lm and then go to the idle state for next entry */
		
		States_GotoState(IDLE);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
		Clear_CurrentPatient_Data();
    1206:	0e 94 d7 08 	call	0x11ae	; 0x11ae <Clear_CurrentPatient_Data>
    120a:	08 95       	ret
	}
	else if(key == 30)
    120c:	8e 31       	cpi	r24, 0x1E	; 30
    120e:	19 f4       	brne	.+6      	; 0x1216 <GenerateSerial_ProcessKey+0x5c>
	{
		States_GotoState(ENTERING_PHONE);	// if re-editing is permitted
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
    1216:	08 95       	ret

00001218 <Idle_ProcessKey>:
=======
    1088:	8f 31       	cpi	r24, 0x1F	; 31
    108a:	e1 f4       	brne	.+56     	; 0x10c4 <GenerateSerial_ProcessKey+0x3c>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    1092:	43 e0       	ldi	r20, 0x03	; 3
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    10a0:	64 e9       	ldi	r22, 0x94	; 148
    10a2:	71 e0       	ldi	r23, 0x01	; 1
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
    10aa:	2f e7       	ldi	r18, 0x7F	; 127
    10ac:	8a e1       	ldi	r24, 0x1A	; 26
    10ae:	96 e0       	ldi	r25, 0x06	; 6
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	80 40       	sbci	r24, 0x00	; 0
    10b4:	90 40       	sbci	r25, 0x00	; 0
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <GenerateSerial_ProcessKey+0x28>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <GenerateSerial_ProcessKey+0x32>
    10ba:	00 00       	nop
		_delay_ms(2000);

		/* Here, can first prompt for providing temperature through lm and then go to the idle state for next entry */
		States_GotoState(IDLE);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
    10c2:	08 95       	ret
	}
	else if(key == 30)
    10c4:	8e 31       	cpi	r24, 0x1E	; 30
    10c6:	19 f4       	brne	.+6      	; 0x10ce <GenerateSerial_ProcessKey+0x46>
	{
		States_GotoState(ENTERING_PHONE);	// if re-editing is permitted
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
    10ce:	08 95       	ret

000010d0 <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount);
	Update_PatientsList();
}

void Update_PatientsList()
{
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));	//didn't wanna change your code, so created a new pointer
    10d4:	87 e3       	ldi	r24, 0x37	; 55
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 c7 09 	call	0x138e	; 0x138e <malloc>
    10dc:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    10de:	60 e1       	ldi	r22, 0x10	; 16
    10e0:	72 e0       	ldi	r23, 0x02	; 2
    10e2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <strcpy>
	strcpy(cp->age, currentPatient.age);
    10e6:	61 e2       	ldi	r22, 0x21	; 33
    10e8:	72 e0       	ldi	r23, 0x02	; 2
    10ea:	ce 01       	movw	r24, r28
    10ec:	41 96       	adiw	r24, 0x11	; 17
    10ee:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    10f2:	62 e3       	ldi	r22, 0x32	; 50
    10f4:	72 e0       	ldi	r23, 0x02	; 2
    10f6:	ce 01       	movw	r24, r28
    10f8:	82 96       	adiw	r24, 0x22	; 34
    10fa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <strcpy>
	cp->serial = currentPatient.serial;
    10fe:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <currentPatient+0x33>
    1102:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <currentPatient+0x34>
    1106:	9c ab       	std	Y+52, r25	; 0x34
    1108:	8b ab       	std	Y+51, r24	; 0x33
	cp->nextPatient = NULL;
    110a:	1e aa       	std	Y+54, r1	; 0x36
    110c:	1d aa       	std	Y+53, r1	; 0x35
	if(!patientsList.root) {
    110e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <patientsList>
    1112:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <patientsList+0x1>
    1116:	30 97       	sbiw	r30, 0x00	; 0
    1118:	31 f4       	brne	.+12     	; 0x1126 <Update_PatientsList+0x56>
		patientsList.root = cp;
    111a:	d0 93 0f 02 	sts	0x020F, r29	; 0x80020f <patientsList+0x1>
    111e:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <patientsList>
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <Update_PatientsList+0x62>
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
			p = p->nextPatient;
    1124:	fc 01       	movw	r30, r24
	if(!patientsList.root) {
		patientsList.root = cp;
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
    1126:	85 a9       	ldd	r24, Z+53	; 0x35
    1128:	96 a9       	ldd	r25, Z+54	; 0x36
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	d9 f7       	brne	.-10     	; 0x1124 <Update_PatientsList+0x54>
			p = p->nextPatient;
		}
		p->nextPatient = cp;
    112e:	d6 ab       	std	Z+54, r29	; 0x36
    1130:	c5 ab       	std	Z+53, r28	; 0x35
	}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <Update_Serial>:
		
	}
}

void Update_Serial()
{
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
	const char * s;
	dtostrf((float)(++patientsCount), 3, 0, s);
    1140:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <patientsCount>
    1144:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <patientsCount+0x1>
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <patientsCount+0x1>
    1150:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <patientsCount>
    1154:	07 2e       	mov	r0, r23
    1156:	00 0c       	add	r0, r0
    1158:	88 0b       	sbc	r24, r24
    115a:	99 0b       	sbc	r25, r25
    115c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__floatsisf>
    1160:	c0 e0       	ldi	r28, 0x00	; 0
    1162:	d0 e0       	ldi	r29, 0x00	; 0
    1164:	8e 01       	movw	r16, r28
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	43 e0       	ldi	r20, 0x03	; 3
    116a:	0e 94 a7 09 	call	0x134e	; 0x134e <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    116e:	4d e0       	ldi	r20, 0x0D	; 13
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    117c:	be 01       	movw	r22, r28
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount);
    1184:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <patientsCount>
    1188:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <patientsCount+0x1>
    118c:	80 e1       	ldi	r24, 0x10	; 16
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	0e 94 6f 07 	call	0xede	; 0xede <Patient_UpdateSerial>
	Update_PatientsList();
    1194:	0e 94 68 08 	call	0x10d0	; 0x10d0 <Update_PatientsList>
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	08 95       	ret

000011a2 <GenerateSerial_Init>:
#include "../../all.h"


void GenerateSerial_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Your Serial: ");
    11b6:	6e e9       	ldi	r22, 0x9E	; 158
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Update_Serial();
    11c0:	0e 94 9c 08 	call	0x1138	; 0x1138 <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
    11d2:	6c ea       	ldi	r22, 0xAC	; 172
    11d4:	71 e0       	ldi	r23, 0x01	; 1
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
    11dc:	08 95       	ret

000011de <Idle_ProcessKey>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
<<<<<<< HEAD
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 2c 09 	call	0x1258	; 0x1258 <States_GotoState>
    121e:	08 95       	ret

00001220 <Idle_Init>:
=======
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 0f 09 	call	0x121e	; 0x121e <States_GotoState>
    11e4:	08 95       	ret

000011e6 <Idle_Init>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
<<<<<<< HEAD
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    1234:	6d eb       	ldi	r22, 0xBD	; 189
    1236:	71 e0       	ldi	r23, 0x01	; 1
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    124c:	66 ec       	ldi	r22, 0xC6	; 198
    124e:	71 e0       	ldi	r23, 0x01	; 1
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
    1256:	08 95       	ret

00001258 <States_GotoState>:
=======
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    11fa:	6d eb       	ldi	r22, 0xBD	; 189
    11fc:	71 e0       	ldi	r23, 0x01	; 1
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    1212:	66 ec       	ldi	r22, 0xC6	; 198
    1214:	71 e0       	ldi	r23, 0x01	; 1
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 3e 03 	call	0x67c	; 0x67c <Lcd_Prints>
    121c:	08 95       	ret

0000121e <States_GotoState>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
<<<<<<< HEAD
    1258:	cf 93       	push	r28
    125a:	c8 2f       	mov	r28, r24
	switch(newState)
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	89 f0       	breq	.+34     	; 0x1282 <States_GotoState+0x2a>
    1260:	2c f4       	brge	.+10     	; 0x126c <States_GotoState+0x14>
    1262:	88 23       	and	r24, r24
    1264:	41 f0       	breq	.+16     	; 0x1276 <States_GotoState+0x1e>
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	49 f0       	breq	.+18     	; 0x127c <States_GotoState+0x24>
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <States_GotoState+0x3c>
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	61 f0       	breq	.+24     	; 0x1288 <States_GotoState+0x30>
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	69 f0       	breq	.+26     	; 0x128e <States_GotoState+0x36>
    1274:	0f c0       	rjmp	.+30     	; 0x1294 <States_GotoState+0x3c>
	{
		case IDLE:
			Idle_Init();
    1276:	0e 94 10 09 	call	0x1220	; 0x1220 <Idle_Init>
			break;
    127a:	10 c0       	rjmp	.+32     	; 0x129c <States_GotoState+0x44>
		case ENTERING_NAME:
			EnteringName_Init();
    127c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EnteringName_Init>
			break;
    1280:	0d c0       	rjmp	.+26     	; 0x129c <States_GotoState+0x44>
		case ENTERING_AGE:
			EnteringAge_Init();
    1282:	0e 94 73 07 	call	0xee6	; 0xee6 <EnteringAge_Init>
			break;
    1286:	0a c0       	rjmp	.+20     	; 0x129c <States_GotoState+0x44>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    1288:	0e 94 ff 07 	call	0xffe	; 0xffe <EnteringPhone_Init>
			break;
    128c:	07 c0       	rjmp	.+14     	; 0x129c <States_GotoState+0x44>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    128e:	0e 94 b9 08 	call	0x1172	; 0x1172 <GenerateSerial_Init>
			break;
    1292:	04 c0       	rjmp	.+8      	; 0x129c <States_GotoState+0x44>
		default:
			Error_Error("GotoState: newState not defined");
    1294:	83 ed       	ldi	r24, 0xD3	; 211
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	}
	currentState = newState;
    129c:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <currentState>
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <i2c_init>:
=======
    121e:	cf 93       	push	r28
    1220:	c8 2f       	mov	r28, r24
	switch(newState)
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	89 f0       	breq	.+34     	; 0x1248 <States_GotoState+0x2a>
    1226:	2c f4       	brge	.+10     	; 0x1232 <States_GotoState+0x14>
    1228:	88 23       	and	r24, r24
    122a:	41 f0       	breq	.+16     	; 0x123c <States_GotoState+0x1e>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	49 f0       	breq	.+18     	; 0x1242 <States_GotoState+0x24>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <States_GotoState+0x3c>
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	61 f0       	breq	.+24     	; 0x124e <States_GotoState+0x30>
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	69 f0       	breq	.+26     	; 0x1254 <States_GotoState+0x36>
    123a:	0f c0       	rjmp	.+30     	; 0x125a <States_GotoState+0x3c>
	{
		case IDLE:
			Idle_Init();
    123c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Idle_Init>
			break;
    1240:	10 c0       	rjmp	.+32     	; 0x1262 <States_GotoState+0x44>
		case ENTERING_NAME:
			EnteringName_Init();
    1242:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EnteringName_Init>
			break;
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <States_GotoState+0x44>
		case ENTERING_AGE:
			EnteringAge_Init();
    1248:	0e 94 73 07 	call	0xee6	; 0xee6 <EnteringAge_Init>
			break;
    124c:	0a c0       	rjmp	.+20     	; 0x1262 <States_GotoState+0x44>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    124e:	0e 94 ff 07 	call	0xffe	; 0xffe <EnteringPhone_Init>
			break;
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <States_GotoState+0x44>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    1254:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <GenerateSerial_Init>
			break;
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <States_GotoState+0x44>
		default:
			Error_Error("GotoState: newState not defined");
    125a:	83 ed       	ldi	r24, 0xD3	; 211
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 c6 00 	call	0x18c	; 0x18c <Error_Error>
	}
	currentState = newState;
    1262:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <currentState>
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <i2c_init>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
<<<<<<< HEAD
    12a4:	11 b8       	out	0x01, r1	; 1
    12a6:	8c e0       	ldi	r24, 0x0C	; 12
    12a8:	80 b9       	out	0x00, r24	; 0
    12aa:	08 95       	ret

000012ac <i2c_start>:
    12ac:	94 ea       	ldi	r25, 0xA4	; 164
    12ae:	96 bf       	out	0x36, r25	; 54
    12b0:	06 b6       	in	r0, 0x36	; 54
    12b2:	07 fe       	sbrs	r0, 7
    12b4:	fd cf       	rjmp	.-6      	; 0x12b0 <i2c_start+0x4>
    12b6:	91 b1       	in	r25, 0x01	; 1
    12b8:	98 7f       	andi	r25, 0xF8	; 248
    12ba:	98 30       	cpi	r25, 0x08	; 8
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <i2c_start+0x16>
    12be:	90 31       	cpi	r25, 0x10	; 16
    12c0:	79 f4       	brne	.+30     	; 0x12e0 <i2c_start+0x34>
    12c2:	83 b9       	out	0x03, r24	; 3
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	86 bf       	out	0x36, r24	; 54
    12c8:	06 b6       	in	r0, 0x36	; 54
    12ca:	07 fe       	sbrs	r0, 7
    12cc:	fd cf       	rjmp	.-6      	; 0x12c8 <i2c_start+0x1c>
    12ce:	91 b1       	in	r25, 0x01	; 1
    12d0:	98 7f       	andi	r25, 0xF8	; 248
    12d2:	98 31       	cpi	r25, 0x18	; 24
    12d4:	39 f0       	breq	.+14     	; 0x12e4 <i2c_start+0x38>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 34       	cpi	r25, 0x40	; 64
    12da:	29 f4       	brne	.+10     	; 0x12e6 <i2c_start+0x3a>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	08 95       	ret
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	08 95       	ret
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	08 95       	ret

000012e8 <i2c_stop>:
=======
    126a:	11 b8       	out	0x01, r1	; 1
    126c:	8c e0       	ldi	r24, 0x0C	; 12
    126e:	80 b9       	out	0x00, r24	; 0
    1270:	08 95       	ret

00001272 <i2c_start>:
    1272:	94 ea       	ldi	r25, 0xA4	; 164
    1274:	96 bf       	out	0x36, r25	; 54
    1276:	06 b6       	in	r0, 0x36	; 54
    1278:	07 fe       	sbrs	r0, 7
    127a:	fd cf       	rjmp	.-6      	; 0x1276 <i2c_start+0x4>
    127c:	91 b1       	in	r25, 0x01	; 1
    127e:	98 7f       	andi	r25, 0xF8	; 248
    1280:	98 30       	cpi	r25, 0x08	; 8
    1282:	11 f0       	breq	.+4      	; 0x1288 <i2c_start+0x16>
    1284:	90 31       	cpi	r25, 0x10	; 16
    1286:	79 f4       	brne	.+30     	; 0x12a6 <i2c_start+0x34>
    1288:	83 b9       	out	0x03, r24	; 3
    128a:	84 e8       	ldi	r24, 0x84	; 132
    128c:	86 bf       	out	0x36, r24	; 54
    128e:	06 b6       	in	r0, 0x36	; 54
    1290:	07 fe       	sbrs	r0, 7
    1292:	fd cf       	rjmp	.-6      	; 0x128e <i2c_start+0x1c>
    1294:	91 b1       	in	r25, 0x01	; 1
    1296:	98 7f       	andi	r25, 0xF8	; 248
    1298:	98 31       	cpi	r25, 0x18	; 24
    129a:	39 f0       	breq	.+14     	; 0x12aa <i2c_start+0x38>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 34       	cpi	r25, 0x40	; 64
    12a0:	29 f4       	brne	.+10     	; 0x12ac <i2c_start+0x3a>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	08 95       	ret
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	08 95       	ret

000012ae <i2c_stop>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
<<<<<<< HEAD
    12e8:	84 e9       	ldi	r24, 0x94	; 148
    12ea:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    12ec:	06 b6       	in	r0, 0x36	; 54
    12ee:	04 fc       	sbrc	r0, 4
    12f0:	fd cf       	rjmp	.-6      	; 0x12ec <i2c_stop+0x4>

}/* i2c_stop */
    12f2:	08 95       	ret

000012f4 <i2c_write>:
=======
    12ae:	84 e9       	ldi	r24, 0x94	; 148
    12b0:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    12b2:	06 b6       	in	r0, 0x36	; 54
    12b4:	04 fc       	sbrc	r0, 4
    12b6:	fd cf       	rjmp	.-6      	; 0x12b2 <i2c_stop+0x4>

}/* i2c_stop */
    12b8:	08 95       	ret

000012ba <i2c_write>:
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
<<<<<<< HEAD
    12f4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    12f6:	84 e8       	ldi	r24, 0x84	; 132
    12f8:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    12fa:	06 b6       	in	r0, 0x36	; 54
    12fc:	07 fe       	sbrs	r0, 7
    12fe:	fd cf       	rjmp	.-6      	; 0x12fa <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1300:	91 b1       	in	r25, 0x01	; 1
    1302:	98 7f       	andi	r25, 0xF8	; 248
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	98 32       	cpi	r25, 0x28	; 40
    1308:	09 f4       	brne	.+2      	; 0x130c <i2c_write+0x18>
    130a:	80 e0       	ldi	r24, 0x00	; 0
=======
    12ba:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    12bc:	84 e8       	ldi	r24, 0x84	; 132
    12be:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    12c0:	06 b6       	in	r0, 0x36	; 54
    12c2:	07 fe       	sbrs	r0, 7
    12c4:	fd cf       	rjmp	.-6      	; 0x12c0 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    12c6:	91 b1       	in	r25, 0x01	; 1
    12c8:	98 7f       	andi	r25, 0xF8	; 248
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	98 32       	cpi	r25, 0x28	; 40
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <i2c_write+0x18>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
<<<<<<< HEAD
    130c:	08 95       	ret

0000130e <__floatunsisf>:
    130e:	e8 94       	clt
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <__floatsisf+0x12>

00001312 <__floatsisf>:
    1312:	97 fb       	bst	r25, 7
    1314:	3e f4       	brtc	.+14     	; 0x1324 <__floatsisf+0x12>
    1316:	90 95       	com	r25
    1318:	80 95       	com	r24
    131a:	70 95       	com	r23
    131c:	61 95       	neg	r22
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	99 23       	and	r25, r25
    1326:	a9 f0       	breq	.+42     	; 0x1352 <__floatsisf+0x40>
    1328:	f9 2f       	mov	r31, r25
    132a:	96 e9       	ldi	r25, 0x96	; 150
    132c:	bb 27       	eor	r27, r27
    132e:	93 95       	inc	r25
    1330:	f6 95       	lsr	r31
    1332:	87 95       	ror	r24
    1334:	77 95       	ror	r23
    1336:	67 95       	ror	r22
    1338:	b7 95       	ror	r27
    133a:	f1 11       	cpse	r31, r1
    133c:	f8 cf       	rjmp	.-16     	; 0x132e <__floatsisf+0x1c>
    133e:	fa f4       	brpl	.+62     	; 0x137e <__floatsisf+0x6c>
    1340:	bb 0f       	add	r27, r27
    1342:	11 f4       	brne	.+4      	; 0x1348 <__floatsisf+0x36>
    1344:	60 ff       	sbrs	r22, 0
    1346:	1b c0       	rjmp	.+54     	; 0x137e <__floatsisf+0x6c>
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	16 c0       	rjmp	.+44     	; 0x137e <__floatsisf+0x6c>
    1352:	88 23       	and	r24, r24
    1354:	11 f0       	breq	.+4      	; 0x135a <__floatsisf+0x48>
    1356:	96 e9       	ldi	r25, 0x96	; 150
    1358:	11 c0       	rjmp	.+34     	; 0x137c <__floatsisf+0x6a>
    135a:	77 23       	and	r23, r23
    135c:	21 f0       	breq	.+8      	; 0x1366 <__floatsisf+0x54>
    135e:	9e e8       	ldi	r25, 0x8E	; 142
    1360:	87 2f       	mov	r24, r23
    1362:	76 2f       	mov	r23, r22
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <__floatsisf+0x5e>
    1366:	66 23       	and	r22, r22
    1368:	71 f0       	breq	.+28     	; 0x1386 <__floatsisf+0x74>
    136a:	96 e8       	ldi	r25, 0x86	; 134
    136c:	86 2f       	mov	r24, r22
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	2a f0       	brmi	.+10     	; 0x137e <__floatsisf+0x6c>
    1374:	9a 95       	dec	r25
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	da f7       	brpl	.-10     	; 0x1374 <__floatsisf+0x62>
    137e:	88 0f       	add	r24, r24
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	97 f9       	bld	r25, 7
    1386:	08 95       	ret

00001388 <dtostrf>:
    1388:	ef 92       	push	r14
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	e8 01       	movw	r28, r16
    1394:	47 fd       	sbrc	r20, 7
    1396:	02 c0       	rjmp	.+4      	; 0x139c <dtostrf+0x14>
    1398:	34 e0       	ldi	r19, 0x04	; 4
    139a:	01 c0       	rjmp	.+2      	; 0x139e <dtostrf+0x16>
    139c:	34 e1       	ldi	r19, 0x14	; 20
    139e:	04 2e       	mov	r0, r20
    13a0:	00 0c       	add	r0, r0
    13a2:	55 0b       	sbc	r21, r21
    13a4:	57 ff       	sbrs	r21, 7
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <dtostrf+0x26>
    13a8:	51 95       	neg	r21
    13aa:	41 95       	neg	r20
    13ac:	51 09       	sbc	r21, r1
    13ae:	e3 2e       	mov	r14, r19
    13b0:	02 2f       	mov	r16, r18
    13b2:	24 2f       	mov	r18, r20
    13b4:	ae 01       	movw	r20, r28
    13b6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <dtoa_prf>
    13ba:	ce 01       	movw	r24, r28
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ef 90       	pop	r14
    13c6:	08 95       	ret

000013c8 <malloc>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	91 05       	cpc	r25, r1
    13d4:	10 f4       	brcc	.+4      	; 0x13da <malloc+0x12>
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__flp>
    13de:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__flp+0x1>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	30 97       	sbiw	r30, 0x00	; 0
    13ec:	19 f1       	breq	.+70     	; 0x1434 <malloc+0x6c>
    13ee:	40 81       	ld	r20, Z
    13f0:	51 81       	ldd	r21, Z+1	; 0x01
    13f2:	02 81       	ldd	r16, Z+2	; 0x02
    13f4:	13 81       	ldd	r17, Z+3	; 0x03
    13f6:	48 17       	cp	r20, r24
    13f8:	59 07       	cpc	r21, r25
    13fa:	c8 f0       	brcs	.+50     	; 0x142e <malloc+0x66>
    13fc:	84 17       	cp	r24, r20
    13fe:	95 07       	cpc	r25, r21
    1400:	69 f4       	brne	.+26     	; 0x141c <malloc+0x54>
    1402:	10 97       	sbiw	r26, 0x00	; 0
    1404:	31 f0       	breq	.+12     	; 0x1412 <malloc+0x4a>
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	0c 93       	st	X, r16
    140a:	12 97       	sbiw	r26, 0x02	; 2
    140c:	13 96       	adiw	r26, 0x03	; 3
    140e:	1c 93       	st	X, r17
    1410:	27 c0       	rjmp	.+78     	; 0x1460 <malloc+0x98>
    1412:	00 93 4a 02 	sts	0x024A, r16	; 0x80024a <__flp>
    1416:	10 93 4b 02 	sts	0x024B, r17	; 0x80024b <__flp+0x1>
    141a:	22 c0       	rjmp	.+68     	; 0x1460 <malloc+0x98>
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	19 f0       	breq	.+6      	; 0x1428 <malloc+0x60>
    1422:	42 17       	cp	r20, r18
    1424:	53 07       	cpc	r21, r19
    1426:	18 f4       	brcc	.+6      	; 0x142e <malloc+0x66>
    1428:	9a 01       	movw	r18, r20
    142a:	bd 01       	movw	r22, r26
    142c:	ef 01       	movw	r28, r30
    142e:	df 01       	movw	r26, r30
    1430:	f8 01       	movw	r30, r16
    1432:	db cf       	rjmp	.-74     	; 0x13ea <malloc+0x22>
    1434:	21 15       	cp	r18, r1
    1436:	31 05       	cpc	r19, r1
    1438:	f9 f0       	breq	.+62     	; 0x1478 <malloc+0xb0>
    143a:	28 1b       	sub	r18, r24
    143c:	39 0b       	sbc	r19, r25
    143e:	24 30       	cpi	r18, 0x04	; 4
    1440:	31 05       	cpc	r19, r1
    1442:	80 f4       	brcc	.+32     	; 0x1464 <malloc+0x9c>
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	61 15       	cp	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	21 f0       	breq	.+8      	; 0x1456 <malloc+0x8e>
    144e:	fb 01       	movw	r30, r22
    1450:	93 83       	std	Z+3, r25	; 0x03
    1452:	82 83       	std	Z+2, r24	; 0x02
    1454:	04 c0       	rjmp	.+8      	; 0x145e <malloc+0x96>
    1456:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <__flp+0x1>
    145a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__flp>
    145e:	fe 01       	movw	r30, r28
    1460:	32 96       	adiw	r30, 0x02	; 2
    1462:	44 c0       	rjmp	.+136    	; 0x14ec <malloc+0x124>
    1464:	fe 01       	movw	r30, r28
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	81 93       	st	Z+, r24
    146c:	91 93       	st	Z+, r25
    146e:	22 50       	subi	r18, 0x02	; 2
    1470:	31 09       	sbc	r19, r1
    1472:	39 83       	std	Y+1, r19	; 0x01
    1474:	28 83       	st	Y, r18
    1476:	3a c0       	rjmp	.+116    	; 0x14ec <malloc+0x124>
    1478:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__brkval>
    147c:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__brkval+0x1>
    1480:	23 2b       	or	r18, r19
    1482:	41 f4       	brne	.+16     	; 0x1494 <malloc+0xcc>
    1484:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1488:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    148c:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <__brkval+0x1>
    1490:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <__brkval>
    1494:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1498:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	41 f4       	brne	.+16     	; 0x14b2 <malloc+0xea>
    14a2:	2d b7       	in	r18, 0x3d	; 61
    14a4:	3e b7       	in	r19, 0x3e	; 62
    14a6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    14aa:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    14ae:	24 1b       	sub	r18, r20
    14b0:	35 0b       	sbc	r19, r21
    14b2:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__brkval>
    14b6:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__brkval+0x1>
    14ba:	e2 17       	cp	r30, r18
    14bc:	f3 07       	cpc	r31, r19
    14be:	a0 f4       	brcc	.+40     	; 0x14e8 <malloc+0x120>
    14c0:	2e 1b       	sub	r18, r30
    14c2:	3f 0b       	sbc	r19, r31
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	78 f0       	brcs	.+30     	; 0x14e8 <malloc+0x120>
    14ca:	ac 01       	movw	r20, r24
    14cc:	4e 5f       	subi	r20, 0xFE	; 254
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	24 17       	cp	r18, r20
    14d2:	35 07       	cpc	r19, r21
    14d4:	48 f0       	brcs	.+18     	; 0x14e8 <malloc+0x120>
    14d6:	4e 0f       	add	r20, r30
    14d8:	5f 1f       	adc	r21, r31
    14da:	50 93 49 02 	sts	0x0249, r21	; 0x800249 <__brkval+0x1>
    14de:	40 93 48 02 	sts	0x0248, r20	; 0x800248 <__brkval>
    14e2:	81 93       	st	Z+, r24
    14e4:	91 93       	st	Z+, r25
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <malloc+0x124>
    14e8:	e0 e0       	ldi	r30, 0x00	; 0
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	cf 01       	movw	r24, r30
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <free>:
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f4       	brne	.+2      	; 0x1502 <free+0xa>
    1500:	81 c0       	rjmp	.+258    	; 0x1604 <free+0x10c>
    1502:	fc 01       	movw	r30, r24
    1504:	32 97       	sbiw	r30, 0x02	; 2
    1506:	13 82       	std	Z+3, r1	; 0x03
    1508:	12 82       	std	Z+2, r1	; 0x02
    150a:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <__flp>
    150e:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <__flp+0x1>
    1512:	10 97       	sbiw	r26, 0x00	; 0
    1514:	81 f4       	brne	.+32     	; 0x1536 <free+0x3e>
    1516:	20 81       	ld	r18, Z
    1518:	31 81       	ldd	r19, Z+1	; 0x01
    151a:	82 0f       	add	r24, r18
    151c:	93 1f       	adc	r25, r19
    151e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__brkval>
    1522:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__brkval+0x1>
    1526:	28 17       	cp	r18, r24
    1528:	39 07       	cpc	r19, r25
    152a:	51 f5       	brne	.+84     	; 0x1580 <free+0x88>
    152c:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <__brkval+0x1>
    1530:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <__brkval>
    1534:	67 c0       	rjmp	.+206    	; 0x1604 <free+0x10c>
    1536:	ed 01       	movw	r28, r26
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	ce 17       	cp	r28, r30
    153e:	df 07       	cpc	r29, r31
    1540:	40 f4       	brcc	.+16     	; 0x1552 <free+0x5a>
    1542:	4a 81       	ldd	r20, Y+2	; 0x02
    1544:	5b 81       	ldd	r21, Y+3	; 0x03
    1546:	9e 01       	movw	r18, r28
    1548:	41 15       	cp	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	f1 f0       	breq	.+60     	; 0x158a <free+0x92>
    154e:	ea 01       	movw	r28, r20
    1550:	f5 cf       	rjmp	.-22     	; 0x153c <free+0x44>
    1552:	d3 83       	std	Z+3, r29	; 0x03
    1554:	c2 83       	std	Z+2, r28	; 0x02
    1556:	40 81       	ld	r20, Z
    1558:	51 81       	ldd	r21, Z+1	; 0x01
    155a:	84 0f       	add	r24, r20
    155c:	95 1f       	adc	r25, r21
    155e:	c8 17       	cp	r28, r24
    1560:	d9 07       	cpc	r29, r25
    1562:	59 f4       	brne	.+22     	; 0x157a <free+0x82>
    1564:	88 81       	ld	r24, Y
    1566:	99 81       	ldd	r25, Y+1	; 0x01
    1568:	84 0f       	add	r24, r20
    156a:	95 1f       	adc	r25, r21
    156c:	02 96       	adiw	r24, 0x02	; 2
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	93 83       	std	Z+3, r25	; 0x03
    1578:	82 83       	std	Z+2, r24	; 0x02
    157a:	21 15       	cp	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	29 f4       	brne	.+10     	; 0x158a <free+0x92>
    1580:	f0 93 4b 02 	sts	0x024B, r31	; 0x80024b <__flp+0x1>
    1584:	e0 93 4a 02 	sts	0x024A, r30	; 0x80024a <__flp>
    1588:	3d c0       	rjmp	.+122    	; 0x1604 <free+0x10c>
    158a:	e9 01       	movw	r28, r18
    158c:	fb 83       	std	Y+3, r31	; 0x03
    158e:	ea 83       	std	Y+2, r30	; 0x02
    1590:	49 91       	ld	r20, Y+
    1592:	59 91       	ld	r21, Y+
    1594:	c4 0f       	add	r28, r20
    1596:	d5 1f       	adc	r29, r21
    1598:	ec 17       	cp	r30, r28
    159a:	fd 07       	cpc	r31, r29
    159c:	61 f4       	brne	.+24     	; 0x15b6 <free+0xbe>
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	84 0f       	add	r24, r20
    15a4:	95 1f       	adc	r25, r21
    15a6:	02 96       	adiw	r24, 0x02	; 2
    15a8:	e9 01       	movw	r28, r18
    15aa:	99 83       	std	Y+1, r25	; 0x01
    15ac:	88 83       	st	Y, r24
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	9b 83       	std	Y+3, r25	; 0x03
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	e0 e0       	ldi	r30, 0x00	; 0
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	8d 91       	ld	r24, X+
    15be:	9c 91       	ld	r25, X
    15c0:	13 97       	sbiw	r26, 0x03	; 3
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	19 f0       	breq	.+6      	; 0x15cc <free+0xd4>
    15c6:	fd 01       	movw	r30, r26
    15c8:	dc 01       	movw	r26, r24
    15ca:	f7 cf       	rjmp	.-18     	; 0x15ba <free+0xc2>
    15cc:	8d 91       	ld	r24, X+
    15ce:	9c 91       	ld	r25, X
    15d0:	11 97       	sbiw	r26, 0x01	; 1
    15d2:	9d 01       	movw	r18, r26
    15d4:	2e 5f       	subi	r18, 0xFE	; 254
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	82 0f       	add	r24, r18
    15da:	93 1f       	adc	r25, r19
    15dc:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__brkval>
    15e0:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__brkval+0x1>
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	69 f4       	brne	.+26     	; 0x1604 <free+0x10c>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <free+0x100>
    15ee:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <__flp+0x1>
    15f2:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <__flp>
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <free+0x104>
    15f8:	13 82       	std	Z+3, r1	; 0x03
    15fa:	12 82       	std	Z+2, r1	; 0x02
    15fc:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <__brkval+0x1>
    1600:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <__brkval>
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <strcpy>:
    160a:	fb 01       	movw	r30, r22
    160c:	dc 01       	movw	r26, r24
    160e:	01 90       	ld	r0, Z+
    1610:	0d 92       	st	X+, r0
    1612:	00 20       	and	r0, r0
    1614:	e1 f7       	brne	.-8      	; 0x160e <strcpy+0x4>
    1616:	08 95       	ret

00001618 <sprintf>:
    1618:	ae e0       	ldi	r26, 0x0E	; 14
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e1       	ldi	r30, 0x12	; 18
    161e:	fb e0       	ldi	r31, 0x0B	; 11
    1620:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x1c>
    1624:	0d 89       	ldd	r16, Y+21	; 0x15
    1626:	1e 89       	ldd	r17, Y+22	; 0x16
    1628:	86 e0       	ldi	r24, 0x06	; 6
    162a:	8c 83       	std	Y+4, r24	; 0x04
    162c:	1a 83       	std	Y+2, r17	; 0x02
    162e:	09 83       	std	Y+1, r16	; 0x01
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f e7       	ldi	r25, 0x7F	; 127
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	ae 01       	movw	r20, r28
    163a:	47 5e       	subi	r20, 0xE7	; 231
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	6f 89       	ldd	r22, Y+23	; 0x17
    1640:	78 8d       	ldd	r23, Y+24	; 0x18
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 2e 0b 	call	0x165c	; 0x165c <vfprintf>
    164a:	ef 81       	ldd	r30, Y+7	; 0x07
    164c:	f8 85       	ldd	r31, Y+8	; 0x08
    164e:	e0 0f       	add	r30, r16
    1650:	f1 1f       	adc	r31, r17
    1652:	10 82       	st	Z, r1
    1654:	2e 96       	adiw	r28, 0x0e	; 14
    1656:	e4 e0       	ldi	r30, 0x04	; 4
    1658:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x1c>

0000165c <vfprintf>:
    165c:	ab e0       	ldi	r26, 0x0B	; 11
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e4 e3       	ldi	r30, 0x34	; 52
    1662:	fb e0       	ldi	r31, 0x0B	; 11
    1664:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__prologue_saves__>
    1668:	6c 01       	movw	r12, r24
    166a:	7b 01       	movw	r14, r22
    166c:	8a 01       	movw	r16, r20
    166e:	fc 01       	movw	r30, r24
    1670:	17 82       	std	Z+7, r1	; 0x07
    1672:	16 82       	std	Z+6, r1	; 0x06
    1674:	83 81       	ldd	r24, Z+3	; 0x03
    1676:	81 ff       	sbrs	r24, 1
    1678:	cc c1       	rjmp	.+920    	; 0x1a12 <vfprintf+0x3b6>
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	3c 01       	movw	r6, r24
    1680:	f6 01       	movw	r30, r12
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	f7 01       	movw	r30, r14
    1686:	93 fd       	sbrc	r25, 3
    1688:	85 91       	lpm	r24, Z+
    168a:	93 ff       	sbrs	r25, 3
    168c:	81 91       	ld	r24, Z+
    168e:	7f 01       	movw	r14, r30
    1690:	88 23       	and	r24, r24
    1692:	09 f4       	brne	.+2      	; 0x1696 <vfprintf+0x3a>
    1694:	ba c1       	rjmp	.+884    	; 0x1a0a <vfprintf+0x3ae>
    1696:	85 32       	cpi	r24, 0x25	; 37
    1698:	39 f4       	brne	.+14     	; 0x16a8 <vfprintf+0x4c>
    169a:	93 fd       	sbrc	r25, 3
    169c:	85 91       	lpm	r24, Z+
    169e:	93 ff       	sbrs	r25, 3
    16a0:	81 91       	ld	r24, Z+
    16a2:	7f 01       	movw	r14, r30
    16a4:	85 32       	cpi	r24, 0x25	; 37
    16a6:	29 f4       	brne	.+10     	; 0x16b2 <vfprintf+0x56>
    16a8:	b6 01       	movw	r22, r12
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    16b0:	e7 cf       	rjmp	.-50     	; 0x1680 <vfprintf+0x24>
    16b2:	91 2c       	mov	r9, r1
    16b4:	21 2c       	mov	r2, r1
    16b6:	31 2c       	mov	r3, r1
    16b8:	ff e1       	ldi	r31, 0x1F	; 31
    16ba:	f3 15       	cp	r31, r3
    16bc:	d8 f0       	brcs	.+54     	; 0x16f4 <vfprintf+0x98>
    16be:	8b 32       	cpi	r24, 0x2B	; 43
    16c0:	79 f0       	breq	.+30     	; 0x16e0 <vfprintf+0x84>
    16c2:	38 f4       	brcc	.+14     	; 0x16d2 <vfprintf+0x76>
    16c4:	80 32       	cpi	r24, 0x20	; 32
    16c6:	79 f0       	breq	.+30     	; 0x16e6 <vfprintf+0x8a>
    16c8:	83 32       	cpi	r24, 0x23	; 35
    16ca:	a1 f4       	brne	.+40     	; 0x16f4 <vfprintf+0x98>
    16cc:	23 2d       	mov	r18, r3
    16ce:	20 61       	ori	r18, 0x10	; 16
    16d0:	1d c0       	rjmp	.+58     	; 0x170c <vfprintf+0xb0>
    16d2:	8d 32       	cpi	r24, 0x2D	; 45
    16d4:	61 f0       	breq	.+24     	; 0x16ee <vfprintf+0x92>
    16d6:	80 33       	cpi	r24, 0x30	; 48
    16d8:	69 f4       	brne	.+26     	; 0x16f4 <vfprintf+0x98>
    16da:	23 2d       	mov	r18, r3
    16dc:	21 60       	ori	r18, 0x01	; 1
    16de:	16 c0       	rjmp	.+44     	; 0x170c <vfprintf+0xb0>
    16e0:	83 2d       	mov	r24, r3
    16e2:	82 60       	ori	r24, 0x02	; 2
    16e4:	38 2e       	mov	r3, r24
    16e6:	e3 2d       	mov	r30, r3
    16e8:	e4 60       	ori	r30, 0x04	; 4
    16ea:	3e 2e       	mov	r3, r30
    16ec:	2a c0       	rjmp	.+84     	; 0x1742 <vfprintf+0xe6>
    16ee:	f3 2d       	mov	r31, r3
    16f0:	f8 60       	ori	r31, 0x08	; 8
    16f2:	1d c0       	rjmp	.+58     	; 0x172e <vfprintf+0xd2>
    16f4:	37 fc       	sbrc	r3, 7
    16f6:	2d c0       	rjmp	.+90     	; 0x1752 <vfprintf+0xf6>
    16f8:	20 ed       	ldi	r18, 0xD0	; 208
    16fa:	28 0f       	add	r18, r24
    16fc:	2a 30       	cpi	r18, 0x0A	; 10
    16fe:	40 f0       	brcs	.+16     	; 0x1710 <vfprintf+0xb4>
    1700:	8e 32       	cpi	r24, 0x2E	; 46
    1702:	b9 f4       	brne	.+46     	; 0x1732 <vfprintf+0xd6>
    1704:	36 fc       	sbrc	r3, 6
    1706:	81 c1       	rjmp	.+770    	; 0x1a0a <vfprintf+0x3ae>
    1708:	23 2d       	mov	r18, r3
    170a:	20 64       	ori	r18, 0x40	; 64
    170c:	32 2e       	mov	r3, r18
    170e:	19 c0       	rjmp	.+50     	; 0x1742 <vfprintf+0xe6>
    1710:	36 fe       	sbrs	r3, 6
    1712:	06 c0       	rjmp	.+12     	; 0x1720 <vfprintf+0xc4>
    1714:	8a e0       	ldi	r24, 0x0A	; 10
    1716:	98 9e       	mul	r9, r24
    1718:	20 0d       	add	r18, r0
    171a:	11 24       	eor	r1, r1
    171c:	92 2e       	mov	r9, r18
    171e:	11 c0       	rjmp	.+34     	; 0x1742 <vfprintf+0xe6>
    1720:	ea e0       	ldi	r30, 0x0A	; 10
    1722:	2e 9e       	mul	r2, r30
    1724:	20 0d       	add	r18, r0
    1726:	11 24       	eor	r1, r1
    1728:	22 2e       	mov	r2, r18
    172a:	f3 2d       	mov	r31, r3
    172c:	f0 62       	ori	r31, 0x20	; 32
    172e:	3f 2e       	mov	r3, r31
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <vfprintf+0xe6>
    1732:	8c 36       	cpi	r24, 0x6C	; 108
    1734:	21 f4       	brne	.+8      	; 0x173e <vfprintf+0xe2>
    1736:	83 2d       	mov	r24, r3
    1738:	80 68       	ori	r24, 0x80	; 128
    173a:	38 2e       	mov	r3, r24
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0xe6>
    173e:	88 36       	cpi	r24, 0x68	; 104
    1740:	41 f4       	brne	.+16     	; 0x1752 <vfprintf+0xf6>
    1742:	f7 01       	movw	r30, r14
    1744:	93 fd       	sbrc	r25, 3
    1746:	85 91       	lpm	r24, Z+
    1748:	93 ff       	sbrs	r25, 3
    174a:	81 91       	ld	r24, Z+
    174c:	7f 01       	movw	r14, r30
    174e:	81 11       	cpse	r24, r1
    1750:	b3 cf       	rjmp	.-154    	; 0x16b8 <vfprintf+0x5c>
    1752:	98 2f       	mov	r25, r24
    1754:	9f 7d       	andi	r25, 0xDF	; 223
    1756:	95 54       	subi	r25, 0x45	; 69
    1758:	93 30       	cpi	r25, 0x03	; 3
    175a:	28 f4       	brcc	.+10     	; 0x1766 <vfprintf+0x10a>
    175c:	0c 5f       	subi	r16, 0xFC	; 252
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	9f e3       	ldi	r25, 0x3F	; 63
    1762:	99 83       	std	Y+1, r25	; 0x01
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <vfprintf+0x124>
    1766:	83 36       	cpi	r24, 0x63	; 99
    1768:	31 f0       	breq	.+12     	; 0x1776 <vfprintf+0x11a>
    176a:	83 37       	cpi	r24, 0x73	; 115
    176c:	71 f0       	breq	.+28     	; 0x178a <vfprintf+0x12e>
    176e:	83 35       	cpi	r24, 0x53	; 83
    1770:	09 f0       	breq	.+2      	; 0x1774 <vfprintf+0x118>
    1772:	59 c0       	rjmp	.+178    	; 0x1826 <vfprintf+0x1ca>
    1774:	21 c0       	rjmp	.+66     	; 0x17b8 <vfprintf+0x15c>
    1776:	f8 01       	movw	r30, r16
    1778:	80 81       	ld	r24, Z
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	0e 5f       	subi	r16, 0xFE	; 254
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	88 24       	eor	r8, r8
    1782:	83 94       	inc	r8
    1784:	91 2c       	mov	r9, r1
    1786:	53 01       	movw	r10, r6
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <vfprintf+0x154>
    178a:	28 01       	movw	r4, r16
    178c:	f2 e0       	ldi	r31, 0x02	; 2
    178e:	4f 0e       	add	r4, r31
    1790:	51 1c       	adc	r5, r1
    1792:	f8 01       	movw	r30, r16
    1794:	a0 80       	ld	r10, Z
    1796:	b1 80       	ldd	r11, Z+1	; 0x01
    1798:	36 fe       	sbrs	r3, 6
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <vfprintf+0x146>
    179c:	69 2d       	mov	r22, r9
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x14a>
    17a2:	6f ef       	ldi	r22, 0xFF	; 255
    17a4:	7f ef       	ldi	r23, 0xFF	; 255
    17a6:	c5 01       	movw	r24, r10
    17a8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strnlen>
    17ac:	4c 01       	movw	r8, r24
    17ae:	82 01       	movw	r16, r4
    17b0:	f3 2d       	mov	r31, r3
    17b2:	ff 77       	andi	r31, 0x7F	; 127
    17b4:	3f 2e       	mov	r3, r31
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <vfprintf+0x188>
    17b8:	28 01       	movw	r4, r16
    17ba:	22 e0       	ldi	r18, 0x02	; 2
    17bc:	42 0e       	add	r4, r18
    17be:	51 1c       	adc	r5, r1
    17c0:	f8 01       	movw	r30, r16
    17c2:	a0 80       	ld	r10, Z
    17c4:	b1 80       	ldd	r11, Z+1	; 0x01
    17c6:	36 fe       	sbrs	r3, 6
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x174>
    17ca:	69 2d       	mov	r22, r9
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x178>
    17d0:	6f ef       	ldi	r22, 0xFF	; 255
    17d2:	7f ef       	ldi	r23, 0xFF	; 255
    17d4:	c5 01       	movw	r24, r10
    17d6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <strnlen_P>
    17da:	4c 01       	movw	r8, r24
    17dc:	f3 2d       	mov	r31, r3
    17de:	f0 68       	ori	r31, 0x80	; 128
    17e0:	3f 2e       	mov	r3, r31
    17e2:	82 01       	movw	r16, r4
    17e4:	33 fc       	sbrc	r3, 3
    17e6:	1b c0       	rjmp	.+54     	; 0x181e <vfprintf+0x1c2>
    17e8:	82 2d       	mov	r24, r2
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	88 16       	cp	r8, r24
    17ee:	99 06       	cpc	r9, r25
    17f0:	b0 f4       	brcc	.+44     	; 0x181e <vfprintf+0x1c2>
    17f2:	b6 01       	movw	r22, r12
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    17fc:	2a 94       	dec	r2
    17fe:	f4 cf       	rjmp	.-24     	; 0x17e8 <vfprintf+0x18c>
    1800:	f5 01       	movw	r30, r10
    1802:	37 fc       	sbrc	r3, 7
    1804:	85 91       	lpm	r24, Z+
    1806:	37 fe       	sbrs	r3, 7
    1808:	81 91       	ld	r24, Z+
    180a:	5f 01       	movw	r10, r30
    180c:	b6 01       	movw	r22, r12
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    1814:	21 10       	cpse	r2, r1
    1816:	2a 94       	dec	r2
    1818:	21 e0       	ldi	r18, 0x01	; 1
    181a:	82 1a       	sub	r8, r18
    181c:	91 08       	sbc	r9, r1
    181e:	81 14       	cp	r8, r1
    1820:	91 04       	cpc	r9, r1
    1822:	71 f7       	brne	.-36     	; 0x1800 <vfprintf+0x1a4>
    1824:	e8 c0       	rjmp	.+464    	; 0x19f6 <vfprintf+0x39a>
    1826:	84 36       	cpi	r24, 0x64	; 100
    1828:	11 f0       	breq	.+4      	; 0x182e <vfprintf+0x1d2>
    182a:	89 36       	cpi	r24, 0x69	; 105
    182c:	41 f5       	brne	.+80     	; 0x187e <vfprintf+0x222>
    182e:	f8 01       	movw	r30, r16
    1830:	37 fe       	sbrs	r3, 7
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <vfprintf+0x1e6>
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	0c 5f       	subi	r16, 0xFC	; 252
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x1f6>
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	07 2e       	mov	r0, r23
    1848:	00 0c       	add	r0, r0
    184a:	88 0b       	sbc	r24, r24
    184c:	99 0b       	sbc	r25, r25
    184e:	0e 5f       	subi	r16, 0xFE	; 254
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	f3 2d       	mov	r31, r3
    1854:	ff 76       	andi	r31, 0x6F	; 111
    1856:	3f 2e       	mov	r3, r31
    1858:	97 ff       	sbrs	r25, 7
    185a:	09 c0       	rjmp	.+18     	; 0x186e <vfprintf+0x212>
    185c:	90 95       	com	r25
    185e:	80 95       	com	r24
    1860:	70 95       	com	r23
    1862:	61 95       	neg	r22
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	8f 4f       	sbci	r24, 0xFF	; 255
    1868:	9f 4f       	sbci	r25, 0xFF	; 255
    186a:	f0 68       	ori	r31, 0x80	; 128
    186c:	3f 2e       	mov	r3, r31
    186e:	2a e0       	ldi	r18, 0x0A	; 10
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	a3 01       	movw	r20, r6
    1874:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__ultoa_invert>
    1878:	88 2e       	mov	r8, r24
    187a:	86 18       	sub	r8, r6
    187c:	45 c0       	rjmp	.+138    	; 0x1908 <vfprintf+0x2ac>
    187e:	85 37       	cpi	r24, 0x75	; 117
    1880:	31 f4       	brne	.+12     	; 0x188e <vfprintf+0x232>
    1882:	23 2d       	mov	r18, r3
    1884:	2f 7e       	andi	r18, 0xEF	; 239
    1886:	b2 2e       	mov	r11, r18
    1888:	2a e0       	ldi	r18, 0x0A	; 10
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	25 c0       	rjmp	.+74     	; 0x18d8 <vfprintf+0x27c>
    188e:	93 2d       	mov	r25, r3
    1890:	99 7f       	andi	r25, 0xF9	; 249
    1892:	b9 2e       	mov	r11, r25
    1894:	8f 36       	cpi	r24, 0x6F	; 111
    1896:	c1 f0       	breq	.+48     	; 0x18c8 <vfprintf+0x26c>
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <vfprintf+0x244>
    189a:	88 35       	cpi	r24, 0x58	; 88
    189c:	79 f0       	breq	.+30     	; 0x18bc <vfprintf+0x260>
    189e:	b5 c0       	rjmp	.+362    	; 0x1a0a <vfprintf+0x3ae>
    18a0:	80 37       	cpi	r24, 0x70	; 112
    18a2:	19 f0       	breq	.+6      	; 0x18aa <vfprintf+0x24e>
    18a4:	88 37       	cpi	r24, 0x78	; 120
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <vfprintf+0x254>
    18a8:	b0 c0       	rjmp	.+352    	; 0x1a0a <vfprintf+0x3ae>
    18aa:	e9 2f       	mov	r30, r25
    18ac:	e0 61       	ori	r30, 0x10	; 16
    18ae:	be 2e       	mov	r11, r30
    18b0:	b4 fe       	sbrs	r11, 4
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <vfprintf+0x272>
    18b4:	fb 2d       	mov	r31, r11
    18b6:	f4 60       	ori	r31, 0x04	; 4
    18b8:	bf 2e       	mov	r11, r31
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <vfprintf+0x272>
    18bc:	34 fe       	sbrs	r3, 4
    18be:	0a c0       	rjmp	.+20     	; 0x18d4 <vfprintf+0x278>
    18c0:	29 2f       	mov	r18, r25
    18c2:	26 60       	ori	r18, 0x06	; 6
    18c4:	b2 2e       	mov	r11, r18
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0x278>
    18c8:	28 e0       	ldi	r18, 0x08	; 8
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <vfprintf+0x27c>
    18ce:	20 e1       	ldi	r18, 0x10	; 16
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x27c>
    18d4:	20 e1       	ldi	r18, 0x10	; 16
    18d6:	32 e0       	ldi	r19, 0x02	; 2
    18d8:	f8 01       	movw	r30, r16
    18da:	b7 fe       	sbrs	r11, 7
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <vfprintf+0x290>
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0c 5f       	subi	r16, 0xFC	; 252
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <vfprintf+0x29c>
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	a3 01       	movw	r20, r6
    18fa:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__ultoa_invert>
    18fe:	88 2e       	mov	r8, r24
    1900:	86 18       	sub	r8, r6
    1902:	fb 2d       	mov	r31, r11
    1904:	ff 77       	andi	r31, 0x7F	; 127
    1906:	3f 2e       	mov	r3, r31
    1908:	36 fe       	sbrs	r3, 6
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vfprintf+0x2ca>
    190c:	23 2d       	mov	r18, r3
    190e:	2e 7f       	andi	r18, 0xFE	; 254
    1910:	a2 2e       	mov	r10, r18
    1912:	89 14       	cp	r8, r9
    1914:	58 f4       	brcc	.+22     	; 0x192c <vfprintf+0x2d0>
    1916:	34 fe       	sbrs	r3, 4
    1918:	0b c0       	rjmp	.+22     	; 0x1930 <vfprintf+0x2d4>
    191a:	32 fc       	sbrc	r3, 2
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <vfprintf+0x2d4>
    191e:	83 2d       	mov	r24, r3
    1920:	8e 7e       	andi	r24, 0xEE	; 238
    1922:	a8 2e       	mov	r10, r24
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <vfprintf+0x2d4>
    1926:	b8 2c       	mov	r11, r8
    1928:	a3 2c       	mov	r10, r3
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <vfprintf+0x2d6>
    192c:	b8 2c       	mov	r11, r8
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <vfprintf+0x2d6>
    1930:	b9 2c       	mov	r11, r9
    1932:	a4 fe       	sbrs	r10, 4
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <vfprintf+0x2f8>
    1936:	fe 01       	movw	r30, r28
    1938:	e8 0d       	add	r30, r8
    193a:	f1 1d       	adc	r31, r1
    193c:	80 81       	ld	r24, Z
    193e:	80 33       	cpi	r24, 0x30	; 48
    1940:	21 f4       	brne	.+8      	; 0x194a <vfprintf+0x2ee>
    1942:	9a 2d       	mov	r25, r10
    1944:	99 7e       	andi	r25, 0xE9	; 233
    1946:	a9 2e       	mov	r10, r25
    1948:	09 c0       	rjmp	.+18     	; 0x195c <vfprintf+0x300>
    194a:	a2 fe       	sbrs	r10, 2
    194c:	06 c0       	rjmp	.+12     	; 0x195a <vfprintf+0x2fe>
    194e:	b3 94       	inc	r11
    1950:	b3 94       	inc	r11
    1952:	04 c0       	rjmp	.+8      	; 0x195c <vfprintf+0x300>
    1954:	8a 2d       	mov	r24, r10
    1956:	86 78       	andi	r24, 0x86	; 134
    1958:	09 f0       	breq	.+2      	; 0x195c <vfprintf+0x300>
    195a:	b3 94       	inc	r11
    195c:	a3 fc       	sbrc	r10, 3
    195e:	11 c0       	rjmp	.+34     	; 0x1982 <vfprintf+0x326>
    1960:	a0 fe       	sbrs	r10, 0
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <vfprintf+0x314>
    1964:	b2 14       	cp	r11, r2
    1966:	88 f4       	brcc	.+34     	; 0x198a <vfprintf+0x32e>
    1968:	28 0c       	add	r2, r8
    196a:	92 2c       	mov	r9, r2
    196c:	9b 18       	sub	r9, r11
    196e:	0e c0       	rjmp	.+28     	; 0x198c <vfprintf+0x330>
    1970:	b2 14       	cp	r11, r2
    1972:	60 f4       	brcc	.+24     	; 0x198c <vfprintf+0x330>
    1974:	b6 01       	movw	r22, r12
    1976:	80 e2       	ldi	r24, 0x20	; 32
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    197e:	b3 94       	inc	r11
    1980:	f7 cf       	rjmp	.-18     	; 0x1970 <vfprintf+0x314>
    1982:	b2 14       	cp	r11, r2
    1984:	18 f4       	brcc	.+6      	; 0x198c <vfprintf+0x330>
    1986:	2b 18       	sub	r2, r11
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x332>
    198a:	98 2c       	mov	r9, r8
    198c:	21 2c       	mov	r2, r1
    198e:	a4 fe       	sbrs	r10, 4
    1990:	10 c0       	rjmp	.+32     	; 0x19b2 <vfprintf+0x356>
    1992:	b6 01       	movw	r22, r12
    1994:	80 e3       	ldi	r24, 0x30	; 48
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    199c:	a2 fe       	sbrs	r10, 2
    199e:	17 c0       	rjmp	.+46     	; 0x19ce <vfprintf+0x372>
    19a0:	a1 fc       	sbrc	r10, 1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <vfprintf+0x34e>
    19a4:	88 e7       	ldi	r24, 0x78	; 120
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <vfprintf+0x352>
    19aa:	88 e5       	ldi	r24, 0x58	; 88
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	b6 01       	movw	r22, r12
    19b0:	0c c0       	rjmp	.+24     	; 0x19ca <vfprintf+0x36e>
    19b2:	8a 2d       	mov	r24, r10
    19b4:	86 78       	andi	r24, 0x86	; 134
    19b6:	59 f0       	breq	.+22     	; 0x19ce <vfprintf+0x372>
    19b8:	a1 fe       	sbrs	r10, 1
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x364>
    19bc:	8b e2       	ldi	r24, 0x2B	; 43
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <vfprintf+0x366>
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	a7 fc       	sbrc	r10, 7
    19c4:	8d e2       	ldi	r24, 0x2D	; 45
    19c6:	b6 01       	movw	r22, r12
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    19ce:	89 14       	cp	r8, r9
    19d0:	38 f4       	brcc	.+14     	; 0x19e0 <vfprintf+0x384>
    19d2:	b6 01       	movw	r22, r12
    19d4:	80 e3       	ldi	r24, 0x30	; 48
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    19dc:	9a 94       	dec	r9
    19de:	f7 cf       	rjmp	.-18     	; 0x19ce <vfprintf+0x372>
    19e0:	8a 94       	dec	r8
    19e2:	f3 01       	movw	r30, r6
    19e4:	e8 0d       	add	r30, r8
    19e6:	f1 1d       	adc	r31, r1
    19e8:	80 81       	ld	r24, Z
    19ea:	b6 01       	movw	r22, r12
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    19f2:	81 10       	cpse	r8, r1
    19f4:	f5 cf       	rjmp	.-22     	; 0x19e0 <vfprintf+0x384>
    19f6:	22 20       	and	r2, r2
    19f8:	09 f4       	brne	.+2      	; 0x19fc <vfprintf+0x3a0>
    19fa:	42 ce       	rjmp	.-892    	; 0x1680 <vfprintf+0x24>
    19fc:	b6 01       	movw	r22, r12
    19fe:	80 e2       	ldi	r24, 0x20	; 32
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 57 0f 	call	0x1eae	; 0x1eae <fputc>
    1a06:	2a 94       	dec	r2
    1a08:	f6 cf       	rjmp	.-20     	; 0x19f6 <vfprintf+0x39a>
    1a0a:	f6 01       	movw	r30, r12
    1a0c:	86 81       	ldd	r24, Z+6	; 0x06
    1a0e:	97 81       	ldd	r25, Z+7	; 0x07
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0x3ba>
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	2b 96       	adiw	r28, 0x0b	; 11
    1a18:	e2 e1       	ldi	r30, 0x12	; 18
    1a1a:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__epilogue_restores__>

00001a1e <dtoa_prf>:
    1a1e:	a9 e0       	ldi	r26, 0x09	; 9
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e1       	ldi	r30, 0x15	; 21
    1a24:	fd e0       	ldi	r31, 0x0D	; 13
    1a26:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__prologue_saves__+0xc>
    1a2a:	6a 01       	movw	r12, r20
    1a2c:	12 2f       	mov	r17, r18
    1a2e:	b0 2e       	mov	r11, r16
    1a30:	2b e3       	ldi	r18, 0x3B	; 59
    1a32:	20 17       	cp	r18, r16
    1a34:	20 f0       	brcs	.+8      	; 0x1a3e <dtoa_prf+0x20>
    1a36:	ff 24       	eor	r15, r15
    1a38:	f3 94       	inc	r15
    1a3a:	f0 0e       	add	r15, r16
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <dtoa_prf+0x24>
    1a3e:	2c e3       	ldi	r18, 0x3C	; 60
    1a40:	f2 2e       	mov	r15, r18
    1a42:	0f 2d       	mov	r16, r15
    1a44:	27 e0       	ldi	r18, 0x07	; 7
    1a46:	ae 01       	movw	r20, r28
    1a48:	4f 5f       	subi	r20, 0xFF	; 255
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__ftoa_engine>
    1a50:	bc 01       	movw	r22, r24
    1a52:	49 81       	ldd	r20, Y+1	; 0x01
    1a54:	84 2f       	mov	r24, r20
    1a56:	89 70       	andi	r24, 0x09	; 9
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	31 f0       	breq	.+12     	; 0x1a68 <dtoa_prf+0x4a>
    1a5c:	e1 fc       	sbrc	r14, 1
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <dtoa_prf+0x4e>
    1a60:	e0 fe       	sbrs	r14, 0
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <dtoa_prf+0x52>
    1a64:	90 e2       	ldi	r25, 0x20	; 32
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <dtoa_prf+0x54>
    1a68:	9d e2       	ldi	r25, 0x2D	; 45
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <dtoa_prf+0x54>
    1a6c:	9b e2       	ldi	r25, 0x2B	; 43
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <dtoa_prf+0x54>
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	5e 2d       	mov	r21, r14
    1a74:	50 71       	andi	r21, 0x10	; 16
    1a76:	43 ff       	sbrs	r20, 3
    1a78:	3c c0       	rjmp	.+120    	; 0x1af2 <dtoa_prf+0xd4>
    1a7a:	91 11       	cpse	r25, r1
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <dtoa_prf+0x64>
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <dtoa_prf+0x66>
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	81 17       	cp	r24, r17
    1a86:	18 f4       	brcc	.+6      	; 0x1a8e <dtoa_prf+0x70>
    1a88:	21 2f       	mov	r18, r17
    1a8a:	28 1b       	sub	r18, r24
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <dtoa_prf+0x72>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	51 11       	cpse	r21, r1
    1a92:	0b c0       	rjmp	.+22     	; 0x1aaa <dtoa_prf+0x8c>
    1a94:	f6 01       	movw	r30, r12
    1a96:	82 2f       	mov	r24, r18
    1a98:	30 e2       	ldi	r19, 0x20	; 32
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <dtoa_prf+0x86>
    1a9e:	31 93       	st	Z+, r19
    1aa0:	81 50       	subi	r24, 0x01	; 1
    1aa2:	fb cf       	rjmp	.-10     	; 0x1a9a <dtoa_prf+0x7c>
    1aa4:	c2 0e       	add	r12, r18
    1aa6:	d1 1c       	adc	r13, r1
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	99 23       	and	r25, r25
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <dtoa_prf+0x9a>
    1aae:	d6 01       	movw	r26, r12
    1ab0:	9c 93       	st	X, r25
    1ab2:	f6 01       	movw	r30, r12
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	6f 01       	movw	r12, r30
    1ab8:	c6 01       	movw	r24, r12
    1aba:	03 96       	adiw	r24, 0x03	; 3
    1abc:	e2 fe       	sbrs	r14, 2
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <dtoa_prf+0xb6>
    1ac0:	3e e4       	ldi	r19, 0x4E	; 78
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	3c 93       	st	X, r19
    1ac6:	41 e4       	ldi	r20, 0x41	; 65
    1ac8:	11 96       	adiw	r26, 0x01	; 1
    1aca:	4c 93       	st	X, r20
    1acc:	11 97       	sbiw	r26, 0x01	; 1
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	3c 93       	st	X, r19
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <dtoa_prf+0xc2>
    1ad4:	3e e6       	ldi	r19, 0x6E	; 110
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	30 83       	st	Z, r19
    1ada:	41 e6       	ldi	r20, 0x61	; 97
    1adc:	41 83       	std	Z+1, r20	; 0x01
    1ade:	32 83       	std	Z+2, r19	; 0x02
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	32 2f       	mov	r19, r18
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	33 23       	and	r19, r19
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <dtoa_prf+0xce>
    1aea:	42 c0       	rjmp	.+132    	; 0x1b70 <dtoa_prf+0x152>
    1aec:	41 93       	st	Z+, r20
    1aee:	31 50       	subi	r19, 0x01	; 1
    1af0:	fa cf       	rjmp	.-12     	; 0x1ae6 <dtoa_prf+0xc8>
    1af2:	42 ff       	sbrs	r20, 2
    1af4:	44 c0       	rjmp	.+136    	; 0x1b7e <dtoa_prf+0x160>
    1af6:	91 11       	cpse	r25, r1
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <dtoa_prf+0xe0>
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <dtoa_prf+0xe2>
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	81 17       	cp	r24, r17
    1b02:	18 f4       	brcc	.+6      	; 0x1b0a <dtoa_prf+0xec>
    1b04:	21 2f       	mov	r18, r17
    1b06:	28 1b       	sub	r18, r24
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <dtoa_prf+0xee>
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	51 11       	cpse	r21, r1
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <dtoa_prf+0x108>
    1b10:	f6 01       	movw	r30, r12
    1b12:	82 2f       	mov	r24, r18
    1b14:	30 e2       	ldi	r19, 0x20	; 32
    1b16:	88 23       	and	r24, r24
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <dtoa_prf+0x102>
    1b1a:	31 93       	st	Z+, r19
    1b1c:	81 50       	subi	r24, 0x01	; 1
    1b1e:	fb cf       	rjmp	.-10     	; 0x1b16 <dtoa_prf+0xf8>
    1b20:	c2 0e       	add	r12, r18
    1b22:	d1 1c       	adc	r13, r1
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	99 23       	and	r25, r25
    1b28:	29 f0       	breq	.+10     	; 0x1b34 <dtoa_prf+0x116>
    1b2a:	d6 01       	movw	r26, r12
    1b2c:	9c 93       	st	X, r25
    1b2e:	f6 01       	movw	r30, r12
    1b30:	31 96       	adiw	r30, 0x01	; 1
    1b32:	6f 01       	movw	r12, r30
    1b34:	c6 01       	movw	r24, r12
    1b36:	03 96       	adiw	r24, 0x03	; 3
    1b38:	e2 fe       	sbrs	r14, 2
    1b3a:	0b c0       	rjmp	.+22     	; 0x1b52 <dtoa_prf+0x134>
    1b3c:	39 e4       	ldi	r19, 0x49	; 73
    1b3e:	d6 01       	movw	r26, r12
    1b40:	3c 93       	st	X, r19
    1b42:	3e e4       	ldi	r19, 0x4E	; 78
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	3c 93       	st	X, r19
    1b48:	11 97       	sbiw	r26, 0x01	; 1
    1b4a:	36 e4       	ldi	r19, 0x46	; 70
    1b4c:	12 96       	adiw	r26, 0x02	; 2
    1b4e:	3c 93       	st	X, r19
    1b50:	07 c0       	rjmp	.+14     	; 0x1b60 <dtoa_prf+0x142>
    1b52:	39 e6       	ldi	r19, 0x69	; 105
    1b54:	f6 01       	movw	r30, r12
    1b56:	30 83       	st	Z, r19
    1b58:	3e e6       	ldi	r19, 0x6E	; 110
    1b5a:	31 83       	std	Z+1, r19	; 0x01
    1b5c:	36 e6       	ldi	r19, 0x66	; 102
    1b5e:	32 83       	std	Z+2, r19	; 0x02
    1b60:	fc 01       	movw	r30, r24
    1b62:	32 2f       	mov	r19, r18
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	33 23       	and	r19, r19
    1b68:	19 f0       	breq	.+6      	; 0x1b70 <dtoa_prf+0x152>
    1b6a:	41 93       	st	Z+, r20
    1b6c:	31 50       	subi	r19, 0x01	; 1
    1b6e:	fb cf       	rjmp	.-10     	; 0x1b66 <dtoa_prf+0x148>
    1b70:	fc 01       	movw	r30, r24
    1b72:	e2 0f       	add	r30, r18
    1b74:	f1 1d       	adc	r31, r1
    1b76:	10 82       	st	Z, r1
    1b78:	8e ef       	ldi	r24, 0xFE	; 254
    1b7a:	9f ef       	ldi	r25, 0xFF	; 255
    1b7c:	a6 c0       	rjmp	.+332    	; 0x1cca <dtoa_prf+0x2ac>
    1b7e:	21 e0       	ldi	r18, 0x01	; 1
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	91 11       	cpse	r25, r1
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <dtoa_prf+0x16c>
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	16 16       	cp	r1, r22
    1b8c:	17 06       	cpc	r1, r23
    1b8e:	1c f4       	brge	.+6      	; 0x1b96 <dtoa_prf+0x178>
    1b90:	fb 01       	movw	r30, r22
    1b92:	31 96       	adiw	r30, 0x01	; 1
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <dtoa_prf+0x17c>
    1b96:	e1 e0       	ldi	r30, 0x01	; 1
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	2e 0f       	add	r18, r30
    1b9c:	3f 1f       	adc	r19, r31
    1b9e:	bb 20       	and	r11, r11
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <dtoa_prf+0x18c>
    1ba2:	eb 2d       	mov	r30, r11
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	31 96       	adiw	r30, 0x01	; 1
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <dtoa_prf+0x190>
    1baa:	e0 e0       	ldi	r30, 0x00	; 0
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	2e 0f       	add	r18, r30
    1bb0:	3f 1f       	adc	r19, r31
    1bb2:	e1 2f       	mov	r30, r17
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	2e 17       	cp	r18, r30
    1bb8:	3f 07       	cpc	r19, r31
    1bba:	1c f4       	brge	.+6      	; 0x1bc2 <dtoa_prf+0x1a4>
    1bbc:	12 1b       	sub	r17, r18
    1bbe:	21 2f       	mov	r18, r17
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <dtoa_prf+0x1a6>
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	8e 2d       	mov	r24, r14
    1bc6:	88 71       	andi	r24, 0x18	; 24
    1bc8:	59 f4       	brne	.+22     	; 0x1be0 <dtoa_prf+0x1c2>
    1bca:	f6 01       	movw	r30, r12
    1bcc:	82 2f       	mov	r24, r18
    1bce:	30 e2       	ldi	r19, 0x20	; 32
    1bd0:	88 23       	and	r24, r24
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <dtoa_prf+0x1bc>
    1bd4:	31 93       	st	Z+, r19
    1bd6:	81 50       	subi	r24, 0x01	; 1
    1bd8:	fb cf       	rjmp	.-10     	; 0x1bd0 <dtoa_prf+0x1b2>
    1bda:	c2 0e       	add	r12, r18
    1bdc:	d1 1c       	adc	r13, r1
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	99 23       	and	r25, r25
    1be2:	29 f0       	breq	.+10     	; 0x1bee <dtoa_prf+0x1d0>
    1be4:	d6 01       	movw	r26, r12
    1be6:	9c 93       	st	X, r25
    1be8:	f6 01       	movw	r30, r12
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	6f 01       	movw	r12, r30
    1bee:	51 11       	cpse	r21, r1
    1bf0:	0b c0       	rjmp	.+22     	; 0x1c08 <dtoa_prf+0x1ea>
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	82 2f       	mov	r24, r18
    1bf6:	90 e3       	ldi	r25, 0x30	; 48
    1bf8:	88 23       	and	r24, r24
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <dtoa_prf+0x1e4>
    1bfc:	91 93       	st	Z+, r25
    1bfe:	81 50       	subi	r24, 0x01	; 1
    1c00:	fb cf       	rjmp	.-10     	; 0x1bf8 <dtoa_prf+0x1da>
    1c02:	c2 0e       	add	r12, r18
    1c04:	d1 1c       	adc	r13, r1
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	0f 2d       	mov	r16, r15
    1c0a:	06 0f       	add	r16, r22
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	34 2f       	mov	r19, r20
    1c10:	30 71       	andi	r19, 0x10	; 16
    1c12:	44 ff       	sbrs	r20, 4
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <dtoa_prf+0x1fe>
    1c16:	91 33       	cpi	r25, 0x31	; 49
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <dtoa_prf+0x1fe>
    1c1a:	01 50       	subi	r16, 0x01	; 1
    1c1c:	10 16       	cp	r1, r16
    1c1e:	24 f4       	brge	.+8      	; 0x1c28 <dtoa_prf+0x20a>
    1c20:	09 30       	cpi	r16, 0x09	; 9
    1c22:	18 f0       	brcs	.+6      	; 0x1c2a <dtoa_prf+0x20c>
    1c24:	08 e0       	ldi	r16, 0x08	; 8
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <dtoa_prf+0x20c>
    1c28:	01 e0       	ldi	r16, 0x01	; 1
    1c2a:	ab 01       	movw	r20, r22
    1c2c:	77 ff       	sbrs	r23, 7
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <dtoa_prf+0x216>
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	fb 01       	movw	r30, r22
    1c36:	e4 1b       	sub	r30, r20
    1c38:	f5 0b       	sbc	r31, r21
    1c3a:	a1 e0       	ldi	r26, 0x01	; 1
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ac 0f       	add	r26, r28
    1c40:	bd 1f       	adc	r27, r29
    1c42:	ea 0f       	add	r30, r26
    1c44:	fb 1f       	adc	r31, r27
    1c46:	8e e2       	ldi	r24, 0x2E	; 46
    1c48:	a8 2e       	mov	r10, r24
    1c4a:	4b 01       	movw	r8, r22
    1c4c:	80 1a       	sub	r8, r16
    1c4e:	91 08       	sbc	r9, r1
    1c50:	0b 2d       	mov	r16, r11
    1c52:	10 e0       	ldi	r17, 0x00	; 0
    1c54:	11 95       	neg	r17
    1c56:	01 95       	neg	r16
    1c58:	11 09       	sbc	r17, r1
    1c5a:	4f 3f       	cpi	r20, 0xFF	; 255
    1c5c:	bf ef       	ldi	r27, 0xFF	; 255
    1c5e:	5b 07       	cpc	r21, r27
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <dtoa_prf+0x24c>
    1c62:	d6 01       	movw	r26, r12
    1c64:	ac 92       	st	X, r10
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	6d 01       	movw	r12, r26
    1c6a:	64 17       	cp	r22, r20
    1c6c:	75 07       	cpc	r23, r21
    1c6e:	2c f0       	brlt	.+10     	; 0x1c7a <dtoa_prf+0x25c>
    1c70:	84 16       	cp	r8, r20
    1c72:	95 06       	cpc	r9, r21
    1c74:	14 f4       	brge	.+4      	; 0x1c7a <dtoa_prf+0x25c>
    1c76:	81 81       	ldd	r24, Z+1	; 0x01
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <dtoa_prf+0x25e>
    1c7a:	80 e3       	ldi	r24, 0x30	; 48
    1c7c:	41 50       	subi	r20, 0x01	; 1
    1c7e:	51 09       	sbc	r21, r1
    1c80:	31 96       	adiw	r30, 0x01	; 1
    1c82:	d6 01       	movw	r26, r12
    1c84:	11 96       	adiw	r26, 0x01	; 1
    1c86:	7d 01       	movw	r14, r26
    1c88:	40 17       	cp	r20, r16
    1c8a:	51 07       	cpc	r21, r17
    1c8c:	24 f0       	brlt	.+8      	; 0x1c96 <dtoa_prf+0x278>
    1c8e:	d6 01       	movw	r26, r12
    1c90:	8c 93       	st	X, r24
    1c92:	67 01       	movw	r12, r14
    1c94:	e2 cf       	rjmp	.-60     	; 0x1c5a <dtoa_prf+0x23c>
    1c96:	64 17       	cp	r22, r20
    1c98:	75 07       	cpc	r23, r21
    1c9a:	39 f4       	brne	.+14     	; 0x1caa <dtoa_prf+0x28c>
    1c9c:	96 33       	cpi	r25, 0x36	; 54
    1c9e:	20 f4       	brcc	.+8      	; 0x1ca8 <dtoa_prf+0x28a>
    1ca0:	95 33       	cpi	r25, 0x35	; 53
    1ca2:	19 f4       	brne	.+6      	; 0x1caa <dtoa_prf+0x28c>
    1ca4:	31 11       	cpse	r19, r1
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <dtoa_prf+0x28c>
    1ca8:	81 e3       	ldi	r24, 0x31	; 49
    1caa:	f6 01       	movw	r30, r12
    1cac:	80 83       	st	Z, r24
    1cae:	f7 01       	movw	r30, r14
    1cb0:	82 2f       	mov	r24, r18
    1cb2:	90 e2       	ldi	r25, 0x20	; 32
    1cb4:	88 23       	and	r24, r24
    1cb6:	19 f0       	breq	.+6      	; 0x1cbe <dtoa_prf+0x2a0>
    1cb8:	91 93       	st	Z+, r25
    1cba:	81 50       	subi	r24, 0x01	; 1
    1cbc:	fb cf       	rjmp	.-10     	; 0x1cb4 <dtoa_prf+0x296>
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	e2 0f       	add	r30, r18
    1cc2:	f1 1d       	adc	r31, r1
    1cc4:	10 82       	st	Z, r1
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	29 96       	adiw	r28, 0x09	; 9
    1ccc:	ec e0       	ldi	r30, 0x0C	; 12
    1cce:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__epilogue_restores__+0xc>

00001cd2 <__ftoa_engine>:
    1cd2:	28 30       	cpi	r18, 0x08	; 8
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <__ftoa_engine+0x6>
    1cd6:	27 e0       	ldi	r18, 0x07	; 7
    1cd8:	33 27       	eor	r19, r19
    1cda:	da 01       	movw	r26, r20
    1cdc:	99 0f       	add	r25, r25
    1cde:	31 1d       	adc	r19, r1
    1ce0:	87 fd       	sbrc	r24, 7
    1ce2:	91 60       	ori	r25, 0x01	; 1
    1ce4:	00 96       	adiw	r24, 0x00	; 0
    1ce6:	61 05       	cpc	r22, r1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	39 f4       	brne	.+14     	; 0x1cfa <__ftoa_engine+0x28>
    1cec:	32 60       	ori	r19, 0x02	; 2
    1cee:	2e 5f       	subi	r18, 0xFE	; 254
    1cf0:	3d 93       	st	X+, r19
    1cf2:	30 e3       	ldi	r19, 0x30	; 48
    1cf4:	2a 95       	dec	r18
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <__ftoa_engine+0x1e>
    1cf8:	08 95       	ret
    1cfa:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfc:	30 f0       	brcs	.+12     	; 0x1d0a <__ftoa_engine+0x38>
    1cfe:	80 38       	cpi	r24, 0x80	; 128
    1d00:	71 05       	cpc	r23, r1
    1d02:	61 05       	cpc	r22, r1
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <__ftoa_engine+0x36>
    1d06:	3c 5f       	subi	r19, 0xFC	; 252
    1d08:	3c 5f       	subi	r19, 0xFC	; 252
    1d0a:	3d 93       	st	X+, r19
    1d0c:	91 30       	cpi	r25, 0x01	; 1
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <__ftoa_engine+0x40>
    1d10:	80 68       	ori	r24, 0x80	; 128
    1d12:	91 1d       	adc	r25, r1
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	1f 93       	push	r17
    1d1a:	0f 93       	push	r16
    1d1c:	ff 92       	push	r15
    1d1e:	ef 92       	push	r14
    1d20:	19 2f       	mov	r17, r25
    1d22:	98 7f       	andi	r25, 0xF8	; 248
    1d24:	96 95       	lsr	r25
    1d26:	e9 2f       	mov	r30, r25
    1d28:	96 95       	lsr	r25
    1d2a:	96 95       	lsr	r25
    1d2c:	e9 0f       	add	r30, r25
    1d2e:	ff 27       	eor	r31, r31
    1d30:	e2 55       	subi	r30, 0x52	; 82
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	99 27       	eor	r25, r25
    1d36:	33 27       	eor	r19, r19
    1d38:	ee 24       	eor	r14, r14
    1d3a:	ff 24       	eor	r15, r15
    1d3c:	a7 01       	movw	r20, r14
    1d3e:	e7 01       	movw	r28, r14
    1d40:	05 90       	lpm	r0, Z+
    1d42:	08 94       	sec
    1d44:	07 94       	ror	r0
    1d46:	28 f4       	brcc	.+10     	; 0x1d52 <__ftoa_engine+0x80>
    1d48:	36 0f       	add	r19, r22
    1d4a:	e7 1e       	adc	r14, r23
    1d4c:	f8 1e       	adc	r15, r24
    1d4e:	49 1f       	adc	r20, r25
    1d50:	51 1d       	adc	r21, r1
    1d52:	66 0f       	add	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	06 94       	lsr	r0
    1d5c:	a1 f7       	brne	.-24     	; 0x1d46 <__ftoa_engine+0x74>
    1d5e:	05 90       	lpm	r0, Z+
    1d60:	07 94       	ror	r0
    1d62:	28 f4       	brcc	.+10     	; 0x1d6e <__ftoa_engine+0x9c>
    1d64:	e7 0e       	add	r14, r23
    1d66:	f8 1e       	adc	r15, r24
    1d68:	49 1f       	adc	r20, r25
    1d6a:	56 1f       	adc	r21, r22
    1d6c:	c1 1d       	adc	r28, r1
    1d6e:	77 0f       	add	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	66 1f       	adc	r22, r22
    1d76:	06 94       	lsr	r0
    1d78:	a1 f7       	brne	.-24     	; 0x1d62 <__ftoa_engine+0x90>
    1d7a:	05 90       	lpm	r0, Z+
    1d7c:	07 94       	ror	r0
    1d7e:	28 f4       	brcc	.+10     	; 0x1d8a <__ftoa_engine+0xb8>
    1d80:	f8 0e       	add	r15, r24
    1d82:	49 1f       	adc	r20, r25
    1d84:	56 1f       	adc	r21, r22
    1d86:	c7 1f       	adc	r28, r23
    1d88:	d1 1d       	adc	r29, r1
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	06 94       	lsr	r0
    1d94:	a1 f7       	brne	.-24     	; 0x1d7e <__ftoa_engine+0xac>
    1d96:	05 90       	lpm	r0, Z+
    1d98:	07 94       	ror	r0
    1d9a:	20 f4       	brcc	.+8      	; 0x1da4 <__ftoa_engine+0xd2>
    1d9c:	49 0f       	add	r20, r25
    1d9e:	56 1f       	adc	r21, r22
    1da0:	c7 1f       	adc	r28, r23
    1da2:	d8 1f       	adc	r29, r24
    1da4:	99 0f       	add	r25, r25
    1da6:	66 1f       	adc	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	06 94       	lsr	r0
    1dae:	a9 f7       	brne	.-22     	; 0x1d9a <__ftoa_engine+0xc8>
    1db0:	84 91       	lpm	r24, Z
    1db2:	10 95       	com	r17
    1db4:	17 70       	andi	r17, 0x07	; 7
    1db6:	41 f0       	breq	.+16     	; 0x1dc8 <__ftoa_engine+0xf6>
    1db8:	d6 95       	lsr	r29
    1dba:	c7 95       	ror	r28
    1dbc:	57 95       	ror	r21
    1dbe:	47 95       	ror	r20
    1dc0:	f7 94       	ror	r15
    1dc2:	e7 94       	ror	r14
    1dc4:	1a 95       	dec	r17
    1dc6:	c1 f7       	brne	.-16     	; 0x1db8 <__ftoa_engine+0xe6>
    1dc8:	e4 e5       	ldi	r30, 0x54	; 84
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	68 94       	set
    1dce:	15 90       	lpm	r1, Z+
    1dd0:	15 91       	lpm	r17, Z+
    1dd2:	35 91       	lpm	r19, Z+
    1dd4:	65 91       	lpm	r22, Z+
    1dd6:	95 91       	lpm	r25, Z+
    1dd8:	05 90       	lpm	r0, Z+
    1dda:	7f e2       	ldi	r23, 0x2F	; 47
    1ddc:	73 95       	inc	r23
    1dde:	e1 18       	sub	r14, r1
    1de0:	f1 0a       	sbc	r15, r17
    1de2:	43 0b       	sbc	r20, r19
    1de4:	56 0b       	sbc	r21, r22
    1de6:	c9 0b       	sbc	r28, r25
    1de8:	d0 09       	sbc	r29, r0
    1dea:	c0 f7       	brcc	.-16     	; 0x1ddc <__ftoa_engine+0x10a>
    1dec:	e1 0c       	add	r14, r1
    1dee:	f1 1e       	adc	r15, r17
    1df0:	43 1f       	adc	r20, r19
    1df2:	56 1f       	adc	r21, r22
    1df4:	c9 1f       	adc	r28, r25
    1df6:	d0 1d       	adc	r29, r0
    1df8:	7e f4       	brtc	.+30     	; 0x1e18 <__ftoa_engine+0x146>
    1dfa:	70 33       	cpi	r23, 0x30	; 48
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <__ftoa_engine+0x130>
    1dfe:	8a 95       	dec	r24
    1e00:	e6 cf       	rjmp	.-52     	; 0x1dce <__ftoa_engine+0xfc>
    1e02:	e8 94       	clt
    1e04:	01 50       	subi	r16, 0x01	; 1
    1e06:	30 f0       	brcs	.+12     	; 0x1e14 <__ftoa_engine+0x142>
    1e08:	08 0f       	add	r16, r24
    1e0a:	0a f4       	brpl	.+2      	; 0x1e0e <__ftoa_engine+0x13c>
    1e0c:	00 27       	eor	r16, r16
    1e0e:	02 17       	cp	r16, r18
    1e10:	08 f4       	brcc	.+2      	; 0x1e14 <__ftoa_engine+0x142>
    1e12:	20 2f       	mov	r18, r16
    1e14:	23 95       	inc	r18
    1e16:	02 2f       	mov	r16, r18
    1e18:	7a 33       	cpi	r23, 0x3A	; 58
    1e1a:	28 f0       	brcs	.+10     	; 0x1e26 <__ftoa_engine+0x154>
    1e1c:	79 e3       	ldi	r23, 0x39	; 57
    1e1e:	7d 93       	st	X+, r23
    1e20:	2a 95       	dec	r18
    1e22:	e9 f7       	brne	.-6      	; 0x1e1e <__ftoa_engine+0x14c>
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <__ftoa_engine+0x174>
    1e26:	7d 93       	st	X+, r23
    1e28:	2a 95       	dec	r18
    1e2a:	89 f6       	brne	.-94     	; 0x1dce <__ftoa_engine+0xfc>
    1e2c:	06 94       	lsr	r0
    1e2e:	97 95       	ror	r25
    1e30:	67 95       	ror	r22
    1e32:	37 95       	ror	r19
    1e34:	17 95       	ror	r17
    1e36:	17 94       	ror	r1
    1e38:	e1 18       	sub	r14, r1
    1e3a:	f1 0a       	sbc	r15, r17
    1e3c:	43 0b       	sbc	r20, r19
    1e3e:	56 0b       	sbc	r21, r22
    1e40:	c9 0b       	sbc	r28, r25
    1e42:	d0 09       	sbc	r29, r0
    1e44:	98 f0       	brcs	.+38     	; 0x1e6c <__ftoa_engine+0x19a>
    1e46:	23 95       	inc	r18
    1e48:	7e 91       	ld	r23, -X
    1e4a:	73 95       	inc	r23
    1e4c:	7a 33       	cpi	r23, 0x3A	; 58
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <__ftoa_engine+0x180>
    1e50:	70 e3       	ldi	r23, 0x30	; 48
    1e52:	7c 93       	st	X, r23
    1e54:	20 13       	cpse	r18, r16
    1e56:	b8 f7       	brcc	.-18     	; 0x1e46 <__ftoa_engine+0x174>
    1e58:	7e 91       	ld	r23, -X
    1e5a:	70 61       	ori	r23, 0x10	; 16
    1e5c:	7d 93       	st	X+, r23
    1e5e:	30 f0       	brcs	.+12     	; 0x1e6c <__ftoa_engine+0x19a>
    1e60:	83 95       	inc	r24
    1e62:	71 e3       	ldi	r23, 0x31	; 49
    1e64:	7d 93       	st	X+, r23
    1e66:	70 e3       	ldi	r23, 0x30	; 48
    1e68:	2a 95       	dec	r18
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <__ftoa_engine+0x192>
    1e6c:	11 24       	eor	r1, r1
    1e6e:	ef 90       	pop	r14
    1e70:	ff 90       	pop	r15
    1e72:	0f 91       	pop	r16
    1e74:	1f 91       	pop	r17
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	99 27       	eor	r25, r25
    1e7c:	87 fd       	sbrc	r24, 7
    1e7e:	90 95       	com	r25
    1e80:	08 95       	ret

00001e82 <strnlen_P>:
    1e82:	fc 01       	movw	r30, r24
    1e84:	05 90       	lpm	r0, Z+
    1e86:	61 50       	subi	r22, 0x01	; 1
    1e88:	70 40       	sbci	r23, 0x00	; 0
    1e8a:	01 10       	cpse	r0, r1
    1e8c:	d8 f7       	brcc	.-10     	; 0x1e84 <strnlen_P+0x2>
    1e8e:	80 95       	com	r24
    1e90:	90 95       	com	r25
    1e92:	8e 0f       	add	r24, r30
    1e94:	9f 1f       	adc	r25, r31
    1e96:	08 95       	ret

00001e98 <strnlen>:
    1e98:	fc 01       	movw	r30, r24
    1e9a:	61 50       	subi	r22, 0x01	; 1
    1e9c:	70 40       	sbci	r23, 0x00	; 0
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	01 10       	cpse	r0, r1
    1ea2:	d8 f7       	brcc	.-10     	; 0x1e9a <strnlen+0x2>
    1ea4:	80 95       	com	r24
    1ea6:	90 95       	com	r25
    1ea8:	8e 0f       	add	r24, r30
    1eaa:	9f 1f       	adc	r25, r31
    1eac:	08 95       	ret

00001eae <fputc>:
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	23 81       	ldd	r18, Z+3	; 0x03
    1eba:	21 fd       	sbrc	r18, 1
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <fputc+0x16>
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	2c c0       	rjmp	.+88     	; 0x1f1c <fputc+0x6e>
    1ec4:	22 ff       	sbrs	r18, 2
    1ec6:	16 c0       	rjmp	.+44     	; 0x1ef4 <fputc+0x46>
    1ec8:	46 81       	ldd	r20, Z+6	; 0x06
    1eca:	57 81       	ldd	r21, Z+7	; 0x07
    1ecc:	24 81       	ldd	r18, Z+4	; 0x04
    1ece:	35 81       	ldd	r19, Z+5	; 0x05
    1ed0:	42 17       	cp	r20, r18
    1ed2:	53 07       	cpc	r21, r19
    1ed4:	44 f4       	brge	.+16     	; 0x1ee6 <fputc+0x38>
    1ed6:	a0 81       	ld	r26, Z
    1ed8:	b1 81       	ldd	r27, Z+1	; 0x01
    1eda:	9d 01       	movw	r18, r26
    1edc:	2f 5f       	subi	r18, 0xFF	; 255
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	31 83       	std	Z+1, r19	; 0x01
    1ee2:	20 83       	st	Z, r18
    1ee4:	8c 93       	st	X, r24
    1ee6:	26 81       	ldd	r18, Z+6	; 0x06
    1ee8:	37 81       	ldd	r19, Z+7	; 0x07
    1eea:	2f 5f       	subi	r18, 0xFF	; 255
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	37 83       	std	Z+7, r19	; 0x07
    1ef0:	26 83       	std	Z+6, r18	; 0x06
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <fputc+0x6e>
    1ef4:	8b 01       	movw	r16, r22
    1ef6:	ec 01       	movw	r28, r24
    1ef8:	fb 01       	movw	r30, r22
    1efa:	00 84       	ldd	r0, Z+8	; 0x08
    1efc:	f1 85       	ldd	r31, Z+9	; 0x09
    1efe:	e0 2d       	mov	r30, r0
    1f00:	09 95       	icall
    1f02:	89 2b       	or	r24, r25
    1f04:	e1 f6       	brne	.-72     	; 0x1ebe <fputc+0x10>
    1f06:	d8 01       	movw	r26, r16
    1f08:	16 96       	adiw	r26, 0x06	; 6
    1f0a:	8d 91       	ld	r24, X+
    1f0c:	9c 91       	ld	r25, X
    1f0e:	17 97       	sbiw	r26, 0x07	; 7
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	17 96       	adiw	r26, 0x07	; 7
    1f14:	9c 93       	st	X, r25
    1f16:	8e 93       	st	-X, r24
    1f18:	16 97       	sbiw	r26, 0x06	; 6
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	08 95       	ret

00001f26 <__ultoa_invert>:
    1f26:	fa 01       	movw	r30, r20
    1f28:	aa 27       	eor	r26, r26
    1f2a:	28 30       	cpi	r18, 0x08	; 8
    1f2c:	51 f1       	breq	.+84     	; 0x1f82 <__ultoa_invert+0x5c>
    1f2e:	20 31       	cpi	r18, 0x10	; 16
    1f30:	81 f1       	breq	.+96     	; 0x1f92 <__ultoa_invert+0x6c>
    1f32:	e8 94       	clt
    1f34:	6f 93       	push	r22
    1f36:	6e 7f       	andi	r22, 0xFE	; 254
    1f38:	6e 5f       	subi	r22, 0xFE	; 254
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f40:	af 4f       	sbci	r26, 0xFF	; 255
    1f42:	b1 e0       	ldi	r27, 0x01	; 1
    1f44:	3e d0       	rcall	.+124    	; 0x1fc2 <__ultoa_invert+0x9c>
    1f46:	b4 e0       	ldi	r27, 0x04	; 4
    1f48:	3c d0       	rcall	.+120    	; 0x1fc2 <__ultoa_invert+0x9c>
    1f4a:	67 0f       	add	r22, r23
    1f4c:	78 1f       	adc	r23, r24
    1f4e:	89 1f       	adc	r24, r25
    1f50:	9a 1f       	adc	r25, r26
    1f52:	a1 1d       	adc	r26, r1
    1f54:	68 0f       	add	r22, r24
    1f56:	79 1f       	adc	r23, r25
    1f58:	8a 1f       	adc	r24, r26
    1f5a:	91 1d       	adc	r25, r1
    1f5c:	a1 1d       	adc	r26, r1
    1f5e:	6a 0f       	add	r22, r26
    1f60:	71 1d       	adc	r23, r1
    1f62:	81 1d       	adc	r24, r1
    1f64:	91 1d       	adc	r25, r1
    1f66:	a1 1d       	adc	r26, r1
    1f68:	20 d0       	rcall	.+64     	; 0x1faa <__ultoa_invert+0x84>
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <__ultoa_invert+0x48>
    1f6c:	68 94       	set
    1f6e:	3f 91       	pop	r19
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	26 9f       	mul	r18, r22
    1f74:	11 24       	eor	r1, r1
    1f76:	30 19       	sub	r19, r0
    1f78:	30 5d       	subi	r19, 0xD0	; 208
    1f7a:	31 93       	st	Z+, r19
    1f7c:	de f6       	brtc	.-74     	; 0x1f34 <__ultoa_invert+0xe>
    1f7e:	cf 01       	movw	r24, r30
    1f80:	08 95       	ret
    1f82:	46 2f       	mov	r20, r22
    1f84:	47 70       	andi	r20, 0x07	; 7
    1f86:	40 5d       	subi	r20, 0xD0	; 208
    1f88:	41 93       	st	Z+, r20
    1f8a:	b3 e0       	ldi	r27, 0x03	; 3
    1f8c:	0f d0       	rcall	.+30     	; 0x1fac <__ultoa_invert+0x86>
    1f8e:	c9 f7       	brne	.-14     	; 0x1f82 <__ultoa_invert+0x5c>
    1f90:	f6 cf       	rjmp	.-20     	; 0x1f7e <__ultoa_invert+0x58>
    1f92:	46 2f       	mov	r20, r22
    1f94:	4f 70       	andi	r20, 0x0F	; 15
    1f96:	40 5d       	subi	r20, 0xD0	; 208
    1f98:	4a 33       	cpi	r20, 0x3A	; 58
    1f9a:	18 f0       	brcs	.+6      	; 0x1fa2 <__ultoa_invert+0x7c>
    1f9c:	49 5d       	subi	r20, 0xD9	; 217
    1f9e:	31 fd       	sbrc	r19, 1
    1fa0:	40 52       	subi	r20, 0x20	; 32
    1fa2:	41 93       	st	Z+, r20
    1fa4:	02 d0       	rcall	.+4      	; 0x1faa <__ultoa_invert+0x84>
    1fa6:	a9 f7       	brne	.-22     	; 0x1f92 <__ultoa_invert+0x6c>
    1fa8:	ea cf       	rjmp	.-44     	; 0x1f7e <__ultoa_invert+0x58>
    1faa:	b4 e0       	ldi	r27, 0x04	; 4
    1fac:	a6 95       	lsr	r26
    1fae:	97 95       	ror	r25
    1fb0:	87 95       	ror	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	ba 95       	dec	r27
    1fb8:	c9 f7       	brne	.-14     	; 0x1fac <__ultoa_invert+0x86>
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	08 95       	ret
    1fc2:	9b 01       	movw	r18, r22
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	0a 2e       	mov	r0, r26
    1fc8:	06 94       	lsr	r0
    1fca:	57 95       	ror	r21
    1fcc:	47 95       	ror	r20
    1fce:	37 95       	ror	r19
    1fd0:	27 95       	ror	r18
    1fd2:	ba 95       	dec	r27
    1fd4:	c9 f7       	brne	.-14     	; 0x1fc8 <__ultoa_invert+0xa2>
    1fd6:	62 0f       	add	r22, r18
    1fd8:	73 1f       	adc	r23, r19
    1fda:	84 1f       	adc	r24, r20
    1fdc:	95 1f       	adc	r25, r21
    1fde:	a0 1d       	adc	r26, r0
    1fe0:	08 95       	ret

00001fe2 <__prologue_saves__>:
    1fe2:	2f 92       	push	r2
    1fe4:	3f 92       	push	r3
    1fe6:	4f 92       	push	r4
    1fe8:	5f 92       	push	r5
    1fea:	6f 92       	push	r6
    1fec:	7f 92       	push	r7
    1fee:	8f 92       	push	r8
    1ff0:	9f 92       	push	r9
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	ca 1b       	sub	r28, r26
    200c:	db 0b       	sbc	r29, r27
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	09 94       	ijmp

0000201a <__epilogue_restores__>:
    201a:	2a 88       	ldd	r2, Y+18	; 0x12
    201c:	39 88       	ldd	r3, Y+17	; 0x11
    201e:	48 88       	ldd	r4, Y+16	; 0x10
    2020:	5f 84       	ldd	r5, Y+15	; 0x0f
    2022:	6e 84       	ldd	r6, Y+14	; 0x0e
    2024:	7d 84       	ldd	r7, Y+13	; 0x0d
    2026:	8c 84       	ldd	r8, Y+12	; 0x0c
    2028:	9b 84       	ldd	r9, Y+11	; 0x0b
    202a:	aa 84       	ldd	r10, Y+10	; 0x0a
    202c:	b9 84       	ldd	r11, Y+9	; 0x09
    202e:	c8 84       	ldd	r12, Y+8	; 0x08
    2030:	df 80       	ldd	r13, Y+7	; 0x07
    2032:	ee 80       	ldd	r14, Y+6	; 0x06
    2034:	fd 80       	ldd	r15, Y+5	; 0x05
    2036:	0c 81       	ldd	r16, Y+4	; 0x04
    2038:	1b 81       	ldd	r17, Y+3	; 0x03
    203a:	aa 81       	ldd	r26, Y+2	; 0x02
    203c:	b9 81       	ldd	r27, Y+1	; 0x01
    203e:	ce 0f       	add	r28, r30
    2040:	d1 1d       	adc	r29, r1
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	ed 01       	movw	r28, r26
    204e:	08 95       	ret

00002050 <_exit>:
    2050:	f8 94       	cli

00002052 <__stop_program>:
    2052:	ff cf       	rjmp	.-2      	; 0x2052 <__stop_program>
=======
    12d2:	08 95       	ret

000012d4 <__floatunsisf>:
    12d4:	e8 94       	clt
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <__floatsisf+0x12>

000012d8 <__floatsisf>:
    12d8:	97 fb       	bst	r25, 7
    12da:	3e f4       	brtc	.+14     	; 0x12ea <__floatsisf+0x12>
    12dc:	90 95       	com	r25
    12de:	80 95       	com	r24
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	99 23       	and	r25, r25
    12ec:	a9 f0       	breq	.+42     	; 0x1318 <__floatsisf+0x40>
    12ee:	f9 2f       	mov	r31, r25
    12f0:	96 e9       	ldi	r25, 0x96	; 150
    12f2:	bb 27       	eor	r27, r27
    12f4:	93 95       	inc	r25
    12f6:	f6 95       	lsr	r31
    12f8:	87 95       	ror	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b7 95       	ror	r27
    1300:	f1 11       	cpse	r31, r1
    1302:	f8 cf       	rjmp	.-16     	; 0x12f4 <__floatsisf+0x1c>
    1304:	fa f4       	brpl	.+62     	; 0x1344 <__floatsisf+0x6c>
    1306:	bb 0f       	add	r27, r27
    1308:	11 f4       	brne	.+4      	; 0x130e <__floatsisf+0x36>
    130a:	60 ff       	sbrs	r22, 0
    130c:	1b c0       	rjmp	.+54     	; 0x1344 <__floatsisf+0x6c>
    130e:	6f 5f       	subi	r22, 0xFF	; 255
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	8f 4f       	sbci	r24, 0xFF	; 255
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <__floatsisf+0x6c>
    1318:	88 23       	and	r24, r24
    131a:	11 f0       	breq	.+4      	; 0x1320 <__floatsisf+0x48>
    131c:	96 e9       	ldi	r25, 0x96	; 150
    131e:	11 c0       	rjmp	.+34     	; 0x1342 <__floatsisf+0x6a>
    1320:	77 23       	and	r23, r23
    1322:	21 f0       	breq	.+8      	; 0x132c <__floatsisf+0x54>
    1324:	9e e8       	ldi	r25, 0x8E	; 142
    1326:	87 2f       	mov	r24, r23
    1328:	76 2f       	mov	r23, r22
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <__floatsisf+0x5e>
    132c:	66 23       	and	r22, r22
    132e:	71 f0       	breq	.+28     	; 0x134c <__floatsisf+0x74>
    1330:	96 e8       	ldi	r25, 0x86	; 134
    1332:	86 2f       	mov	r24, r22
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	2a f0       	brmi	.+10     	; 0x1344 <__floatsisf+0x6c>
    133a:	9a 95       	dec	r25
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	da f7       	brpl	.-10     	; 0x133a <__floatsisf+0x62>
    1344:	88 0f       	add	r24, r24
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	97 f9       	bld	r25, 7
    134c:	08 95       	ret

0000134e <dtostrf>:
    134e:	ef 92       	push	r14
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	e8 01       	movw	r28, r16
    135a:	47 fd       	sbrc	r20, 7
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <dtostrf+0x14>
    135e:	34 e0       	ldi	r19, 0x04	; 4
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <dtostrf+0x16>
    1362:	34 e1       	ldi	r19, 0x14	; 20
    1364:	04 2e       	mov	r0, r20
    1366:	00 0c       	add	r0, r0
    1368:	55 0b       	sbc	r21, r21
    136a:	57 ff       	sbrs	r21, 7
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <dtostrf+0x26>
    136e:	51 95       	neg	r21
    1370:	41 95       	neg	r20
    1372:	51 09       	sbc	r21, r1
    1374:	e3 2e       	mov	r14, r19
    1376:	02 2f       	mov	r16, r18
    1378:	24 2f       	mov	r18, r20
    137a:	ae 01       	movw	r20, r28
    137c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <dtoa_prf>
    1380:	ce 01       	movw	r24, r28
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ef 90       	pop	r14
    138c:	08 95       	ret

0000138e <malloc>:
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	91 05       	cpc	r25, r1
    139a:	10 f4       	brcc	.+4      	; 0x13a0 <malloc+0x12>
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__flp>
    13a4:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__flp+0x1>
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	30 97       	sbiw	r30, 0x00	; 0
    13b2:	19 f1       	breq	.+70     	; 0x13fa <malloc+0x6c>
    13b4:	40 81       	ld	r20, Z
    13b6:	51 81       	ldd	r21, Z+1	; 0x01
    13b8:	02 81       	ldd	r16, Z+2	; 0x02
    13ba:	13 81       	ldd	r17, Z+3	; 0x03
    13bc:	48 17       	cp	r20, r24
    13be:	59 07       	cpc	r21, r25
    13c0:	c8 f0       	brcs	.+50     	; 0x13f4 <malloc+0x66>
    13c2:	84 17       	cp	r24, r20
    13c4:	95 07       	cpc	r25, r21
    13c6:	69 f4       	brne	.+26     	; 0x13e2 <malloc+0x54>
    13c8:	10 97       	sbiw	r26, 0x00	; 0
    13ca:	31 f0       	breq	.+12     	; 0x13d8 <malloc+0x4a>
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	0c 93       	st	X, r16
    13d0:	12 97       	sbiw	r26, 0x02	; 2
    13d2:	13 96       	adiw	r26, 0x03	; 3
    13d4:	1c 93       	st	X, r17
    13d6:	27 c0       	rjmp	.+78     	; 0x1426 <malloc+0x98>
    13d8:	00 93 4a 02 	sts	0x024A, r16	; 0x80024a <__flp>
    13dc:	10 93 4b 02 	sts	0x024B, r17	; 0x80024b <__flp+0x1>
    13e0:	22 c0       	rjmp	.+68     	; 0x1426 <malloc+0x98>
    13e2:	21 15       	cp	r18, r1
    13e4:	31 05       	cpc	r19, r1
    13e6:	19 f0       	breq	.+6      	; 0x13ee <malloc+0x60>
    13e8:	42 17       	cp	r20, r18
    13ea:	53 07       	cpc	r21, r19
    13ec:	18 f4       	brcc	.+6      	; 0x13f4 <malloc+0x66>
    13ee:	9a 01       	movw	r18, r20
    13f0:	bd 01       	movw	r22, r26
    13f2:	ef 01       	movw	r28, r30
    13f4:	df 01       	movw	r26, r30
    13f6:	f8 01       	movw	r30, r16
    13f8:	db cf       	rjmp	.-74     	; 0x13b0 <malloc+0x22>
    13fa:	21 15       	cp	r18, r1
    13fc:	31 05       	cpc	r19, r1
    13fe:	f9 f0       	breq	.+62     	; 0x143e <malloc+0xb0>
    1400:	28 1b       	sub	r18, r24
    1402:	39 0b       	sbc	r19, r25
    1404:	24 30       	cpi	r18, 0x04	; 4
    1406:	31 05       	cpc	r19, r1
    1408:	80 f4       	brcc	.+32     	; 0x142a <malloc+0x9c>
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	61 15       	cp	r22, r1
    1410:	71 05       	cpc	r23, r1
    1412:	21 f0       	breq	.+8      	; 0x141c <malloc+0x8e>
    1414:	fb 01       	movw	r30, r22
    1416:	93 83       	std	Z+3, r25	; 0x03
    1418:	82 83       	std	Z+2, r24	; 0x02
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <malloc+0x96>
    141c:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <__flp+0x1>
    1420:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__flp>
    1424:	fe 01       	movw	r30, r28
    1426:	32 96       	adiw	r30, 0x02	; 2
    1428:	44 c0       	rjmp	.+136    	; 0x14b2 <malloc+0x124>
    142a:	fe 01       	movw	r30, r28
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	81 93       	st	Z+, r24
    1432:	91 93       	st	Z+, r25
    1434:	22 50       	subi	r18, 0x02	; 2
    1436:	31 09       	sbc	r19, r1
    1438:	39 83       	std	Y+1, r19	; 0x01
    143a:	28 83       	st	Y, r18
    143c:	3a c0       	rjmp	.+116    	; 0x14b2 <malloc+0x124>
    143e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__brkval>
    1442:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__brkval+0x1>
    1446:	23 2b       	or	r18, r19
    1448:	41 f4       	brne	.+16     	; 0x145a <malloc+0xcc>
    144a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    144e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1452:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <__brkval+0x1>
    1456:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <__brkval>
    145a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    145e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	41 f4       	brne	.+16     	; 0x1478 <malloc+0xea>
    1468:	2d b7       	in	r18, 0x3d	; 61
    146a:	3e b7       	in	r19, 0x3e	; 62
    146c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1470:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1474:	24 1b       	sub	r18, r20
    1476:	35 0b       	sbc	r19, r21
    1478:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__brkval>
    147c:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__brkval+0x1>
    1480:	e2 17       	cp	r30, r18
    1482:	f3 07       	cpc	r31, r19
    1484:	a0 f4       	brcc	.+40     	; 0x14ae <malloc+0x120>
    1486:	2e 1b       	sub	r18, r30
    1488:	3f 0b       	sbc	r19, r31
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	78 f0       	brcs	.+30     	; 0x14ae <malloc+0x120>
    1490:	ac 01       	movw	r20, r24
    1492:	4e 5f       	subi	r20, 0xFE	; 254
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	24 17       	cp	r18, r20
    1498:	35 07       	cpc	r19, r21
    149a:	48 f0       	brcs	.+18     	; 0x14ae <malloc+0x120>
    149c:	4e 0f       	add	r20, r30
    149e:	5f 1f       	adc	r21, r31
    14a0:	50 93 49 02 	sts	0x0249, r21	; 0x800249 <__brkval+0x1>
    14a4:	40 93 48 02 	sts	0x0248, r20	; 0x800248 <__brkval>
    14a8:	81 93       	st	Z+, r24
    14aa:	91 93       	st	Z+, r25
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <malloc+0x124>
    14ae:	e0 e0       	ldi	r30, 0x00	; 0
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	cf 01       	movw	r24, r30
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <free>:
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <free+0xa>
    14c6:	81 c0       	rjmp	.+258    	; 0x15ca <free+0x10c>
    14c8:	fc 01       	movw	r30, r24
    14ca:	32 97       	sbiw	r30, 0x02	; 2
    14cc:	13 82       	std	Z+3, r1	; 0x03
    14ce:	12 82       	std	Z+2, r1	; 0x02
    14d0:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <__flp>
    14d4:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <__flp+0x1>
    14d8:	10 97       	sbiw	r26, 0x00	; 0
    14da:	81 f4       	brne	.+32     	; 0x14fc <free+0x3e>
    14dc:	20 81       	ld	r18, Z
    14de:	31 81       	ldd	r19, Z+1	; 0x01
    14e0:	82 0f       	add	r24, r18
    14e2:	93 1f       	adc	r25, r19
    14e4:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__brkval>
    14e8:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__brkval+0x1>
    14ec:	28 17       	cp	r18, r24
    14ee:	39 07       	cpc	r19, r25
    14f0:	51 f5       	brne	.+84     	; 0x1546 <free+0x88>
    14f2:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <__brkval+0x1>
    14f6:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <__brkval>
    14fa:	67 c0       	rjmp	.+206    	; 0x15ca <free+0x10c>
    14fc:	ed 01       	movw	r28, r26
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	ce 17       	cp	r28, r30
    1504:	df 07       	cpc	r29, r31
    1506:	40 f4       	brcc	.+16     	; 0x1518 <free+0x5a>
    1508:	4a 81       	ldd	r20, Y+2	; 0x02
    150a:	5b 81       	ldd	r21, Y+3	; 0x03
    150c:	9e 01       	movw	r18, r28
    150e:	41 15       	cp	r20, r1
    1510:	51 05       	cpc	r21, r1
    1512:	f1 f0       	breq	.+60     	; 0x1550 <free+0x92>
    1514:	ea 01       	movw	r28, r20
    1516:	f5 cf       	rjmp	.-22     	; 0x1502 <free+0x44>
    1518:	d3 83       	std	Z+3, r29	; 0x03
    151a:	c2 83       	std	Z+2, r28	; 0x02
    151c:	40 81       	ld	r20, Z
    151e:	51 81       	ldd	r21, Z+1	; 0x01
    1520:	84 0f       	add	r24, r20
    1522:	95 1f       	adc	r25, r21
    1524:	c8 17       	cp	r28, r24
    1526:	d9 07       	cpc	r29, r25
    1528:	59 f4       	brne	.+22     	; 0x1540 <free+0x82>
    152a:	88 81       	ld	r24, Y
    152c:	99 81       	ldd	r25, Y+1	; 0x01
    152e:	84 0f       	add	r24, r20
    1530:	95 1f       	adc	r25, r21
    1532:	02 96       	adiw	r24, 0x02	; 2
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	93 83       	std	Z+3, r25	; 0x03
    153e:	82 83       	std	Z+2, r24	; 0x02
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	29 f4       	brne	.+10     	; 0x1550 <free+0x92>
    1546:	f0 93 4b 02 	sts	0x024B, r31	; 0x80024b <__flp+0x1>
    154a:	e0 93 4a 02 	sts	0x024A, r30	; 0x80024a <__flp>
    154e:	3d c0       	rjmp	.+122    	; 0x15ca <free+0x10c>
    1550:	e9 01       	movw	r28, r18
    1552:	fb 83       	std	Y+3, r31	; 0x03
    1554:	ea 83       	std	Y+2, r30	; 0x02
    1556:	49 91       	ld	r20, Y+
    1558:	59 91       	ld	r21, Y+
    155a:	c4 0f       	add	r28, r20
    155c:	d5 1f       	adc	r29, r21
    155e:	ec 17       	cp	r30, r28
    1560:	fd 07       	cpc	r31, r29
    1562:	61 f4       	brne	.+24     	; 0x157c <free+0xbe>
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	84 0f       	add	r24, r20
    156a:	95 1f       	adc	r25, r21
    156c:	02 96       	adiw	r24, 0x02	; 2
    156e:	e9 01       	movw	r28, r18
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	88 83       	st	Y, r24
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	9b 83       	std	Y+3, r25	; 0x03
    157a:	8a 83       	std	Y+2, r24	; 0x02
    157c:	e0 e0       	ldi	r30, 0x00	; 0
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	12 96       	adiw	r26, 0x02	; 2
    1582:	8d 91       	ld	r24, X+
    1584:	9c 91       	ld	r25, X
    1586:	13 97       	sbiw	r26, 0x03	; 3
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	19 f0       	breq	.+6      	; 0x1592 <free+0xd4>
    158c:	fd 01       	movw	r30, r26
    158e:	dc 01       	movw	r26, r24
    1590:	f7 cf       	rjmp	.-18     	; 0x1580 <free+0xc2>
    1592:	8d 91       	ld	r24, X+
    1594:	9c 91       	ld	r25, X
    1596:	11 97       	sbiw	r26, 0x01	; 1
    1598:	9d 01       	movw	r18, r26
    159a:	2e 5f       	subi	r18, 0xFE	; 254
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	82 0f       	add	r24, r18
    15a0:	93 1f       	adc	r25, r19
    15a2:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__brkval>
    15a6:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__brkval+0x1>
    15aa:	28 17       	cp	r18, r24
    15ac:	39 07       	cpc	r19, r25
    15ae:	69 f4       	brne	.+26     	; 0x15ca <free+0x10c>
    15b0:	30 97       	sbiw	r30, 0x00	; 0
    15b2:	29 f4       	brne	.+10     	; 0x15be <free+0x100>
    15b4:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <__flp+0x1>
    15b8:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <__flp>
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <free+0x104>
    15be:	13 82       	std	Z+3, r1	; 0x03
    15c0:	12 82       	std	Z+2, r1	; 0x02
    15c2:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <__brkval+0x1>
    15c6:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <__brkval>
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <strcpy>:
    15d0:	fb 01       	movw	r30, r22
    15d2:	dc 01       	movw	r26, r24
    15d4:	01 90       	ld	r0, Z+
    15d6:	0d 92       	st	X+, r0
    15d8:	00 20       	and	r0, r0
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <strcpy+0x4>
    15dc:	08 95       	ret

000015de <sprintf>:
    15de:	ae e0       	ldi	r26, 0x0E	; 14
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 ef       	ldi	r30, 0xF5	; 245
    15e4:	fa e0       	ldi	r31, 0x0A	; 10
    15e6:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__prologue_saves__+0x1c>
    15ea:	0d 89       	ldd	r16, Y+21	; 0x15
    15ec:	1e 89       	ldd	r17, Y+22	; 0x16
    15ee:	86 e0       	ldi	r24, 0x06	; 6
    15f0:	8c 83       	std	Y+4, r24	; 0x04
    15f2:	1a 83       	std	Y+2, r17	; 0x02
    15f4:	09 83       	std	Y+1, r16	; 0x01
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f e7       	ldi	r25, 0x7F	; 127
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	ae 01       	movw	r20, r28
    1600:	47 5e       	subi	r20, 0xE7	; 231
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	6f 89       	ldd	r22, Y+23	; 0x17
    1606:	78 8d       	ldd	r23, Y+24	; 0x18
    1608:	ce 01       	movw	r24, r28
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	0e 94 11 0b 	call	0x1622	; 0x1622 <vfprintf>
    1610:	ef 81       	ldd	r30, Y+7	; 0x07
    1612:	f8 85       	ldd	r31, Y+8	; 0x08
    1614:	e0 0f       	add	r30, r16
    1616:	f1 1f       	adc	r31, r17
    1618:	10 82       	st	Z, r1
    161a:	2e 96       	adiw	r28, 0x0e	; 14
    161c:	e4 e0       	ldi	r30, 0x04	; 4
    161e:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__epilogue_restores__+0x1c>

00001622 <vfprintf>:
    1622:	ab e0       	ldi	r26, 0x0B	; 11
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e1       	ldi	r30, 0x17	; 23
    1628:	fb e0       	ldi	r31, 0x0B	; 11
    162a:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__>
    162e:	6c 01       	movw	r12, r24
    1630:	7b 01       	movw	r14, r22
    1632:	8a 01       	movw	r16, r20
    1634:	fc 01       	movw	r30, r24
    1636:	17 82       	std	Z+7, r1	; 0x07
    1638:	16 82       	std	Z+6, r1	; 0x06
    163a:	83 81       	ldd	r24, Z+3	; 0x03
    163c:	81 ff       	sbrs	r24, 1
    163e:	cc c1       	rjmp	.+920    	; 0x19d8 <vfprintf+0x3b6>
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	3c 01       	movw	r6, r24
    1646:	f6 01       	movw	r30, r12
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	f7 01       	movw	r30, r14
    164c:	93 fd       	sbrc	r25, 3
    164e:	85 91       	lpm	r24, Z+
    1650:	93 ff       	sbrs	r25, 3
    1652:	81 91       	ld	r24, Z+
    1654:	7f 01       	movw	r14, r30
    1656:	88 23       	and	r24, r24
    1658:	09 f4       	brne	.+2      	; 0x165c <vfprintf+0x3a>
    165a:	ba c1       	rjmp	.+884    	; 0x19d0 <vfprintf+0x3ae>
    165c:	85 32       	cpi	r24, 0x25	; 37
    165e:	39 f4       	brne	.+14     	; 0x166e <vfprintf+0x4c>
    1660:	93 fd       	sbrc	r25, 3
    1662:	85 91       	lpm	r24, Z+
    1664:	93 ff       	sbrs	r25, 3
    1666:	81 91       	ld	r24, Z+
    1668:	7f 01       	movw	r14, r30
    166a:	85 32       	cpi	r24, 0x25	; 37
    166c:	29 f4       	brne	.+10     	; 0x1678 <vfprintf+0x56>
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    1676:	e7 cf       	rjmp	.-50     	; 0x1646 <vfprintf+0x24>
    1678:	91 2c       	mov	r9, r1
    167a:	21 2c       	mov	r2, r1
    167c:	31 2c       	mov	r3, r1
    167e:	ff e1       	ldi	r31, 0x1F	; 31
    1680:	f3 15       	cp	r31, r3
    1682:	d8 f0       	brcs	.+54     	; 0x16ba <vfprintf+0x98>
    1684:	8b 32       	cpi	r24, 0x2B	; 43
    1686:	79 f0       	breq	.+30     	; 0x16a6 <vfprintf+0x84>
    1688:	38 f4       	brcc	.+14     	; 0x1698 <vfprintf+0x76>
    168a:	80 32       	cpi	r24, 0x20	; 32
    168c:	79 f0       	breq	.+30     	; 0x16ac <vfprintf+0x8a>
    168e:	83 32       	cpi	r24, 0x23	; 35
    1690:	a1 f4       	brne	.+40     	; 0x16ba <vfprintf+0x98>
    1692:	23 2d       	mov	r18, r3
    1694:	20 61       	ori	r18, 0x10	; 16
    1696:	1d c0       	rjmp	.+58     	; 0x16d2 <vfprintf+0xb0>
    1698:	8d 32       	cpi	r24, 0x2D	; 45
    169a:	61 f0       	breq	.+24     	; 0x16b4 <vfprintf+0x92>
    169c:	80 33       	cpi	r24, 0x30	; 48
    169e:	69 f4       	brne	.+26     	; 0x16ba <vfprintf+0x98>
    16a0:	23 2d       	mov	r18, r3
    16a2:	21 60       	ori	r18, 0x01	; 1
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <vfprintf+0xb0>
    16a6:	83 2d       	mov	r24, r3
    16a8:	82 60       	ori	r24, 0x02	; 2
    16aa:	38 2e       	mov	r3, r24
    16ac:	e3 2d       	mov	r30, r3
    16ae:	e4 60       	ori	r30, 0x04	; 4
    16b0:	3e 2e       	mov	r3, r30
    16b2:	2a c0       	rjmp	.+84     	; 0x1708 <vfprintf+0xe6>
    16b4:	f3 2d       	mov	r31, r3
    16b6:	f8 60       	ori	r31, 0x08	; 8
    16b8:	1d c0       	rjmp	.+58     	; 0x16f4 <vfprintf+0xd2>
    16ba:	37 fc       	sbrc	r3, 7
    16bc:	2d c0       	rjmp	.+90     	; 0x1718 <vfprintf+0xf6>
    16be:	20 ed       	ldi	r18, 0xD0	; 208
    16c0:	28 0f       	add	r18, r24
    16c2:	2a 30       	cpi	r18, 0x0A	; 10
    16c4:	40 f0       	brcs	.+16     	; 0x16d6 <vfprintf+0xb4>
    16c6:	8e 32       	cpi	r24, 0x2E	; 46
    16c8:	b9 f4       	brne	.+46     	; 0x16f8 <vfprintf+0xd6>
    16ca:	36 fc       	sbrc	r3, 6
    16cc:	81 c1       	rjmp	.+770    	; 0x19d0 <vfprintf+0x3ae>
    16ce:	23 2d       	mov	r18, r3
    16d0:	20 64       	ori	r18, 0x40	; 64
    16d2:	32 2e       	mov	r3, r18
    16d4:	19 c0       	rjmp	.+50     	; 0x1708 <vfprintf+0xe6>
    16d6:	36 fe       	sbrs	r3, 6
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0xc4>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	98 9e       	mul	r9, r24
    16de:	20 0d       	add	r18, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	92 2e       	mov	r9, r18
    16e4:	11 c0       	rjmp	.+34     	; 0x1708 <vfprintf+0xe6>
    16e6:	ea e0       	ldi	r30, 0x0A	; 10
    16e8:	2e 9e       	mul	r2, r30
    16ea:	20 0d       	add	r18, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	22 2e       	mov	r2, r18
    16f0:	f3 2d       	mov	r31, r3
    16f2:	f0 62       	ori	r31, 0x20	; 32
    16f4:	3f 2e       	mov	r3, r31
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <vfprintf+0xe6>
    16f8:	8c 36       	cpi	r24, 0x6C	; 108
    16fa:	21 f4       	brne	.+8      	; 0x1704 <vfprintf+0xe2>
    16fc:	83 2d       	mov	r24, r3
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	38 2e       	mov	r3, r24
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0xe6>
    1704:	88 36       	cpi	r24, 0x68	; 104
    1706:	41 f4       	brne	.+16     	; 0x1718 <vfprintf+0xf6>
    1708:	f7 01       	movw	r30, r14
    170a:	93 fd       	sbrc	r25, 3
    170c:	85 91       	lpm	r24, Z+
    170e:	93 ff       	sbrs	r25, 3
    1710:	81 91       	ld	r24, Z+
    1712:	7f 01       	movw	r14, r30
    1714:	81 11       	cpse	r24, r1
    1716:	b3 cf       	rjmp	.-154    	; 0x167e <vfprintf+0x5c>
    1718:	98 2f       	mov	r25, r24
    171a:	9f 7d       	andi	r25, 0xDF	; 223
    171c:	95 54       	subi	r25, 0x45	; 69
    171e:	93 30       	cpi	r25, 0x03	; 3
    1720:	28 f4       	brcc	.+10     	; 0x172c <vfprintf+0x10a>
    1722:	0c 5f       	subi	r16, 0xFC	; 252
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	9f e3       	ldi	r25, 0x3F	; 63
    1728:	99 83       	std	Y+1, r25	; 0x01
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <vfprintf+0x124>
    172c:	83 36       	cpi	r24, 0x63	; 99
    172e:	31 f0       	breq	.+12     	; 0x173c <vfprintf+0x11a>
    1730:	83 37       	cpi	r24, 0x73	; 115
    1732:	71 f0       	breq	.+28     	; 0x1750 <vfprintf+0x12e>
    1734:	83 35       	cpi	r24, 0x53	; 83
    1736:	09 f0       	breq	.+2      	; 0x173a <vfprintf+0x118>
    1738:	59 c0       	rjmp	.+178    	; 0x17ec <vfprintf+0x1ca>
    173a:	21 c0       	rjmp	.+66     	; 0x177e <vfprintf+0x15c>
    173c:	f8 01       	movw	r30, r16
    173e:	80 81       	ld	r24, Z
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	0e 5f       	subi	r16, 0xFE	; 254
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	88 24       	eor	r8, r8
    1748:	83 94       	inc	r8
    174a:	91 2c       	mov	r9, r1
    174c:	53 01       	movw	r10, r6
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <vfprintf+0x154>
    1750:	28 01       	movw	r4, r16
    1752:	f2 e0       	ldi	r31, 0x02	; 2
    1754:	4f 0e       	add	r4, r31
    1756:	51 1c       	adc	r5, r1
    1758:	f8 01       	movw	r30, r16
    175a:	a0 80       	ld	r10, Z
    175c:	b1 80       	ldd	r11, Z+1	; 0x01
    175e:	36 fe       	sbrs	r3, 6
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <vfprintf+0x146>
    1762:	69 2d       	mov	r22, r9
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x14a>
    1768:	6f ef       	ldi	r22, 0xFF	; 255
    176a:	7f ef       	ldi	r23, 0xFF	; 255
    176c:	c5 01       	movw	r24, r10
    176e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <strnlen>
    1772:	4c 01       	movw	r8, r24
    1774:	82 01       	movw	r16, r4
    1776:	f3 2d       	mov	r31, r3
    1778:	ff 77       	andi	r31, 0x7F	; 127
    177a:	3f 2e       	mov	r3, r31
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <vfprintf+0x188>
    177e:	28 01       	movw	r4, r16
    1780:	22 e0       	ldi	r18, 0x02	; 2
    1782:	42 0e       	add	r4, r18
    1784:	51 1c       	adc	r5, r1
    1786:	f8 01       	movw	r30, r16
    1788:	a0 80       	ld	r10, Z
    178a:	b1 80       	ldd	r11, Z+1	; 0x01
    178c:	36 fe       	sbrs	r3, 6
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <vfprintf+0x174>
    1790:	69 2d       	mov	r22, r9
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x178>
    1796:	6f ef       	ldi	r22, 0xFF	; 255
    1798:	7f ef       	ldi	r23, 0xFF	; 255
    179a:	c5 01       	movw	r24, r10
    179c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <strnlen_P>
    17a0:	4c 01       	movw	r8, r24
    17a2:	f3 2d       	mov	r31, r3
    17a4:	f0 68       	ori	r31, 0x80	; 128
    17a6:	3f 2e       	mov	r3, r31
    17a8:	82 01       	movw	r16, r4
    17aa:	33 fc       	sbrc	r3, 3
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <vfprintf+0x1c2>
    17ae:	82 2d       	mov	r24, r2
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	88 16       	cp	r8, r24
    17b4:	99 06       	cpc	r9, r25
    17b6:	b0 f4       	brcc	.+44     	; 0x17e4 <vfprintf+0x1c2>
    17b8:	b6 01       	movw	r22, r12
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    17c2:	2a 94       	dec	r2
    17c4:	f4 cf       	rjmp	.-24     	; 0x17ae <vfprintf+0x18c>
    17c6:	f5 01       	movw	r30, r10
    17c8:	37 fc       	sbrc	r3, 7
    17ca:	85 91       	lpm	r24, Z+
    17cc:	37 fe       	sbrs	r3, 7
    17ce:	81 91       	ld	r24, Z+
    17d0:	5f 01       	movw	r10, r30
    17d2:	b6 01       	movw	r22, r12
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    17da:	21 10       	cpse	r2, r1
    17dc:	2a 94       	dec	r2
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	82 1a       	sub	r8, r18
    17e2:	91 08       	sbc	r9, r1
    17e4:	81 14       	cp	r8, r1
    17e6:	91 04       	cpc	r9, r1
    17e8:	71 f7       	brne	.-36     	; 0x17c6 <vfprintf+0x1a4>
    17ea:	e8 c0       	rjmp	.+464    	; 0x19bc <vfprintf+0x39a>
    17ec:	84 36       	cpi	r24, 0x64	; 100
    17ee:	11 f0       	breq	.+4      	; 0x17f4 <vfprintf+0x1d2>
    17f0:	89 36       	cpi	r24, 0x69	; 105
    17f2:	41 f5       	brne	.+80     	; 0x1844 <vfprintf+0x222>
    17f4:	f8 01       	movw	r30, r16
    17f6:	37 fe       	sbrs	r3, 7
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <vfprintf+0x1e6>
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	0c 5f       	subi	r16, 0xFC	; 252
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <vfprintf+0x1f6>
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	07 2e       	mov	r0, r23
    180e:	00 0c       	add	r0, r0
    1810:	88 0b       	sbc	r24, r24
    1812:	99 0b       	sbc	r25, r25
    1814:	0e 5f       	subi	r16, 0xFE	; 254
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	f3 2d       	mov	r31, r3
    181a:	ff 76       	andi	r31, 0x6F	; 111
    181c:	3f 2e       	mov	r3, r31
    181e:	97 ff       	sbrs	r25, 7
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <vfprintf+0x212>
    1822:	90 95       	com	r25
    1824:	80 95       	com	r24
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	f0 68       	ori	r31, 0x80	; 128
    1832:	3f 2e       	mov	r3, r31
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	a3 01       	movw	r20, r6
    183a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__ultoa_invert>
    183e:	88 2e       	mov	r8, r24
    1840:	86 18       	sub	r8, r6
    1842:	45 c0       	rjmp	.+138    	; 0x18ce <vfprintf+0x2ac>
    1844:	85 37       	cpi	r24, 0x75	; 117
    1846:	31 f4       	brne	.+12     	; 0x1854 <vfprintf+0x232>
    1848:	23 2d       	mov	r18, r3
    184a:	2f 7e       	andi	r18, 0xEF	; 239
    184c:	b2 2e       	mov	r11, r18
    184e:	2a e0       	ldi	r18, 0x0A	; 10
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	25 c0       	rjmp	.+74     	; 0x189e <vfprintf+0x27c>
    1854:	93 2d       	mov	r25, r3
    1856:	99 7f       	andi	r25, 0xF9	; 249
    1858:	b9 2e       	mov	r11, r25
    185a:	8f 36       	cpi	r24, 0x6F	; 111
    185c:	c1 f0       	breq	.+48     	; 0x188e <vfprintf+0x26c>
    185e:	18 f4       	brcc	.+6      	; 0x1866 <vfprintf+0x244>
    1860:	88 35       	cpi	r24, 0x58	; 88
    1862:	79 f0       	breq	.+30     	; 0x1882 <vfprintf+0x260>
    1864:	b5 c0       	rjmp	.+362    	; 0x19d0 <vfprintf+0x3ae>
    1866:	80 37       	cpi	r24, 0x70	; 112
    1868:	19 f0       	breq	.+6      	; 0x1870 <vfprintf+0x24e>
    186a:	88 37       	cpi	r24, 0x78	; 120
    186c:	21 f0       	breq	.+8      	; 0x1876 <vfprintf+0x254>
    186e:	b0 c0       	rjmp	.+352    	; 0x19d0 <vfprintf+0x3ae>
    1870:	e9 2f       	mov	r30, r25
    1872:	e0 61       	ori	r30, 0x10	; 16
    1874:	be 2e       	mov	r11, r30
    1876:	b4 fe       	sbrs	r11, 4
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <vfprintf+0x272>
    187a:	fb 2d       	mov	r31, r11
    187c:	f4 60       	ori	r31, 0x04	; 4
    187e:	bf 2e       	mov	r11, r31
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <vfprintf+0x272>
    1882:	34 fe       	sbrs	r3, 4
    1884:	0a c0       	rjmp	.+20     	; 0x189a <vfprintf+0x278>
    1886:	29 2f       	mov	r18, r25
    1888:	26 60       	ori	r18, 0x06	; 6
    188a:	b2 2e       	mov	r11, r18
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x278>
    188e:	28 e0       	ldi	r18, 0x08	; 8
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	05 c0       	rjmp	.+10     	; 0x189e <vfprintf+0x27c>
    1894:	20 e1       	ldi	r18, 0x10	; 16
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x27c>
    189a:	20 e1       	ldi	r18, 0x10	; 16
    189c:	32 e0       	ldi	r19, 0x02	; 2
    189e:	f8 01       	movw	r30, r16
    18a0:	b7 fe       	sbrs	r11, 7
    18a2:	07 c0       	rjmp	.+14     	; 0x18b2 <vfprintf+0x290>
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	0c 5f       	subi	r16, 0xFC	; 252
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vfprintf+0x29c>
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 5f       	subi	r16, 0xFE	; 254
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	a3 01       	movw	r20, r6
    18c0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__ultoa_invert>
    18c4:	88 2e       	mov	r8, r24
    18c6:	86 18       	sub	r8, r6
    18c8:	fb 2d       	mov	r31, r11
    18ca:	ff 77       	andi	r31, 0x7F	; 127
    18cc:	3f 2e       	mov	r3, r31
    18ce:	36 fe       	sbrs	r3, 6
    18d0:	0d c0       	rjmp	.+26     	; 0x18ec <vfprintf+0x2ca>
    18d2:	23 2d       	mov	r18, r3
    18d4:	2e 7f       	andi	r18, 0xFE	; 254
    18d6:	a2 2e       	mov	r10, r18
    18d8:	89 14       	cp	r8, r9
    18da:	58 f4       	brcc	.+22     	; 0x18f2 <vfprintf+0x2d0>
    18dc:	34 fe       	sbrs	r3, 4
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <vfprintf+0x2d4>
    18e0:	32 fc       	sbrc	r3, 2
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <vfprintf+0x2d4>
    18e4:	83 2d       	mov	r24, r3
    18e6:	8e 7e       	andi	r24, 0xEE	; 238
    18e8:	a8 2e       	mov	r10, r24
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <vfprintf+0x2d4>
    18ec:	b8 2c       	mov	r11, r8
    18ee:	a3 2c       	mov	r10, r3
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <vfprintf+0x2d6>
    18f2:	b8 2c       	mov	r11, r8
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <vfprintf+0x2d6>
    18f6:	b9 2c       	mov	r11, r9
    18f8:	a4 fe       	sbrs	r10, 4
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <vfprintf+0x2f8>
    18fc:	fe 01       	movw	r30, r28
    18fe:	e8 0d       	add	r30, r8
    1900:	f1 1d       	adc	r31, r1
    1902:	80 81       	ld	r24, Z
    1904:	80 33       	cpi	r24, 0x30	; 48
    1906:	21 f4       	brne	.+8      	; 0x1910 <vfprintf+0x2ee>
    1908:	9a 2d       	mov	r25, r10
    190a:	99 7e       	andi	r25, 0xE9	; 233
    190c:	a9 2e       	mov	r10, r25
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <vfprintf+0x300>
    1910:	a2 fe       	sbrs	r10, 2
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <vfprintf+0x2fe>
    1914:	b3 94       	inc	r11
    1916:	b3 94       	inc	r11
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <vfprintf+0x300>
    191a:	8a 2d       	mov	r24, r10
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	09 f0       	breq	.+2      	; 0x1922 <vfprintf+0x300>
    1920:	b3 94       	inc	r11
    1922:	a3 fc       	sbrc	r10, 3
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <vfprintf+0x326>
    1926:	a0 fe       	sbrs	r10, 0
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <vfprintf+0x314>
    192a:	b2 14       	cp	r11, r2
    192c:	88 f4       	brcc	.+34     	; 0x1950 <vfprintf+0x32e>
    192e:	28 0c       	add	r2, r8
    1930:	92 2c       	mov	r9, r2
    1932:	9b 18       	sub	r9, r11
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <vfprintf+0x330>
    1936:	b2 14       	cp	r11, r2
    1938:	60 f4       	brcc	.+24     	; 0x1952 <vfprintf+0x330>
    193a:	b6 01       	movw	r22, r12
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    1944:	b3 94       	inc	r11
    1946:	f7 cf       	rjmp	.-18     	; 0x1936 <vfprintf+0x314>
    1948:	b2 14       	cp	r11, r2
    194a:	18 f4       	brcc	.+6      	; 0x1952 <vfprintf+0x330>
    194c:	2b 18       	sub	r2, r11
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <vfprintf+0x332>
    1950:	98 2c       	mov	r9, r8
    1952:	21 2c       	mov	r2, r1
    1954:	a4 fe       	sbrs	r10, 4
    1956:	10 c0       	rjmp	.+32     	; 0x1978 <vfprintf+0x356>
    1958:	b6 01       	movw	r22, r12
    195a:	80 e3       	ldi	r24, 0x30	; 48
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    1962:	a2 fe       	sbrs	r10, 2
    1964:	17 c0       	rjmp	.+46     	; 0x1994 <vfprintf+0x372>
    1966:	a1 fc       	sbrc	r10, 1
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <vfprintf+0x34e>
    196a:	88 e7       	ldi	r24, 0x78	; 120
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x352>
    1970:	88 e5       	ldi	r24, 0x58	; 88
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	b6 01       	movw	r22, r12
    1976:	0c c0       	rjmp	.+24     	; 0x1990 <vfprintf+0x36e>
    1978:	8a 2d       	mov	r24, r10
    197a:	86 78       	andi	r24, 0x86	; 134
    197c:	59 f0       	breq	.+22     	; 0x1994 <vfprintf+0x372>
    197e:	a1 fe       	sbrs	r10, 1
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <vfprintf+0x364>
    1982:	8b e2       	ldi	r24, 0x2B	; 43
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <vfprintf+0x366>
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	a7 fc       	sbrc	r10, 7
    198a:	8d e2       	ldi	r24, 0x2D	; 45
    198c:	b6 01       	movw	r22, r12
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    1994:	89 14       	cp	r8, r9
    1996:	38 f4       	brcc	.+14     	; 0x19a6 <vfprintf+0x384>
    1998:	b6 01       	movw	r22, r12
    199a:	80 e3       	ldi	r24, 0x30	; 48
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    19a2:	9a 94       	dec	r9
    19a4:	f7 cf       	rjmp	.-18     	; 0x1994 <vfprintf+0x372>
    19a6:	8a 94       	dec	r8
    19a8:	f3 01       	movw	r30, r6
    19aa:	e8 0d       	add	r30, r8
    19ac:	f1 1d       	adc	r31, r1
    19ae:	80 81       	ld	r24, Z
    19b0:	b6 01       	movw	r22, r12
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    19b8:	81 10       	cpse	r8, r1
    19ba:	f5 cf       	rjmp	.-22     	; 0x19a6 <vfprintf+0x384>
    19bc:	22 20       	and	r2, r2
    19be:	09 f4       	brne	.+2      	; 0x19c2 <vfprintf+0x3a0>
    19c0:	42 ce       	rjmp	.-892    	; 0x1646 <vfprintf+0x24>
    19c2:	b6 01       	movw	r22, r12
    19c4:	80 e2       	ldi	r24, 0x20	; 32
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <fputc>
    19cc:	2a 94       	dec	r2
    19ce:	f6 cf       	rjmp	.-20     	; 0x19bc <vfprintf+0x39a>
    19d0:	f6 01       	movw	r30, r12
    19d2:	86 81       	ldd	r24, Z+6	; 0x06
    19d4:	97 81       	ldd	r25, Z+7	; 0x07
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <vfprintf+0x3ba>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	2b 96       	adiw	r28, 0x0b	; 11
    19de:	e2 e1       	ldi	r30, 0x12	; 18
    19e0:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__>

000019e4 <dtoa_prf>:
    19e4:	a9 e0       	ldi	r26, 0x09	; 9
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 ef       	ldi	r30, 0xF8	; 248
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__prologue_saves__+0xc>
    19f0:	6a 01       	movw	r12, r20
    19f2:	12 2f       	mov	r17, r18
    19f4:	b0 2e       	mov	r11, r16
    19f6:	2b e3       	ldi	r18, 0x3B	; 59
    19f8:	20 17       	cp	r18, r16
    19fa:	20 f0       	brcs	.+8      	; 0x1a04 <dtoa_prf+0x20>
    19fc:	ff 24       	eor	r15, r15
    19fe:	f3 94       	inc	r15
    1a00:	f0 0e       	add	r15, r16
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <dtoa_prf+0x24>
    1a04:	2c e3       	ldi	r18, 0x3C	; 60
    1a06:	f2 2e       	mov	r15, r18
    1a08:	0f 2d       	mov	r16, r15
    1a0a:	27 e0       	ldi	r18, 0x07	; 7
    1a0c:	ae 01       	movw	r20, r28
    1a0e:	4f 5f       	subi	r20, 0xFF	; 255
    1a10:	5f 4f       	sbci	r21, 0xFF	; 255
    1a12:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__ftoa_engine>
    1a16:	bc 01       	movw	r22, r24
    1a18:	49 81       	ldd	r20, Y+1	; 0x01
    1a1a:	84 2f       	mov	r24, r20
    1a1c:	89 70       	andi	r24, 0x09	; 9
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <dtoa_prf+0x4a>
    1a22:	e1 fc       	sbrc	r14, 1
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <dtoa_prf+0x4e>
    1a26:	e0 fe       	sbrs	r14, 0
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <dtoa_prf+0x52>
    1a2a:	90 e2       	ldi	r25, 0x20	; 32
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <dtoa_prf+0x54>
    1a2e:	9d e2       	ldi	r25, 0x2D	; 45
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <dtoa_prf+0x54>
    1a32:	9b e2       	ldi	r25, 0x2B	; 43
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <dtoa_prf+0x54>
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	5e 2d       	mov	r21, r14
    1a3a:	50 71       	andi	r21, 0x10	; 16
    1a3c:	43 ff       	sbrs	r20, 3
    1a3e:	3c c0       	rjmp	.+120    	; 0x1ab8 <dtoa_prf+0xd4>
    1a40:	91 11       	cpse	r25, r1
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <dtoa_prf+0x64>
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <dtoa_prf+0x66>
    1a48:	84 e0       	ldi	r24, 0x04	; 4
    1a4a:	81 17       	cp	r24, r17
    1a4c:	18 f4       	brcc	.+6      	; 0x1a54 <dtoa_prf+0x70>
    1a4e:	21 2f       	mov	r18, r17
    1a50:	28 1b       	sub	r18, r24
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <dtoa_prf+0x72>
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	51 11       	cpse	r21, r1
    1a58:	0b c0       	rjmp	.+22     	; 0x1a70 <dtoa_prf+0x8c>
    1a5a:	f6 01       	movw	r30, r12
    1a5c:	82 2f       	mov	r24, r18
    1a5e:	30 e2       	ldi	r19, 0x20	; 32
    1a60:	88 23       	and	r24, r24
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <dtoa_prf+0x86>
    1a64:	31 93       	st	Z+, r19
    1a66:	81 50       	subi	r24, 0x01	; 1
    1a68:	fb cf       	rjmp	.-10     	; 0x1a60 <dtoa_prf+0x7c>
    1a6a:	c2 0e       	add	r12, r18
    1a6c:	d1 1c       	adc	r13, r1
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	99 23       	and	r25, r25
    1a72:	29 f0       	breq	.+10     	; 0x1a7e <dtoa_prf+0x9a>
    1a74:	d6 01       	movw	r26, r12
    1a76:	9c 93       	st	X, r25
    1a78:	f6 01       	movw	r30, r12
    1a7a:	31 96       	adiw	r30, 0x01	; 1
    1a7c:	6f 01       	movw	r12, r30
    1a7e:	c6 01       	movw	r24, r12
    1a80:	03 96       	adiw	r24, 0x03	; 3
    1a82:	e2 fe       	sbrs	r14, 2
    1a84:	0a c0       	rjmp	.+20     	; 0x1a9a <dtoa_prf+0xb6>
    1a86:	3e e4       	ldi	r19, 0x4E	; 78
    1a88:	d6 01       	movw	r26, r12
    1a8a:	3c 93       	st	X, r19
    1a8c:	41 e4       	ldi	r20, 0x41	; 65
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	4c 93       	st	X, r20
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	12 96       	adiw	r26, 0x02	; 2
    1a96:	3c 93       	st	X, r19
    1a98:	06 c0       	rjmp	.+12     	; 0x1aa6 <dtoa_prf+0xc2>
    1a9a:	3e e6       	ldi	r19, 0x6E	; 110
    1a9c:	f6 01       	movw	r30, r12
    1a9e:	30 83       	st	Z, r19
    1aa0:	41 e6       	ldi	r20, 0x61	; 97
    1aa2:	41 83       	std	Z+1, r20	; 0x01
    1aa4:	32 83       	std	Z+2, r19	; 0x02
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	32 2f       	mov	r19, r18
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	33 23       	and	r19, r19
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <dtoa_prf+0xce>
    1ab0:	42 c0       	rjmp	.+132    	; 0x1b36 <dtoa_prf+0x152>
    1ab2:	41 93       	st	Z+, r20
    1ab4:	31 50       	subi	r19, 0x01	; 1
    1ab6:	fa cf       	rjmp	.-12     	; 0x1aac <dtoa_prf+0xc8>
    1ab8:	42 ff       	sbrs	r20, 2
    1aba:	44 c0       	rjmp	.+136    	; 0x1b44 <dtoa_prf+0x160>
    1abc:	91 11       	cpse	r25, r1
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <dtoa_prf+0xe0>
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <dtoa_prf+0xe2>
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	81 17       	cp	r24, r17
    1ac8:	18 f4       	brcc	.+6      	; 0x1ad0 <dtoa_prf+0xec>
    1aca:	21 2f       	mov	r18, r17
    1acc:	28 1b       	sub	r18, r24
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <dtoa_prf+0xee>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	51 11       	cpse	r21, r1
    1ad4:	0b c0       	rjmp	.+22     	; 0x1aec <dtoa_prf+0x108>
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	82 2f       	mov	r24, r18
    1ada:	30 e2       	ldi	r19, 0x20	; 32
    1adc:	88 23       	and	r24, r24
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <dtoa_prf+0x102>
    1ae0:	31 93       	st	Z+, r19
    1ae2:	81 50       	subi	r24, 0x01	; 1
    1ae4:	fb cf       	rjmp	.-10     	; 0x1adc <dtoa_prf+0xf8>
    1ae6:	c2 0e       	add	r12, r18
    1ae8:	d1 1c       	adc	r13, r1
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	99 23       	and	r25, r25
    1aee:	29 f0       	breq	.+10     	; 0x1afa <dtoa_prf+0x116>
    1af0:	d6 01       	movw	r26, r12
    1af2:	9c 93       	st	X, r25
    1af4:	f6 01       	movw	r30, r12
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	6f 01       	movw	r12, r30
    1afa:	c6 01       	movw	r24, r12
    1afc:	03 96       	adiw	r24, 0x03	; 3
    1afe:	e2 fe       	sbrs	r14, 2
    1b00:	0b c0       	rjmp	.+22     	; 0x1b18 <dtoa_prf+0x134>
    1b02:	39 e4       	ldi	r19, 0x49	; 73
    1b04:	d6 01       	movw	r26, r12
    1b06:	3c 93       	st	X, r19
    1b08:	3e e4       	ldi	r19, 0x4E	; 78
    1b0a:	11 96       	adiw	r26, 0x01	; 1
    1b0c:	3c 93       	st	X, r19
    1b0e:	11 97       	sbiw	r26, 0x01	; 1
    1b10:	36 e4       	ldi	r19, 0x46	; 70
    1b12:	12 96       	adiw	r26, 0x02	; 2
    1b14:	3c 93       	st	X, r19
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <dtoa_prf+0x142>
    1b18:	39 e6       	ldi	r19, 0x69	; 105
    1b1a:	f6 01       	movw	r30, r12
    1b1c:	30 83       	st	Z, r19
    1b1e:	3e e6       	ldi	r19, 0x6E	; 110
    1b20:	31 83       	std	Z+1, r19	; 0x01
    1b22:	36 e6       	ldi	r19, 0x66	; 102
    1b24:	32 83       	std	Z+2, r19	; 0x02
    1b26:	fc 01       	movw	r30, r24
    1b28:	32 2f       	mov	r19, r18
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	33 23       	and	r19, r19
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <dtoa_prf+0x152>
    1b30:	41 93       	st	Z+, r20
    1b32:	31 50       	subi	r19, 0x01	; 1
    1b34:	fb cf       	rjmp	.-10     	; 0x1b2c <dtoa_prf+0x148>
    1b36:	fc 01       	movw	r30, r24
    1b38:	e2 0f       	add	r30, r18
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	10 82       	st	Z, r1
    1b3e:	8e ef       	ldi	r24, 0xFE	; 254
    1b40:	9f ef       	ldi	r25, 0xFF	; 255
    1b42:	a6 c0       	rjmp	.+332    	; 0x1c90 <dtoa_prf+0x2ac>
    1b44:	21 e0       	ldi	r18, 0x01	; 1
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	91 11       	cpse	r25, r1
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <dtoa_prf+0x16c>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	16 16       	cp	r1, r22
    1b52:	17 06       	cpc	r1, r23
    1b54:	1c f4       	brge	.+6      	; 0x1b5c <dtoa_prf+0x178>
    1b56:	fb 01       	movw	r30, r22
    1b58:	31 96       	adiw	r30, 0x01	; 1
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <dtoa_prf+0x17c>
    1b5c:	e1 e0       	ldi	r30, 0x01	; 1
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	2e 0f       	add	r18, r30
    1b62:	3f 1f       	adc	r19, r31
    1b64:	bb 20       	and	r11, r11
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <dtoa_prf+0x18c>
    1b68:	eb 2d       	mov	r30, r11
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	31 96       	adiw	r30, 0x01	; 1
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <dtoa_prf+0x190>
    1b70:	e0 e0       	ldi	r30, 0x00	; 0
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	2e 0f       	add	r18, r30
    1b76:	3f 1f       	adc	r19, r31
    1b78:	e1 2f       	mov	r30, r17
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	2e 17       	cp	r18, r30
    1b7e:	3f 07       	cpc	r19, r31
    1b80:	1c f4       	brge	.+6      	; 0x1b88 <dtoa_prf+0x1a4>
    1b82:	12 1b       	sub	r17, r18
    1b84:	21 2f       	mov	r18, r17
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <dtoa_prf+0x1a6>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	8e 2d       	mov	r24, r14
    1b8c:	88 71       	andi	r24, 0x18	; 24
    1b8e:	59 f4       	brne	.+22     	; 0x1ba6 <dtoa_prf+0x1c2>
    1b90:	f6 01       	movw	r30, r12
    1b92:	82 2f       	mov	r24, r18
    1b94:	30 e2       	ldi	r19, 0x20	; 32
    1b96:	88 23       	and	r24, r24
    1b98:	19 f0       	breq	.+6      	; 0x1ba0 <dtoa_prf+0x1bc>
    1b9a:	31 93       	st	Z+, r19
    1b9c:	81 50       	subi	r24, 0x01	; 1
    1b9e:	fb cf       	rjmp	.-10     	; 0x1b96 <dtoa_prf+0x1b2>
    1ba0:	c2 0e       	add	r12, r18
    1ba2:	d1 1c       	adc	r13, r1
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	99 23       	and	r25, r25
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <dtoa_prf+0x1d0>
    1baa:	d6 01       	movw	r26, r12
    1bac:	9c 93       	st	X, r25
    1bae:	f6 01       	movw	r30, r12
    1bb0:	31 96       	adiw	r30, 0x01	; 1
    1bb2:	6f 01       	movw	r12, r30
    1bb4:	51 11       	cpse	r21, r1
    1bb6:	0b c0       	rjmp	.+22     	; 0x1bce <dtoa_prf+0x1ea>
    1bb8:	f6 01       	movw	r30, r12
    1bba:	82 2f       	mov	r24, r18
    1bbc:	90 e3       	ldi	r25, 0x30	; 48
    1bbe:	88 23       	and	r24, r24
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <dtoa_prf+0x1e4>
    1bc2:	91 93       	st	Z+, r25
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	fb cf       	rjmp	.-10     	; 0x1bbe <dtoa_prf+0x1da>
    1bc8:	c2 0e       	add	r12, r18
    1bca:	d1 1c       	adc	r13, r1
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	0f 2d       	mov	r16, r15
    1bd0:	06 0f       	add	r16, r22
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	34 2f       	mov	r19, r20
    1bd6:	30 71       	andi	r19, 0x10	; 16
    1bd8:	44 ff       	sbrs	r20, 4
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <dtoa_prf+0x1fe>
    1bdc:	91 33       	cpi	r25, 0x31	; 49
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <dtoa_prf+0x1fe>
    1be0:	01 50       	subi	r16, 0x01	; 1
    1be2:	10 16       	cp	r1, r16
    1be4:	24 f4       	brge	.+8      	; 0x1bee <dtoa_prf+0x20a>
    1be6:	09 30       	cpi	r16, 0x09	; 9
    1be8:	18 f0       	brcs	.+6      	; 0x1bf0 <dtoa_prf+0x20c>
    1bea:	08 e0       	ldi	r16, 0x08	; 8
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <dtoa_prf+0x20c>
    1bee:	01 e0       	ldi	r16, 0x01	; 1
    1bf0:	ab 01       	movw	r20, r22
    1bf2:	77 ff       	sbrs	r23, 7
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <dtoa_prf+0x216>
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	fb 01       	movw	r30, r22
    1bfc:	e4 1b       	sub	r30, r20
    1bfe:	f5 0b       	sbc	r31, r21
    1c00:	a1 e0       	ldi	r26, 0x01	; 1
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	ac 0f       	add	r26, r28
    1c06:	bd 1f       	adc	r27, r29
    1c08:	ea 0f       	add	r30, r26
    1c0a:	fb 1f       	adc	r31, r27
    1c0c:	8e e2       	ldi	r24, 0x2E	; 46
    1c0e:	a8 2e       	mov	r10, r24
    1c10:	4b 01       	movw	r8, r22
    1c12:	80 1a       	sub	r8, r16
    1c14:	91 08       	sbc	r9, r1
    1c16:	0b 2d       	mov	r16, r11
    1c18:	10 e0       	ldi	r17, 0x00	; 0
    1c1a:	11 95       	neg	r17
    1c1c:	01 95       	neg	r16
    1c1e:	11 09       	sbc	r17, r1
    1c20:	4f 3f       	cpi	r20, 0xFF	; 255
    1c22:	bf ef       	ldi	r27, 0xFF	; 255
    1c24:	5b 07       	cpc	r21, r27
    1c26:	21 f4       	brne	.+8      	; 0x1c30 <dtoa_prf+0x24c>
    1c28:	d6 01       	movw	r26, r12
    1c2a:	ac 92       	st	X, r10
    1c2c:	11 96       	adiw	r26, 0x01	; 1
    1c2e:	6d 01       	movw	r12, r26
    1c30:	64 17       	cp	r22, r20
    1c32:	75 07       	cpc	r23, r21
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <dtoa_prf+0x25c>
    1c36:	84 16       	cp	r8, r20
    1c38:	95 06       	cpc	r9, r21
    1c3a:	14 f4       	brge	.+4      	; 0x1c40 <dtoa_prf+0x25c>
    1c3c:	81 81       	ldd	r24, Z+1	; 0x01
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <dtoa_prf+0x25e>
    1c40:	80 e3       	ldi	r24, 0x30	; 48
    1c42:	41 50       	subi	r20, 0x01	; 1
    1c44:	51 09       	sbc	r21, r1
    1c46:	31 96       	adiw	r30, 0x01	; 1
    1c48:	d6 01       	movw	r26, r12
    1c4a:	11 96       	adiw	r26, 0x01	; 1
    1c4c:	7d 01       	movw	r14, r26
    1c4e:	40 17       	cp	r20, r16
    1c50:	51 07       	cpc	r21, r17
    1c52:	24 f0       	brlt	.+8      	; 0x1c5c <dtoa_prf+0x278>
    1c54:	d6 01       	movw	r26, r12
    1c56:	8c 93       	st	X, r24
    1c58:	67 01       	movw	r12, r14
    1c5a:	e2 cf       	rjmp	.-60     	; 0x1c20 <dtoa_prf+0x23c>
    1c5c:	64 17       	cp	r22, r20
    1c5e:	75 07       	cpc	r23, r21
    1c60:	39 f4       	brne	.+14     	; 0x1c70 <dtoa_prf+0x28c>
    1c62:	96 33       	cpi	r25, 0x36	; 54
    1c64:	20 f4       	brcc	.+8      	; 0x1c6e <dtoa_prf+0x28a>
    1c66:	95 33       	cpi	r25, 0x35	; 53
    1c68:	19 f4       	brne	.+6      	; 0x1c70 <dtoa_prf+0x28c>
    1c6a:	31 11       	cpse	r19, r1
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <dtoa_prf+0x28c>
    1c6e:	81 e3       	ldi	r24, 0x31	; 49
    1c70:	f6 01       	movw	r30, r12
    1c72:	80 83       	st	Z, r24
    1c74:	f7 01       	movw	r30, r14
    1c76:	82 2f       	mov	r24, r18
    1c78:	90 e2       	ldi	r25, 0x20	; 32
    1c7a:	88 23       	and	r24, r24
    1c7c:	19 f0       	breq	.+6      	; 0x1c84 <dtoa_prf+0x2a0>
    1c7e:	91 93       	st	Z+, r25
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	fb cf       	rjmp	.-10     	; 0x1c7a <dtoa_prf+0x296>
    1c84:	f7 01       	movw	r30, r14
    1c86:	e2 0f       	add	r30, r18
    1c88:	f1 1d       	adc	r31, r1
    1c8a:	10 82       	st	Z, r1
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	29 96       	adiw	r28, 0x09	; 9
    1c92:	ec e0       	ldi	r30, 0x0C	; 12
    1c94:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__epilogue_restores__+0xc>

00001c98 <__ftoa_engine>:
    1c98:	28 30       	cpi	r18, 0x08	; 8
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <__ftoa_engine+0x6>
    1c9c:	27 e0       	ldi	r18, 0x07	; 7
    1c9e:	33 27       	eor	r19, r19
    1ca0:	da 01       	movw	r26, r20
    1ca2:	99 0f       	add	r25, r25
    1ca4:	31 1d       	adc	r19, r1
    1ca6:	87 fd       	sbrc	r24, 7
    1ca8:	91 60       	ori	r25, 0x01	; 1
    1caa:	00 96       	adiw	r24, 0x00	; 0
    1cac:	61 05       	cpc	r22, r1
    1cae:	71 05       	cpc	r23, r1
    1cb0:	39 f4       	brne	.+14     	; 0x1cc0 <__ftoa_engine+0x28>
    1cb2:	32 60       	ori	r19, 0x02	; 2
    1cb4:	2e 5f       	subi	r18, 0xFE	; 254
    1cb6:	3d 93       	st	X+, r19
    1cb8:	30 e3       	ldi	r19, 0x30	; 48
    1cba:	2a 95       	dec	r18
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <__ftoa_engine+0x1e>
    1cbe:	08 95       	ret
    1cc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc2:	30 f0       	brcs	.+12     	; 0x1cd0 <__ftoa_engine+0x38>
    1cc4:	80 38       	cpi	r24, 0x80	; 128
    1cc6:	71 05       	cpc	r23, r1
    1cc8:	61 05       	cpc	r22, r1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <__ftoa_engine+0x36>
    1ccc:	3c 5f       	subi	r19, 0xFC	; 252
    1cce:	3c 5f       	subi	r19, 0xFC	; 252
    1cd0:	3d 93       	st	X+, r19
    1cd2:	91 30       	cpi	r25, 0x01	; 1
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <__ftoa_engine+0x40>
    1cd6:	80 68       	ori	r24, 0x80	; 128
    1cd8:	91 1d       	adc	r25, r1
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	1f 93       	push	r17
    1ce0:	0f 93       	push	r16
    1ce2:	ff 92       	push	r15
    1ce4:	ef 92       	push	r14
    1ce6:	19 2f       	mov	r17, r25
    1ce8:	98 7f       	andi	r25, 0xF8	; 248
    1cea:	96 95       	lsr	r25
    1cec:	e9 2f       	mov	r30, r25
    1cee:	96 95       	lsr	r25
    1cf0:	96 95       	lsr	r25
    1cf2:	e9 0f       	add	r30, r25
    1cf4:	ff 27       	eor	r31, r31
    1cf6:	e2 55       	subi	r30, 0x52	; 82
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	99 27       	eor	r25, r25
    1cfc:	33 27       	eor	r19, r19
    1cfe:	ee 24       	eor	r14, r14
    1d00:	ff 24       	eor	r15, r15
    1d02:	a7 01       	movw	r20, r14
    1d04:	e7 01       	movw	r28, r14
    1d06:	05 90       	lpm	r0, Z+
    1d08:	08 94       	sec
    1d0a:	07 94       	ror	r0
    1d0c:	28 f4       	brcc	.+10     	; 0x1d18 <__ftoa_engine+0x80>
    1d0e:	36 0f       	add	r19, r22
    1d10:	e7 1e       	adc	r14, r23
    1d12:	f8 1e       	adc	r15, r24
    1d14:	49 1f       	adc	r20, r25
    1d16:	51 1d       	adc	r21, r1
    1d18:	66 0f       	add	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	06 94       	lsr	r0
    1d22:	a1 f7       	brne	.-24     	; 0x1d0c <__ftoa_engine+0x74>
    1d24:	05 90       	lpm	r0, Z+
    1d26:	07 94       	ror	r0
    1d28:	28 f4       	brcc	.+10     	; 0x1d34 <__ftoa_engine+0x9c>
    1d2a:	e7 0e       	add	r14, r23
    1d2c:	f8 1e       	adc	r15, r24
    1d2e:	49 1f       	adc	r20, r25
    1d30:	56 1f       	adc	r21, r22
    1d32:	c1 1d       	adc	r28, r1
    1d34:	77 0f       	add	r23, r23
    1d36:	88 1f       	adc	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	06 94       	lsr	r0
    1d3e:	a1 f7       	brne	.-24     	; 0x1d28 <__ftoa_engine+0x90>
    1d40:	05 90       	lpm	r0, Z+
    1d42:	07 94       	ror	r0
    1d44:	28 f4       	brcc	.+10     	; 0x1d50 <__ftoa_engine+0xb8>
    1d46:	f8 0e       	add	r15, r24
    1d48:	49 1f       	adc	r20, r25
    1d4a:	56 1f       	adc	r21, r22
    1d4c:	c7 1f       	adc	r28, r23
    1d4e:	d1 1d       	adc	r29, r1
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	66 1f       	adc	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	06 94       	lsr	r0
    1d5a:	a1 f7       	brne	.-24     	; 0x1d44 <__ftoa_engine+0xac>
    1d5c:	05 90       	lpm	r0, Z+
    1d5e:	07 94       	ror	r0
    1d60:	20 f4       	brcc	.+8      	; 0x1d6a <__ftoa_engine+0xd2>
    1d62:	49 0f       	add	r20, r25
    1d64:	56 1f       	adc	r21, r22
    1d66:	c7 1f       	adc	r28, r23
    1d68:	d8 1f       	adc	r29, r24
    1d6a:	99 0f       	add	r25, r25
    1d6c:	66 1f       	adc	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	06 94       	lsr	r0
    1d74:	a9 f7       	brne	.-22     	; 0x1d60 <__ftoa_engine+0xc8>
    1d76:	84 91       	lpm	r24, Z
    1d78:	10 95       	com	r17
    1d7a:	17 70       	andi	r17, 0x07	; 7
    1d7c:	41 f0       	breq	.+16     	; 0x1d8e <__ftoa_engine+0xf6>
    1d7e:	d6 95       	lsr	r29
    1d80:	c7 95       	ror	r28
    1d82:	57 95       	ror	r21
    1d84:	47 95       	ror	r20
    1d86:	f7 94       	ror	r15
    1d88:	e7 94       	ror	r14
    1d8a:	1a 95       	dec	r17
    1d8c:	c1 f7       	brne	.-16     	; 0x1d7e <__ftoa_engine+0xe6>
    1d8e:	e4 e5       	ldi	r30, 0x54	; 84
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	68 94       	set
    1d94:	15 90       	lpm	r1, Z+
    1d96:	15 91       	lpm	r17, Z+
    1d98:	35 91       	lpm	r19, Z+
    1d9a:	65 91       	lpm	r22, Z+
    1d9c:	95 91       	lpm	r25, Z+
    1d9e:	05 90       	lpm	r0, Z+
    1da0:	7f e2       	ldi	r23, 0x2F	; 47
    1da2:	73 95       	inc	r23
    1da4:	e1 18       	sub	r14, r1
    1da6:	f1 0a       	sbc	r15, r17
    1da8:	43 0b       	sbc	r20, r19
    1daa:	56 0b       	sbc	r21, r22
    1dac:	c9 0b       	sbc	r28, r25
    1dae:	d0 09       	sbc	r29, r0
    1db0:	c0 f7       	brcc	.-16     	; 0x1da2 <__ftoa_engine+0x10a>
    1db2:	e1 0c       	add	r14, r1
    1db4:	f1 1e       	adc	r15, r17
    1db6:	43 1f       	adc	r20, r19
    1db8:	56 1f       	adc	r21, r22
    1dba:	c9 1f       	adc	r28, r25
    1dbc:	d0 1d       	adc	r29, r0
    1dbe:	7e f4       	brtc	.+30     	; 0x1dde <__ftoa_engine+0x146>
    1dc0:	70 33       	cpi	r23, 0x30	; 48
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <__ftoa_engine+0x130>
    1dc4:	8a 95       	dec	r24
    1dc6:	e6 cf       	rjmp	.-52     	; 0x1d94 <__ftoa_engine+0xfc>
    1dc8:	e8 94       	clt
    1dca:	01 50       	subi	r16, 0x01	; 1
    1dcc:	30 f0       	brcs	.+12     	; 0x1dda <__ftoa_engine+0x142>
    1dce:	08 0f       	add	r16, r24
    1dd0:	0a f4       	brpl	.+2      	; 0x1dd4 <__ftoa_engine+0x13c>
    1dd2:	00 27       	eor	r16, r16
    1dd4:	02 17       	cp	r16, r18
    1dd6:	08 f4       	brcc	.+2      	; 0x1dda <__ftoa_engine+0x142>
    1dd8:	20 2f       	mov	r18, r16
    1dda:	23 95       	inc	r18
    1ddc:	02 2f       	mov	r16, r18
    1dde:	7a 33       	cpi	r23, 0x3A	; 58
    1de0:	28 f0       	brcs	.+10     	; 0x1dec <__ftoa_engine+0x154>
    1de2:	79 e3       	ldi	r23, 0x39	; 57
    1de4:	7d 93       	st	X+, r23
    1de6:	2a 95       	dec	r18
    1de8:	e9 f7       	brne	.-6      	; 0x1de4 <__ftoa_engine+0x14c>
    1dea:	10 c0       	rjmp	.+32     	; 0x1e0c <__ftoa_engine+0x174>
    1dec:	7d 93       	st	X+, r23
    1dee:	2a 95       	dec	r18
    1df0:	89 f6       	brne	.-94     	; 0x1d94 <__ftoa_engine+0xfc>
    1df2:	06 94       	lsr	r0
    1df4:	97 95       	ror	r25
    1df6:	67 95       	ror	r22
    1df8:	37 95       	ror	r19
    1dfa:	17 95       	ror	r17
    1dfc:	17 94       	ror	r1
    1dfe:	e1 18       	sub	r14, r1
    1e00:	f1 0a       	sbc	r15, r17
    1e02:	43 0b       	sbc	r20, r19
    1e04:	56 0b       	sbc	r21, r22
    1e06:	c9 0b       	sbc	r28, r25
    1e08:	d0 09       	sbc	r29, r0
    1e0a:	98 f0       	brcs	.+38     	; 0x1e32 <__ftoa_engine+0x19a>
    1e0c:	23 95       	inc	r18
    1e0e:	7e 91       	ld	r23, -X
    1e10:	73 95       	inc	r23
    1e12:	7a 33       	cpi	r23, 0x3A	; 58
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <__ftoa_engine+0x180>
    1e16:	70 e3       	ldi	r23, 0x30	; 48
    1e18:	7c 93       	st	X, r23
    1e1a:	20 13       	cpse	r18, r16
    1e1c:	b8 f7       	brcc	.-18     	; 0x1e0c <__ftoa_engine+0x174>
    1e1e:	7e 91       	ld	r23, -X
    1e20:	70 61       	ori	r23, 0x10	; 16
    1e22:	7d 93       	st	X+, r23
    1e24:	30 f0       	brcs	.+12     	; 0x1e32 <__ftoa_engine+0x19a>
    1e26:	83 95       	inc	r24
    1e28:	71 e3       	ldi	r23, 0x31	; 49
    1e2a:	7d 93       	st	X+, r23
    1e2c:	70 e3       	ldi	r23, 0x30	; 48
    1e2e:	2a 95       	dec	r18
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <__ftoa_engine+0x192>
    1e32:	11 24       	eor	r1, r1
    1e34:	ef 90       	pop	r14
    1e36:	ff 90       	pop	r15
    1e38:	0f 91       	pop	r16
    1e3a:	1f 91       	pop	r17
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	99 27       	eor	r25, r25
    1e42:	87 fd       	sbrc	r24, 7
    1e44:	90 95       	com	r25
    1e46:	08 95       	ret

00001e48 <strnlen_P>:
    1e48:	fc 01       	movw	r30, r24
    1e4a:	05 90       	lpm	r0, Z+
    1e4c:	61 50       	subi	r22, 0x01	; 1
    1e4e:	70 40       	sbci	r23, 0x00	; 0
    1e50:	01 10       	cpse	r0, r1
    1e52:	d8 f7       	brcc	.-10     	; 0x1e4a <strnlen_P+0x2>
    1e54:	80 95       	com	r24
    1e56:	90 95       	com	r25
    1e58:	8e 0f       	add	r24, r30
    1e5a:	9f 1f       	adc	r25, r31
    1e5c:	08 95       	ret

00001e5e <strnlen>:
    1e5e:	fc 01       	movw	r30, r24
    1e60:	61 50       	subi	r22, 0x01	; 1
    1e62:	70 40       	sbci	r23, 0x00	; 0
    1e64:	01 90       	ld	r0, Z+
    1e66:	01 10       	cpse	r0, r1
    1e68:	d8 f7       	brcc	.-10     	; 0x1e60 <strnlen+0x2>
    1e6a:	80 95       	com	r24
    1e6c:	90 95       	com	r25
    1e6e:	8e 0f       	add	r24, r30
    1e70:	9f 1f       	adc	r25, r31
    1e72:	08 95       	ret

00001e74 <fputc>:
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	fb 01       	movw	r30, r22
    1e7e:	23 81       	ldd	r18, Z+3	; 0x03
    1e80:	21 fd       	sbrc	r18, 1
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <fputc+0x16>
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	2c c0       	rjmp	.+88     	; 0x1ee2 <fputc+0x6e>
    1e8a:	22 ff       	sbrs	r18, 2
    1e8c:	16 c0       	rjmp	.+44     	; 0x1eba <fputc+0x46>
    1e8e:	46 81       	ldd	r20, Z+6	; 0x06
    1e90:	57 81       	ldd	r21, Z+7	; 0x07
    1e92:	24 81       	ldd	r18, Z+4	; 0x04
    1e94:	35 81       	ldd	r19, Z+5	; 0x05
    1e96:	42 17       	cp	r20, r18
    1e98:	53 07       	cpc	r21, r19
    1e9a:	44 f4       	brge	.+16     	; 0x1eac <fputc+0x38>
    1e9c:	a0 81       	ld	r26, Z
    1e9e:	b1 81       	ldd	r27, Z+1	; 0x01
    1ea0:	9d 01       	movw	r18, r26
    1ea2:	2f 5f       	subi	r18, 0xFF	; 255
    1ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea6:	31 83       	std	Z+1, r19	; 0x01
    1ea8:	20 83       	st	Z, r18
    1eaa:	8c 93       	st	X, r24
    1eac:	26 81       	ldd	r18, Z+6	; 0x06
    1eae:	37 81       	ldd	r19, Z+7	; 0x07
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	37 83       	std	Z+7, r19	; 0x07
    1eb6:	26 83       	std	Z+6, r18	; 0x06
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <fputc+0x6e>
    1eba:	8b 01       	movw	r16, r22
    1ebc:	ec 01       	movw	r28, r24
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	00 84       	ldd	r0, Z+8	; 0x08
    1ec2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ec4:	e0 2d       	mov	r30, r0
    1ec6:	09 95       	icall
    1ec8:	89 2b       	or	r24, r25
    1eca:	e1 f6       	brne	.-72     	; 0x1e84 <fputc+0x10>
    1ecc:	d8 01       	movw	r26, r16
    1ece:	16 96       	adiw	r26, 0x06	; 6
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9c 91       	ld	r25, X
    1ed4:	17 97       	sbiw	r26, 0x07	; 7
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	17 96       	adiw	r26, 0x07	; 7
    1eda:	9c 93       	st	X, r25
    1edc:	8e 93       	st	-X, r24
    1ede:	16 97       	sbiw	r26, 0x06	; 6
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	08 95       	ret

00001eec <__ultoa_invert>:
    1eec:	fa 01       	movw	r30, r20
    1eee:	aa 27       	eor	r26, r26
    1ef0:	28 30       	cpi	r18, 0x08	; 8
    1ef2:	51 f1       	breq	.+84     	; 0x1f48 <__ultoa_invert+0x5c>
    1ef4:	20 31       	cpi	r18, 0x10	; 16
    1ef6:	81 f1       	breq	.+96     	; 0x1f58 <__ultoa_invert+0x6c>
    1ef8:	e8 94       	clt
    1efa:	6f 93       	push	r22
    1efc:	6e 7f       	andi	r22, 0xFE	; 254
    1efe:	6e 5f       	subi	r22, 0xFE	; 254
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	8f 4f       	sbci	r24, 0xFF	; 255
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	af 4f       	sbci	r26, 0xFF	; 255
    1f08:	b1 e0       	ldi	r27, 0x01	; 1
    1f0a:	3e d0       	rcall	.+124    	; 0x1f88 <__ultoa_invert+0x9c>
    1f0c:	b4 e0       	ldi	r27, 0x04	; 4
    1f0e:	3c d0       	rcall	.+120    	; 0x1f88 <__ultoa_invert+0x9c>
    1f10:	67 0f       	add	r22, r23
    1f12:	78 1f       	adc	r23, r24
    1f14:	89 1f       	adc	r24, r25
    1f16:	9a 1f       	adc	r25, r26
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	68 0f       	add	r22, r24
    1f1c:	79 1f       	adc	r23, r25
    1f1e:	8a 1f       	adc	r24, r26
    1f20:	91 1d       	adc	r25, r1
    1f22:	a1 1d       	adc	r26, r1
    1f24:	6a 0f       	add	r22, r26
    1f26:	71 1d       	adc	r23, r1
    1f28:	81 1d       	adc	r24, r1
    1f2a:	91 1d       	adc	r25, r1
    1f2c:	a1 1d       	adc	r26, r1
    1f2e:	20 d0       	rcall	.+64     	; 0x1f70 <__ultoa_invert+0x84>
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <__ultoa_invert+0x48>
    1f32:	68 94       	set
    1f34:	3f 91       	pop	r19
    1f36:	2a e0       	ldi	r18, 0x0A	; 10
    1f38:	26 9f       	mul	r18, r22
    1f3a:	11 24       	eor	r1, r1
    1f3c:	30 19       	sub	r19, r0
    1f3e:	30 5d       	subi	r19, 0xD0	; 208
    1f40:	31 93       	st	Z+, r19
    1f42:	de f6       	brtc	.-74     	; 0x1efa <__ultoa_invert+0xe>
    1f44:	cf 01       	movw	r24, r30
    1f46:	08 95       	ret
    1f48:	46 2f       	mov	r20, r22
    1f4a:	47 70       	andi	r20, 0x07	; 7
    1f4c:	40 5d       	subi	r20, 0xD0	; 208
    1f4e:	41 93       	st	Z+, r20
    1f50:	b3 e0       	ldi	r27, 0x03	; 3
    1f52:	0f d0       	rcall	.+30     	; 0x1f72 <__ultoa_invert+0x86>
    1f54:	c9 f7       	brne	.-14     	; 0x1f48 <__ultoa_invert+0x5c>
    1f56:	f6 cf       	rjmp	.-20     	; 0x1f44 <__ultoa_invert+0x58>
    1f58:	46 2f       	mov	r20, r22
    1f5a:	4f 70       	andi	r20, 0x0F	; 15
    1f5c:	40 5d       	subi	r20, 0xD0	; 208
    1f5e:	4a 33       	cpi	r20, 0x3A	; 58
    1f60:	18 f0       	brcs	.+6      	; 0x1f68 <__ultoa_invert+0x7c>
    1f62:	49 5d       	subi	r20, 0xD9	; 217
    1f64:	31 fd       	sbrc	r19, 1
    1f66:	40 52       	subi	r20, 0x20	; 32
    1f68:	41 93       	st	Z+, r20
    1f6a:	02 d0       	rcall	.+4      	; 0x1f70 <__ultoa_invert+0x84>
    1f6c:	a9 f7       	brne	.-22     	; 0x1f58 <__ultoa_invert+0x6c>
    1f6e:	ea cf       	rjmp	.-44     	; 0x1f44 <__ultoa_invert+0x58>
    1f70:	b4 e0       	ldi	r27, 0x04	; 4
    1f72:	a6 95       	lsr	r26
    1f74:	97 95       	ror	r25
    1f76:	87 95       	ror	r24
    1f78:	77 95       	ror	r23
    1f7a:	67 95       	ror	r22
    1f7c:	ba 95       	dec	r27
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <__ultoa_invert+0x86>
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	61 05       	cpc	r22, r1
    1f84:	71 05       	cpc	r23, r1
    1f86:	08 95       	ret
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	0a 2e       	mov	r0, r26
    1f8e:	06 94       	lsr	r0
    1f90:	57 95       	ror	r21
    1f92:	47 95       	ror	r20
    1f94:	37 95       	ror	r19
    1f96:	27 95       	ror	r18
    1f98:	ba 95       	dec	r27
    1f9a:	c9 f7       	brne	.-14     	; 0x1f8e <__ultoa_invert+0xa2>
    1f9c:	62 0f       	add	r22, r18
    1f9e:	73 1f       	adc	r23, r19
    1fa0:	84 1f       	adc	r24, r20
    1fa2:	95 1f       	adc	r25, r21
    1fa4:	a0 1d       	adc	r26, r0
    1fa6:	08 95       	ret

00001fa8 <__prologue_saves__>:
    1fa8:	2f 92       	push	r2
    1faa:	3f 92       	push	r3
    1fac:	4f 92       	push	r4
    1fae:	5f 92       	push	r5
    1fb0:	6f 92       	push	r6
    1fb2:	7f 92       	push	r7
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	ca 1b       	sub	r28, r26
    1fd2:	db 0b       	sbc	r29, r27
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	09 94       	ijmp

00001fe0 <__epilogue_restores__>:
    1fe0:	2a 88       	ldd	r2, Y+18	; 0x12
    1fe2:	39 88       	ldd	r3, Y+17	; 0x11
    1fe4:	48 88       	ldd	r4, Y+16	; 0x10
    1fe6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ff0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ff2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff6:	df 80       	ldd	r13, Y+7	; 0x07
    1ff8:	ee 80       	ldd	r14, Y+6	; 0x06
    1ffa:	fd 80       	ldd	r15, Y+5	; 0x05
    1ffc:	0c 81       	ldd	r16, Y+4	; 0x04
    1ffe:	1b 81       	ldd	r17, Y+3	; 0x03
    2000:	aa 81       	ldd	r26, Y+2	; 0x02
    2002:	b9 81       	ldd	r27, Y+1	; 0x01
    2004:	ce 0f       	add	r28, r30
    2006:	d1 1d       	adc	r29, r1
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	ed 01       	movw	r28, r26
    2014:	08 95       	ret

00002016 <_exit>:
    2016:	f8 94       	cli

00002018 <__stop_program>:
    2018:	ff cf       	rjmp	.-2      	; 0x2018 <__stop_program>
>>>>>>> 3c8dc965b223922869c8917c5dd3b859eaaac04b
