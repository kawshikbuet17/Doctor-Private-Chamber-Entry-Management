
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000204  00800060  00002b5e  00002bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00800264  00800264  00002df6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004bba  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d94  00000000  00000000  00007f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003121  00000000  00000000  00009ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  0000cdc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c7c  00000000  00000000  0000d7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000289f  00000000  00000000  0000e460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00010cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	50 05       	cpc	r21, r0
      56:	53 05       	cpc	r21, r3
      58:	56 05       	cpc	r21, r6
      5a:	59 05       	cpc	r21, r9
      5c:	5c 05       	cpc	r21, r12
      5e:	5f 05       	cpc	r21, r15
      60:	62 05       	cpc	r22, r2
      62:	96 0c       	add	r9, r6
      64:	99 0c       	add	r9, r9
      66:	9c 0c       	add	r9, r12
      68:	9f 0c       	add	r9, r15
      6a:	a2 0c       	add	r10, r2
      6c:	a5 0c       	add	r10, r5
      6e:	a8 0c       	add	r10, r8

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <Keypad_AddKey+0x74>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <Error_ErrorNum+0x5a>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <regression+0x13e>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <sumit+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	ee e5       	ldi	r30, 0x5E	; 94
     17e:	fb e2       	ldi	r31, 0x2B	; 43
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a4 36       	cpi	r26, 0x64	; 100
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a4 e6       	ldi	r26, 0x64	; 100
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3d       	cpi	r26, 0xD8	; 216
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <main>
     1a0:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <sumit>:
char disp[16] = "00000000000001";
char result[8] = "000001"; 

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=data_points[i];
     1bc:	16 16       	cp	r1, r22
     1be:	17 06       	cpc	r1, r23
     1c0:	04 f5       	brge	.+64     	; 0x202 <sumit+0x5a>
     1c2:	7b 01       	movw	r14, r22
     1c4:	8c 01       	movw	r16, r24
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	c1 e0       	ldi	r28, 0x01	; 1
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	f8 01       	movw	r30, r16
     1d6:	61 91       	ld	r22, Z+
     1d8:	71 91       	ld	r23, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	07 2e       	mov	r0, r23
     1de:	00 0c       	add	r0, r0
     1e0:	88 0b       	sbc	r24, r24
     1e2:	99 0b       	sbc	r25, r25
     1e4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	ec 16       	cp	r14, r28
     1fc:	fd 06       	cpc	r15, r29
     1fe:	54 f7       	brge	.-44     	; 0x1d4 <sumit+0x2c>
     200:	03 c0       	rjmp	.+6      	; 0x208 <sumit+0x60>

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	 int i;
	 double sum=0;
     202:	81 2c       	mov	r8, r1
     204:	91 2c       	mov	r9, r1
     206:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=data_points[i];
	 return sum;
}
     208:	c5 01       	movw	r24, r10
     20a:	b4 01       	movw	r22, r8
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <xysum>:

double xysum(int data_points[],int length){
     222:	8f 92       	push	r8
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     236:	16 16       	cp	r1, r22
     238:	17 06       	cpc	r1, r23
     23a:	3c f5       	brge	.+78     	; 0x28a <xysum+0x68>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	c1 e0       	ldi	r28, 0x01	; 1
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	54 01       	movw	r10, r8
     24e:	f8 01       	movw	r30, r16
     250:	81 91       	ld	r24, Z+
     252:	91 91       	ld	r25, Z+
     254:	8f 01       	movw	r16, r30
     256:	8c 9f       	mul	r24, r28
     258:	b0 01       	movw	r22, r0
     25a:	8d 9f       	mul	r24, r29
     25c:	70 0d       	add	r23, r0
     25e:	9c 9f       	mul	r25, r28
     260:	70 0d       	add	r23, r0
     262:	11 24       	eor	r1, r1
     264:	07 2e       	mov	r0, r23
     266:	00 0c       	add	r0, r0
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__floatsisf>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ec 16       	cp	r14, r28
     284:	fd 06       	cpc	r15, r29
     286:	1c f7       	brge	.-58     	; 0x24e <xysum+0x2c>
     288:	03 c0       	rjmp	.+6      	; 0x290 <xysum+0x6e>
	 return sum;
}

double xysum(int data_points[],int length){
	 int i;
	 double sum=0;
     28a:	81 2c       	mov	r8, r1
     28c:	91 2c       	mov	r9, r1
     28e:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
	 return sum;
}
     290:	c5 01       	movw	r24, r10
     292:	b4 01       	movw	r22, r8
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret

000002aa <regression>:

void regression(int data_points[],double n){
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	60 97       	sbiw	r28, 0x10	; 16
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	3c 01       	movw	r6, r24
     2d8:	6a 01       	movw	r12, r20
     2da:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
     2ec:	6d 83       	std	Y+5, r22	; 0x05
     2ee:	7e 83       	std	Y+6, r23	; 0x06
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
	double xbar = (n+1)/2.0;
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fixsfsi>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	c3 01       	movw	r24, r6
     316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sumit>
     31a:	a7 01       	movw	r20, r14
     31c:	96 01       	movw	r18, r12
     31e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__divsf3>
     322:	69 87       	std	Y+9, r22	; 0x09
     324:	7a 87       	std	Y+10, r23	; 0x0a
     326:	8b 87       	std	Y+11, r24	; 0x0b
     328:	9c 87       	std	Y+12, r25	; 0x0c
	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     32a:	b4 01       	movw	r22, r8
     32c:	c3 01       	movw	r24, r6
     32e:	0e 94 11 01 	call	0x222	; 0x222 <xysum>
     332:	4b 01       	movw	r8, r22
     334:	5c 01       	movw	r10, r24
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     346:	2b 01       	movw	r4, r22
     348:	3c 01       	movw	r6, r24
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	69 85       	ldd	r22, Y+9	; 0x09
     350:	7a 85       	ldd	r23, Y+10	; 0x0a
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__subsf3>
     366:	4b 01       	movw	r8, r22
     368:	5c 01       	movw	r10, r24
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
     382:	6d 87       	std	Y+13, r22	; 0x0d
     384:	7e 87       	std	Y+14, r23	; 0x0e
     386:	8f 87       	std	Y+15, r24	; 0x0f
     388:	98 8b       	std	Y+16, r25	; 0x10
     38a:	2d 81       	ldd	r18, Y+5	; 0x05
     38c:	3e 81       	ldd	r19, Y+6	; 0x06
     38e:	4f 81       	ldd	r20, Y+7	; 0x07
     390:	58 85       	ldd	r21, Y+8	; 0x08
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a4:	98 89       	ldd	r25, Y+16	; 0x10
     3a6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 ec       	ldi	r20, 0xC0	; 192
     3b0:	50 e4       	ldi	r21, 0x40	; 64
     3b2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a3 01       	movw	r20, r6
     3bc:	92 01       	movw	r18, r4
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__subsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__divsf3>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <m>
     3ea:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <m+0x1>
     3ee:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <m+0x2>
     3f2:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <m+0x3>
	c=ybar-m*xbar;
     3f6:	69 81       	ldd	r22, Y+1	; 0x01
     3f8:	7a 81       	ldd	r23, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	69 85       	ldd	r22, Y+9	; 0x09
     408:	7a 85       	ldd	r23, Y+10	; 0x0a
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__subsf3>
     412:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <__data_end>
     416:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <__data_end+0x1>
     41a:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <__data_end+0x2>
     41e:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <__data_end+0x3>
}
     422:	60 96       	adiw	r28, 0x10	; 16
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	08 95       	ret

0000044c <Bp_Read>:

int Bp_Read(char channel)
{
   
   ADCSRA |= (1<<ADSC);
     44c:	36 9a       	sbi	0x06, 6	; 6
   while(ADCSRA & (1<<ADSC));
     44e:	36 99       	sbic	0x06, 6	; 6
     450:	fe cf       	rjmp	.-4      	; 0x44e <Bp_Read+0x2>
   
   return ADC;
     452:	84 b1       	in	r24, 0x04	; 4
     454:	95 b1       	in	r25, 0x05	; 5
}
     456:	08 95       	ret

00000458 <Bp_Init>:

void Bp_Init()
{
	DDRA &= ~2;		/* Vref: Avcc, ADC channel: 1 */
     458:	d1 98       	cbi	0x1a, 1	; 26
	ADMUX = 0b01000001; 		//internal voltage 2.56V, right-justified, input ADC0
     45a:	81 e4       	ldi	r24, 0x41	; 65
     45c:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	86 b9       	out	0x06, r24	; 6
     462:	08 95       	ret

00000464 <Bp_PrintBp>:
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
}

void Bp_PrintBp()
{
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	c0 57       	subi	r28, 0x70	; 112
     48a:	d1 09       	sbc	r29, r1
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
    const double sampling_rate = 0.100 ;	   	// actually this is the _delay_ms val
    const int time_limit = 10 ;  				 //in seconds
    const int size=time_limit/(sampling_rate*2);
    int data_points[size+1];

	data_points[0]=0;
     496:	18 86       	std	Y+8, r1	; 0x08
     498:	1f 82       	std	Y+7, r1	; 0x07
     49a:	7e 01       	movw	r14, r28
     49c:	29 e0       	ldi	r18, 0x09	; 9
     49e:	e2 0e       	add	r14, r18
     4a0:	f1 1c       	adc	r15, r1
     4a2:	4e 01       	movw	r8, r28
     4a4:	8f e6       	ldi	r24, 0x6F	; 111
     4a6:	88 0e       	add	r8, r24
     4a8:	91 1c       	adc	r9, r1
     4aa:	67 01       	movw	r12, r14
     4ac:	02 e3       	ldi	r16, 0x32	; 50
     4ae:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read(1);
		
		sprintf(val , "%2d",size-i);
     4b0:	0f 2e       	mov	r0, r31
     4b2:	fb e6       	ldi	r31, 0x6B	; 107
     4b4:	6f 2e       	mov	r6, r31
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	7f 2e       	mov	r7, r31
     4ba:	f0 2d       	mov	r31, r0
     4bc:	de 01       	movw	r26, r28
     4be:	11 96       	adiw	r26, 0x01	; 1
     4c0:	5d 01       	movw	r10, r26
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read(1);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 26 02 	call	0x44c	; 0x44c <Bp_Read>
     4c8:	f6 01       	movw	r30, r12
     4ca:	81 93       	st	Z+, r24
     4cc:	91 93       	st	Z+, r25
     4ce:	6f 01       	movw	r12, r30
		
		sprintf(val , "%2d",size-i);
     4d0:	1f 93       	push	r17
     4d2:	0f 93       	push	r16
     4d4:	7f 92       	push	r7
     4d6:	6f 92       	push	r6
     4d8:	bf 92       	push	r11
     4da:	af 92       	push	r10
     4dc:	0e 94 81 10 	call	0x2102	; 0x2102 <sprintf>
		Lcd_Position(LCDKEYPAD , 1, 6 );
     4e0:	46 e0       	ldi	r20, 0x06	; 6
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
		Lcd_Prints(LCDKEYPAD , val);
     4ee:	b5 01       	movw	r22, r10
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f6:	ff ef       	ldi	r31, 0xFF	; 255
     4f8:	20 e7       	ldi	r18, 0x70	; 112
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	f1 50       	subi	r31, 0x01	; 1
     4fe:	20 40       	sbci	r18, 0x00	; 0
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <Bp_PrintBp+0x98>
     504:	00 c0       	rjmp	.+0      	; 0x506 <Bp_PrintBp+0xa2>
     506:	00 00       	nop
     508:	01 50       	subi	r16, 0x01	; 1
     50a:	11 09       	sbc	r17, r1
	int h=0;
	int l=1023;
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	8c 14       	cp	r8, r12
     51a:	9d 04       	cpc	r9, r13
     51c:	91 f6       	brne	.-92     	; 0x4c2 <Bp_PrintBp+0x5e>

		_delay_ms(sampling_rate*1000);
	
	}

	regression(data_points,size);
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	68 e4       	ldi	r22, 0x48	; 72
     524:	72 e4       	ldi	r23, 0x42	; 66
     526:	ce 01       	movw	r24, r28
     528:	07 96       	adiw	r24, 0x07	; 7
     52a:	0e 94 55 01 	call	0x2aa	; 0x2aa <regression>

	//recorded wave form
	for(i=0;i<size;i++){	
		thresh=(i+2)*m+c;
     52e:	40 90 68 02 	lds	r4, 0x0268	; 0x800268 <m>
     532:	50 90 69 02 	lds	r5, 0x0269	; 0x800269 <m+0x1>
     536:	60 90 6a 02 	lds	r6, 0x026A	; 0x80026a <m+0x2>
     53a:	70 90 6b 02 	lds	r7, 0x026B	; 0x80026b <m+0x3>
     53e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     542:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     546:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <__data_end+0x2>
     54a:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <__data_end+0x3>
     54e:	e1 96       	adiw	r28, 0x31	; 49
     550:	8c af       	std	Y+60, r24	; 0x3c
     552:	9d af       	std	Y+61, r25	; 0x3d
     554:	ae af       	std	Y+62, r26	; 0x3e
     556:	bf af       	std	Y+63, r27	; 0x3f
     558:	e1 97       	sbiw	r28, 0x31	; 49
     55a:	5e 01       	movw	r10, r28
     55c:	9d e6       	ldi	r25, 0x6D	; 109
     55e:	a9 0e       	add	r10, r25
     560:	b1 1c       	adc	r11, r1
     562:	02 e0       	ldi	r16, 0x02	; 2
     564:	10 e0       	ldi	r17, 0x00	; 0
void Bp_PrintBp()
{
	int i;
	int thresh=300;
	int count=0;
	int count2=0; //modified peak counting algo
     566:	81 2c       	mov	r8, r1
     568:	91 2c       	mov	r9, r1

	//recorded wave form
	for(i=0;i<size;i++){	
		thresh=(i+2)*m+c;

		int a=data_points[i+1];//current value
     56a:	d7 01       	movw	r26, r14
     56c:	cd 90       	ld	r12, X+
     56e:	dd 90       	ld	r13, X+
     570:	7d 01       	movw	r14, r26
		char ccount[3];

		if(a>h)h=a; //max peak
		if(a<l)l=a; //min peak
		
		if(a>thresh){
     572:	b8 01       	movw	r22, r16
     574:	01 2e       	mov	r0, r17
     576:	00 0c       	add	r0, r0
     578:	88 0b       	sbc	r24, r24
     57a:	99 0b       	sbc	r25, r25
     57c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__floatsisf>
     580:	a3 01       	movw	r20, r6
     582:	92 01       	movw	r18, r4
     584:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
     588:	e1 96       	adiw	r28, 0x31	; 49
     58a:	2c ad       	ldd	r18, Y+60	; 0x3c
     58c:	3d ad       	ldd	r19, Y+61	; 0x3d
     58e:	4e ad       	ldd	r20, Y+62	; 0x3e
     590:	5f ad       	ldd	r21, Y+63	; 0x3f
     592:	e1 97       	sbiw	r28, 0x31	; 49
     594:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
     598:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fixsfsi>
     59c:	6c 15       	cp	r22, r12
     59e:	7d 05       	cpc	r23, r13
     5a0:	84 f4       	brge	.+32     	; 0x5c2 <Bp_PrintBp+0x15e>
			count+=1; //peak counting]
			if(a>data_points[i] && a>data_points[i+2]){
     5a2:	f7 01       	movw	r30, r14
     5a4:	34 97       	sbiw	r30, 0x04	; 4
     5a6:	80 81       	ld	r24, Z
     5a8:	91 81       	ldd	r25, Z+1	; 0x01
     5aa:	8c 15       	cp	r24, r12
     5ac:	9d 05       	cpc	r25, r13
     5ae:	4c f4       	brge	.+18     	; 0x5c2 <Bp_PrintBp+0x15e>
     5b0:	f7 01       	movw	r30, r14
     5b2:	80 81       	ld	r24, Z
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	8c 15       	cp	r24, r12
     5b8:	9d 05       	cpc	r25, r13
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <Bp_PrintBp+0x15e>
				count2+=1;
     5bc:	ff ef       	ldi	r31, 0xFF	; 255
     5be:	8f 1a       	sub	r8, r31
     5c0:	9f 0a       	sbc	r9, r31
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	regression(data_points,size);

	//recorded wave form
	for(i=0;i<size;i++){	
     5c6:	ae 14       	cp	r10, r14
     5c8:	bf 04       	cpc	r11, r15
     5ca:	79 f6       	brne	.-98     	; 0x56a <Bp_PrintBp+0x106>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5cc:	c4 01       	movw	r24, r8
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0d       	add	r24, r8
     5d4:	99 1d       	adc	r25, r9
     5d6:	4a e0       	ldi	r20, 0x0A	; 10
     5d8:	be 01       	movw	r22, r28
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__itoa_ncheck>
			
		}
	}

    itoa(count2*(60/time_limit),val,10);
	Lcd_Position(LCDKEYPAD , 1,  10);
     5e6:	4a e0       	ldi	r20, 0x0A	; 10
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , val);
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	
	Lcd_Position(LCDKEYPAD , 1,  13);
     600:	4d e0       	ldi	r20, 0x0D	; 13
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "BPM");
     60e:	6f e6       	ldi	r22, 0x6F	; 111
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	
	strcpy(keyBuffer , val);
     618:	be 01       	movw	r22, r28
     61a:	6f 5f       	subi	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	82 e7       	ldi	r24, 0x72	; 114
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
}
     626:	c0 59       	subi	r28, 0x90	; 144
     628:	df 4f       	sbci	r29, 0xFF	; 255
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	bf 90       	pop	r11
     646:	af 90       	pop	r10
     648:	9f 90       	pop	r9
     64a:	8f 90       	pop	r8
     64c:	7f 90       	pop	r7
     64e:	6f 90       	pop	r6
     650:	5f 90       	pop	r5
     652:	4f 90       	pop	r4
     654:	08 95       	ret

00000656 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
     656:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
     65a:	08 95       	ret

0000065c <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	2a 97       	sbiw	r28, 0x0a	; 10
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	16 2f       	mov	r17, r22
     676:	07 2f       	mov	r16, r23
	HC05_SendString(text);
     678:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	83 e7       	ldi	r24, 0x73	; 115
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	8e 01       	movw	r16, r28
     68a:	0f 5f       	subi	r16, 0xFF	; 255
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	1f 93       	push	r17
     690:	0f 93       	push	r16
     692:	0e 94 81 10 	call	0x2102	; 0x2102 <sprintf>
	HC05_SendString(temp);
     696:	c8 01       	movw	r24, r16
     698:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
	HC05_SendString("\r\n");
     69c:	8a e7       	ldi	r24, 0x7A	; 122
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
}
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	2a 96       	adiw	r28, 0x0a	; 10
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	08 95       	ret

000006c6 <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	2a 97       	sbiw	r28, 0x0a	; 10
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     6e0:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
     6e4:	fe 01       	movw	r30, r28
     6e6:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     6ec:	c8 01       	movw	r24, r16
     6ee:	02 2e       	mov	r0, r18
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <Error_ErrorBin+0x30>
     6f2:	95 95       	asr	r25
     6f4:	87 95       	ror	r24
     6f6:	0a 94       	dec	r0
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <Error_ErrorBin+0x2c>
     6fa:	81 70       	andi	r24, 0x01	; 1
     6fc:	80 5d       	subi	r24, 0xD0	; 208
     6fe:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     700:	2f 5f       	subi	r18, 0xFF	; 255
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	28 30       	cpi	r18, 0x08	; 8
     706:	31 05       	cpc	r19, r1
     708:	89 f7       	brne	.-30     	; 0x6ec <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     70a:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     70c:	ce 01       	movw	r24, r28
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
	HC05_SendString("\r\n");
     714:	8a e7       	ldi	r24, 0x7A	; 122
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
     71c:	2a 96       	adiw	r28, 0x0a	; 10
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <HC05_Init_Data_Mode>:

char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     732:	1b b8       	out	0x0b, r1	; 11
     734:	88 e1       	ldi	r24, 0x18	; 24
     736:	8a b9       	out	0x0a, r24	; 10
     738:	86 e8       	ldi	r24, 0x86	; 134
     73a:	80 bd       	out	0x20, r24	; 32
     73c:	83 e3       	ldi	r24, 0x33	; 51
     73e:	89 b9       	out	0x09, r24	; 9
     740:	10 bc       	out	0x20, r1	; 32
     742:	08 95       	ret

00000744 <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     744:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     746:	5d 9b       	sbis	0x0b, 5	; 11
     748:	fe cf       	rjmp	.-4      	; 0x746 <HC05_SendChar+0x2>
}
     74a:	08 95       	ret

0000074c <HC05_SendString>:
void HC05_SendString(char * s)
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
	while(*s)
     752:	88 81       	ld	r24, Y
     754:	88 23       	and	r24, r24
     756:	31 f0       	breq	.+12     	; 0x764 <HC05_SendString+0x18>
     758:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     75a:	0e 94 a2 03 	call	0x744	; 0x744 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     75e:	89 91       	ld	r24, Y+
     760:	81 11       	cpse	r24, r1
     762:	fb cf       	rjmp	.-10     	; 0x75a <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     76a:	8a b3       	in	r24, 0x1a	; 26
     76c:	83 70       	andi	r24, 0x03	; 3
     76e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     774:	88 bb       	out	0x18, r24	; 24
     776:	08 95       	ret

00000778 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     778:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <isNumber>
	isUpperCase = false;
     77c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <isUpperCase>
	position = 0;
     780:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <position+0x1>
     784:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <position>
	keyBuffer[position] = 0;
     788:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <keyBuffer>
     78c:	08 95       	ret

0000078e <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	59 f4       	brne	.+22     	; 0x7a8 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     792:	8d e7       	ldi	r24, 0x7D	; 125
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
		position = 0;
     79a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <position+0x1>
     79e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <position>
		keyBuffer[position]=0;
     7a2:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <keyBuffer>
     7a6:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     7a8:	fc 01       	movw	r30, r24
     7aa:	01 90       	ld	r0, Z+
     7ac:	00 20       	and	r0, r0
     7ae:	e9 f7       	brne	.-6      	; 0x7aa <Keypad_WriteToBuffer+0x1c>
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	e8 1b       	sub	r30, r24
     7b4:	f9 0b       	sbc	r31, r25
     7b6:	e0 31       	cpi	r30, 0x10	; 16
     7b8:	f1 05       	cpc	r31, r1
     7ba:	28 f5       	brcc	.+74     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7bc:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     7be:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <position+0x1>
     7c2:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <position>
     7c6:	1e 16       	cp	r1, r30
     7c8:	1f 06       	cpc	r1, r31
     7ca:	b4 f4       	brge	.+44     	; 0x7f8 <Keypad_WriteToBuffer+0x6a>
     7cc:	fc 01       	movw	r30, r24
     7ce:	a2 e7       	ldi	r26, 0x72	; 114
     7d0:	b2 e0       	ldi	r27, 0x02	; 2
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     7d6:	81 91       	ld	r24, Z+
     7d8:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     7da:	2f 5f       	subi	r18, 0xFF	; 255
     7dc:	3f 4f       	sbci	r19, 0xFF	; 255
     7de:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <position+0x1>
     7e2:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <position>
     7e6:	24 17       	cp	r18, r20
     7e8:	35 07       	cpc	r19, r21
     7ea:	ac f3       	brlt	.-22     	; 0x7d6 <Keypad_WriteToBuffer+0x48>
     7ec:	14 16       	cp	r1, r20
     7ee:	15 06       	cpc	r1, r21
     7f0:	2c f0       	brlt	.+10     	; 0x7fc <Keypad_WriteToBuffer+0x6e>
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <Keypad_WriteToBuffer+0x6e>
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     7fc:	fa 01       	movw	r30, r20
     7fe:	ee 58       	subi	r30, 0x8E	; 142
     800:	fd 4f       	sbci	r31, 0xFD	; 253
     802:	10 82       	st	Z, r1
	}
}
     804:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     806:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <position+0x1>
     80a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <position>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     80e:	40 e1       	ldi	r20, 0x10	; 16
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	dc cf       	rjmp	.-72     	; 0x7cc <Keypad_WriteToBuffer+0x3e>

00000814 <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <isNumber>
     81a:	08 95       	ret

0000081c <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     81c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <isNumber>
     820:	81 11       	cpse	r24, r1
     822:	07 c0       	rjmp	.+14     	; 0x832 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     824:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <isUpperCase>
     828:	81 11       	cpse	r24, r1
     82a:	06 c0       	rjmp	.+12     	; 0x838 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     82c:	85 e9       	ldi	r24, 0x95	; 149
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     832:	8d e8       	ldi	r24, 0x8D	; 141
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     838:	81 e9       	ldi	r24, 0x91	; 145
     83a:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     83c:	08 95       	ret

0000083e <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     842:	0e 94 0e 04 	call	0x81c	; 0x81c <Keypad_GetMode>
     846:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     848:	fc 01       	movw	r30, r24
     84a:	01 90       	ld	r0, Z+
     84c:	00 20       	and	r0, r0
     84e:	e9 f7       	brne	.-6      	; 0x84a <Keypad_UpdateKeyMode+0xc>
     850:	ac 01       	movw	r20, r24
     852:	4e 1b       	sub	r20, r30
     854:	5f 0b       	sbc	r21, r31
     856:	4f 5e       	subi	r20, 0xEF	; 239
     858:	5f 4f       	sbci	r21, 0xFF	; 255
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     864:	be 01       	movw	r22, r28
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     872:	89 b3       	in	r24, 0x19	; 25
}
     874:	82 95       	swap	r24
     876:	8f 70       	andi	r24, 0x0F	; 15
     878:	08 95       	ret

0000087a <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
	int pin = PINA >> 4;
     880:	c9 b3       	in	r28, 0x19	; 25
     882:	c2 95       	swap	r28
     884:	cf 70       	andi	r28, 0x0F	; 15
     886:	0c 2f       	mov	r16, r28
     888:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     88a:	b8 01       	movw	r22, r16
     88c:	89 e9       	ldi	r24, 0x99	; 153
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     894:	c0 fd       	sbrc	r28, 0
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <Keypad_GetRow+0x36>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	98 01       	movw	r18, r16
     89e:	08 2e       	mov	r0, r24
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <Keypad_GetRow+0x2c>
     8a2:	35 95       	asr	r19
     8a4:	27 95       	ror	r18
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <Keypad_GetRow+0x28>
     8aa:	20 ff       	sbrs	r18, 0
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <Keypad_GetRow+0x3c>
     8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	84 30       	cpi	r24, 0x04	; 4
     8ba:	91 05       	cpc	r25, r1
     8bc:	79 f7       	brne	.-34     	; 0x89c <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     8be:	82 ea       	ldi	r24, 0xA2	; 162
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
	return -1;
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
}
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	08 95       	ret

000008d0 <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
	int i = 7;
     8d8:	c7 e0       	ldi	r28, 0x07	; 7
     8da:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     8dc:	01 e0       	ldi	r16, 0x01	; 1
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	28 b3       	in	r18, 0x18	; 24
     8e2:	c8 01       	movw	r24, r16
     8e4:	0c 2e       	mov	r0, r28
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <Keypad_GetCol+0x1c>
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <Keypad_GetCol+0x18>
     8f0:	82 27       	eor	r24, r18
     8f2:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     8f4:	66 b3       	in	r22, 0x16	; 22
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 eb       	ldi	r24, 0xB0	; 176
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     900:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     902:	82 95       	swap	r24
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	11 f4       	brne	.+4      	; 0x90c <Keypad_GetCol+0x3c>
		{
			return i;
     908:	8c 2f       	mov	r24, r28
     90a:	07 c0       	rjmp	.+14     	; 0x91a <Keypad_GetCol+0x4a>
		}
		i--;
     90c:	21 97       	sbiw	r28, 0x01	; 1
     90e:	40 f7       	brcc	.-48     	; 0x8e0 <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     910:	86 eb       	ldi	r24, 0xB6	; 182
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
	// report error
	return -1;
     918:	8f ef       	ldi	r24, 0xFF	; 255
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     924:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <position>
     928:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <position+0x1>
     92c:	f9 01       	movw	r30, r18
     92e:	ee 58       	subi	r30, 0x8E	; 142
     930:	fd 4f       	sbci	r31, 0xFD	; 253
     932:	80 83       	st	Z, r24
	if(position < 16)
     934:	20 31       	cpi	r18, 0x10	; 16
     936:	31 05       	cpc	r19, r1
     938:	34 f4       	brge	.+12     	; 0x946 <addChar+0x22>
		position = position +1;
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <position+0x1>
     942:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <position>
	keyBuffer[position] = 0;
     946:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <position>
     94a:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <position+0x1>
     94e:	ee 58       	subi	r30, 0x8E	; 142
     950:	fd 4f       	sbci	r31, 0xFD	; 253
     952:	10 82       	st	Z, r1
     954:	08 95       	ret

00000956 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     956:	cf 93       	push	r28
     958:	c8 2f       	mov	r28, r24
	if(key >= 30)
     95a:	8e 31       	cpi	r24, 0x1E	; 30
     95c:	24 f0       	brlt	.+8      	; 0x966 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     95e:	84 ec       	ldi	r24, 0xC4	; 196
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
	if(key == 29) 
     966:	cd 31       	cpi	r28, 0x1D	; 29
     968:	99 f4       	brne	.+38     	; 0x990 <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     96a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <position>
     96e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <position+0x1>
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	29 f0       	breq	.+10     	; 0x980 <Keypad_AddKey+0x2a>
			position--;
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <position+0x1>
     97c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <position>
		keyBuffer[position] = 0;
     980:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <position>
     984:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <position+0x1>
     988:	ee 58       	subi	r30, 0x8E	; 142
     98a:	fd 4f       	sbci	r31, 0xFD	; 253
     98c:	10 82       	st	Z, r1
     98e:	57 c0       	rjmp	.+174    	; 0xa3e <Keypad_AddKey+0xe8>
	}
	else if(key == 28)
     990:	cc 31       	cpi	r28, 0x1C	; 28
     992:	21 f4       	brne	.+8      	; 0x99c <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     994:	80 e2       	ldi	r24, 0x20	; 32
     996:	0e 94 92 04 	call	0x924	; 0x924 <addChar>
     99a:	51 c0       	rjmp	.+162    	; 0xa3e <Keypad_AddKey+0xe8>
	}
	else if(key == 27)
     99c:	cb 31       	cpi	r28, 0x1B	; 27
     99e:	39 f4       	brne	.+14     	; 0x9ae <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     9a0:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <isNumber>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	89 27       	eor	r24, r25
     9a8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <isNumber>
     9ac:	48 c0       	rjmp	.+144    	; 0xa3e <Keypad_AddKey+0xe8>
	}
	else if(isNumber) 
     9ae:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <isNumber>
     9b2:	88 23       	and	r24, r24
     9b4:	e9 f0       	breq	.+58     	; 0x9f0 <Keypad_AddKey+0x9a>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     9b6:	9c 2f       	mov	r25, r28
     9b8:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     9ba:	93 30       	cpi	r25, 0x03	; 3
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <Keypad_AddKey+0x6a>
     9be:	3f c0       	rjmp	.+126    	; 0xa3e <Keypad_AddKey+0xe8>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     9c0:	c5 95       	asr	r28
     9c2:	c5 95       	asr	r28
     9c4:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     9c6:	c3 30       	cpi	r28, 0x03	; 3
     9c8:	38 f4       	brcc	.+14     	; 0x9d8 <Keypad_AddKey+0x82>
			c = '1' + row * 3 + col;
     9ca:	8c 2f       	mov	r24, r28
     9cc:	88 0f       	add	r24, r24
     9ce:	c8 0f       	add	r28, r24
     9d0:	81 e3       	ldi	r24, 0x31	; 49
     9d2:	89 0f       	add	r24, r25
     9d4:	8c 0f       	add	r24, r28
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <Keypad_AddKey+0x94>
		}
		else if(col == 0) {
     9d8:	99 23       	and	r25, r25
     9da:	21 f0       	breq	.+8      	; 0x9e4 <Keypad_AddKey+0x8e>
			c = '*';
		}
		else if(col == 1) {
     9dc:	91 30       	cpi	r25, 0x01	; 1
     9de:	21 f0       	breq	.+8      	; 0x9e8 <Keypad_AddKey+0x92>
			c = '0';
		}
		else  {
			c = '#';
     9e0:	83 e2       	ldi	r24, 0x23	; 35
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <Keypad_AddKey+0x94>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     9e4:	8a e2       	ldi	r24, 0x2A	; 42
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <Keypad_AddKey+0x94>
		}
		else if(col == 1) {
			c = '0';
     9e8:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     9ea:	0e 94 92 04 	call	0x924	; 0x924 <addChar>
     9ee:	27 c0       	rjmp	.+78     	; 0xa3e <Keypad_AddKey+0xe8>
		
	}
	else if(key == 26)
     9f0:	ca 31       	cpi	r28, 0x1A	; 26
     9f2:	39 f4       	brne	.+14     	; 0xa02 <Keypad_AddKey+0xac>
	{
		// capslock
		isUpperCase = !isUpperCase;
     9f4:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <isUpperCase>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	89 27       	eor	r24, r25
     9fc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <isUpperCase>
     a00:	1e c0       	rjmp	.+60     	; 0xa3e <Keypad_AddKey+0xe8>
	}
	else
	{
		// char
		char row = key >> 3;
     a02:	9c 2f       	mov	r25, r28
     a04:	95 95       	asr	r25
     a06:	95 95       	asr	r25
     a08:	95 95       	asr	r25
		char col = key & 0b00000111;
     a0a:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     a0c:	93 30       	cpi	r25, 0x03	; 3
     a0e:	68 f4       	brcc	.+26     	; 0xa2a <Keypad_AddKey+0xd4>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     a10:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <isUpperCase>
     a14:	81 11       	cpse	r24, r1
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <Keypad_AddKey+0xc6>
     a18:	81 e6       	ldi	r24, 0x61	; 97
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <Keypad_AddKey+0xc8>
     a1c:	81 e4       	ldi	r24, 0x41	; 65
     a1e:	99 0f       	add	r25, r25
     a20:	99 0f       	add	r25, r25
     a22:	99 0f       	add	r25, r25
     a24:	c9 0f       	add	r28, r25
     a26:	8c 0f       	add	r24, r28
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <Keypad_AddKey+0xe4>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     a2a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <isUpperCase>
     a2e:	81 11       	cpse	r24, r1
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <Keypad_AddKey+0xe0>
     a32:	89 e7       	ldi	r24, 0x79	; 121
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <Keypad_AddKey+0xe2>
     a36:	89 e5       	ldi	r24, 0x59	; 89
     a38:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     a3a:	0e 94 92 04 	call	0x924	; 0x924 <addChar>
	}
	return ;
}
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     a46:	0e 94 3d 04 	call	0x87a	; 0x87a <Keypad_GetRow>
     a4a:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     a4c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <Keypad_GetCol>
     a50:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     a52:	6c 2f       	mov	r22, r28
     a54:	0c 2e       	mov	r0, r28
     a56:	00 0c       	add	r0, r0
     a58:	77 0b       	sbc	r23, r23
     a5a:	89 ed       	ldi	r24, 0xD9	; 217
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 2e 03 	call	0x65c	; 0x65c <Error_ErrorNum>
	Error_ErrorNum("col",col);
     a62:	6d 2f       	mov	r22, r29
     a64:	0d 2e       	mov	r0, r29
     a66:	00 0c       	add	r0, r0
     a68:	77 0b       	sbc	r23, r23
     a6a:	8d ed       	ldi	r24, 0xDD	; 221
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 2e 03 	call	0x65c	; 0x65c <Error_ErrorNum>
	return row * 8 + col;
     a72:	8c 2f       	mov	r24, r28
     a74:	88 0f       	add	r24, r24
     a76:	88 0f       	add	r24, r24
     a78:	88 0f       	add	r24, r24
     a7a:	8d 0f       	add	r24, r29
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     a82:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <currentState>
     a86:	4e 2f       	mov	r20, r30
     a88:	ee 0f       	add	r30, r30
     a8a:	55 0b       	sbc	r21, r21
     a8c:	66 0b       	sbc	r22, r22
     a8e:	77 0b       	sbc	r23, r23
     a90:	47 30       	cpi	r20, 0x07	; 7
     a92:	51 05       	cpc	r21, r1
     a94:	d0 f4       	brcc	.+52     	; 0xaca <KeyProcessor_ProcessKey+0x48>
     a96:	fa 01       	movw	r30, r20
     a98:	e6 5d       	subi	r30, 0xD6	; 214
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__tablejump2__>
	{
		case IDLE:
			Idle_ProcessKey(key);
     aa0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <Idle_ProcessKey>
			break;
     aa4:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     aa6:	0e 94 c7 0a 	call	0x158e	; 0x158e <EnteringName_ProcessKey>
			break;
     aaa:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     aac:	0e 94 4e 0a 	call	0x149c	; 0x149c <EnteringAge_ProcessKey>
			break;
     ab0:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     ab2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EnteringPhone_ProcessKey>
			break;
     ab6:	08 95       	ret
		case ENTERING_TEMP :
			EnteringTemp_ProcessKey(key);
     ab8:	0e 94 6d 0b 	call	0x16da	; 0x16da <EnteringTemp_ProcessKey>
			break;
     abc:	08 95       	ret
		case ENTERING_BP :
			EnteringBp_ProcessKey(key);
     abe:	0e 94 8e 0a 	call	0x151c	; 0x151c <EnteringBp_ProcessKey>
			break;
     ac2:	08 95       	ret
		case GENERATE_SERIAL :
			GenerateSerial_ProcessKey(key);
     ac4:	0e 94 38 0c 	call	0x1870	; 0x1870 <GenerateSerial_ProcessKey>
			break;
     ac8:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     aca:	81 ee       	ldi	r24, 0xE1	; 225
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
     ad2:	08 95       	ret

00000ad4 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     ad4:	88 23       	and	r24, r24
     ad6:	19 f0       	breq	.+6      	; 0xade <Lcd_Init+0xa>
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	39 f0       	breq	.+14     	; 0xaea <Lcd_Init+0x16>
     adc:	24 c0       	rjmp	.+72     	; 0xb26 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     ade:	81 b3       	in	r24, 0x11	; 17
     ae0:	8c 6f       	ori	r24, 0xFC	; 252
     ae2:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     ae4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Lcd4_Init>
			break;
     ae8:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	0e 94 2d 09 	call	0x125a	; 0x125a <lcd_init>
			lcd_backlight(0);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 9e 09 	call	0x133c	; 0x133c <lcd_backlight>
     af6:	2f ef       	ldi	r18, 0xFF	; 255
     af8:	84 e3       	ldi	r24, 0x34	; 52
     afa:	9c e0       	ldi	r25, 0x0C	; 12
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <Lcd_Init+0x28>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <Lcd_Init+0x32>
     b06:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 9e 09 	call	0x133c	; 0x133c <lcd_backlight>
     b0e:	2f ef       	ldi	r18, 0xFF	; 255
     b10:	84 e3       	ldi	r24, 0x34	; 52
     b12:	9c e0       	ldi	r25, 0x0C	; 12
     b14:	21 50       	subi	r18, 0x01	; 1
     b16:	80 40       	sbci	r24, 0x00	; 0
     b18:	90 40       	sbci	r25, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <Lcd_Init+0x40>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <Lcd_Init+0x4a>
     b1e:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     b20:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     b24:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     b26:	85 e0       	ldi	r24, 0x05	; 5
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
     b2e:	08 95       	ret

00000b30 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     b30:	88 23       	and	r24, r24
     b32:	19 f0       	breq	.+6      	; 0xb3a <Lcd_ClearScreen+0xa>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	21 f0       	breq	.+8      	; 0xb40 <Lcd_ClearScreen+0x10>
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     b3a:	0e 94 b4 07 	call	0xf68	; 0xf68 <Lcd4_Clear>
			break;
     b3e:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     b40:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <lcd_clrscr>
			break;
     b44:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     b46:	84 e2       	ldi	r24, 0x24	; 36
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
     b4e:	08 95       	ret

00000b50 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     b50:	88 23       	and	r24, r24
     b52:	19 f0       	breq	.+6      	; 0xb5a <Lcd_Prints+0xa>
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	29 f0       	breq	.+10     	; 0xb62 <Lcd_Prints+0x12>
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     b5a:	cb 01       	movw	r24, r22
     b5c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Lcd4_Write_String>
			break;
     b60:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     b62:	cb 01       	movw	r24, r22
     b64:	0e 94 1e 09 	call	0x123c	; 0x123c <lcd_puts>
			break;
     b68:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     b6a:	84 e2       	ldi	r24, 0x24	; 36
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
     b72:	08 95       	ret

00000b74 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     b74:	96 2f       	mov	r25, r22
	switch(lcdType)
     b76:	88 23       	and	r24, r24
     b78:	19 f0       	breq	.+6      	; 0xb80 <Lcd_Position+0xc>
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	31 f0       	breq	.+12     	; 0xb8a <Lcd_Position+0x16>
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     b80:	64 2f       	mov	r22, r20
     b82:	89 2f       	mov	r24, r25
     b84:	0e 94 bb 07 	call	0xf76	; 0xf76 <Lcd4_Set_Cursor>
		break;
     b88:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     b8a:	84 2f       	mov	r24, r20
     b8c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <lcd_gotoxy>
		break;
     b90:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     b92:	8b e4       	ldi	r24, 0x4B	; 75
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
     b9a:	08 95       	ret

00000b9c <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <Lcd_Printc+0x6>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     ba6:	69 83       	std	Y+1, r22	; 0x01
     ba8:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     baa:	be 01       	movw	r22, r28
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
}
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	f8 2e       	mov	r15, r24
     bca:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	int i =0;
	while (str[i])
     bd4:	68 81       	ld	r22, Y
     bd6:	66 23       	and	r22, r22
     bd8:	91 f0       	breq	.+36     	; 0xbfe <Lcd_PrintLine+0x40>
     bda:	8e 01       	movw	r16, r28
     bdc:	0f 5f       	subi	r16, 0xFF	; 255
     bde:	1f 4f       	sbci	r17, 0xFF	; 255
     be0:	c0 e0       	ldi	r28, 0x00	; 0
     be2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     be4:	21 96       	adiw	r28, 0x01	; 1
     be6:	8f 2d       	mov	r24, r15
     be8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     bec:	f8 01       	movw	r30, r16
     bee:	61 91       	ld	r22, Z+
     bf0:	8f 01       	movw	r16, r30
     bf2:	61 11       	cpse	r22, r1
     bf4:	f7 cf       	rjmp	.-18     	; 0xbe4 <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     bf6:	c0 31       	cpi	r28, 0x10	; 16
     bf8:	d1 05       	cpc	r29, r1
     bfa:	1c f0       	brlt	.+6      	; 0xc02 <Lcd_PrintLine+0x44>
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     bfe:	c0 e0       	ldi	r28, 0x00	; 0
     c00:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     c02:	60 e2       	ldi	r22, 0x20	; 32
     c04:	8f 2d       	mov	r24, r15
     c06:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Lcd_Printc>
     c0a:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     c0c:	c0 31       	cpi	r28, 0x10	; 16
     c0e:	d1 05       	cpc	r29, r1
     c10:	c4 f3       	brlt	.-16     	; 0xc02 <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	08 95       	ret

00000c1e <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     c1e:	67 2b       	or	r22, r23
     c20:	09 f0       	breq	.+2      	; 0xc24 <pinChange+0x6>
     c22:	9f c0       	rjmp	.+318    	; 0xd62 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	11 f4       	brne	.+4      	; 0xc2c <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     c28:	d8 98       	cbi	0x1b, 0	; 27
     c2a:	08 95       	ret
		else if(a == eS_PORTA1)
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	91 05       	cpc	r25, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     c32:	d9 98       	cbi	0x1b, 1	; 27
     c34:	08 95       	ret
		else if(a == eS_PORTA2)
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	91 05       	cpc	r25, r1
     c3a:	11 f4       	brne	.+4      	; 0xc40 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     c3c:	da 98       	cbi	0x1b, 2	; 27
     c3e:	08 95       	ret
		else if(a == eS_PORTA3)
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	91 05       	cpc	r25, r1
     c44:	11 f4       	brne	.+4      	; 0xc4a <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     c46:	db 98       	cbi	0x1b, 3	; 27
     c48:	08 95       	ret
		else if(a == eS_PORTA4)
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	91 05       	cpc	r25, r1
     c4e:	11 f4       	brne	.+4      	; 0xc54 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     c50:	dc 98       	cbi	0x1b, 4	; 27
     c52:	08 95       	ret
		else if(a == eS_PORTA5)
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	91 05       	cpc	r25, r1
     c58:	11 f4       	brne	.+4      	; 0xc5e <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     c5a:	dd 98       	cbi	0x1b, 5	; 27
     c5c:	08 95       	ret
		else if(a == eS_PORTA6)
     c5e:	86 30       	cpi	r24, 0x06	; 6
     c60:	91 05       	cpc	r25, r1
     c62:	11 f4       	brne	.+4      	; 0xc68 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     c64:	de 98       	cbi	0x1b, 6	; 27
     c66:	08 95       	ret
		else if(a == eS_PORTA7)
     c68:	87 30       	cpi	r24, 0x07	; 7
     c6a:	91 05       	cpc	r25, r1
     c6c:	11 f4       	brne	.+4      	; 0xc72 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     c6e:	df 98       	cbi	0x1b, 7	; 27
     c70:	08 95       	ret
		else if(a == eS_PORTB0)
     c72:	8a 30       	cpi	r24, 0x0A	; 10
     c74:	91 05       	cpc	r25, r1
     c76:	11 f4       	brne	.+4      	; 0xc7c <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     c78:	c0 98       	cbi	0x18, 0	; 24
     c7a:	08 95       	ret
		else if(a == eS_PORTB1)
     c7c:	8b 30       	cpi	r24, 0x0B	; 11
     c7e:	91 05       	cpc	r25, r1
     c80:	11 f4       	brne	.+4      	; 0xc86 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     c82:	c1 98       	cbi	0x18, 1	; 24
     c84:	08 95       	ret
		else if(a == eS_PORTB2)
     c86:	8c 30       	cpi	r24, 0x0C	; 12
     c88:	91 05       	cpc	r25, r1
     c8a:	11 f4       	brne	.+4      	; 0xc90 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     c8c:	c2 98       	cbi	0x18, 2	; 24
     c8e:	08 95       	ret
		else if(a == eS_PORTB3)
     c90:	8d 30       	cpi	r24, 0x0D	; 13
     c92:	91 05       	cpc	r25, r1
     c94:	11 f4       	brne	.+4      	; 0xc9a <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     c96:	c3 98       	cbi	0x18, 3	; 24
     c98:	08 95       	ret
		else if(a == eS_PORTB4)
     c9a:	8e 30       	cpi	r24, 0x0E	; 14
     c9c:	91 05       	cpc	r25, r1
     c9e:	11 f4       	brne	.+4      	; 0xca4 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     ca0:	c4 98       	cbi	0x18, 4	; 24
     ca2:	08 95       	ret
		else if(a == eS_PORTB5)
     ca4:	8f 30       	cpi	r24, 0x0F	; 15
     ca6:	91 05       	cpc	r25, r1
     ca8:	11 f4       	brne	.+4      	; 0xcae <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     caa:	c5 98       	cbi	0x18, 5	; 24
     cac:	08 95       	ret
		else if(a == eS_PORTB6)
     cae:	80 31       	cpi	r24, 0x10	; 16
     cb0:	91 05       	cpc	r25, r1
     cb2:	11 f4       	brne	.+4      	; 0xcb8 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     cb4:	c6 98       	cbi	0x18, 6	; 24
     cb6:	08 95       	ret
		else if(a == eS_PORTB7)
     cb8:	81 31       	cpi	r24, 0x11	; 17
     cba:	91 05       	cpc	r25, r1
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     cbe:	c7 98       	cbi	0x18, 7	; 24
     cc0:	08 95       	ret
		else if(a == eS_PORTC0)
     cc2:	84 31       	cpi	r24, 0x14	; 20
     cc4:	91 05       	cpc	r25, r1
     cc6:	11 f4       	brne	.+4      	; 0xccc <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     cc8:	a8 98       	cbi	0x15, 0	; 21
     cca:	08 95       	ret
		else if(a == eS_PORTC1)
     ccc:	85 31       	cpi	r24, 0x15	; 21
     cce:	91 05       	cpc	r25, r1
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     cd2:	a9 98       	cbi	0x15, 1	; 21
     cd4:	08 95       	ret
		else if(a == eS_PORTC2)
     cd6:	86 31       	cpi	r24, 0x16	; 22
     cd8:	91 05       	cpc	r25, r1
     cda:	11 f4       	brne	.+4      	; 0xce0 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     cdc:	aa 98       	cbi	0x15, 2	; 21
     cde:	08 95       	ret
		else if(a == eS_PORTC3)
     ce0:	87 31       	cpi	r24, 0x17	; 23
     ce2:	91 05       	cpc	r25, r1
     ce4:	11 f4       	brne	.+4      	; 0xcea <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     ce6:	ab 98       	cbi	0x15, 3	; 21
     ce8:	08 95       	ret
		else if(a == eS_PORTC4)
     cea:	88 31       	cpi	r24, 0x18	; 24
     cec:	91 05       	cpc	r25, r1
     cee:	11 f4       	brne	.+4      	; 0xcf4 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     cf0:	ac 98       	cbi	0x15, 4	; 21
     cf2:	08 95       	ret
		else if(a == eS_PORTC5)
     cf4:	89 31       	cpi	r24, 0x19	; 25
     cf6:	91 05       	cpc	r25, r1
     cf8:	11 f4       	brne	.+4      	; 0xcfe <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     cfa:	ad 98       	cbi	0x15, 5	; 21
     cfc:	08 95       	ret
		else if(a == eS_PORTC6)
     cfe:	8a 31       	cpi	r24, 0x1A	; 26
     d00:	91 05       	cpc	r25, r1
     d02:	11 f4       	brne	.+4      	; 0xd08 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     d04:	ae 98       	cbi	0x15, 6	; 21
     d06:	08 95       	ret
		else if(a == eS_PORTC7)
     d08:	8b 31       	cpi	r24, 0x1B	; 27
     d0a:	91 05       	cpc	r25, r1
     d0c:	11 f4       	brne	.+4      	; 0xd12 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     d0e:	af 98       	cbi	0x15, 7	; 21
     d10:	08 95       	ret
		else if(a == eS_PORTD0)
     d12:	8e 31       	cpi	r24, 0x1E	; 30
     d14:	91 05       	cpc	r25, r1
     d16:	11 f4       	brne	.+4      	; 0xd1c <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     d18:	90 98       	cbi	0x12, 0	; 18
     d1a:	08 95       	ret
		else if(a == eS_PORTD1)
     d1c:	8f 31       	cpi	r24, 0x1F	; 31
     d1e:	91 05       	cpc	r25, r1
     d20:	11 f4       	brne	.+4      	; 0xd26 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     d22:	91 98       	cbi	0x12, 1	; 18
     d24:	08 95       	ret
		else if(a == eS_PORTD2)
     d26:	80 32       	cpi	r24, 0x20	; 32
     d28:	91 05       	cpc	r25, r1
     d2a:	11 f4       	brne	.+4      	; 0xd30 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     d2c:	92 98       	cbi	0x12, 2	; 18
     d2e:	08 95       	ret
		else if(a == eS_PORTD3)
     d30:	81 32       	cpi	r24, 0x21	; 33
     d32:	91 05       	cpc	r25, r1
     d34:	11 f4       	brne	.+4      	; 0xd3a <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     d36:	93 98       	cbi	0x12, 3	; 18
     d38:	08 95       	ret
		else if(a == eS_PORTD4)
     d3a:	82 32       	cpi	r24, 0x22	; 34
     d3c:	91 05       	cpc	r25, r1
     d3e:	11 f4       	brne	.+4      	; 0xd44 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     d40:	94 98       	cbi	0x12, 4	; 18
     d42:	08 95       	ret
		else if(a == eS_PORTD5)
     d44:	83 32       	cpi	r24, 0x23	; 35
     d46:	91 05       	cpc	r25, r1
     d48:	11 f4       	brne	.+4      	; 0xd4e <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     d4a:	95 98       	cbi	0x12, 5	; 18
     d4c:	08 95       	ret
		else if(a == eS_PORTD6)
     d4e:	84 32       	cpi	r24, 0x24	; 36
     d50:	91 05       	cpc	r25, r1
     d52:	11 f4       	brne	.+4      	; 0xd58 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     d54:	96 98       	cbi	0x12, 6	; 18
     d56:	08 95       	ret
		else if(a == eS_PORTD7)
     d58:	85 97       	sbiw	r24, 0x25	; 37
     d5a:	09 f0       	breq	.+2      	; 0xd5e <pinChange+0x140>
     d5c:	9f c0       	rjmp	.+318    	; 0xe9c <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     d5e:	97 98       	cbi	0x12, 7	; 18
     d60:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	11 f4       	brne	.+4      	; 0xd6a <pinChange+0x14c>
		PORTA |= (1<<PA0);
     d66:	d8 9a       	sbi	0x1b, 0	; 27
     d68:	08 95       	ret
		else if(a == eS_PORTA1)
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	91 05       	cpc	r25, r1
     d6e:	11 f4       	brne	.+4      	; 0xd74 <pinChange+0x156>
		PORTA |= (1<<PA1);
     d70:	d9 9a       	sbi	0x1b, 1	; 27
     d72:	08 95       	ret
		else if(a == eS_PORTA2)
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	91 05       	cpc	r25, r1
     d78:	11 f4       	brne	.+4      	; 0xd7e <pinChange+0x160>
		PORTA |= (1<<PA2);
     d7a:	da 9a       	sbi	0x1b, 2	; 27
     d7c:	08 95       	ret
		else if(a == eS_PORTA3)
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	91 05       	cpc	r25, r1
     d82:	11 f4       	brne	.+4      	; 0xd88 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     d84:	db 9a       	sbi	0x1b, 3	; 27
     d86:	08 95       	ret
		else if(a == eS_PORTA4)
     d88:	84 30       	cpi	r24, 0x04	; 4
     d8a:	91 05       	cpc	r25, r1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <pinChange+0x174>
		PORTA |= (1<<PA4);
     d8e:	dc 9a       	sbi	0x1b, 4	; 27
     d90:	08 95       	ret
		else if(a == eS_PORTA5)
     d92:	85 30       	cpi	r24, 0x05	; 5
     d94:	91 05       	cpc	r25, r1
     d96:	11 f4       	brne	.+4      	; 0xd9c <pinChange+0x17e>
		PORTA |= (1<<PA5);
     d98:	dd 9a       	sbi	0x1b, 5	; 27
     d9a:	08 95       	ret
		else if(a == eS_PORTA6)
     d9c:	86 30       	cpi	r24, 0x06	; 6
     d9e:	91 05       	cpc	r25, r1
     da0:	11 f4       	brne	.+4      	; 0xda6 <pinChange+0x188>
		PORTA |= (1<<PA6);
     da2:	de 9a       	sbi	0x1b, 6	; 27
     da4:	08 95       	ret
		else if(a == eS_PORTA7)
     da6:	87 30       	cpi	r24, 0x07	; 7
     da8:	91 05       	cpc	r25, r1
     daa:	11 f4       	brne	.+4      	; 0xdb0 <pinChange+0x192>
		PORTA |= (1<<PA7);
     dac:	df 9a       	sbi	0x1b, 7	; 27
     dae:	08 95       	ret
		else if(a == eS_PORTB0)
     db0:	8a 30       	cpi	r24, 0x0A	; 10
     db2:	91 05       	cpc	r25, r1
     db4:	11 f4       	brne	.+4      	; 0xdba <pinChange+0x19c>
		PORTB |= (1<<PB0);
     db6:	c0 9a       	sbi	0x18, 0	; 24
     db8:	08 95       	ret
		else if(a == eS_PORTB1)
     dba:	8b 30       	cpi	r24, 0x0B	; 11
     dbc:	91 05       	cpc	r25, r1
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     dc0:	c1 9a       	sbi	0x18, 1	; 24
     dc2:	08 95       	ret
		else if(a == eS_PORTB2)
     dc4:	8c 30       	cpi	r24, 0x0C	; 12
     dc6:	91 05       	cpc	r25, r1
     dc8:	11 f4       	brne	.+4      	; 0xdce <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     dca:	c2 9a       	sbi	0x18, 2	; 24
     dcc:	08 95       	ret
		else if(a == eS_PORTB3)
     dce:	8d 30       	cpi	r24, 0x0D	; 13
     dd0:	91 05       	cpc	r25, r1
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     dd4:	c3 9a       	sbi	0x18, 3	; 24
     dd6:	08 95       	ret
		else if(a == eS_PORTB4)
     dd8:	8e 30       	cpi	r24, 0x0E	; 14
     dda:	91 05       	cpc	r25, r1
     ddc:	11 f4       	brne	.+4      	; 0xde2 <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     dde:	c4 9a       	sbi	0x18, 4	; 24
     de0:	08 95       	ret
		else if(a == eS_PORTB5)
     de2:	8f 30       	cpi	r24, 0x0F	; 15
     de4:	91 05       	cpc	r25, r1
     de6:	11 f4       	brne	.+4      	; 0xdec <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     de8:	c5 9a       	sbi	0x18, 5	; 24
     dea:	08 95       	ret
		else if(a == eS_PORTB6)
     dec:	80 31       	cpi	r24, 0x10	; 16
     dee:	91 05       	cpc	r25, r1
     df0:	11 f4       	brne	.+4      	; 0xdf6 <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     df2:	c6 9a       	sbi	0x18, 6	; 24
     df4:	08 95       	ret
		else if(a == eS_PORTB7)
     df6:	81 31       	cpi	r24, 0x11	; 17
     df8:	91 05       	cpc	r25, r1
     dfa:	11 f4       	brne	.+4      	; 0xe00 <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     dfc:	c7 9a       	sbi	0x18, 7	; 24
     dfe:	08 95       	ret
		else if(a == eS_PORTC0)
     e00:	84 31       	cpi	r24, 0x14	; 20
     e02:	91 05       	cpc	r25, r1
     e04:	11 f4       	brne	.+4      	; 0xe0a <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     e06:	a8 9a       	sbi	0x15, 0	; 21
     e08:	08 95       	ret
		else if(a == eS_PORTC1)
     e0a:	85 31       	cpi	r24, 0x15	; 21
     e0c:	91 05       	cpc	r25, r1
     e0e:	11 f4       	brne	.+4      	; 0xe14 <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     e10:	a9 9a       	sbi	0x15, 1	; 21
     e12:	08 95       	ret
		else if(a == eS_PORTC2)
     e14:	86 31       	cpi	r24, 0x16	; 22
     e16:	91 05       	cpc	r25, r1
     e18:	11 f4       	brne	.+4      	; 0xe1e <pinChange+0x200>
		PORTC |= (1<<PC2);
     e1a:	aa 9a       	sbi	0x15, 2	; 21
     e1c:	08 95       	ret
		else if(a == eS_PORTC3)
     e1e:	87 31       	cpi	r24, 0x17	; 23
     e20:	91 05       	cpc	r25, r1
     e22:	11 f4       	brne	.+4      	; 0xe28 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     e24:	ab 9a       	sbi	0x15, 3	; 21
     e26:	08 95       	ret
		else if(a == eS_PORTC4)
     e28:	88 31       	cpi	r24, 0x18	; 24
     e2a:	91 05       	cpc	r25, r1
     e2c:	11 f4       	brne	.+4      	; 0xe32 <pinChange+0x214>
		PORTC |= (1<<PC4);
     e2e:	ac 9a       	sbi	0x15, 4	; 21
     e30:	08 95       	ret
		else if(a == eS_PORTC5)
     e32:	89 31       	cpi	r24, 0x19	; 25
     e34:	91 05       	cpc	r25, r1
     e36:	11 f4       	brne	.+4      	; 0xe3c <pinChange+0x21e>
		PORTC |= (1<<PC5);
     e38:	ad 9a       	sbi	0x15, 5	; 21
     e3a:	08 95       	ret
		else if(a == eS_PORTC6)
     e3c:	8a 31       	cpi	r24, 0x1A	; 26
     e3e:	91 05       	cpc	r25, r1
     e40:	11 f4       	brne	.+4      	; 0xe46 <pinChange+0x228>
		PORTC |= (1<<PC6);
     e42:	ae 9a       	sbi	0x15, 6	; 21
     e44:	08 95       	ret
		else if(a == eS_PORTC7)
     e46:	8b 31       	cpi	r24, 0x1B	; 27
     e48:	91 05       	cpc	r25, r1
     e4a:	11 f4       	brne	.+4      	; 0xe50 <pinChange+0x232>
		PORTC |= (1<<PC7);
     e4c:	af 9a       	sbi	0x15, 7	; 21
     e4e:	08 95       	ret
		else if(a == eS_PORTD0)
     e50:	8e 31       	cpi	r24, 0x1E	; 30
     e52:	91 05       	cpc	r25, r1
     e54:	11 f4       	brne	.+4      	; 0xe5a <pinChange+0x23c>
		PORTD |= (1<<PD0);
     e56:	90 9a       	sbi	0x12, 0	; 18
     e58:	08 95       	ret
		else if(a == eS_PORTD1)
     e5a:	8f 31       	cpi	r24, 0x1F	; 31
     e5c:	91 05       	cpc	r25, r1
     e5e:	11 f4       	brne	.+4      	; 0xe64 <pinChange+0x246>
		PORTD |= (1<<PD1);
     e60:	91 9a       	sbi	0x12, 1	; 18
     e62:	08 95       	ret
		else if(a == eS_PORTD2)
     e64:	80 32       	cpi	r24, 0x20	; 32
     e66:	91 05       	cpc	r25, r1
     e68:	11 f4       	brne	.+4      	; 0xe6e <pinChange+0x250>
		PORTD |= (1<<PD2);
     e6a:	92 9a       	sbi	0x12, 2	; 18
     e6c:	08 95       	ret
		else if(a == eS_PORTD3)
     e6e:	81 32       	cpi	r24, 0x21	; 33
     e70:	91 05       	cpc	r25, r1
     e72:	11 f4       	brne	.+4      	; 0xe78 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     e74:	93 9a       	sbi	0x12, 3	; 18
     e76:	08 95       	ret
		else if(a == eS_PORTD4)
     e78:	82 32       	cpi	r24, 0x22	; 34
     e7a:	91 05       	cpc	r25, r1
     e7c:	11 f4       	brne	.+4      	; 0xe82 <pinChange+0x264>
		PORTD |= (1<<PD4);
     e7e:	94 9a       	sbi	0x12, 4	; 18
     e80:	08 95       	ret
		else if(a == eS_PORTD5)
     e82:	83 32       	cpi	r24, 0x23	; 35
     e84:	91 05       	cpc	r25, r1
     e86:	11 f4       	brne	.+4      	; 0xe8c <pinChange+0x26e>
		PORTD |= (1<<PD5);
     e88:	95 9a       	sbi	0x12, 5	; 18
     e8a:	08 95       	ret
		else if(a == eS_PORTD6)
     e8c:	84 32       	cpi	r24, 0x24	; 36
     e8e:	91 05       	cpc	r25, r1
     e90:	11 f4       	brne	.+4      	; 0xe96 <pinChange+0x278>
		PORTD |= (1<<PD6);
     e92:	96 9a       	sbi	0x12, 6	; 18
     e94:	08 95       	ret
		else if(a == eS_PORTD7)
     e96:	85 97       	sbiw	r24, 0x25	; 37
     e98:	09 f4       	brne	.+2      	; 0xe9c <pinChange+0x27e>
		PORTD |= (1<<PD7);
     e9a:	97 9a       	sbi	0x12, 7	; 18
     e9c:	08 95       	ret

00000e9e <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     e9e:	cf 93       	push	r28
     ea0:	c8 2f       	mov	r28, r24
	if(a & 1)
     ea2:	80 ff       	sbrs	r24, 0
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <Lcd4_Port+0x16>
	pinChange(D4,1);
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	83 e2       	ldi	r24, 0x23	; 35
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	83 e2       	ldi	r24, 0x23	; 35
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
	
	if(a & 2)
     ec0:	c1 ff       	sbrs	r28, 1
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <Lcd4_Port+0x34>
	pinChange(D5,1);
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	82 e2       	ldi	r24, 0x22	; 34
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
     ed0:	06 c0       	rjmp	.+12     	; 0xede <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	82 e2       	ldi	r24, 0x22	; 34
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
	
	if(a & 4)
     ede:	c2 ff       	sbrs	r28, 2
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <Lcd4_Port+0x52>
	pinChange(D6,1);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	81 e2       	ldi	r24, 0x21	; 33
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
     eee:	06 c0       	rjmp	.+12     	; 0xefc <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	81 e2       	ldi	r24, 0x21	; 33
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
	
	if(a & 8)
     efc:	c3 ff       	sbrs	r28, 3
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <Lcd4_Port+0x70>
	pinChange(D7,1);
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
}
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     f1e:	cf 93       	push	r28
     f20:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	85 e2       	ldi	r24, 0x25	; 37
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
	Lcd4_Port(a);
     f2e:	8c 2f       	mov	r24, r28
     f30:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	84 e2       	ldi	r24, 0x24	; 36
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
     f40:	8f ec       	ldi	r24, 0xCF	; 207
     f42:	97 e0       	ldi	r25, 0x07	; 7
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <Lcd4_Cmd+0x26>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <Lcd4_Cmd+0x2c>
     f4a:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	84 e2       	ldi	r24, 0x24	; 36
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
     f58:	8f ec       	ldi	r24, 0xCF	; 207
     f5a:	97 e0       	ldi	r25, 0x07	; 7
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <Lcd4_Cmd+0x3e>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <Lcd4_Cmd+0x44>
     f62:	00 00       	nop
	_delay_ms(1);
}
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(1);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
     f74:	08 95       	ret

00000f76 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     f76:	cf 93       	push	r28
     f78:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     f7a:	81 11       	cpse	r24, r1
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     f7e:	80 e8       	ldi	r24, 0x80	; 128
     f80:	86 0f       	add	r24, r22
     f82:	82 95       	swap	r24
     f84:	8f 70       	andi	r24, 0x0F	; 15
     f86:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f8a:	8c 2f       	mov	r24, r28
     f8c:	8f 70       	andi	r24, 0x0F	; 15
     f8e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
     f92:	0c c0       	rjmp	.+24     	; 0xfac <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	51 f4       	brne	.+20     	; 0xfac <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	86 0f       	add	r24, r22
     f9c:	82 95       	swap	r24
     f9e:	8f 70       	andi	r24, 0x0F	; 15
     fa0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
		Lcd4_Cmd(y);
     fa4:	8c 2f       	mov	r24, r28
     fa6:	8f 70       	andi	r24, 0x0F	; 15
     fa8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	}
}
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Lcd4_Port>
     fb6:	8f e3       	ldi	r24, 0x3F	; 63
     fb8:	9c e9       	ldi	r25, 0x9C	; 156
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <Lcd4_Init+0xa>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <Lcd4_Init+0x10>
     fc0:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
     fc8:	8f e0       	ldi	r24, 0x0F	; 15
     fca:	97 e2       	ldi	r25, 0x27	; 39
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <Lcd4_Init+0x1c>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <Lcd4_Init+0x22>
     fd2:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
     fda:	8f ee       	ldi	r24, 0xEF	; 239
     fdc:	95 e5       	ldi	r25, 0x55	; 85
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <Lcd4_Init+0x2e>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <Lcd4_Init+0x34>
     fe4:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     ff8:	88 e0       	ldi	r24, 0x08	; 8
     ffa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
    1004:	8c e0       	ldi	r24, 0x0C	; 12
    1006:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Lcd4_Cmd>
	Lcd4_Clear();
    1016:	0e 94 b4 07 	call	0xf68	; 0xf68 <Lcd4_Clear>
    101a:	08 95       	ret

0000101c <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
    101c:	cf 93       	push	r28
    101e:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	85 e2       	ldi	r24, 0x25	; 37
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
    102c:	8c 2f       	mov	r24, r28
    102e:	82 95       	swap	r24
    1030:	8f 70       	andi	r24, 0x0F	; 15
    1032:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Lcd4_Port>
	pinChange(EN,1);
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	84 e2       	ldi	r24, 0x24	; 36
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
    1042:	8f ec       	ldi	r24, 0xCF	; 207
    1044:	97 e0       	ldi	r25, 0x07	; 7
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <Lcd4_Write_Char+0x2a>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <Lcd4_Write_Char+0x30>
    104c:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	84 e2       	ldi	r24, 0x24	; 36
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
    105a:	8f ec       	ldi	r24, 0xCF	; 207
    105c:	97 e0       	ldi	r25, 0x07	; 7
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <Lcd4_Write_Char+0x42>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <Lcd4_Write_Char+0x48>
    1064:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
    1066:	8c 2f       	mov	r24, r28
    1068:	8f 70       	andi	r24, 0x0F	; 15
    106a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Lcd4_Port>
	pinChange(EN,1);
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	84 e2       	ldi	r24, 0x24	; 36
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
    107a:	8f ec       	ldi	r24, 0xCF	; 207
    107c:	97 e0       	ldi	r25, 0x07	; 7
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <Lcd4_Write_Char+0x62>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <Lcd4_Write_Char+0x68>
    1084:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	84 e2       	ldi	r24, 0x24	; 36
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <pinChange>
    1092:	8f ec       	ldi	r24, 0xCF	; 207
    1094:	97 e0       	ldi	r25, 0x07	; 7
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <Lcd4_Write_Char+0x7a>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <Lcd4_Write_Char+0x80>
    109c:	00 00       	nop
	_delay_ms(1);
}
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    10a8:	88 81       	ld	r24, Y
    10aa:	88 23       	and	r24, r24
    10ac:	31 f0       	breq	.+12     	; 0x10ba <Lcd4_Write_String+0x18>
    10ae:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
    10b0:	0e 94 0e 08 	call	0x101c	; 0x101c <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    10b4:	89 91       	ld	r24, Y+
    10b6:	81 11       	cpse	r24, r1
    10b8:	fb cf       	rjmp	.-10     	; 0x10b0 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	7b 01       	movw	r14, r22
    10ce:	14 2f       	mov	r17, r20
    10d0:	88 0f       	add	r24, r24
    10d2:	0e 94 cd 0c 	call	0x199a	; 0x199a <i2c_start>
    10d6:	81 11       	cpse	r24, r1
    10d8:	12 c0       	rjmp	.+36     	; 0x10fe <I2C_WRITESEQ+0x3e>
    10da:	11 23       	and	r17, r17
    10dc:	91 f0       	breq	.+36     	; 0x1102 <I2C_WRITESEQ+0x42>
    10de:	e7 01       	movw	r28, r14
    10e0:	11 50       	subi	r17, 0x01	; 1
    10e2:	01 2f       	mov	r16, r17
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	0f 5f       	subi	r16, 0xFF	; 255
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	0e 0d       	add	r16, r14
    10ec:	1f 1d       	adc	r17, r15
    10ee:	89 91       	ld	r24, Y+
    10f0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <i2c_write>
    10f4:	c0 17       	cp	r28, r16
    10f6:	d1 07       	cpc	r29, r17
    10f8:	d1 f7       	brne	.-12     	; 0x10ee <I2C_WRITESEQ+0x2e>
    10fa:	c0 e0       	ldi	r28, 0x00	; 0
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <I2C_WRITESEQ+0x44>
    10fe:	c1 e0       	ldi	r28, 0x01	; 1
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <I2C_WRITESEQ+0x44>
    1102:	c0 e0       	ldi	r28, 0x00	; 0
    1104:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <i2c_stop>
    1108:	8c 2f       	mov	r24, r28
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret

00001118 <wr_lcd_mode>:
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <wr_lcd_mode+0xa>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <wr_lcd_mode+0xc>
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	08 2f       	mov	r16, r24
    112c:	68 30       	cpi	r22, 0x08	; 8
    112e:	71 f4       	brne	.+28     	; 0x114c <wr_lcd_mode+0x34>
    1130:	81 11       	cpse	r24, r1
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <wr_lcd_mode+0x20>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	01 c0       	rjmp	.+2      	; 0x113a <wr_lcd_mode+0x22>
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <backlight.1943>
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	66 e6       	ldi	r22, 0x66	; 102
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	87 e2       	ldi	r24, 0x27	; 39
    1146:	0e 94 60 08 	call	0x10c0	; 0x10c0 <I2C_WRITESEQ>
    114a:	26 c0       	rjmp	.+76     	; 0x1198 <wr_lcd_mode+0x80>
    114c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <backlight.1943>
    1150:	16 2f       	mov	r17, r22
    1152:	18 2b       	or	r17, r24
    1154:	19 83       	std	Y+1, r17	; 0x01
    1156:	80 2f       	mov	r24, r16
    1158:	80 7f       	andi	r24, 0xF0	; 240
    115a:	84 60       	ori	r24, 0x04	; 4
    115c:	81 2b       	or	r24, r17
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	8b 7f       	andi	r24, 0xFB	; 251
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	20 e1       	ldi	r18, 0x10	; 16
    1166:	02 9f       	mul	r16, r18
    1168:	c0 01       	movw	r24, r0
    116a:	11 24       	eor	r1, r1
    116c:	81 2b       	or	r24, r17
    116e:	84 60       	ori	r24, 0x04	; 4
    1170:	8c 83       	std	Y+4, r24	; 0x04
    1172:	8b 7f       	andi	r24, 0xFB	; 251
    1174:	8d 83       	std	Y+5, r24	; 0x05
    1176:	45 e0       	ldi	r20, 0x05	; 5
    1178:	be 01       	movw	r22, r28
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	87 e2       	ldi	r24, 0x27	; 39
    1180:	0e 94 60 08 	call	0x10c0	; 0x10c0 <I2C_WRITESEQ>
    1184:	10 fd       	sbrc	r17, 0
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <wr_lcd_mode+0x80>
    1188:	03 30       	cpi	r16, 0x03	; 3
    118a:	30 f4       	brcc	.+12     	; 0x1198 <wr_lcd_mode+0x80>
    118c:	e3 ef       	ldi	r30, 0xF3	; 243
    118e:	f1 e0       	ldi	r31, 0x01	; 1
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <wr_lcd_mode+0x78>
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <wr_lcd_mode+0x7e>
    1196:	00 00       	nop
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <lcd_gotoxy>:
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	d8 2f       	mov	r29, r24
    11b2:	c6 2f       	mov	r28, r22
    11b4:	e6 2f       	mov	r30, r22
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	e9 59       	subi	r30, 0x99	; 153
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	98 2f       	mov	r25, r24
    11be:	90 68       	ori	r25, 0x80	; 128
    11c0:	80 81       	ld	r24, Z
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	89 2b       	or	r24, r25
    11c6:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    11ca:	d0 93 84 02 	sts	0x0284, r29	; 0x800284 <_lcd_x>
    11ce:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <_lcd_y>
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <lcd_clrscr>:
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    11e0:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <_lcd_y>
    11e4:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <_lcd_x>
    11e8:	08 95       	ret

000011ea <lcd_putc>:
    11ea:	cf 93       	push	r28
    11ec:	c8 2f       	mov	r28, r24
    11ee:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <_lcd_x>
    11f2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_lcd_maxx>
    11f6:	98 17       	cp	r25, r24
    11f8:	18 f4       	brcc	.+6      	; 0x1200 <lcd_putc+0x16>
    11fa:	ca 30       	cpi	r28, 0x0A	; 10
    11fc:	59 f4       	brne	.+22     	; 0x1214 <lcd_putc+0x2a>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <lcd_putc+0x3e>
    1200:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <_lcd_y>
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <_lcd_y>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <lcd_gotoxy>
    1210:	ca 30       	cpi	r28, 0x0A	; 10
    1212:	91 f0       	breq	.+36     	; 0x1238 <lcd_putc+0x4e>
    1214:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_lcd_x>
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <_lcd_x>
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	8c 2f       	mov	r24, r28
    1222:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <lcd_putc+0x4e>
    1228:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <_lcd_y>
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <_lcd_y>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 d6 08 	call	0x11ac	; 0x11ac <lcd_gotoxy>
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <lcd_puts>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
    1242:	88 81       	ld	r24, Y
    1244:	88 23       	and	r24, r24
    1246:	31 f0       	breq	.+12     	; 0x1254 <lcd_puts+0x18>
    1248:	21 96       	adiw	r28, 0x01	; 1
    124a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <lcd_putc>
    124e:	89 91       	ld	r24, Y+
    1250:	81 11       	cpse	r24, r1
    1252:	fb cf       	rjmp	.-10     	; 0x124a <lcd_puts+0xe>
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <lcd_init+0xa>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <lcd_init+0xc>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <lcd_init+0xe>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
    126e:	80 e3       	ldi	r24, 0x30	; 48
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	94 e3       	ldi	r25, 0x34	; 52
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
    1278:	80 e2       	ldi	r24, 0x20	; 32
    127a:	8c 83       	std	Y+4, r24	; 0x04
    127c:	94 e2       	ldi	r25, 0x24	; 36
    127e:	9d 83       	std	Y+5, r25	; 0x05
    1280:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
    1282:	80 e1       	ldi	r24, 0x10	; 16
    1284:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
    1288:	e7 e6       	ldi	r30, 0x67	; 103
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 5f       	subi	r24, 0xF0	; 240
    1290:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
    1292:	81 81       	ldd	r24, Z+1	; 0x01
    1294:	80 5f       	subi	r24, 0xF0	; 240
    1296:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
    1298:	bd 9a       	sbi	0x17, 5	; 23
    129a:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
    129c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <i2c_init>
    12a0:	8b e4       	ldi	r24, 0x4B	; 75
    12a2:	9d e1       	ldi	r25, 0x1D	; 29
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <lcd_init+0x4a>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <lcd_init+0x50>
    12aa:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
    12ac:	43 e0       	ldi	r20, 0x03	; 3
    12ae:	be 01       	movw	r22, r28
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	87 e2       	ldi	r24, 0x27	; 39
    12b6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <I2C_WRITESEQ>
    12ba:	18 2f       	mov	r17, r24
    12bc:	81 ee       	ldi	r24, 0xE1	; 225
    12be:	94 e0       	ldi	r25, 0x04	; 4
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <lcd_init+0x66>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <lcd_init+0x6c>
    12c6:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    12c8:	43 e0       	ldi	r20, 0x03	; 3
    12ca:	be 01       	movw	r22, r28
    12cc:	6f 5f       	subi	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	87 e2       	ldi	r24, 0x27	; 39
    12d2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <I2C_WRITESEQ>
    12d6:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    12d8:	43 e0       	ldi	r20, 0x03	; 3
    12da:	be 01       	movw	r22, r28
    12dc:	6f 5f       	subi	r22, 0xFF	; 255
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	87 e2       	ldi	r24, 0x27	; 39
    12e2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <I2C_WRITESEQ>
    12e6:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
    12e8:	43 e0       	ldi	r20, 0x03	; 3
    12ea:	be 01       	movw	r22, r28
    12ec:	6c 5f       	subi	r22, 0xFC	; 252
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	87 e2       	ldi	r24, 0x27	; 39
    12f2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <I2C_WRITESEQ>
    12f6:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	88 e2       	ldi	r24, 0x28	; 40
    12fc:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
    1300:	81 2b       	or	r24, r17
    1302:	09 f0       	breq	.+2      	; 0x1306 <lcd_init+0xac>
    1304:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	8c e0       	ldi	r24, 0x0C	; 12
    130a:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	86 e0       	ldi	r24, 0x06	; 6
    1312:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	80 2f       	mov	r24, r16
    1322:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
}
    1326:	26 96       	adiw	r28, 0x06	; 6
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
    133c:	68 e0       	ldi	r22, 0x08	; 8
    133e:	0e 94 8c 08 	call	0x1118	; 0x1118 <wr_lcd_mode>
    1342:	08 95       	ret

00001344 <Lm35_Init>:
#include "../all.h"

void Lm35_Init()
{
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
    1344:	80 ec       	ldi	r24, 0xC0	; 192
    1346:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
    1348:	80 e8       	ldi	r24, 0x80	; 128
    134a:	86 b9       	out	0x06, r24	; 6
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
	DDRA &= ~1;
    134c:	d0 98       	cbi	0x1a, 0	; 26
    134e:	08 95       	ret

00001350 <Lm35_GetTemp>:

float Lm35_GetTemp()
{
	float tempC, tempF, vref = 2.56;

	ADCSRA |= (1<<ADSC);
    1350:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    1352:	36 99       	sbic	0x06, 6	; 6
    1354:	fe cf       	rjmp	.-4      	; 0x1352 <Lm35_GetTemp+0x2>

	unsigned int i = ADC;
    1356:	64 b1       	in	r22, 0x04	; 4
    1358:	75 b1       	in	r23, 0x05	; 5
	tempC = (i * vref * 1000.0) / (10.0 * 1024);
	tempF = tempC * (9.0 / 5)  + 32.0;

	return tempF;
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__floatunsisf>
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	37 ed       	ldi	r19, 0xD7	; 215
    1366:	43 e2       	ldi	r20, 0x23	; 35
    1368:	50 e4       	ldi	r21, 0x40	; 64
    136a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a e7       	ldi	r20, 0x7A	; 122
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	56 e4       	ldi	r21, 0x46	; 70
    1382:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__divsf3>
    1386:	26 e6       	ldi	r18, 0x66	; 102
    1388:	36 e6       	ldi	r19, 0x66	; 102
    138a:	46 ee       	ldi	r20, 0xE6	; 230
    138c:	5f e3       	ldi	r21, 0x3F	; 63
    138e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3>
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	52 e4       	ldi	r21, 0x42	; 66
    139a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__addsf3>
    139e:	08 95       	ret

000013a0 <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
    13a0:	0e 94 99 03 	call	0x732	; 0x732 <HC05_Init_Data_Mode>
	//HC05_Init_ATCommand_Mode();
	
	HC05_SendString("hello there");
    13a4:	8f e6       	ldi	r24, 0x6F	; 111
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 6a 05 	call	0xad4	; 0xad4 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 6a 05 	call	0xad4	; 0xad4 <Lcd_Init>
	
	Lcd_Position(LCDNOTICE , 0,0);
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    13c6:	6b e7       	ldi	r22, 0x7B	; 123
    13c8:	71 e0       	ldi	r23, 0x01	; 1
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	Lcd_Position(LCDNOTICE , 0,0);
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    13de:	6b e7       	ldi	r22, 0x7B	; 123
    13e0:	71 e0       	ldi	r23, 0x01	; 1
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    13e8:	6b e7       	ldi	r22, 0x7B	; 123
    13ea:	71 e0       	ldi	r23, 0x01	; 1
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	
	States_GotoState(IDLE);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
	States_GotoState(ENTERING_BP);
    13f8:	85 e0       	ldi	r24, 0x05	; 5
    13fa:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
	
	Keypad_Init();
    13fe:	0e 94 b5 03 	call	0x76a	; 0x76a <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
    1402:	0e 94 39 04 	call	0x872	; 0x872 <Keypad_KeyPressed>
    1406:	88 23       	and	r24, r24
    1408:	b1 f0       	breq	.+44     	; 0x1436 <main+0x96>
    140a:	8f e3       	ldi	r24, 0x3F	; 63
    140c:	9c e9       	ldi	r25, 0x9C	; 156
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <main+0x6e>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <main+0x74>
    1414:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
    1416:	0e 94 39 04 	call	0x872	; 0x872 <Keypad_KeyPressed>
    141a:	88 23       	and	r24, r24
    141c:	61 f0       	breq	.+24     	; 0x1436 <main+0x96>
			{
				int_fast8_t x = Keypad_GetKey();
    141e:	0e 94 21 05 	call	0xa42	; 0xa42 <Keypad_GetKey>
    1422:	ef e3       	ldi	r30, 0x3F	; 63
    1424:	fc e9       	ldi	r31, 0x9C	; 156
    1426:	31 97       	sbiw	r30, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <main+0x86>
    142a:	00 c0       	rjmp	.+0      	; 0x142c <main+0x8c>
    142c:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
    142e:	0e 94 41 05 	call	0xa82	; 0xa82 <KeyProcessor_ProcessKey>
				Keypad_Init();
    1432:	0e 94 b5 03 	call	0x76a	; 0x76a <Keypad_Init>
			}
		}
		States_Refresh();
    1436:	0e 94 b3 0c 	call	0x1966	; 0x1966 <States_Refresh>
	}
    143a:	e3 cf       	rjmp	.-58     	; 0x1402 <main+0x62>

0000143c <Patient_UpdateName>:
struct PatientsList patientsList;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
    143c:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
    1440:	08 95       	ret

00001442 <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
    1442:	41 96       	adiw	r24, 0x11	; 17
    1444:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
    1448:	08 95       	ret

0000144a <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
    144a:	82 96       	adiw	r24, 0x22	; 34
    144c:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
    1450:	08 95       	ret

00001452 <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
    1452:	89 5b       	subi	r24, 0xB9	; 185
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	fc 01       	movw	r30, r24
    1458:	71 83       	std	Z+1, r23	; 0x01
    145a:	60 83       	st	Z, r22
    145c:	08 95       	ret

0000145e <Patient_UpdateTemperature>:
}
void Patient_UpdateTemperature(struct Patient *p, char *newTemp)
{
	strcpy(p->temperature , newTemp);
    145e:	c3 96       	adiw	r24, 0x33	; 51
    1460:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
    1464:	08 95       	ret

00001466 <Patient_UpdateBp>:
}
void Patient_UpdateBp(struct Patient *p, char *newBp)
{
	strcpy(p->bp, newBp);
    1466:	cd 96       	adiw	r24, 0x3d	; 61
    1468:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
    146c:	08 95       	ret

0000146e <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
    146e:	46 e9       	ldi	r20, 0x96	; 150
    1470:	51 e0       	ldi	r21, 0x01	; 1
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
	Keypad_InitNumpad();
    147c:	0e 94 0a 04 	call	0x814	; 0x814 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1480:	0e 94 1f 04 	call	0x83e	; 0x83e <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
    1484:	89 e9       	ldi	r24, 0x99	; 153
    1486:	92 e0       	ldi	r25, 0x02	; 2
    1488:	0e 94 c7 03 	call	0x78e	; 0x78e <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    148c:	42 e7       	ldi	r20, 0x72	; 114
    148e:	52 e0       	ldi	r21, 0x02	; 2
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
    149a:	08 95       	ret

0000149c <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    149c:	8f 31       	cpi	r24, 0x1F	; 31
    149e:	61 f4       	brne	.+24     	; 0x14b8 <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    14a0:	62 e7       	ldi	r22, 0x72	; 114
    14a2:	72 e0       	ldi	r23, 0x02	; 2
    14a4:	88 e8       	ldi	r24, 0x88	; 136
    14a6:	92 e0       	ldi	r25, 0x02	; 2
    14a8:	0e 94 21 0a 	call	0x1442	; 0x1442 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    14ac:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    14b6:	08 95       	ret
	}
	else if(key == 30)
    14b8:	8e 31       	cpi	r24, 0x1E	; 30
    14ba:	61 f4       	brne	.+24     	; 0x14d4 <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    14bc:	62 e7       	ldi	r22, 0x72	; 114
    14be:	72 e0       	ldi	r23, 0x02	; 2
    14c0:	88 e8       	ldi	r24, 0x88	; 136
    14c2:	92 e0       	ldi	r25, 0x02	; 2
    14c4:	0e 94 21 0a 	call	0x1442	; 0x1442 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    14c8:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    14d2:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    14d4:	0e 94 ab 04 	call	0x956	; 0x956 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    14d8:	42 e7       	ldi	r20, 0x72	; 114
    14da:	52 e0       	ldi	r21, 0x02	; 2
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    14e6:	82 e7       	ldi	r24, 0x72	; 114
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    14ee:	0e 94 1f 04 	call	0x83e	; 0x83e <Keypad_UpdateKeyMode>
    14f2:	08 95       	ret

000014f4 <EnteringBp_Init>:
#include "../../all.h"

void EnteringBp_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Finger on green-");
    14f4:	41 ea       	ldi	r20, 0xA1	; 161
    14f6:	51 e0       	ldi	r21, 0x01	; 1
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
	Lcd_PrintLine(LCDKEYPAD , 1, "Light ");
    1502:	42 eb       	ldi	r20, 0xB2	; 178
    1504:	51 e0       	ldi	r21, 0x01	; 1
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
	Bp_Init();
    1510:	0e 94 2c 02 	call	0x458	; 0x458 <Bp_Init>
    1514:	08 95       	ret

00001516 <EntetingBp_Refresh>:
}

void EntetingBp_Refresh()
{
	
	Bp_PrintBp();
    1516:	0e 94 32 02 	call	0x464	; 0x464 <Bp_PrintBp>
    151a:	08 95       	ret

0000151c <EnteringBp_ProcessKey>:
}

void EnteringBp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    151c:	8f 31       	cpi	r24, 0x1F	; 31
    151e:	61 f4       	brne	.+24     	; 0x1538 <EnteringBp_ProcessKey+0x1c>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    1520:	62 e7       	ldi	r22, 0x72	; 114
    1522:	72 e0       	ldi	r23, 0x02	; 2
    1524:	88 e8       	ldi	r24, 0x88	; 136
    1526:	92 e0       	ldi	r25, 0x02	; 2
    1528:	0e 94 33 0a 	call	0x1466	; 0x1466 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    152c:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(GENERATE_SERIAL);
    1530:	86 e0       	ldi	r24, 0x06	; 6
    1532:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    1536:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    1538:	8e 31       	cpi	r24, 0x1E	; 30
    153a:	59 f4       	brne	.+22     	; 0x1552 <EnteringBp_ProcessKey+0x36>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    153c:	62 e7       	ldi	r22, 0x72	; 114
    153e:	72 e0       	ldi	r23, 0x02	; 2
    1540:	88 e8       	ldi	r24, 0x88	; 136
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	0e 94 33 0a 	call	0x1466	; 0x1466 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    1548:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    154c:	84 e0       	ldi	r24, 0x04	; 4
    154e:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    1552:	08 95       	ret

00001554 <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 98 05 	call	0xb30	; 0xb30 <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
    1568:	69 eb       	ldi	r22, 0xB9	; 185
    156a:	71 e0       	ldi	r23, 0x01	; 1
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	Keypad_UpdateKeyMode();
    1572:	0e 94 1f 04 	call	0x83e	; 0x83e <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
    1576:	88 e8       	ldi	r24, 0x88	; 136
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	0e 94 c7 03 	call	0x78e	; 0x78e <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    157e:	42 e7       	ldi	r20, 0x72	; 114
    1580:	52 e0       	ldi	r21, 0x02	; 2
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
    158c:	08 95       	ret

0000158e <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    158e:	8f 31       	cpi	r24, 0x1F	; 31
    1590:	61 f4       	brne	.+24     	; 0x15aa <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    1592:	62 e7       	ldi	r22, 0x72	; 114
    1594:	72 e0       	ldi	r23, 0x02	; 2
    1596:	88 e8       	ldi	r24, 0x88	; 136
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	0e 94 1e 0a 	call	0x143c	; 0x143c <Patient_UpdateName>
		Keypad_ResetBuffer();
    159e:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    15a8:	08 95       	ret
	}
	else if(key == 30)
    15aa:	8e 31       	cpi	r24, 0x1E	; 30
    15ac:	61 f4       	brne	.+24     	; 0x15c6 <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    15ae:	62 e7       	ldi	r22, 0x72	; 114
    15b0:	72 e0       	ldi	r23, 0x02	; 2
    15b2:	88 e8       	ldi	r24, 0x88	; 136
    15b4:	92 e0       	ldi	r25, 0x02	; 2
    15b6:	0e 94 1e 0a 	call	0x143c	; 0x143c <Patient_UpdateName>
		Keypad_ResetBuffer();
    15ba:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    15c4:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    15c6:	0e 94 ab 04 	call	0x956	; 0x956 <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    15ca:	42 e7       	ldi	r20, 0x72	; 114
    15cc:	52 e0       	ldi	r21, 0x02	; 2
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    15d8:	82 e7       	ldi	r24, 0x72	; 114
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    15e0:	0e 94 1f 04 	call	0x83e	; 0x83e <Keypad_UpdateKeyMode>
    15e4:	08 95       	ret

000015e6 <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
    15e6:	45 ec       	ldi	r20, 0xC5	; 197
    15e8:	51 e0       	ldi	r21, 0x01	; 1
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    15f4:	0e 94 0a 04 	call	0x814	; 0x814 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    15f8:	0e 94 1f 04 	call	0x83e	; 0x83e <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    15fc:	8a ea       	ldi	r24, 0xAA	; 170
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	0e 94 c7 03 	call	0x78e	; 0x78e <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1604:	42 e7       	ldi	r20, 0x72	; 114
    1606:	52 e0       	ldi	r21, 0x02	; 2
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
    1612:	08 95       	ret

00001614 <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1614:	8f 31       	cpi	r24, 0x1F	; 31
    1616:	61 f4       	brne	.+24     	; 0x1630 <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    1618:	62 e7       	ldi	r22, 0x72	; 114
    161a:	72 e0       	ldi	r23, 0x02	; 2
    161c:	88 e8       	ldi	r24, 0x88	; 136
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	0e 94 25 0a 	call	0x144a	; 0x144a <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    1624:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    162e:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    1630:	8e 31       	cpi	r24, 0x1E	; 30
    1632:	61 f4       	brne	.+24     	; 0x164c <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    1634:	62 e7       	ldi	r22, 0x72	; 114
    1636:	72 e0       	ldi	r23, 0x02	; 2
    1638:	88 e8       	ldi	r24, 0x88	; 136
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	0e 94 25 0a 	call	0x144a	; 0x144a <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    1640:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    164a:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    164c:	0e 94 ab 04 	call	0x956	; 0x956 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1650:	42 e7       	ldi	r20, 0x72	; 114
    1652:	52 e0       	ldi	r21, 0x02	; 2
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    165e:	82 e7       	ldi	r24, 0x72	; 114
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	0e 94 a6 03 	call	0x74c	; 0x74c <HC05_SendString>
		
		Keypad_InitNumpad();
    1666:	0e 94 0a 04 	call	0x814	; 0x814 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    166a:	0e 94 1f 04 	call	0x83e	; 0x83e <Keypad_UpdateKeyMode>
    166e:	08 95       	ret

00001670 <EnteringTemp_Init>:
#include "../../all.h"

void EnteringTemp_Init()
{
	Lcd_PrintLine(LCDKEYPAD, 0, "Temperature:");
    1670:	4f ec       	ldi	r20, 0xCF	; 207
    1672:	51 e0       	ldi	r21, 0x01	; 1
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
    Lm35_Init();
    167e:	0e 94 a2 09 	call	0x1344	; 0x1344 <Lm35_Init>
    1682:	08 95       	ret

00001684 <EnteringTemp_Refresh>:
}

void EnteringTemp_Refresh()
{
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	64 97       	sbiw	r28, 0x14	; 20
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
	float tempF = Lm35_GetTemp();
    169c:	0e 94 a8 09 	call	0x1350	; 0x1350 <Lm35_GetTemp>
	char tempF_txt[20];
	dtostrf(tempF, 5, 2, tempF_txt);
    16a0:	8e 01       	movw	r16, r28
    16a2:	0f 5f       	subi	r16, 0xFF	; 255
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	22 e0       	ldi	r18, 0x02	; 2
    16a8:	45 e0       	ldi	r20, 0x05	; 5
    16aa:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <dtostrf>
	Lcd_PrintLine(LCDKEYPAD, 1, tempF_txt);
    16ae:	a8 01       	movw	r20, r16
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 df 05 	call	0xbbe	; 0xbbe <Lcd_PrintLine>
	strcpy(keyBuffer, tempF_txt);
    16ba:	b8 01       	movw	r22, r16
    16bc:	82 e7       	ldi	r24, 0x72	; 114
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
}
    16c4:	64 96       	adiw	r28, 0x14	; 20
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <EnteringTemp_ProcessKey>:

void EnteringTemp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    16da:	8f 31       	cpi	r24, 0x1F	; 31
    16dc:	61 f4       	brne	.+24     	; 0x16f6 <EnteringTemp_ProcessKey+0x1c>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    16de:	62 e7       	ldi	r22, 0x72	; 114
    16e0:	72 e0       	ldi	r23, 0x02	; 2
    16e2:	88 e8       	ldi	r24, 0x88	; 136
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 2f 0a 	call	0x145e	; 0x145e <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    16ea:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_BP);
    16ee:	85 e0       	ldi	r24, 0x05	; 5
    16f0:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    16f4:	08 95       	ret
	}
	else if(key == 30)
    16f6:	8e 31       	cpi	r24, 0x1E	; 30
    16f8:	59 f4       	brne	.+22     	; 0x1710 <EnteringTemp_ProcessKey+0x36>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    16fa:	62 e7       	ldi	r22, 0x72	; 114
    16fc:	72 e0       	ldi	r23, 0x02	; 2
    16fe:	88 e8       	ldi	r24, 0x88	; 136
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	0e 94 2f 0a 	call	0x145e	; 0x145e <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    1706:	0e 94 bc 03 	call	0x778	; 0x778 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    1710:	08 95       	ret

00001712 <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount);
	Update_PatientsList();
}

void Update_PatientsList()
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));	//didn't wanna change your code, so created a new pointer
    1716:	8b e4       	ldi	r24, 0x4B	; 75
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <malloc>
    171e:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    1720:	68 e8       	ldi	r22, 0x88	; 136
    1722:	72 e0       	ldi	r23, 0x02	; 2
    1724:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
	strcpy(cp->age, currentPatient.age);
    1728:	69 e9       	ldi	r22, 0x99	; 153
    172a:	72 e0       	ldi	r23, 0x02	; 2
    172c:	ce 01       	movw	r24, r28
    172e:	41 96       	adiw	r24, 0x11	; 17
    1730:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    1734:	6a ea       	ldi	r22, 0xAA	; 170
    1736:	72 e0       	ldi	r23, 0x02	; 2
    1738:	ce 01       	movw	r24, r28
    173a:	82 96       	adiw	r24, 0x22	; 34
    173c:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
	cp->serial = currentPatient.serial;
    1740:	fe 01       	movw	r30, r28
    1742:	e9 5b       	subi	r30, 0xB9	; 185
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <currentPatient+0x47>
    174a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <currentPatient+0x48>
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
	cp->nextPatient = NULL;
    1752:	32 96       	adiw	r30, 0x02	; 2
    1754:	11 82       	std	Z+1, r1	; 0x01
    1756:	10 82       	st	Z, r1
	strcpy(cp->temperature, currentPatient.temperature);
    1758:	6b eb       	ldi	r22, 0xBB	; 187
    175a:	72 e0       	ldi	r23, 0x02	; 2
    175c:	ce 01       	movw	r24, r28
    175e:	c3 96       	adiw	r24, 0x33	; 51
    1760:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
	strcpy(cp->bp, currentPatient.bp);
    1764:	65 ec       	ldi	r22, 0xC5	; 197
    1766:	72 e0       	ldi	r23, 0x02	; 2
    1768:	ce 01       	movw	r24, r28
    176a:	cd 96       	adiw	r24, 0x3d	; 61
    176c:	0e 94 55 10 	call	0x20aa	; 0x20aa <strcpy>
	if(!patientsList.root) {
    1770:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <patientsList>
    1774:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <patientsList+0x1>
    1778:	21 15       	cp	r18, r1
    177a:	31 05       	cpc	r19, r1
    177c:	31 f4       	brne	.+12     	; 0x178a <Update_PatientsList+0x78>
		patientsList.root = cp;
    177e:	d0 93 87 02 	sts	0x0287, r29	; 0x800287 <patientsList+0x1>
    1782:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <patientsList>
    1786:	0a c0       	rjmp	.+20     	; 0x179c <Update_PatientsList+0x8a>
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
			p = p->nextPatient;
    1788:	9c 01       	movw	r18, r24
	if(!patientsList.root) {
		patientsList.root = cp;
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
    178a:	f9 01       	movw	r30, r18
    178c:	e7 5b       	subi	r30, 0xB7	; 183
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	c1 f7       	brne	.-16     	; 0x1788 <Update_PatientsList+0x76>
			p = p->nextPatient;
		}
		p->nextPatient = cp;
    1798:	d1 83       	std	Z+1, r29	; 0x01
    179a:	c0 83       	st	Z, r28
	}
	
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <Update_Serial>:
		
	}
}

void Update_Serial()
{
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	c4 56       	subi	r28, 0x64	; 100
    17b0:	d1 09       	sbc	r29, r1
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    17bc:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <patientsCount>
    17c0:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <patientsCount+0x1>
    17c4:	6f 5f       	subi	r22, 0xFF	; 255
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	07 2e       	mov	r0, r23
    17ca:	00 0c       	add	r0, r0
    17cc:	88 0b       	sbc	r24, r24
    17ce:	99 0b       	sbc	r25, r25
    17d0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__floatsisf>
    17d4:	8e 01       	movw	r16, r28
    17d6:	0f 5f       	subi	r16, 0xFF	; 255
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	43 e0       	ldi	r20, 0x03	; 3
    17de:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    17e2:	4d e0       	ldi	r20, 0x0D	; 13
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    17f0:	b8 01       	movw	r22, r16
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount);
    17f8:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <patientsCount>
    17fc:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <patientsCount+0x1>
    1800:	88 e8       	ldi	r24, 0x88	; 136
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 29 0a 	call	0x1452	; 0x1452 <Patient_UpdateSerial>
	Update_PatientsList();
    1808:	0e 94 89 0b 	call	0x1712	; 0x1712 <Update_PatientsList>
}
    180c:	cc 59       	subi	r28, 0x9C	; 156
    180e:	df 4f       	sbci	r29, 0xFF	; 255
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <GenerateSerial_Init>:
#include "../../all.h"


void GenerateSerial_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	0e 94 98 05 	call	0xb30	; 0xb30 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Your Serial: ");
    1838:	6c ed       	ldi	r22, 0xDC	; 220
    183a:	71 e0       	ldi	r23, 0x01	; 1
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	Update_Serial();
    1842:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
    1854:	6a ee       	ldi	r22, 0xEA	; 234
    1856:	71 e0       	ldi	r23, 0x01	; 1
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
    185e:	08 95       	ret

00001860 <Clear_CurrentPatient_Data>:
	}
	
}

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    1860:	e8 e8       	ldi	r30, 0x88	; 136
    1862:	f2 e0       	ldi	r31, 0x02	; 2
    1864:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    1866:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    1868:	12 a2       	std	Z+34, r1	; 0x22
	strcpy(currentPatient.temperature, "");
    186a:	13 aa       	std	Z+51, r1	; 0x33
	strcpy(currentPatient.bp, "");
    186c:	15 ae       	std	Z+61, r1	; 0x3d
    186e:	08 95       	ret

00001870 <GenerateSerial_ProcessKey>:
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1870:	8f 31       	cpi	r24, 0x1F	; 31
    1872:	39 f5       	brne	.+78     	; 0x18c2 <GenerateSerial_ProcessKey+0x52>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	0e 94 98 05 	call	0xb30	; 0xb30 <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    187a:	43 e0       	ldi	r20, 0x03	; 3
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
		patientsCount++;
    1888:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <patientsCount>
    188c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <patientsCount+0x1>
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <patientsCount+0x1>
    1896:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <patientsCount>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    189a:	6b ef       	ldi	r22, 0xFB	; 251
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
    18a4:	2f ef       	ldi	r18, 0xFF	; 255
    18a6:	83 ed       	ldi	r24, 0xD3	; 211
    18a8:	90 e3       	ldi	r25, 0x30	; 48
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	80 40       	sbci	r24, 0x00	; 0
    18ae:	90 40       	sbci	r25, 0x00	; 0
    18b0:	e1 f7       	brne	.-8      	; 0x18aa <GenerateSerial_ProcessKey+0x3a>
    18b2:	00 c0       	rjmp	.+0      	; 0x18b4 <GenerateSerial_ProcessKey+0x44>
    18b4:	00 00       	nop
		_delay_ms(2000);

		/* Here, can first prompt for providing temperature through lm and then go to the idle state for next entry */
		
		States_GotoState(IDLE);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
		Clear_CurrentPatient_Data();
    18bc:	0e 94 30 0c 	call	0x1860	; 0x1860 <Clear_CurrentPatient_Data>
    18c0:	08 95       	ret
	}
	else if(key == 30)
    18c2:	8e 31       	cpi	r24, 0x1E	; 30
    18c4:	19 f4       	brne	.+6      	; 0x18cc <GenerateSerial_ProcessKey+0x5c>
	{
		States_GotoState(ENTERING_PHONE);	// if re-editing is permitted
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    18cc:	08 95       	ret

000018ce <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	0e 94 87 0c 	call	0x190e	; 0x190e <States_GotoState>
    18d4:	08 95       	ret

000018d6 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	0e 94 98 05 	call	0xb30	; 0xb30 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    18ea:	65 e0       	ldi	r22, 0x05	; 5
    18ec:	72 e0       	ldi	r23, 0x02	; 2
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 ba 05 	call	0xb74	; 0xb74 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    1902:	6e e0       	ldi	r22, 0x0E	; 14
    1904:	72 e0       	ldi	r23, 0x02	; 2
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	0e 94 a8 05 	call	0xb50	; 0xb50 <Lcd_Prints>
    190c:	08 95       	ret

0000190e <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    190e:	cf 93       	push	r28
    1910:	c8 2f       	mov	r28, r24
	switch(newState)
    1912:	08 2e       	mov	r0, r24
    1914:	00 0c       	add	r0, r0
    1916:	99 0b       	sbc	r25, r25
    1918:	aa 0b       	sbc	r26, r26
    191a:	bb 0b       	sbc	r27, r27
    191c:	87 30       	cpi	r24, 0x07	; 7
    191e:	91 05       	cpc	r25, r1
    1920:	d0 f4       	brcc	.+52     	; 0x1956 <States_GotoState+0x48>
    1922:	fc 01       	movw	r30, r24
    1924:	ef 5c       	subi	r30, 0xCF	; 207
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__tablejump2__>
	{
		case IDLE:
			Idle_Init();
    192c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Idle_Init>
			break;
    1930:	16 c0       	rjmp	.+44     	; 0x195e <States_GotoState+0x50>
		case ENTERING_NAME:
			EnteringName_Init();
    1932:	0e 94 aa 0a 	call	0x1554	; 0x1554 <EnteringName_Init>
			break;
    1936:	13 c0       	rjmp	.+38     	; 0x195e <States_GotoState+0x50>
		case ENTERING_AGE:
			EnteringAge_Init();
    1938:	0e 94 37 0a 	call	0x146e	; 0x146e <EnteringAge_Init>
			break;
    193c:	10 c0       	rjmp	.+32     	; 0x195e <States_GotoState+0x50>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    193e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <EnteringPhone_Init>
			break;
    1942:	0d c0       	rjmp	.+26     	; 0x195e <States_GotoState+0x50>
		case ENTERING_TEMP:
			EnteringTemp_Init();
    1944:	0e 94 38 0b 	call	0x1670	; 0x1670 <EnteringTemp_Init>
			break;
    1948:	0a c0       	rjmp	.+20     	; 0x195e <States_GotoState+0x50>
		case ENTERING_BP:
			EnteringBp_Init();
    194a:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <EnteringBp_Init>
			break;
    194e:	07 c0       	rjmp	.+14     	; 0x195e <States_GotoState+0x50>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    1950:	0e 94 12 0c 	call	0x1824	; 0x1824 <GenerateSerial_Init>
			break;
    1954:	04 c0       	rjmp	.+8      	; 0x195e <States_GotoState+0x50>
		default:
			Error_Error("GotoState: newState not defined");
    1956:	8b e1       	ldi	r24, 0x1B	; 27
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
	}
	currentState = newState;
    195e:	c0 93 d3 02 	sts	0x02D3, r28	; 0x8002d3 <currentState>
}
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <States_Refresh>:
void States_Refresh()
{
	switch(currentState)
    1966:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <currentState>
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	39 f0       	breq	.+14     	; 0x197c <States_Refresh+0x16>
    196e:	1c f4       	brge	.+6      	; 0x1976 <States_Refresh+0x10>
    1970:	88 23       	and	r24, r24
    1972:	74 f4       	brge	.+28     	; 0x1990 <States_Refresh+0x2a>
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <States_Refresh+0x22>
    1976:	85 30       	cpi	r24, 0x05	; 5
    1978:	21 f0       	breq	.+8      	; 0x1982 <States_Refresh+0x1c>
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <States_Refresh+0x22>
		
		case ENTERING_PHONE:
		
			break;
		case ENTERING_TEMP:
			EnteringTemp_Refresh();
    197c:	0e 94 42 0b 	call	0x1684	; 0x1684 <EnteringTemp_Refresh>
			break;
    1980:	08 95       	ret
		case ENTERING_BP:
			EntetingBp_Refresh();
    1982:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EntetingBp_Refresh>
			break;
    1986:	08 95       	ret
		default:
		Error_Error("States_Refresh: currentstate not defined");
    1988:	8b e3       	ldi	r24, 0x3B	; 59
    198a:	92 e0       	ldi	r25, 0x02	; 2
    198c:	0e 94 2b 03 	call	0x656	; 0x656 <Error_Error>
    1990:	08 95       	ret

00001992 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1992:	11 b8       	out	0x01, r1	; 1
    1994:	80 e2       	ldi	r24, 0x20	; 32
    1996:	80 b9       	out	0x00, r24	; 0
    1998:	08 95       	ret

0000199a <i2c_start>:
    199a:	94 ea       	ldi	r25, 0xA4	; 164
    199c:	96 bf       	out	0x36, r25	; 54
    199e:	06 b6       	in	r0, 0x36	; 54
    19a0:	07 fe       	sbrs	r0, 7
    19a2:	fd cf       	rjmp	.-6      	; 0x199e <i2c_start+0x4>
    19a4:	91 b1       	in	r25, 0x01	; 1
    19a6:	98 7f       	andi	r25, 0xF8	; 248
    19a8:	98 30       	cpi	r25, 0x08	; 8
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <i2c_start+0x16>
    19ac:	90 31       	cpi	r25, 0x10	; 16
    19ae:	79 f4       	brne	.+30     	; 0x19ce <i2c_start+0x34>
    19b0:	83 b9       	out	0x03, r24	; 3
    19b2:	84 e8       	ldi	r24, 0x84	; 132
    19b4:	86 bf       	out	0x36, r24	; 54
    19b6:	06 b6       	in	r0, 0x36	; 54
    19b8:	07 fe       	sbrs	r0, 7
    19ba:	fd cf       	rjmp	.-6      	; 0x19b6 <i2c_start+0x1c>
    19bc:	91 b1       	in	r25, 0x01	; 1
    19be:	98 7f       	andi	r25, 0xF8	; 248
    19c0:	98 31       	cpi	r25, 0x18	; 24
    19c2:	39 f0       	breq	.+14     	; 0x19d2 <i2c_start+0x38>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 34       	cpi	r25, 0x40	; 64
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <i2c_start+0x3a>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	08 95       	ret
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	08 95       	ret
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	08 95       	ret

000019d6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    19d6:	84 e9       	ldi	r24, 0x94	; 148
    19d8:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    19da:	06 b6       	in	r0, 0x36	; 54
    19dc:	04 fc       	sbrc	r0, 4
    19de:	fd cf       	rjmp	.-6      	; 0x19da <i2c_stop+0x4>

}/* i2c_stop */
    19e0:	08 95       	ret

000019e2 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    19e2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    19e4:	84 e8       	ldi	r24, 0x84	; 132
    19e6:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    19e8:	06 b6       	in	r0, 0x36	; 54
    19ea:	07 fe       	sbrs	r0, 7
    19ec:	fd cf       	rjmp	.-6      	; 0x19e8 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    19ee:	91 b1       	in	r25, 0x01	; 1
    19f0:	98 7f       	andi	r25, 0xF8	; 248
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	98 32       	cpi	r25, 0x28	; 40
    19f6:	09 f4       	brne	.+2      	; 0x19fa <i2c_write+0x18>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    19fa:	08 95       	ret

000019fc <__subsf3>:
    19fc:	50 58       	subi	r21, 0x80	; 128

000019fe <__addsf3>:
    19fe:	bb 27       	eor	r27, r27
    1a00:	aa 27       	eor	r26, r26
    1a02:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3x>
    1a06:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_round>
    1a0a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__fp_pscA>
    1a0e:	38 f0       	brcs	.+14     	; 0x1a1e <__addsf3+0x20>
    1a10:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_pscB>
    1a14:	20 f0       	brcs	.+8      	; 0x1a1e <__addsf3+0x20>
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <__addsf3+0x28>
    1a18:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <__addsf3+0x24>
    1a1c:	26 f4       	brtc	.+8      	; 0x1a26 <__addsf3+0x28>
    1a1e:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_nan>
    1a22:	0e f4       	brtc	.+2      	; 0x1a26 <__addsf3+0x28>
    1a24:	e0 95       	com	r30
    1a26:	e7 fb       	bst	r30, 7
    1a28:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_inf>

00001a2c <__addsf3x>:
    1a2c:	e9 2f       	mov	r30, r25
    1a2e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_split3>
    1a32:	58 f3       	brcs	.-42     	; 0x1a0a <__addsf3+0xc>
    1a34:	ba 17       	cp	r27, r26
    1a36:	62 07       	cpc	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	84 07       	cpc	r24, r20
    1a3c:	95 07       	cpc	r25, r21
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__addsf3x+0x1c>
    1a40:	79 f4       	brne	.+30     	; 0x1a60 <__addsf3x+0x34>
    1a42:	a6 f5       	brtc	.+104    	; 0x1aac <__addsf3x+0x80>
    1a44:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_zero>
    1a48:	0e f4       	brtc	.+2      	; 0x1a4c <__addsf3x+0x20>
    1a4a:	e0 95       	com	r30
    1a4c:	0b 2e       	mov	r0, r27
    1a4e:	ba 2f       	mov	r27, r26
    1a50:	a0 2d       	mov	r26, r0
    1a52:	0b 01       	movw	r0, r22
    1a54:	b9 01       	movw	r22, r18
    1a56:	90 01       	movw	r18, r0
    1a58:	0c 01       	movw	r0, r24
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	a0 01       	movw	r20, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	ff 27       	eor	r31, r31
    1a62:	59 1b       	sub	r21, r25
    1a64:	99 f0       	breq	.+38     	; 0x1a8c <__addsf3x+0x60>
    1a66:	59 3f       	cpi	r21, 0xF9	; 249
    1a68:	50 f4       	brcc	.+20     	; 0x1a7e <__addsf3x+0x52>
    1a6a:	50 3e       	cpi	r21, 0xE0	; 224
    1a6c:	68 f1       	brcs	.+90     	; 0x1ac8 <__addsf3x+0x9c>
    1a6e:	1a 16       	cp	r1, r26
    1a70:	f0 40       	sbci	r31, 0x00	; 0
    1a72:	a2 2f       	mov	r26, r18
    1a74:	23 2f       	mov	r18, r19
    1a76:	34 2f       	mov	r19, r20
    1a78:	44 27       	eor	r20, r20
    1a7a:	58 5f       	subi	r21, 0xF8	; 248
    1a7c:	f3 cf       	rjmp	.-26     	; 0x1a64 <__addsf3x+0x38>
    1a7e:	46 95       	lsr	r20
    1a80:	37 95       	ror	r19
    1a82:	27 95       	ror	r18
    1a84:	a7 95       	ror	r26
    1a86:	f0 40       	sbci	r31, 0x00	; 0
    1a88:	53 95       	inc	r21
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <__addsf3x+0x52>
    1a8c:	7e f4       	brtc	.+30     	; 0x1aac <__addsf3x+0x80>
    1a8e:	1f 16       	cp	r1, r31
    1a90:	ba 0b       	sbc	r27, r26
    1a92:	62 0b       	sbc	r22, r18
    1a94:	73 0b       	sbc	r23, r19
    1a96:	84 0b       	sbc	r24, r20
    1a98:	ba f0       	brmi	.+46     	; 0x1ac8 <__addsf3x+0x9c>
    1a9a:	91 50       	subi	r25, 0x01	; 1
    1a9c:	a1 f0       	breq	.+40     	; 0x1ac6 <__addsf3x+0x9a>
    1a9e:	ff 0f       	add	r31, r31
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	66 1f       	adc	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	c2 f7       	brpl	.-16     	; 0x1a9a <__addsf3x+0x6e>
    1aaa:	0e c0       	rjmp	.+28     	; 0x1ac8 <__addsf3x+0x9c>
    1aac:	ba 0f       	add	r27, r26
    1aae:	62 1f       	adc	r22, r18
    1ab0:	73 1f       	adc	r23, r19
    1ab2:	84 1f       	adc	r24, r20
    1ab4:	48 f4       	brcc	.+18     	; 0x1ac8 <__addsf3x+0x9c>
    1ab6:	87 95       	ror	r24
    1ab8:	77 95       	ror	r23
    1aba:	67 95       	ror	r22
    1abc:	b7 95       	ror	r27
    1abe:	f7 95       	ror	r31
    1ac0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <__addsf3x+0x9a>
    1ac4:	b0 cf       	rjmp	.-160    	; 0x1a26 <__addsf3+0x28>
    1ac6:	93 95       	inc	r25
    1ac8:	88 0f       	add	r24, r24
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <__addsf3x+0xa2>
    1acc:	99 27       	eor	r25, r25
    1ace:	ee 0f       	add	r30, r30
    1ad0:	97 95       	ror	r25
    1ad2:	87 95       	ror	r24
    1ad4:	08 95       	ret

00001ad6 <__divsf3>:
    1ad6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divsf3x>
    1ada:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_round>
    1ade:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_pscB>
    1ae2:	58 f0       	brcs	.+22     	; 0x1afa <__divsf3+0x24>
    1ae4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__fp_pscA>
    1ae8:	40 f0       	brcs	.+16     	; 0x1afa <__divsf3+0x24>
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <__divsf3+0x20>
    1aec:	5f 3f       	cpi	r21, 0xFF	; 255
    1aee:	29 f0       	breq	.+10     	; 0x1afa <__divsf3+0x24>
    1af0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_inf>
    1af4:	51 11       	cpse	r21, r1
    1af6:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_szero>
    1afa:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_nan>

00001afe <__divsf3x>:
    1afe:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_split3>
    1b02:	68 f3       	brcs	.-38     	; 0x1ade <__divsf3+0x8>

00001b04 <__divsf3_pse>:
    1b04:	99 23       	and	r25, r25
    1b06:	b1 f3       	breq	.-20     	; 0x1af4 <__divsf3+0x1e>
    1b08:	55 23       	and	r21, r21
    1b0a:	91 f3       	breq	.-28     	; 0x1af0 <__divsf3+0x1a>
    1b0c:	95 1b       	sub	r25, r21
    1b0e:	55 0b       	sbc	r21, r21
    1b10:	bb 27       	eor	r27, r27
    1b12:	aa 27       	eor	r26, r26
    1b14:	62 17       	cp	r22, r18
    1b16:	73 07       	cpc	r23, r19
    1b18:	84 07       	cpc	r24, r20
    1b1a:	38 f0       	brcs	.+14     	; 0x1b2a <__divsf3_pse+0x26>
    1b1c:	9f 5f       	subi	r25, 0xFF	; 255
    1b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	44 1f       	adc	r20, r20
    1b26:	aa 1f       	adc	r26, r26
    1b28:	a9 f3       	breq	.-22     	; 0x1b14 <__divsf3_pse+0x10>
    1b2a:	35 d0       	rcall	.+106    	; 0x1b96 <__divsf3_pse+0x92>
    1b2c:	0e 2e       	mov	r0, r30
    1b2e:	3a f0       	brmi	.+14     	; 0x1b3e <__divsf3_pse+0x3a>
    1b30:	e0 e8       	ldi	r30, 0x80	; 128
    1b32:	32 d0       	rcall	.+100    	; 0x1b98 <__divsf3_pse+0x94>
    1b34:	91 50       	subi	r25, 0x01	; 1
    1b36:	50 40       	sbci	r21, 0x00	; 0
    1b38:	e6 95       	lsr	r30
    1b3a:	00 1c       	adc	r0, r0
    1b3c:	ca f7       	brpl	.-14     	; 0x1b30 <__divsf3_pse+0x2c>
    1b3e:	2b d0       	rcall	.+86     	; 0x1b96 <__divsf3_pse+0x92>
    1b40:	fe 2f       	mov	r31, r30
    1b42:	29 d0       	rcall	.+82     	; 0x1b96 <__divsf3_pse+0x92>
    1b44:	66 0f       	add	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	bb 1f       	adc	r27, r27
    1b4c:	26 17       	cp	r18, r22
    1b4e:	37 07       	cpc	r19, r23
    1b50:	48 07       	cpc	r20, r24
    1b52:	ab 07       	cpc	r26, r27
    1b54:	b0 e8       	ldi	r27, 0x80	; 128
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <__divsf3_pse+0x56>
    1b58:	bb 0b       	sbc	r27, r27
    1b5a:	80 2d       	mov	r24, r0
    1b5c:	bf 01       	movw	r22, r30
    1b5e:	ff 27       	eor	r31, r31
    1b60:	93 58       	subi	r25, 0x83	; 131
    1b62:	5f 4f       	sbci	r21, 0xFF	; 255
    1b64:	3a f0       	brmi	.+14     	; 0x1b74 <__divsf3_pse+0x70>
    1b66:	9e 3f       	cpi	r25, 0xFE	; 254
    1b68:	51 05       	cpc	r21, r1
    1b6a:	78 f0       	brcs	.+30     	; 0x1b8a <__divsf3_pse+0x86>
    1b6c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_inf>
    1b70:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_szero>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	e4 f3       	brlt	.-8      	; 0x1b70 <__divsf3_pse+0x6c>
    1b78:	98 3e       	cpi	r25, 0xE8	; 232
    1b7a:	d4 f3       	brlt	.-12     	; 0x1b70 <__divsf3_pse+0x6c>
    1b7c:	86 95       	lsr	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	b7 95       	ror	r27
    1b84:	f7 95       	ror	r31
    1b86:	9f 5f       	subi	r25, 0xFF	; 255
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__divsf3_pse+0x78>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	91 1d       	adc	r25, r1
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
    1b92:	97 f9       	bld	r25, 7
    1b94:	08 95       	ret
    1b96:	e1 e0       	ldi	r30, 0x01	; 1
    1b98:	66 0f       	add	r22, r22
    1b9a:	77 1f       	adc	r23, r23
    1b9c:	88 1f       	adc	r24, r24
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	62 17       	cp	r22, r18
    1ba2:	73 07       	cpc	r23, r19
    1ba4:	84 07       	cpc	r24, r20
    1ba6:	ba 07       	cpc	r27, r26
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <__divsf3_pse+0xae>
    1baa:	62 1b       	sub	r22, r18
    1bac:	73 0b       	sbc	r23, r19
    1bae:	84 0b       	sbc	r24, r20
    1bb0:	ba 0b       	sbc	r27, r26
    1bb2:	ee 1f       	adc	r30, r30
    1bb4:	88 f7       	brcc	.-30     	; 0x1b98 <__divsf3_pse+0x94>
    1bb6:	e0 95       	com	r30
    1bb8:	08 95       	ret

00001bba <__fixsfsi>:
    1bba:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixunssfsi>
    1bbe:	68 94       	set
    1bc0:	b1 11       	cpse	r27, r1
    1bc2:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_szero>
    1bc6:	08 95       	ret

00001bc8 <__fixunssfsi>:
    1bc8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_splitA>
    1bcc:	88 f0       	brcs	.+34     	; 0x1bf0 <__fixunssfsi+0x28>
    1bce:	9f 57       	subi	r25, 0x7F	; 127
    1bd0:	98 f0       	brcs	.+38     	; 0x1bf8 <__fixunssfsi+0x30>
    1bd2:	b9 2f       	mov	r27, r25
    1bd4:	99 27       	eor	r25, r25
    1bd6:	b7 51       	subi	r27, 0x17	; 23
    1bd8:	b0 f0       	brcs	.+44     	; 0x1c06 <__fixunssfsi+0x3e>
    1bda:	e1 f0       	breq	.+56     	; 0x1c14 <__fixunssfsi+0x4c>
    1bdc:	66 0f       	add	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	88 1f       	adc	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	1a f0       	brmi	.+6      	; 0x1bec <__fixunssfsi+0x24>
    1be6:	ba 95       	dec	r27
    1be8:	c9 f7       	brne	.-14     	; 0x1bdc <__fixunssfsi+0x14>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <__fixunssfsi+0x4c>
    1bec:	b1 30       	cpi	r27, 0x01	; 1
    1bee:	91 f0       	breq	.+36     	; 0x1c14 <__fixunssfsi+0x4c>
    1bf0:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_zero>
    1bf4:	b1 e0       	ldi	r27, 0x01	; 1
    1bf6:	08 95       	ret
    1bf8:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_zero>
    1bfc:	67 2f       	mov	r22, r23
    1bfe:	78 2f       	mov	r23, r24
    1c00:	88 27       	eor	r24, r24
    1c02:	b8 5f       	subi	r27, 0xF8	; 248
    1c04:	39 f0       	breq	.+14     	; 0x1c14 <__fixunssfsi+0x4c>
    1c06:	b9 3f       	cpi	r27, 0xF9	; 249
    1c08:	cc f3       	brlt	.-14     	; 0x1bfc <__fixunssfsi+0x34>
    1c0a:	86 95       	lsr	r24
    1c0c:	77 95       	ror	r23
    1c0e:	67 95       	ror	r22
    1c10:	b3 95       	inc	r27
    1c12:	d9 f7       	brne	.-10     	; 0x1c0a <__fixunssfsi+0x42>
    1c14:	3e f4       	brtc	.+14     	; 0x1c24 <__fixunssfsi+0x5c>
    1c16:	90 95       	com	r25
    1c18:	80 95       	com	r24
    1c1a:	70 95       	com	r23
    1c1c:	61 95       	neg	r22
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	08 95       	ret

00001c26 <__floatunsisf>:
    1c26:	e8 94       	clt
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <__floatsisf+0x12>

00001c2a <__floatsisf>:
    1c2a:	97 fb       	bst	r25, 7
    1c2c:	3e f4       	brtc	.+14     	; 0x1c3c <__floatsisf+0x12>
    1c2e:	90 95       	com	r25
    1c30:	80 95       	com	r24
    1c32:	70 95       	com	r23
    1c34:	61 95       	neg	r22
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	99 23       	and	r25, r25
    1c3e:	a9 f0       	breq	.+42     	; 0x1c6a <__floatsisf+0x40>
    1c40:	f9 2f       	mov	r31, r25
    1c42:	96 e9       	ldi	r25, 0x96	; 150
    1c44:	bb 27       	eor	r27, r27
    1c46:	93 95       	inc	r25
    1c48:	f6 95       	lsr	r31
    1c4a:	87 95       	ror	r24
    1c4c:	77 95       	ror	r23
    1c4e:	67 95       	ror	r22
    1c50:	b7 95       	ror	r27
    1c52:	f1 11       	cpse	r31, r1
    1c54:	f8 cf       	rjmp	.-16     	; 0x1c46 <__floatsisf+0x1c>
    1c56:	fa f4       	brpl	.+62     	; 0x1c96 <__floatsisf+0x6c>
    1c58:	bb 0f       	add	r27, r27
    1c5a:	11 f4       	brne	.+4      	; 0x1c60 <__floatsisf+0x36>
    1c5c:	60 ff       	sbrs	r22, 0
    1c5e:	1b c0       	rjmp	.+54     	; 0x1c96 <__floatsisf+0x6c>
    1c60:	6f 5f       	subi	r22, 0xFF	; 255
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	8f 4f       	sbci	r24, 0xFF	; 255
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	16 c0       	rjmp	.+44     	; 0x1c96 <__floatsisf+0x6c>
    1c6a:	88 23       	and	r24, r24
    1c6c:	11 f0       	breq	.+4      	; 0x1c72 <__floatsisf+0x48>
    1c6e:	96 e9       	ldi	r25, 0x96	; 150
    1c70:	11 c0       	rjmp	.+34     	; 0x1c94 <__floatsisf+0x6a>
    1c72:	77 23       	and	r23, r23
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <__floatsisf+0x54>
    1c76:	9e e8       	ldi	r25, 0x8E	; 142
    1c78:	87 2f       	mov	r24, r23
    1c7a:	76 2f       	mov	r23, r22
    1c7c:	05 c0       	rjmp	.+10     	; 0x1c88 <__floatsisf+0x5e>
    1c7e:	66 23       	and	r22, r22
    1c80:	71 f0       	breq	.+28     	; 0x1c9e <__floatsisf+0x74>
    1c82:	96 e8       	ldi	r25, 0x86	; 134
    1c84:	86 2f       	mov	r24, r22
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	2a f0       	brmi	.+10     	; 0x1c96 <__floatsisf+0x6c>
    1c8c:	9a 95       	dec	r25
    1c8e:	66 0f       	add	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	da f7       	brpl	.-10     	; 0x1c8c <__floatsisf+0x62>
    1c96:	88 0f       	add	r24, r24
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	97 f9       	bld	r25, 7
    1c9e:	08 95       	ret

00001ca0 <__fp_inf>:
    1ca0:	97 f9       	bld	r25, 7
    1ca2:	9f 67       	ori	r25, 0x7F	; 127
    1ca4:	80 e8       	ldi	r24, 0x80	; 128
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	08 95       	ret

00001cac <__fp_nan>:
    1cac:	9f ef       	ldi	r25, 0xFF	; 255
    1cae:	80 ec       	ldi	r24, 0xC0	; 192
    1cb0:	08 95       	ret

00001cb2 <__fp_pscA>:
    1cb2:	00 24       	eor	r0, r0
    1cb4:	0a 94       	dec	r0
    1cb6:	16 16       	cp	r1, r22
    1cb8:	17 06       	cpc	r1, r23
    1cba:	18 06       	cpc	r1, r24
    1cbc:	09 06       	cpc	r0, r25
    1cbe:	08 95       	ret

00001cc0 <__fp_pscB>:
    1cc0:	00 24       	eor	r0, r0
    1cc2:	0a 94       	dec	r0
    1cc4:	12 16       	cp	r1, r18
    1cc6:	13 06       	cpc	r1, r19
    1cc8:	14 06       	cpc	r1, r20
    1cca:	05 06       	cpc	r0, r21
    1ccc:	08 95       	ret

00001cce <__fp_round>:
    1cce:	09 2e       	mov	r0, r25
    1cd0:	03 94       	inc	r0
    1cd2:	00 0c       	add	r0, r0
    1cd4:	11 f4       	brne	.+4      	; 0x1cda <__fp_round+0xc>
    1cd6:	88 23       	and	r24, r24
    1cd8:	52 f0       	brmi	.+20     	; 0x1cee <__fp_round+0x20>
    1cda:	bb 0f       	add	r27, r27
    1cdc:	40 f4       	brcc	.+16     	; 0x1cee <__fp_round+0x20>
    1cde:	bf 2b       	or	r27, r31
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <__fp_round+0x18>
    1ce2:	60 ff       	sbrs	r22, 0
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <__fp_round+0x20>
    1ce6:	6f 5f       	subi	r22, 0xFF	; 255
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	8f 4f       	sbci	r24, 0xFF	; 255
    1cec:	9f 4f       	sbci	r25, 0xFF	; 255
    1cee:	08 95       	ret

00001cf0 <__fp_split3>:
    1cf0:	57 fd       	sbrc	r21, 7
    1cf2:	90 58       	subi	r25, 0x80	; 128
    1cf4:	44 0f       	add	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	59 f0       	breq	.+22     	; 0x1d10 <__fp_splitA+0x10>
    1cfa:	5f 3f       	cpi	r21, 0xFF	; 255
    1cfc:	71 f0       	breq	.+28     	; 0x1d1a <__fp_splitA+0x1a>
    1cfe:	47 95       	ror	r20

00001d00 <__fp_splitA>:
    1d00:	88 0f       	add	r24, r24
    1d02:	97 fb       	bst	r25, 7
    1d04:	99 1f       	adc	r25, r25
    1d06:	61 f0       	breq	.+24     	; 0x1d20 <__fp_splitA+0x20>
    1d08:	9f 3f       	cpi	r25, 0xFF	; 255
    1d0a:	79 f0       	breq	.+30     	; 0x1d2a <__fp_splitA+0x2a>
    1d0c:	87 95       	ror	r24
    1d0e:	08 95       	ret
    1d10:	12 16       	cp	r1, r18
    1d12:	13 06       	cpc	r1, r19
    1d14:	14 06       	cpc	r1, r20
    1d16:	55 1f       	adc	r21, r21
    1d18:	f2 cf       	rjmp	.-28     	; 0x1cfe <__fp_split3+0xe>
    1d1a:	46 95       	lsr	r20
    1d1c:	f1 df       	rcall	.-30     	; 0x1d00 <__fp_splitA>
    1d1e:	08 c0       	rjmp	.+16     	; 0x1d30 <__fp_splitA+0x30>
    1d20:	16 16       	cp	r1, r22
    1d22:	17 06       	cpc	r1, r23
    1d24:	18 06       	cpc	r1, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	f1 cf       	rjmp	.-30     	; 0x1d0c <__fp_splitA+0xc>
    1d2a:	86 95       	lsr	r24
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	61 05       	cpc	r22, r1
    1d30:	08 94       	sec
    1d32:	08 95       	ret

00001d34 <__fp_zero>:
    1d34:	e8 94       	clt

00001d36 <__fp_szero>:
    1d36:	bb 27       	eor	r27, r27
    1d38:	66 27       	eor	r22, r22
    1d3a:	77 27       	eor	r23, r23
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	97 f9       	bld	r25, 7
    1d40:	08 95       	ret

00001d42 <__mulsf3>:
    1d42:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3x>
    1d46:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_round>
    1d4a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__fp_pscA>
    1d4e:	38 f0       	brcs	.+14     	; 0x1d5e <__mulsf3+0x1c>
    1d50:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_pscB>
    1d54:	20 f0       	brcs	.+8      	; 0x1d5e <__mulsf3+0x1c>
    1d56:	95 23       	and	r25, r21
    1d58:	11 f0       	breq	.+4      	; 0x1d5e <__mulsf3+0x1c>
    1d5a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_inf>
    1d5e:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__fp_nan>
    1d62:	11 24       	eor	r1, r1
    1d64:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_szero>

00001d68 <__mulsf3x>:
    1d68:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_split3>
    1d6c:	70 f3       	brcs	.-36     	; 0x1d4a <__mulsf3+0x8>

00001d6e <__mulsf3_pse>:
    1d6e:	95 9f       	mul	r25, r21
    1d70:	c1 f3       	breq	.-16     	; 0x1d62 <__mulsf3+0x20>
    1d72:	95 0f       	add	r25, r21
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	55 1f       	adc	r21, r21
    1d78:	62 9f       	mul	r22, r18
    1d7a:	f0 01       	movw	r30, r0
    1d7c:	72 9f       	mul	r23, r18
    1d7e:	bb 27       	eor	r27, r27
    1d80:	f0 0d       	add	r31, r0
    1d82:	b1 1d       	adc	r27, r1
    1d84:	63 9f       	mul	r22, r19
    1d86:	aa 27       	eor	r26, r26
    1d88:	f0 0d       	add	r31, r0
    1d8a:	b1 1d       	adc	r27, r1
    1d8c:	aa 1f       	adc	r26, r26
    1d8e:	64 9f       	mul	r22, r20
    1d90:	66 27       	eor	r22, r22
    1d92:	b0 0d       	add	r27, r0
    1d94:	a1 1d       	adc	r26, r1
    1d96:	66 1f       	adc	r22, r22
    1d98:	82 9f       	mul	r24, r18
    1d9a:	22 27       	eor	r18, r18
    1d9c:	b0 0d       	add	r27, r0
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	62 1f       	adc	r22, r18
    1da2:	73 9f       	mul	r23, r19
    1da4:	b0 0d       	add	r27, r0
    1da6:	a1 1d       	adc	r26, r1
    1da8:	62 1f       	adc	r22, r18
    1daa:	83 9f       	mul	r24, r19
    1dac:	a0 0d       	add	r26, r0
    1dae:	61 1d       	adc	r22, r1
    1db0:	22 1f       	adc	r18, r18
    1db2:	74 9f       	mul	r23, r20
    1db4:	33 27       	eor	r19, r19
    1db6:	a0 0d       	add	r26, r0
    1db8:	61 1d       	adc	r22, r1
    1dba:	23 1f       	adc	r18, r19
    1dbc:	84 9f       	mul	r24, r20
    1dbe:	60 0d       	add	r22, r0
    1dc0:	21 1d       	adc	r18, r1
    1dc2:	82 2f       	mov	r24, r18
    1dc4:	76 2f       	mov	r23, r22
    1dc6:	6a 2f       	mov	r22, r26
    1dc8:	11 24       	eor	r1, r1
    1dca:	9f 57       	subi	r25, 0x7F	; 127
    1dcc:	50 40       	sbci	r21, 0x00	; 0
    1dce:	9a f0       	brmi	.+38     	; 0x1df6 <__mulsf3_pse+0x88>
    1dd0:	f1 f0       	breq	.+60     	; 0x1e0e <__mulsf3_pse+0xa0>
    1dd2:	88 23       	and	r24, r24
    1dd4:	4a f0       	brmi	.+18     	; 0x1de8 <__mulsf3_pse+0x7a>
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	66 1f       	adc	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	91 50       	subi	r25, 0x01	; 1
    1de4:	50 40       	sbci	r21, 0x00	; 0
    1de6:	a9 f7       	brne	.-22     	; 0x1dd2 <__mulsf3_pse+0x64>
    1de8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dea:	51 05       	cpc	r21, r1
    1dec:	80 f0       	brcs	.+32     	; 0x1e0e <__mulsf3_pse+0xa0>
    1dee:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_inf>
    1df2:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_szero>
    1df6:	5f 3f       	cpi	r21, 0xFF	; 255
    1df8:	e4 f3       	brlt	.-8      	; 0x1df2 <__mulsf3_pse+0x84>
    1dfa:	98 3e       	cpi	r25, 0xE8	; 232
    1dfc:	d4 f3       	brlt	.-12     	; 0x1df2 <__mulsf3_pse+0x84>
    1dfe:	86 95       	lsr	r24
    1e00:	77 95       	ror	r23
    1e02:	67 95       	ror	r22
    1e04:	b7 95       	ror	r27
    1e06:	f7 95       	ror	r31
    1e08:	e7 95       	ror	r30
    1e0a:	9f 5f       	subi	r25, 0xFF	; 255
    1e0c:	c1 f7       	brne	.-16     	; 0x1dfe <__mulsf3_pse+0x90>
    1e0e:	fe 2b       	or	r31, r30
    1e10:	88 0f       	add	r24, r24
    1e12:	91 1d       	adc	r25, r1
    1e14:	96 95       	lsr	r25
    1e16:	87 95       	ror	r24
    1e18:	97 f9       	bld	r25, 7
    1e1a:	08 95       	ret

00001e1c <__tablejump2__>:
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	05 90       	lpm	r0, Z+
    1e22:	f4 91       	lpm	r31, Z
    1e24:	e0 2d       	mov	r30, r0
    1e26:	09 94       	ijmp

00001e28 <dtostrf>:
    1e28:	ef 92       	push	r14
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	e8 01       	movw	r28, r16
    1e34:	47 fd       	sbrc	r20, 7
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <dtostrf+0x14>
    1e38:	34 e0       	ldi	r19, 0x04	; 4
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <dtostrf+0x16>
    1e3c:	34 e1       	ldi	r19, 0x14	; 20
    1e3e:	04 2e       	mov	r0, r20
    1e40:	00 0c       	add	r0, r0
    1e42:	55 0b       	sbc	r21, r21
    1e44:	57 ff       	sbrs	r21, 7
    1e46:	03 c0       	rjmp	.+6      	; 0x1e4e <dtostrf+0x26>
    1e48:	51 95       	neg	r21
    1e4a:	41 95       	neg	r20
    1e4c:	51 09       	sbc	r21, r1
    1e4e:	e3 2e       	mov	r14, r19
    1e50:	02 2f       	mov	r16, r18
    1e52:	24 2f       	mov	r18, r20
    1e54:	ae 01       	movw	r20, r28
    1e56:	0e 94 84 12 	call	0x2508	; 0x2508 <dtoa_prf>
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	ef 90       	pop	r14
    1e66:	08 95       	ret

00001e68 <malloc>:
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	82 30       	cpi	r24, 0x02	; 2
    1e72:	91 05       	cpc	r25, r1
    1e74:	10 f4       	brcc	.+4      	; 0x1e7a <malloc+0x12>
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__flp>
    1e7e:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__flp+0x1>
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	a0 e0       	ldi	r26, 0x00	; 0
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	30 97       	sbiw	r30, 0x00	; 0
    1e8c:	19 f1       	breq	.+70     	; 0x1ed4 <malloc+0x6c>
    1e8e:	40 81       	ld	r20, Z
    1e90:	51 81       	ldd	r21, Z+1	; 0x01
    1e92:	02 81       	ldd	r16, Z+2	; 0x02
    1e94:	13 81       	ldd	r17, Z+3	; 0x03
    1e96:	48 17       	cp	r20, r24
    1e98:	59 07       	cpc	r21, r25
    1e9a:	c8 f0       	brcs	.+50     	; 0x1ece <malloc+0x66>
    1e9c:	84 17       	cp	r24, r20
    1e9e:	95 07       	cpc	r25, r21
    1ea0:	69 f4       	brne	.+26     	; 0x1ebc <malloc+0x54>
    1ea2:	10 97       	sbiw	r26, 0x00	; 0
    1ea4:	31 f0       	breq	.+12     	; 0x1eb2 <malloc+0x4a>
    1ea6:	12 96       	adiw	r26, 0x02	; 2
    1ea8:	0c 93       	st	X, r16
    1eaa:	12 97       	sbiw	r26, 0x02	; 2
    1eac:	13 96       	adiw	r26, 0x03	; 3
    1eae:	1c 93       	st	X, r17
    1eb0:	27 c0       	rjmp	.+78     	; 0x1f00 <malloc+0x98>
    1eb2:	00 93 d6 02 	sts	0x02D6, r16	; 0x8002d6 <__flp>
    1eb6:	10 93 d7 02 	sts	0x02D7, r17	; 0x8002d7 <__flp+0x1>
    1eba:	22 c0       	rjmp	.+68     	; 0x1f00 <malloc+0x98>
    1ebc:	21 15       	cp	r18, r1
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	19 f0       	breq	.+6      	; 0x1ec8 <malloc+0x60>
    1ec2:	42 17       	cp	r20, r18
    1ec4:	53 07       	cpc	r21, r19
    1ec6:	18 f4       	brcc	.+6      	; 0x1ece <malloc+0x66>
    1ec8:	9a 01       	movw	r18, r20
    1eca:	bd 01       	movw	r22, r26
    1ecc:	ef 01       	movw	r28, r30
    1ece:	df 01       	movw	r26, r30
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	db cf       	rjmp	.-74     	; 0x1e8a <malloc+0x22>
    1ed4:	21 15       	cp	r18, r1
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	f9 f0       	breq	.+62     	; 0x1f18 <malloc+0xb0>
    1eda:	28 1b       	sub	r18, r24
    1edc:	39 0b       	sbc	r19, r25
    1ede:	24 30       	cpi	r18, 0x04	; 4
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	80 f4       	brcc	.+32     	; 0x1f04 <malloc+0x9c>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	61 15       	cp	r22, r1
    1eea:	71 05       	cpc	r23, r1
    1eec:	21 f0       	breq	.+8      	; 0x1ef6 <malloc+0x8e>
    1eee:	fb 01       	movw	r30, r22
    1ef0:	93 83       	std	Z+3, r25	; 0x03
    1ef2:	82 83       	std	Z+2, r24	; 0x02
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <malloc+0x96>
    1ef6:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <__flp+0x1>
    1efa:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__flp>
    1efe:	fe 01       	movw	r30, r28
    1f00:	32 96       	adiw	r30, 0x02	; 2
    1f02:	44 c0       	rjmp	.+136    	; 0x1f8c <malloc+0x124>
    1f04:	fe 01       	movw	r30, r28
    1f06:	e2 0f       	add	r30, r18
    1f08:	f3 1f       	adc	r31, r19
    1f0a:	81 93       	st	Z+, r24
    1f0c:	91 93       	st	Z+, r25
    1f0e:	22 50       	subi	r18, 0x02	; 2
    1f10:	31 09       	sbc	r19, r1
    1f12:	39 83       	std	Y+1, r19	; 0x01
    1f14:	28 83       	st	Y, r18
    1f16:	3a c0       	rjmp	.+116    	; 0x1f8c <malloc+0x124>
    1f18:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <__brkval>
    1f1c:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1f20:	23 2b       	or	r18, r19
    1f22:	41 f4       	brne	.+16     	; 0x1f34 <malloc+0xcc>
    1f24:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1f28:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1f2c:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <__brkval+0x1>
    1f30:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <__brkval>
    1f34:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1f38:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1f3c:	21 15       	cp	r18, r1
    1f3e:	31 05       	cpc	r19, r1
    1f40:	41 f4       	brne	.+16     	; 0x1f52 <malloc+0xea>
    1f42:	2d b7       	in	r18, 0x3d	; 61
    1f44:	3e b7       	in	r19, 0x3e	; 62
    1f46:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1f4a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1f4e:	24 1b       	sub	r18, r20
    1f50:	35 0b       	sbc	r19, r21
    1f52:	e0 91 d4 02 	lds	r30, 0x02D4	; 0x8002d4 <__brkval>
    1f56:	f0 91 d5 02 	lds	r31, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1f5a:	e2 17       	cp	r30, r18
    1f5c:	f3 07       	cpc	r31, r19
    1f5e:	a0 f4       	brcc	.+40     	; 0x1f88 <malloc+0x120>
    1f60:	2e 1b       	sub	r18, r30
    1f62:	3f 0b       	sbc	r19, r31
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	78 f0       	brcs	.+30     	; 0x1f88 <malloc+0x120>
    1f6a:	ac 01       	movw	r20, r24
    1f6c:	4e 5f       	subi	r20, 0xFE	; 254
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	24 17       	cp	r18, r20
    1f72:	35 07       	cpc	r19, r21
    1f74:	48 f0       	brcs	.+18     	; 0x1f88 <malloc+0x120>
    1f76:	4e 0f       	add	r20, r30
    1f78:	5f 1f       	adc	r21, r31
    1f7a:	50 93 d5 02 	sts	0x02D5, r21	; 0x8002d5 <__brkval+0x1>
    1f7e:	40 93 d4 02 	sts	0x02D4, r20	; 0x8002d4 <__brkval>
    1f82:	81 93       	st	Z+, r24
    1f84:	91 93       	st	Z+, r25
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <malloc+0x124>
    1f88:	e0 e0       	ldi	r30, 0x00	; 0
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	cf 01       	movw	r24, r30
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <free>:
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <free+0xa>
    1fa0:	81 c0       	rjmp	.+258    	; 0x20a4 <free+0x10c>
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	32 97       	sbiw	r30, 0x02	; 2
    1fa6:	13 82       	std	Z+3, r1	; 0x03
    1fa8:	12 82       	std	Z+2, r1	; 0x02
    1faa:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <__flp>
    1fae:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <__flp+0x1>
    1fb2:	10 97       	sbiw	r26, 0x00	; 0
    1fb4:	81 f4       	brne	.+32     	; 0x1fd6 <free+0x3e>
    1fb6:	20 81       	ld	r18, Z
    1fb8:	31 81       	ldd	r19, Z+1	; 0x01
    1fba:	82 0f       	add	r24, r18
    1fbc:	93 1f       	adc	r25, r19
    1fbe:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <__brkval>
    1fc2:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1fc6:	28 17       	cp	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	51 f5       	brne	.+84     	; 0x2020 <free+0x88>
    1fcc:	f0 93 d5 02 	sts	0x02D5, r31	; 0x8002d5 <__brkval+0x1>
    1fd0:	e0 93 d4 02 	sts	0x02D4, r30	; 0x8002d4 <__brkval>
    1fd4:	67 c0       	rjmp	.+206    	; 0x20a4 <free+0x10c>
    1fd6:	ed 01       	movw	r28, r26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	ce 17       	cp	r28, r30
    1fde:	df 07       	cpc	r29, r31
    1fe0:	40 f4       	brcc	.+16     	; 0x1ff2 <free+0x5a>
    1fe2:	4a 81       	ldd	r20, Y+2	; 0x02
    1fe4:	5b 81       	ldd	r21, Y+3	; 0x03
    1fe6:	9e 01       	movw	r18, r28
    1fe8:	41 15       	cp	r20, r1
    1fea:	51 05       	cpc	r21, r1
    1fec:	f1 f0       	breq	.+60     	; 0x202a <free+0x92>
    1fee:	ea 01       	movw	r28, r20
    1ff0:	f5 cf       	rjmp	.-22     	; 0x1fdc <free+0x44>
    1ff2:	d3 83       	std	Z+3, r29	; 0x03
    1ff4:	c2 83       	std	Z+2, r28	; 0x02
    1ff6:	40 81       	ld	r20, Z
    1ff8:	51 81       	ldd	r21, Z+1	; 0x01
    1ffa:	84 0f       	add	r24, r20
    1ffc:	95 1f       	adc	r25, r21
    1ffe:	c8 17       	cp	r28, r24
    2000:	d9 07       	cpc	r29, r25
    2002:	59 f4       	brne	.+22     	; 0x201a <free+0x82>
    2004:	88 81       	ld	r24, Y
    2006:	99 81       	ldd	r25, Y+1	; 0x01
    2008:	84 0f       	add	r24, r20
    200a:	95 1f       	adc	r25, r21
    200c:	02 96       	adiw	r24, 0x02	; 2
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	9b 81       	ldd	r25, Y+3	; 0x03
    2016:	93 83       	std	Z+3, r25	; 0x03
    2018:	82 83       	std	Z+2, r24	; 0x02
    201a:	21 15       	cp	r18, r1
    201c:	31 05       	cpc	r19, r1
    201e:	29 f4       	brne	.+10     	; 0x202a <free+0x92>
    2020:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__flp+0x1>
    2024:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__flp>
    2028:	3d c0       	rjmp	.+122    	; 0x20a4 <free+0x10c>
    202a:	e9 01       	movw	r28, r18
    202c:	fb 83       	std	Y+3, r31	; 0x03
    202e:	ea 83       	std	Y+2, r30	; 0x02
    2030:	49 91       	ld	r20, Y+
    2032:	59 91       	ld	r21, Y+
    2034:	c4 0f       	add	r28, r20
    2036:	d5 1f       	adc	r29, r21
    2038:	ec 17       	cp	r30, r28
    203a:	fd 07       	cpc	r31, r29
    203c:	61 f4       	brne	.+24     	; 0x2056 <free+0xbe>
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	84 0f       	add	r24, r20
    2044:	95 1f       	adc	r25, r21
    2046:	02 96       	adiw	r24, 0x02	; 2
    2048:	e9 01       	movw	r28, r18
    204a:	99 83       	std	Y+1, r25	; 0x01
    204c:	88 83       	st	Y, r24
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	9b 83       	std	Y+3, r25	; 0x03
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	e0 e0       	ldi	r30, 0x00	; 0
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	12 96       	adiw	r26, 0x02	; 2
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	13 97       	sbiw	r26, 0x03	; 3
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	19 f0       	breq	.+6      	; 0x206c <free+0xd4>
    2066:	fd 01       	movw	r30, r26
    2068:	dc 01       	movw	r26, r24
    206a:	f7 cf       	rjmp	.-18     	; 0x205a <free+0xc2>
    206c:	8d 91       	ld	r24, X+
    206e:	9c 91       	ld	r25, X
    2070:	11 97       	sbiw	r26, 0x01	; 1
    2072:	9d 01       	movw	r18, r26
    2074:	2e 5f       	subi	r18, 0xFE	; 254
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	82 0f       	add	r24, r18
    207a:	93 1f       	adc	r25, r19
    207c:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <__brkval>
    2080:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <__brkval+0x1>
    2084:	28 17       	cp	r18, r24
    2086:	39 07       	cpc	r19, r25
    2088:	69 f4       	brne	.+26     	; 0x20a4 <free+0x10c>
    208a:	30 97       	sbiw	r30, 0x00	; 0
    208c:	29 f4       	brne	.+10     	; 0x2098 <free+0x100>
    208e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <__flp+0x1>
    2092:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <__flp>
    2096:	02 c0       	rjmp	.+4      	; 0x209c <free+0x104>
    2098:	13 82       	std	Z+3, r1	; 0x03
    209a:	12 82       	std	Z+2, r1	; 0x02
    209c:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <__brkval+0x1>
    20a0:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <__brkval>
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <strcpy>:
    20aa:	fb 01       	movw	r30, r22
    20ac:	dc 01       	movw	r26, r24
    20ae:	01 90       	ld	r0, Z+
    20b0:	0d 92       	st	X+, r0
    20b2:	00 20       	and	r0, r0
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <strcpy+0x4>
    20b6:	08 95       	ret

000020b8 <__itoa_ncheck>:
    20b8:	bb 27       	eor	r27, r27
    20ba:	4a 30       	cpi	r20, 0x0A	; 10
    20bc:	31 f4       	brne	.+12     	; 0x20ca <__itoa_ncheck+0x12>
    20be:	99 23       	and	r25, r25
    20c0:	22 f4       	brpl	.+8      	; 0x20ca <__itoa_ncheck+0x12>
    20c2:	bd e2       	ldi	r27, 0x2D	; 45
    20c4:	90 95       	com	r25
    20c6:	81 95       	neg	r24
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__utoa_common>

000020ce <__utoa_ncheck>:
    20ce:	bb 27       	eor	r27, r27

000020d0 <__utoa_common>:
    20d0:	fb 01       	movw	r30, r22
    20d2:	55 27       	eor	r21, r21
    20d4:	aa 27       	eor	r26, r26
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	aa 1f       	adc	r26, r26
    20dc:	a4 17       	cp	r26, r20
    20de:	10 f0       	brcs	.+4      	; 0x20e4 <__utoa_common+0x14>
    20e0:	a4 1b       	sub	r26, r20
    20e2:	83 95       	inc	r24
    20e4:	50 51       	subi	r21, 0x10	; 16
    20e6:	b9 f7       	brne	.-18     	; 0x20d6 <__utoa_common+0x6>
    20e8:	a0 5d       	subi	r26, 0xD0	; 208
    20ea:	aa 33       	cpi	r26, 0x3A	; 58
    20ec:	08 f0       	brcs	.+2      	; 0x20f0 <__utoa_common+0x20>
    20ee:	a9 5d       	subi	r26, 0xD9	; 217
    20f0:	a1 93       	st	Z+, r26
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	79 f7       	brne	.-34     	; 0x20d4 <__utoa_common+0x4>
    20f6:	b1 11       	cpse	r27, r1
    20f8:	b1 93       	st	Z+, r27
    20fa:	11 92       	st	Z+, r1
    20fc:	cb 01       	movw	r24, r22
    20fe:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <strrev>

00002102 <sprintf>:
    2102:	ae e0       	ldi	r26, 0x0E	; 14
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e7 e8       	ldi	r30, 0x87	; 135
    2108:	f0 e1       	ldi	r31, 0x10	; 16
    210a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x1c>
    210e:	0d 89       	ldd	r16, Y+21	; 0x15
    2110:	1e 89       	ldd	r17, Y+22	; 0x16
    2112:	86 e0       	ldi	r24, 0x06	; 6
    2114:	8c 83       	std	Y+4, r24	; 0x04
    2116:	1a 83       	std	Y+2, r17	; 0x02
    2118:	09 83       	std	Y+1, r16	; 0x01
    211a:	8f ef       	ldi	r24, 0xFF	; 255
    211c:	9f e7       	ldi	r25, 0x7F	; 127
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	ae 01       	movw	r20, r28
    2124:	47 5e       	subi	r20, 0xE7	; 231
    2126:	5f 4f       	sbci	r21, 0xFF	; 255
    2128:	6f 89       	ldd	r22, Y+23	; 0x17
    212a:	78 8d       	ldd	r23, Y+24	; 0x18
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	0e 94 a3 10 	call	0x2146	; 0x2146 <vfprintf>
    2134:	ef 81       	ldd	r30, Y+7	; 0x07
    2136:	f8 85       	ldd	r31, Y+8	; 0x08
    2138:	e0 0f       	add	r30, r16
    213a:	f1 1f       	adc	r31, r17
    213c:	10 82       	st	Z, r1
    213e:	2e 96       	adiw	r28, 0x0e	; 14
    2140:	e4 e0       	ldi	r30, 0x04	; 4
    2142:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x1c>

00002146 <vfprintf>:
    2146:	ab e0       	ldi	r26, 0x0B	; 11
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e9 ea       	ldi	r30, 0xA9	; 169
    214c:	f0 e1       	ldi	r31, 0x10	; 16
    214e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__>
    2152:	6c 01       	movw	r12, r24
    2154:	7b 01       	movw	r14, r22
    2156:	8a 01       	movw	r16, r20
    2158:	fc 01       	movw	r30, r24
    215a:	17 82       	std	Z+7, r1	; 0x07
    215c:	16 82       	std	Z+6, r1	; 0x06
    215e:	83 81       	ldd	r24, Z+3	; 0x03
    2160:	81 ff       	sbrs	r24, 1
    2162:	cc c1       	rjmp	.+920    	; 0x24fc <vfprintf+0x3b6>
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	3c 01       	movw	r6, r24
    216a:	f6 01       	movw	r30, r12
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	f7 01       	movw	r30, r14
    2170:	93 fd       	sbrc	r25, 3
    2172:	85 91       	lpm	r24, Z+
    2174:	93 ff       	sbrs	r25, 3
    2176:	81 91       	ld	r24, Z+
    2178:	7f 01       	movw	r14, r30
    217a:	88 23       	and	r24, r24
    217c:	09 f4       	brne	.+2      	; 0x2180 <vfprintf+0x3a>
    217e:	ba c1       	rjmp	.+884    	; 0x24f4 <vfprintf+0x3ae>
    2180:	85 32       	cpi	r24, 0x25	; 37
    2182:	39 f4       	brne	.+14     	; 0x2192 <vfprintf+0x4c>
    2184:	93 fd       	sbrc	r25, 3
    2186:	85 91       	lpm	r24, Z+
    2188:	93 ff       	sbrs	r25, 3
    218a:	81 91       	ld	r24, Z+
    218c:	7f 01       	movw	r14, r30
    218e:	85 32       	cpi	r24, 0x25	; 37
    2190:	29 f4       	brne	.+10     	; 0x219c <vfprintf+0x56>
    2192:	b6 01       	movw	r22, r12
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    219a:	e7 cf       	rjmp	.-50     	; 0x216a <vfprintf+0x24>
    219c:	91 2c       	mov	r9, r1
    219e:	21 2c       	mov	r2, r1
    21a0:	31 2c       	mov	r3, r1
    21a2:	ff e1       	ldi	r31, 0x1F	; 31
    21a4:	f3 15       	cp	r31, r3
    21a6:	d8 f0       	brcs	.+54     	; 0x21de <vfprintf+0x98>
    21a8:	8b 32       	cpi	r24, 0x2B	; 43
    21aa:	79 f0       	breq	.+30     	; 0x21ca <vfprintf+0x84>
    21ac:	38 f4       	brcc	.+14     	; 0x21bc <vfprintf+0x76>
    21ae:	80 32       	cpi	r24, 0x20	; 32
    21b0:	79 f0       	breq	.+30     	; 0x21d0 <vfprintf+0x8a>
    21b2:	83 32       	cpi	r24, 0x23	; 35
    21b4:	a1 f4       	brne	.+40     	; 0x21de <vfprintf+0x98>
    21b6:	23 2d       	mov	r18, r3
    21b8:	20 61       	ori	r18, 0x10	; 16
    21ba:	1d c0       	rjmp	.+58     	; 0x21f6 <vfprintf+0xb0>
    21bc:	8d 32       	cpi	r24, 0x2D	; 45
    21be:	61 f0       	breq	.+24     	; 0x21d8 <vfprintf+0x92>
    21c0:	80 33       	cpi	r24, 0x30	; 48
    21c2:	69 f4       	brne	.+26     	; 0x21de <vfprintf+0x98>
    21c4:	23 2d       	mov	r18, r3
    21c6:	21 60       	ori	r18, 0x01	; 1
    21c8:	16 c0       	rjmp	.+44     	; 0x21f6 <vfprintf+0xb0>
    21ca:	83 2d       	mov	r24, r3
    21cc:	82 60       	ori	r24, 0x02	; 2
    21ce:	38 2e       	mov	r3, r24
    21d0:	e3 2d       	mov	r30, r3
    21d2:	e4 60       	ori	r30, 0x04	; 4
    21d4:	3e 2e       	mov	r3, r30
    21d6:	2a c0       	rjmp	.+84     	; 0x222c <vfprintf+0xe6>
    21d8:	f3 2d       	mov	r31, r3
    21da:	f8 60       	ori	r31, 0x08	; 8
    21dc:	1d c0       	rjmp	.+58     	; 0x2218 <vfprintf+0xd2>
    21de:	37 fc       	sbrc	r3, 7
    21e0:	2d c0       	rjmp	.+90     	; 0x223c <vfprintf+0xf6>
    21e2:	20 ed       	ldi	r18, 0xD0	; 208
    21e4:	28 0f       	add	r18, r24
    21e6:	2a 30       	cpi	r18, 0x0A	; 10
    21e8:	40 f0       	brcs	.+16     	; 0x21fa <vfprintf+0xb4>
    21ea:	8e 32       	cpi	r24, 0x2E	; 46
    21ec:	b9 f4       	brne	.+46     	; 0x221c <vfprintf+0xd6>
    21ee:	36 fc       	sbrc	r3, 6
    21f0:	81 c1       	rjmp	.+770    	; 0x24f4 <vfprintf+0x3ae>
    21f2:	23 2d       	mov	r18, r3
    21f4:	20 64       	ori	r18, 0x40	; 64
    21f6:	32 2e       	mov	r3, r18
    21f8:	19 c0       	rjmp	.+50     	; 0x222c <vfprintf+0xe6>
    21fa:	36 fe       	sbrs	r3, 6
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <vfprintf+0xc4>
    21fe:	8a e0       	ldi	r24, 0x0A	; 10
    2200:	98 9e       	mul	r9, r24
    2202:	20 0d       	add	r18, r0
    2204:	11 24       	eor	r1, r1
    2206:	92 2e       	mov	r9, r18
    2208:	11 c0       	rjmp	.+34     	; 0x222c <vfprintf+0xe6>
    220a:	ea e0       	ldi	r30, 0x0A	; 10
    220c:	2e 9e       	mul	r2, r30
    220e:	20 0d       	add	r18, r0
    2210:	11 24       	eor	r1, r1
    2212:	22 2e       	mov	r2, r18
    2214:	f3 2d       	mov	r31, r3
    2216:	f0 62       	ori	r31, 0x20	; 32
    2218:	3f 2e       	mov	r3, r31
    221a:	08 c0       	rjmp	.+16     	; 0x222c <vfprintf+0xe6>
    221c:	8c 36       	cpi	r24, 0x6C	; 108
    221e:	21 f4       	brne	.+8      	; 0x2228 <vfprintf+0xe2>
    2220:	83 2d       	mov	r24, r3
    2222:	80 68       	ori	r24, 0x80	; 128
    2224:	38 2e       	mov	r3, r24
    2226:	02 c0       	rjmp	.+4      	; 0x222c <vfprintf+0xe6>
    2228:	88 36       	cpi	r24, 0x68	; 104
    222a:	41 f4       	brne	.+16     	; 0x223c <vfprintf+0xf6>
    222c:	f7 01       	movw	r30, r14
    222e:	93 fd       	sbrc	r25, 3
    2230:	85 91       	lpm	r24, Z+
    2232:	93 ff       	sbrs	r25, 3
    2234:	81 91       	ld	r24, Z+
    2236:	7f 01       	movw	r14, r30
    2238:	81 11       	cpse	r24, r1
    223a:	b3 cf       	rjmp	.-154    	; 0x21a2 <vfprintf+0x5c>
    223c:	98 2f       	mov	r25, r24
    223e:	9f 7d       	andi	r25, 0xDF	; 223
    2240:	95 54       	subi	r25, 0x45	; 69
    2242:	93 30       	cpi	r25, 0x03	; 3
    2244:	28 f4       	brcc	.+10     	; 0x2250 <vfprintf+0x10a>
    2246:	0c 5f       	subi	r16, 0xFC	; 252
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	9f e3       	ldi	r25, 0x3F	; 63
    224c:	99 83       	std	Y+1, r25	; 0x01
    224e:	0d c0       	rjmp	.+26     	; 0x226a <vfprintf+0x124>
    2250:	83 36       	cpi	r24, 0x63	; 99
    2252:	31 f0       	breq	.+12     	; 0x2260 <vfprintf+0x11a>
    2254:	83 37       	cpi	r24, 0x73	; 115
    2256:	71 f0       	breq	.+28     	; 0x2274 <vfprintf+0x12e>
    2258:	83 35       	cpi	r24, 0x53	; 83
    225a:	09 f0       	breq	.+2      	; 0x225e <vfprintf+0x118>
    225c:	59 c0       	rjmp	.+178    	; 0x2310 <vfprintf+0x1ca>
    225e:	21 c0       	rjmp	.+66     	; 0x22a2 <vfprintf+0x15c>
    2260:	f8 01       	movw	r30, r16
    2262:	80 81       	ld	r24, Z
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	0e 5f       	subi	r16, 0xFE	; 254
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	88 24       	eor	r8, r8
    226c:	83 94       	inc	r8
    226e:	91 2c       	mov	r9, r1
    2270:	53 01       	movw	r10, r6
    2272:	13 c0       	rjmp	.+38     	; 0x229a <vfprintf+0x154>
    2274:	28 01       	movw	r4, r16
    2276:	f2 e0       	ldi	r31, 0x02	; 2
    2278:	4f 0e       	add	r4, r31
    227a:	51 1c       	adc	r5, r1
    227c:	f8 01       	movw	r30, r16
    227e:	a0 80       	ld	r10, Z
    2280:	b1 80       	ldd	r11, Z+1	; 0x01
    2282:	36 fe       	sbrs	r3, 6
    2284:	03 c0       	rjmp	.+6      	; 0x228c <vfprintf+0x146>
    2286:	69 2d       	mov	r22, r9
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <vfprintf+0x14a>
    228c:	6f ef       	ldi	r22, 0xFF	; 255
    228e:	7f ef       	ldi	r23, 0xFF	; 255
    2290:	c5 01       	movw	r24, r10
    2292:	0e 94 c1 14 	call	0x2982	; 0x2982 <strnlen>
    2296:	4c 01       	movw	r8, r24
    2298:	82 01       	movw	r16, r4
    229a:	f3 2d       	mov	r31, r3
    229c:	ff 77       	andi	r31, 0x7F	; 127
    229e:	3f 2e       	mov	r3, r31
    22a0:	16 c0       	rjmp	.+44     	; 0x22ce <vfprintf+0x188>
    22a2:	28 01       	movw	r4, r16
    22a4:	22 e0       	ldi	r18, 0x02	; 2
    22a6:	42 0e       	add	r4, r18
    22a8:	51 1c       	adc	r5, r1
    22aa:	f8 01       	movw	r30, r16
    22ac:	a0 80       	ld	r10, Z
    22ae:	b1 80       	ldd	r11, Z+1	; 0x01
    22b0:	36 fe       	sbrs	r3, 6
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <vfprintf+0x174>
    22b4:	69 2d       	mov	r22, r9
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <vfprintf+0x178>
    22ba:	6f ef       	ldi	r22, 0xFF	; 255
    22bc:	7f ef       	ldi	r23, 0xFF	; 255
    22be:	c5 01       	movw	r24, r10
    22c0:	0e 94 b6 14 	call	0x296c	; 0x296c <strnlen_P>
    22c4:	4c 01       	movw	r8, r24
    22c6:	f3 2d       	mov	r31, r3
    22c8:	f0 68       	ori	r31, 0x80	; 128
    22ca:	3f 2e       	mov	r3, r31
    22cc:	82 01       	movw	r16, r4
    22ce:	33 fc       	sbrc	r3, 3
    22d0:	1b c0       	rjmp	.+54     	; 0x2308 <vfprintf+0x1c2>
    22d2:	82 2d       	mov	r24, r2
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	88 16       	cp	r8, r24
    22d8:	99 06       	cpc	r9, r25
    22da:	b0 f4       	brcc	.+44     	; 0x2308 <vfprintf+0x1c2>
    22dc:	b6 01       	movw	r22, r12
    22de:	80 e2       	ldi	r24, 0x20	; 32
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    22e6:	2a 94       	dec	r2
    22e8:	f4 cf       	rjmp	.-24     	; 0x22d2 <vfprintf+0x18c>
    22ea:	f5 01       	movw	r30, r10
    22ec:	37 fc       	sbrc	r3, 7
    22ee:	85 91       	lpm	r24, Z+
    22f0:	37 fe       	sbrs	r3, 7
    22f2:	81 91       	ld	r24, Z+
    22f4:	5f 01       	movw	r10, r30
    22f6:	b6 01       	movw	r22, r12
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    22fe:	21 10       	cpse	r2, r1
    2300:	2a 94       	dec	r2
    2302:	21 e0       	ldi	r18, 0x01	; 1
    2304:	82 1a       	sub	r8, r18
    2306:	91 08       	sbc	r9, r1
    2308:	81 14       	cp	r8, r1
    230a:	91 04       	cpc	r9, r1
    230c:	71 f7       	brne	.-36     	; 0x22ea <vfprintf+0x1a4>
    230e:	e8 c0       	rjmp	.+464    	; 0x24e0 <vfprintf+0x39a>
    2310:	84 36       	cpi	r24, 0x64	; 100
    2312:	11 f0       	breq	.+4      	; 0x2318 <vfprintf+0x1d2>
    2314:	89 36       	cpi	r24, 0x69	; 105
    2316:	41 f5       	brne	.+80     	; 0x2368 <vfprintf+0x222>
    2318:	f8 01       	movw	r30, r16
    231a:	37 fe       	sbrs	r3, 7
    231c:	07 c0       	rjmp	.+14     	; 0x232c <vfprintf+0x1e6>
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0c 5f       	subi	r16, 0xFC	; 252
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	08 c0       	rjmp	.+16     	; 0x233c <vfprintf+0x1f6>
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	07 2e       	mov	r0, r23
    2332:	00 0c       	add	r0, r0
    2334:	88 0b       	sbc	r24, r24
    2336:	99 0b       	sbc	r25, r25
    2338:	0e 5f       	subi	r16, 0xFE	; 254
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	f3 2d       	mov	r31, r3
    233e:	ff 76       	andi	r31, 0x6F	; 111
    2340:	3f 2e       	mov	r3, r31
    2342:	97 ff       	sbrs	r25, 7
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <vfprintf+0x212>
    2346:	90 95       	com	r25
    2348:	80 95       	com	r24
    234a:	70 95       	com	r23
    234c:	61 95       	neg	r22
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	8f 4f       	sbci	r24, 0xFF	; 255
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	f0 68       	ori	r31, 0x80	; 128
    2356:	3f 2e       	mov	r3, r31
    2358:	2a e0       	ldi	r18, 0x0A	; 10
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	a3 01       	movw	r20, r6
    235e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__ultoa_invert>
    2362:	88 2e       	mov	r8, r24
    2364:	86 18       	sub	r8, r6
    2366:	45 c0       	rjmp	.+138    	; 0x23f2 <vfprintf+0x2ac>
    2368:	85 37       	cpi	r24, 0x75	; 117
    236a:	31 f4       	brne	.+12     	; 0x2378 <vfprintf+0x232>
    236c:	23 2d       	mov	r18, r3
    236e:	2f 7e       	andi	r18, 0xEF	; 239
    2370:	b2 2e       	mov	r11, r18
    2372:	2a e0       	ldi	r18, 0x0A	; 10
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	25 c0       	rjmp	.+74     	; 0x23c2 <vfprintf+0x27c>
    2378:	93 2d       	mov	r25, r3
    237a:	99 7f       	andi	r25, 0xF9	; 249
    237c:	b9 2e       	mov	r11, r25
    237e:	8f 36       	cpi	r24, 0x6F	; 111
    2380:	c1 f0       	breq	.+48     	; 0x23b2 <vfprintf+0x26c>
    2382:	18 f4       	brcc	.+6      	; 0x238a <vfprintf+0x244>
    2384:	88 35       	cpi	r24, 0x58	; 88
    2386:	79 f0       	breq	.+30     	; 0x23a6 <vfprintf+0x260>
    2388:	b5 c0       	rjmp	.+362    	; 0x24f4 <vfprintf+0x3ae>
    238a:	80 37       	cpi	r24, 0x70	; 112
    238c:	19 f0       	breq	.+6      	; 0x2394 <vfprintf+0x24e>
    238e:	88 37       	cpi	r24, 0x78	; 120
    2390:	21 f0       	breq	.+8      	; 0x239a <vfprintf+0x254>
    2392:	b0 c0       	rjmp	.+352    	; 0x24f4 <vfprintf+0x3ae>
    2394:	e9 2f       	mov	r30, r25
    2396:	e0 61       	ori	r30, 0x10	; 16
    2398:	be 2e       	mov	r11, r30
    239a:	b4 fe       	sbrs	r11, 4
    239c:	0d c0       	rjmp	.+26     	; 0x23b8 <vfprintf+0x272>
    239e:	fb 2d       	mov	r31, r11
    23a0:	f4 60       	ori	r31, 0x04	; 4
    23a2:	bf 2e       	mov	r11, r31
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <vfprintf+0x272>
    23a6:	34 fe       	sbrs	r3, 4
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <vfprintf+0x278>
    23aa:	29 2f       	mov	r18, r25
    23ac:	26 60       	ori	r18, 0x06	; 6
    23ae:	b2 2e       	mov	r11, r18
    23b0:	06 c0       	rjmp	.+12     	; 0x23be <vfprintf+0x278>
    23b2:	28 e0       	ldi	r18, 0x08	; 8
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <vfprintf+0x27c>
    23b8:	20 e1       	ldi	r18, 0x10	; 16
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <vfprintf+0x27c>
    23be:	20 e1       	ldi	r18, 0x10	; 16
    23c0:	32 e0       	ldi	r19, 0x02	; 2
    23c2:	f8 01       	movw	r30, r16
    23c4:	b7 fe       	sbrs	r11, 7
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <vfprintf+0x290>
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	0c 5f       	subi	r16, 0xFC	; 252
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <vfprintf+0x29c>
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 5f       	subi	r16, 0xFE	; 254
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	a3 01       	movw	r20, r6
    23e4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__ultoa_invert>
    23e8:	88 2e       	mov	r8, r24
    23ea:	86 18       	sub	r8, r6
    23ec:	fb 2d       	mov	r31, r11
    23ee:	ff 77       	andi	r31, 0x7F	; 127
    23f0:	3f 2e       	mov	r3, r31
    23f2:	36 fe       	sbrs	r3, 6
    23f4:	0d c0       	rjmp	.+26     	; 0x2410 <vfprintf+0x2ca>
    23f6:	23 2d       	mov	r18, r3
    23f8:	2e 7f       	andi	r18, 0xFE	; 254
    23fa:	a2 2e       	mov	r10, r18
    23fc:	89 14       	cp	r8, r9
    23fe:	58 f4       	brcc	.+22     	; 0x2416 <vfprintf+0x2d0>
    2400:	34 fe       	sbrs	r3, 4
    2402:	0b c0       	rjmp	.+22     	; 0x241a <vfprintf+0x2d4>
    2404:	32 fc       	sbrc	r3, 2
    2406:	09 c0       	rjmp	.+18     	; 0x241a <vfprintf+0x2d4>
    2408:	83 2d       	mov	r24, r3
    240a:	8e 7e       	andi	r24, 0xEE	; 238
    240c:	a8 2e       	mov	r10, r24
    240e:	05 c0       	rjmp	.+10     	; 0x241a <vfprintf+0x2d4>
    2410:	b8 2c       	mov	r11, r8
    2412:	a3 2c       	mov	r10, r3
    2414:	03 c0       	rjmp	.+6      	; 0x241c <vfprintf+0x2d6>
    2416:	b8 2c       	mov	r11, r8
    2418:	01 c0       	rjmp	.+2      	; 0x241c <vfprintf+0x2d6>
    241a:	b9 2c       	mov	r11, r9
    241c:	a4 fe       	sbrs	r10, 4
    241e:	0f c0       	rjmp	.+30     	; 0x243e <vfprintf+0x2f8>
    2420:	fe 01       	movw	r30, r28
    2422:	e8 0d       	add	r30, r8
    2424:	f1 1d       	adc	r31, r1
    2426:	80 81       	ld	r24, Z
    2428:	80 33       	cpi	r24, 0x30	; 48
    242a:	21 f4       	brne	.+8      	; 0x2434 <vfprintf+0x2ee>
    242c:	9a 2d       	mov	r25, r10
    242e:	99 7e       	andi	r25, 0xE9	; 233
    2430:	a9 2e       	mov	r10, r25
    2432:	09 c0       	rjmp	.+18     	; 0x2446 <vfprintf+0x300>
    2434:	a2 fe       	sbrs	r10, 2
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <vfprintf+0x2fe>
    2438:	b3 94       	inc	r11
    243a:	b3 94       	inc	r11
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <vfprintf+0x300>
    243e:	8a 2d       	mov	r24, r10
    2440:	86 78       	andi	r24, 0x86	; 134
    2442:	09 f0       	breq	.+2      	; 0x2446 <vfprintf+0x300>
    2444:	b3 94       	inc	r11
    2446:	a3 fc       	sbrc	r10, 3
    2448:	11 c0       	rjmp	.+34     	; 0x246c <vfprintf+0x326>
    244a:	a0 fe       	sbrs	r10, 0
    244c:	06 c0       	rjmp	.+12     	; 0x245a <vfprintf+0x314>
    244e:	b2 14       	cp	r11, r2
    2450:	88 f4       	brcc	.+34     	; 0x2474 <vfprintf+0x32e>
    2452:	28 0c       	add	r2, r8
    2454:	92 2c       	mov	r9, r2
    2456:	9b 18       	sub	r9, r11
    2458:	0e c0       	rjmp	.+28     	; 0x2476 <vfprintf+0x330>
    245a:	b2 14       	cp	r11, r2
    245c:	60 f4       	brcc	.+24     	; 0x2476 <vfprintf+0x330>
    245e:	b6 01       	movw	r22, r12
    2460:	80 e2       	ldi	r24, 0x20	; 32
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    2468:	b3 94       	inc	r11
    246a:	f7 cf       	rjmp	.-18     	; 0x245a <vfprintf+0x314>
    246c:	b2 14       	cp	r11, r2
    246e:	18 f4       	brcc	.+6      	; 0x2476 <vfprintf+0x330>
    2470:	2b 18       	sub	r2, r11
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0x332>
    2474:	98 2c       	mov	r9, r8
    2476:	21 2c       	mov	r2, r1
    2478:	a4 fe       	sbrs	r10, 4
    247a:	10 c0       	rjmp	.+32     	; 0x249c <vfprintf+0x356>
    247c:	b6 01       	movw	r22, r12
    247e:	80 e3       	ldi	r24, 0x30	; 48
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    2486:	a2 fe       	sbrs	r10, 2
    2488:	17 c0       	rjmp	.+46     	; 0x24b8 <vfprintf+0x372>
    248a:	a1 fc       	sbrc	r10, 1
    248c:	03 c0       	rjmp	.+6      	; 0x2494 <vfprintf+0x34e>
    248e:	88 e7       	ldi	r24, 0x78	; 120
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <vfprintf+0x352>
    2494:	88 e5       	ldi	r24, 0x58	; 88
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	b6 01       	movw	r22, r12
    249a:	0c c0       	rjmp	.+24     	; 0x24b4 <vfprintf+0x36e>
    249c:	8a 2d       	mov	r24, r10
    249e:	86 78       	andi	r24, 0x86	; 134
    24a0:	59 f0       	breq	.+22     	; 0x24b8 <vfprintf+0x372>
    24a2:	a1 fe       	sbrs	r10, 1
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <vfprintf+0x364>
    24a6:	8b e2       	ldi	r24, 0x2B	; 43
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <vfprintf+0x366>
    24aa:	80 e2       	ldi	r24, 0x20	; 32
    24ac:	a7 fc       	sbrc	r10, 7
    24ae:	8d e2       	ldi	r24, 0x2D	; 45
    24b0:	b6 01       	movw	r22, r12
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    24b8:	89 14       	cp	r8, r9
    24ba:	38 f4       	brcc	.+14     	; 0x24ca <vfprintf+0x384>
    24bc:	b6 01       	movw	r22, r12
    24be:	80 e3       	ldi	r24, 0x30	; 48
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    24c6:	9a 94       	dec	r9
    24c8:	f7 cf       	rjmp	.-18     	; 0x24b8 <vfprintf+0x372>
    24ca:	8a 94       	dec	r8
    24cc:	f3 01       	movw	r30, r6
    24ce:	e8 0d       	add	r30, r8
    24d0:	f1 1d       	adc	r31, r1
    24d2:	80 81       	ld	r24, Z
    24d4:	b6 01       	movw	r22, r12
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    24dc:	81 10       	cpse	r8, r1
    24de:	f5 cf       	rjmp	.-22     	; 0x24ca <vfprintf+0x384>
    24e0:	22 20       	and	r2, r2
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <vfprintf+0x3a0>
    24e4:	42 ce       	rjmp	.-892    	; 0x216a <vfprintf+0x24>
    24e6:	b6 01       	movw	r22, r12
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <fputc>
    24f0:	2a 94       	dec	r2
    24f2:	f6 cf       	rjmp	.-20     	; 0x24e0 <vfprintf+0x39a>
    24f4:	f6 01       	movw	r30, r12
    24f6:	86 81       	ldd	r24, Z+6	; 0x06
    24f8:	97 81       	ldd	r25, Z+7	; 0x07
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <vfprintf+0x3ba>
    24fc:	8f ef       	ldi	r24, 0xFF	; 255
    24fe:	9f ef       	ldi	r25, 0xFF	; 255
    2500:	2b 96       	adiw	r28, 0x0b	; 11
    2502:	e2 e1       	ldi	r30, 0x12	; 18
    2504:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__>

00002508 <dtoa_prf>:
    2508:	a9 e0       	ldi	r26, 0x09	; 9
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__+0xc>
    2514:	6a 01       	movw	r12, r20
    2516:	12 2f       	mov	r17, r18
    2518:	b0 2e       	mov	r11, r16
    251a:	2b e3       	ldi	r18, 0x3B	; 59
    251c:	20 17       	cp	r18, r16
    251e:	20 f0       	brcs	.+8      	; 0x2528 <dtoa_prf+0x20>
    2520:	ff 24       	eor	r15, r15
    2522:	f3 94       	inc	r15
    2524:	f0 0e       	add	r15, r16
    2526:	02 c0       	rjmp	.+4      	; 0x252c <dtoa_prf+0x24>
    2528:	2c e3       	ldi	r18, 0x3C	; 60
    252a:	f2 2e       	mov	r15, r18
    252c:	0f 2d       	mov	r16, r15
    252e:	27 e0       	ldi	r18, 0x07	; 7
    2530:	ae 01       	movw	r20, r28
    2532:	4f 5f       	subi	r20, 0xFF	; 255
    2534:	5f 4f       	sbci	r21, 0xFF	; 255
    2536:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ftoa_engine>
    253a:	bc 01       	movw	r22, r24
    253c:	49 81       	ldd	r20, Y+1	; 0x01
    253e:	84 2f       	mov	r24, r20
    2540:	89 70       	andi	r24, 0x09	; 9
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	31 f0       	breq	.+12     	; 0x2552 <dtoa_prf+0x4a>
    2546:	e1 fc       	sbrc	r14, 1
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <dtoa_prf+0x4e>
    254a:	e0 fe       	sbrs	r14, 0
    254c:	06 c0       	rjmp	.+12     	; 0x255a <dtoa_prf+0x52>
    254e:	90 e2       	ldi	r25, 0x20	; 32
    2550:	05 c0       	rjmp	.+10     	; 0x255c <dtoa_prf+0x54>
    2552:	9d e2       	ldi	r25, 0x2D	; 45
    2554:	03 c0       	rjmp	.+6      	; 0x255c <dtoa_prf+0x54>
    2556:	9b e2       	ldi	r25, 0x2B	; 43
    2558:	01 c0       	rjmp	.+2      	; 0x255c <dtoa_prf+0x54>
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	5e 2d       	mov	r21, r14
    255e:	50 71       	andi	r21, 0x10	; 16
    2560:	43 ff       	sbrs	r20, 3
    2562:	3c c0       	rjmp	.+120    	; 0x25dc <dtoa_prf+0xd4>
    2564:	91 11       	cpse	r25, r1
    2566:	02 c0       	rjmp	.+4      	; 0x256c <dtoa_prf+0x64>
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	01 c0       	rjmp	.+2      	; 0x256e <dtoa_prf+0x66>
    256c:	84 e0       	ldi	r24, 0x04	; 4
    256e:	81 17       	cp	r24, r17
    2570:	18 f4       	brcc	.+6      	; 0x2578 <dtoa_prf+0x70>
    2572:	21 2f       	mov	r18, r17
    2574:	28 1b       	sub	r18, r24
    2576:	01 c0       	rjmp	.+2      	; 0x257a <dtoa_prf+0x72>
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	51 11       	cpse	r21, r1
    257c:	0b c0       	rjmp	.+22     	; 0x2594 <dtoa_prf+0x8c>
    257e:	f6 01       	movw	r30, r12
    2580:	82 2f       	mov	r24, r18
    2582:	30 e2       	ldi	r19, 0x20	; 32
    2584:	88 23       	and	r24, r24
    2586:	19 f0       	breq	.+6      	; 0x258e <dtoa_prf+0x86>
    2588:	31 93       	st	Z+, r19
    258a:	81 50       	subi	r24, 0x01	; 1
    258c:	fb cf       	rjmp	.-10     	; 0x2584 <dtoa_prf+0x7c>
    258e:	c2 0e       	add	r12, r18
    2590:	d1 1c       	adc	r13, r1
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	99 23       	and	r25, r25
    2596:	29 f0       	breq	.+10     	; 0x25a2 <dtoa_prf+0x9a>
    2598:	d6 01       	movw	r26, r12
    259a:	9c 93       	st	X, r25
    259c:	f6 01       	movw	r30, r12
    259e:	31 96       	adiw	r30, 0x01	; 1
    25a0:	6f 01       	movw	r12, r30
    25a2:	c6 01       	movw	r24, r12
    25a4:	03 96       	adiw	r24, 0x03	; 3
    25a6:	e2 fe       	sbrs	r14, 2
    25a8:	0a c0       	rjmp	.+20     	; 0x25be <dtoa_prf+0xb6>
    25aa:	3e e4       	ldi	r19, 0x4E	; 78
    25ac:	d6 01       	movw	r26, r12
    25ae:	3c 93       	st	X, r19
    25b0:	41 e4       	ldi	r20, 0x41	; 65
    25b2:	11 96       	adiw	r26, 0x01	; 1
    25b4:	4c 93       	st	X, r20
    25b6:	11 97       	sbiw	r26, 0x01	; 1
    25b8:	12 96       	adiw	r26, 0x02	; 2
    25ba:	3c 93       	st	X, r19
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <dtoa_prf+0xc2>
    25be:	3e e6       	ldi	r19, 0x6E	; 110
    25c0:	f6 01       	movw	r30, r12
    25c2:	30 83       	st	Z, r19
    25c4:	41 e6       	ldi	r20, 0x61	; 97
    25c6:	41 83       	std	Z+1, r20	; 0x01
    25c8:	32 83       	std	Z+2, r19	; 0x02
    25ca:	fc 01       	movw	r30, r24
    25cc:	32 2f       	mov	r19, r18
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	33 23       	and	r19, r19
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <dtoa_prf+0xce>
    25d4:	42 c0       	rjmp	.+132    	; 0x265a <dtoa_prf+0x152>
    25d6:	41 93       	st	Z+, r20
    25d8:	31 50       	subi	r19, 0x01	; 1
    25da:	fa cf       	rjmp	.-12     	; 0x25d0 <dtoa_prf+0xc8>
    25dc:	42 ff       	sbrs	r20, 2
    25de:	44 c0       	rjmp	.+136    	; 0x2668 <dtoa_prf+0x160>
    25e0:	91 11       	cpse	r25, r1
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <dtoa_prf+0xe0>
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <dtoa_prf+0xe2>
    25e8:	84 e0       	ldi	r24, 0x04	; 4
    25ea:	81 17       	cp	r24, r17
    25ec:	18 f4       	brcc	.+6      	; 0x25f4 <dtoa_prf+0xec>
    25ee:	21 2f       	mov	r18, r17
    25f0:	28 1b       	sub	r18, r24
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <dtoa_prf+0xee>
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	51 11       	cpse	r21, r1
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <dtoa_prf+0x108>
    25fa:	f6 01       	movw	r30, r12
    25fc:	82 2f       	mov	r24, r18
    25fe:	30 e2       	ldi	r19, 0x20	; 32
    2600:	88 23       	and	r24, r24
    2602:	19 f0       	breq	.+6      	; 0x260a <dtoa_prf+0x102>
    2604:	31 93       	st	Z+, r19
    2606:	81 50       	subi	r24, 0x01	; 1
    2608:	fb cf       	rjmp	.-10     	; 0x2600 <dtoa_prf+0xf8>
    260a:	c2 0e       	add	r12, r18
    260c:	d1 1c       	adc	r13, r1
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	99 23       	and	r25, r25
    2612:	29 f0       	breq	.+10     	; 0x261e <dtoa_prf+0x116>
    2614:	d6 01       	movw	r26, r12
    2616:	9c 93       	st	X, r25
    2618:	f6 01       	movw	r30, r12
    261a:	31 96       	adiw	r30, 0x01	; 1
    261c:	6f 01       	movw	r12, r30
    261e:	c6 01       	movw	r24, r12
    2620:	03 96       	adiw	r24, 0x03	; 3
    2622:	e2 fe       	sbrs	r14, 2
    2624:	0b c0       	rjmp	.+22     	; 0x263c <dtoa_prf+0x134>
    2626:	39 e4       	ldi	r19, 0x49	; 73
    2628:	d6 01       	movw	r26, r12
    262a:	3c 93       	st	X, r19
    262c:	3e e4       	ldi	r19, 0x4E	; 78
    262e:	11 96       	adiw	r26, 0x01	; 1
    2630:	3c 93       	st	X, r19
    2632:	11 97       	sbiw	r26, 0x01	; 1
    2634:	36 e4       	ldi	r19, 0x46	; 70
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	3c 93       	st	X, r19
    263a:	07 c0       	rjmp	.+14     	; 0x264a <dtoa_prf+0x142>
    263c:	39 e6       	ldi	r19, 0x69	; 105
    263e:	f6 01       	movw	r30, r12
    2640:	30 83       	st	Z, r19
    2642:	3e e6       	ldi	r19, 0x6E	; 110
    2644:	31 83       	std	Z+1, r19	; 0x01
    2646:	36 e6       	ldi	r19, 0x66	; 102
    2648:	32 83       	std	Z+2, r19	; 0x02
    264a:	fc 01       	movw	r30, r24
    264c:	32 2f       	mov	r19, r18
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	33 23       	and	r19, r19
    2652:	19 f0       	breq	.+6      	; 0x265a <dtoa_prf+0x152>
    2654:	41 93       	st	Z+, r20
    2656:	31 50       	subi	r19, 0x01	; 1
    2658:	fb cf       	rjmp	.-10     	; 0x2650 <dtoa_prf+0x148>
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f1 1d       	adc	r31, r1
    2660:	10 82       	st	Z, r1
    2662:	8e ef       	ldi	r24, 0xFE	; 254
    2664:	9f ef       	ldi	r25, 0xFF	; 255
    2666:	a6 c0       	rjmp	.+332    	; 0x27b4 <dtoa_prf+0x2ac>
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	91 11       	cpse	r25, r1
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <dtoa_prf+0x16c>
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	16 16       	cp	r1, r22
    2676:	17 06       	cpc	r1, r23
    2678:	1c f4       	brge	.+6      	; 0x2680 <dtoa_prf+0x178>
    267a:	fb 01       	movw	r30, r22
    267c:	31 96       	adiw	r30, 0x01	; 1
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <dtoa_prf+0x17c>
    2680:	e1 e0       	ldi	r30, 0x01	; 1
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	2e 0f       	add	r18, r30
    2686:	3f 1f       	adc	r19, r31
    2688:	bb 20       	and	r11, r11
    268a:	21 f0       	breq	.+8      	; 0x2694 <dtoa_prf+0x18c>
    268c:	eb 2d       	mov	r30, r11
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	31 96       	adiw	r30, 0x01	; 1
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <dtoa_prf+0x190>
    2694:	e0 e0       	ldi	r30, 0x00	; 0
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	2e 0f       	add	r18, r30
    269a:	3f 1f       	adc	r19, r31
    269c:	e1 2f       	mov	r30, r17
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	2e 17       	cp	r18, r30
    26a2:	3f 07       	cpc	r19, r31
    26a4:	1c f4       	brge	.+6      	; 0x26ac <dtoa_prf+0x1a4>
    26a6:	12 1b       	sub	r17, r18
    26a8:	21 2f       	mov	r18, r17
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <dtoa_prf+0x1a6>
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	8e 2d       	mov	r24, r14
    26b0:	88 71       	andi	r24, 0x18	; 24
    26b2:	59 f4       	brne	.+22     	; 0x26ca <dtoa_prf+0x1c2>
    26b4:	f6 01       	movw	r30, r12
    26b6:	82 2f       	mov	r24, r18
    26b8:	30 e2       	ldi	r19, 0x20	; 32
    26ba:	88 23       	and	r24, r24
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <dtoa_prf+0x1bc>
    26be:	31 93       	st	Z+, r19
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	fb cf       	rjmp	.-10     	; 0x26ba <dtoa_prf+0x1b2>
    26c4:	c2 0e       	add	r12, r18
    26c6:	d1 1c       	adc	r13, r1
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	99 23       	and	r25, r25
    26cc:	29 f0       	breq	.+10     	; 0x26d8 <dtoa_prf+0x1d0>
    26ce:	d6 01       	movw	r26, r12
    26d0:	9c 93       	st	X, r25
    26d2:	f6 01       	movw	r30, r12
    26d4:	31 96       	adiw	r30, 0x01	; 1
    26d6:	6f 01       	movw	r12, r30
    26d8:	51 11       	cpse	r21, r1
    26da:	0b c0       	rjmp	.+22     	; 0x26f2 <dtoa_prf+0x1ea>
    26dc:	f6 01       	movw	r30, r12
    26de:	82 2f       	mov	r24, r18
    26e0:	90 e3       	ldi	r25, 0x30	; 48
    26e2:	88 23       	and	r24, r24
    26e4:	19 f0       	breq	.+6      	; 0x26ec <dtoa_prf+0x1e4>
    26e6:	91 93       	st	Z+, r25
    26e8:	81 50       	subi	r24, 0x01	; 1
    26ea:	fb cf       	rjmp	.-10     	; 0x26e2 <dtoa_prf+0x1da>
    26ec:	c2 0e       	add	r12, r18
    26ee:	d1 1c       	adc	r13, r1
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	0f 2d       	mov	r16, r15
    26f4:	06 0f       	add	r16, r22
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	34 2f       	mov	r19, r20
    26fa:	30 71       	andi	r19, 0x10	; 16
    26fc:	44 ff       	sbrs	r20, 4
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <dtoa_prf+0x1fe>
    2700:	91 33       	cpi	r25, 0x31	; 49
    2702:	09 f4       	brne	.+2      	; 0x2706 <dtoa_prf+0x1fe>
    2704:	01 50       	subi	r16, 0x01	; 1
    2706:	10 16       	cp	r1, r16
    2708:	24 f4       	brge	.+8      	; 0x2712 <dtoa_prf+0x20a>
    270a:	09 30       	cpi	r16, 0x09	; 9
    270c:	18 f0       	brcs	.+6      	; 0x2714 <dtoa_prf+0x20c>
    270e:	08 e0       	ldi	r16, 0x08	; 8
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <dtoa_prf+0x20c>
    2712:	01 e0       	ldi	r16, 0x01	; 1
    2714:	ab 01       	movw	r20, r22
    2716:	77 ff       	sbrs	r23, 7
    2718:	02 c0       	rjmp	.+4      	; 0x271e <dtoa_prf+0x216>
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	fb 01       	movw	r30, r22
    2720:	e4 1b       	sub	r30, r20
    2722:	f5 0b       	sbc	r31, r21
    2724:	a1 e0       	ldi	r26, 0x01	; 1
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ac 0f       	add	r26, r28
    272a:	bd 1f       	adc	r27, r29
    272c:	ea 0f       	add	r30, r26
    272e:	fb 1f       	adc	r31, r27
    2730:	8e e2       	ldi	r24, 0x2E	; 46
    2732:	a8 2e       	mov	r10, r24
    2734:	4b 01       	movw	r8, r22
    2736:	80 1a       	sub	r8, r16
    2738:	91 08       	sbc	r9, r1
    273a:	0b 2d       	mov	r16, r11
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	11 95       	neg	r17
    2740:	01 95       	neg	r16
    2742:	11 09       	sbc	r17, r1
    2744:	4f 3f       	cpi	r20, 0xFF	; 255
    2746:	bf ef       	ldi	r27, 0xFF	; 255
    2748:	5b 07       	cpc	r21, r27
    274a:	21 f4       	brne	.+8      	; 0x2754 <dtoa_prf+0x24c>
    274c:	d6 01       	movw	r26, r12
    274e:	ac 92       	st	X, r10
    2750:	11 96       	adiw	r26, 0x01	; 1
    2752:	6d 01       	movw	r12, r26
    2754:	64 17       	cp	r22, r20
    2756:	75 07       	cpc	r23, r21
    2758:	2c f0       	brlt	.+10     	; 0x2764 <dtoa_prf+0x25c>
    275a:	84 16       	cp	r8, r20
    275c:	95 06       	cpc	r9, r21
    275e:	14 f4       	brge	.+4      	; 0x2764 <dtoa_prf+0x25c>
    2760:	81 81       	ldd	r24, Z+1	; 0x01
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <dtoa_prf+0x25e>
    2764:	80 e3       	ldi	r24, 0x30	; 48
    2766:	41 50       	subi	r20, 0x01	; 1
    2768:	51 09       	sbc	r21, r1
    276a:	31 96       	adiw	r30, 0x01	; 1
    276c:	d6 01       	movw	r26, r12
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	7d 01       	movw	r14, r26
    2772:	40 17       	cp	r20, r16
    2774:	51 07       	cpc	r21, r17
    2776:	24 f0       	brlt	.+8      	; 0x2780 <dtoa_prf+0x278>
    2778:	d6 01       	movw	r26, r12
    277a:	8c 93       	st	X, r24
    277c:	67 01       	movw	r12, r14
    277e:	e2 cf       	rjmp	.-60     	; 0x2744 <dtoa_prf+0x23c>
    2780:	64 17       	cp	r22, r20
    2782:	75 07       	cpc	r23, r21
    2784:	39 f4       	brne	.+14     	; 0x2794 <dtoa_prf+0x28c>
    2786:	96 33       	cpi	r25, 0x36	; 54
    2788:	20 f4       	brcc	.+8      	; 0x2792 <dtoa_prf+0x28a>
    278a:	95 33       	cpi	r25, 0x35	; 53
    278c:	19 f4       	brne	.+6      	; 0x2794 <dtoa_prf+0x28c>
    278e:	31 11       	cpse	r19, r1
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <dtoa_prf+0x28c>
    2792:	81 e3       	ldi	r24, 0x31	; 49
    2794:	f6 01       	movw	r30, r12
    2796:	80 83       	st	Z, r24
    2798:	f7 01       	movw	r30, r14
    279a:	82 2f       	mov	r24, r18
    279c:	90 e2       	ldi	r25, 0x20	; 32
    279e:	88 23       	and	r24, r24
    27a0:	19 f0       	breq	.+6      	; 0x27a8 <dtoa_prf+0x2a0>
    27a2:	91 93       	st	Z+, r25
    27a4:	81 50       	subi	r24, 0x01	; 1
    27a6:	fb cf       	rjmp	.-10     	; 0x279e <dtoa_prf+0x296>
    27a8:	f7 01       	movw	r30, r14
    27aa:	e2 0f       	add	r30, r18
    27ac:	f1 1d       	adc	r31, r1
    27ae:	10 82       	st	Z, r1
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	29 96       	adiw	r28, 0x09	; 9
    27b6:	ec e0       	ldi	r30, 0x0C	; 12
    27b8:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__+0xc>

000027bc <__ftoa_engine>:
    27bc:	28 30       	cpi	r18, 0x08	; 8
    27be:	08 f0       	brcs	.+2      	; 0x27c2 <__ftoa_engine+0x6>
    27c0:	27 e0       	ldi	r18, 0x07	; 7
    27c2:	33 27       	eor	r19, r19
    27c4:	da 01       	movw	r26, r20
    27c6:	99 0f       	add	r25, r25
    27c8:	31 1d       	adc	r19, r1
    27ca:	87 fd       	sbrc	r24, 7
    27cc:	91 60       	ori	r25, 0x01	; 1
    27ce:	00 96       	adiw	r24, 0x00	; 0
    27d0:	61 05       	cpc	r22, r1
    27d2:	71 05       	cpc	r23, r1
    27d4:	39 f4       	brne	.+14     	; 0x27e4 <__ftoa_engine+0x28>
    27d6:	32 60       	ori	r19, 0x02	; 2
    27d8:	2e 5f       	subi	r18, 0xFE	; 254
    27da:	3d 93       	st	X+, r19
    27dc:	30 e3       	ldi	r19, 0x30	; 48
    27de:	2a 95       	dec	r18
    27e0:	e1 f7       	brne	.-8      	; 0x27da <__ftoa_engine+0x1e>
    27e2:	08 95       	ret
    27e4:	9f 3f       	cpi	r25, 0xFF	; 255
    27e6:	30 f0       	brcs	.+12     	; 0x27f4 <__ftoa_engine+0x38>
    27e8:	80 38       	cpi	r24, 0x80	; 128
    27ea:	71 05       	cpc	r23, r1
    27ec:	61 05       	cpc	r22, r1
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <__ftoa_engine+0x36>
    27f0:	3c 5f       	subi	r19, 0xFC	; 252
    27f2:	3c 5f       	subi	r19, 0xFC	; 252
    27f4:	3d 93       	st	X+, r19
    27f6:	91 30       	cpi	r25, 0x01	; 1
    27f8:	08 f0       	brcs	.+2      	; 0x27fc <__ftoa_engine+0x40>
    27fa:	80 68       	ori	r24, 0x80	; 128
    27fc:	91 1d       	adc	r25, r1
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	1f 93       	push	r17
    2804:	0f 93       	push	r16
    2806:	ff 92       	push	r15
    2808:	ef 92       	push	r14
    280a:	19 2f       	mov	r17, r25
    280c:	98 7f       	andi	r25, 0xF8	; 248
    280e:	96 95       	lsr	r25
    2810:	e9 2f       	mov	r30, r25
    2812:	96 95       	lsr	r25
    2814:	96 95       	lsr	r25
    2816:	e9 0f       	add	r30, r25
    2818:	ff 27       	eor	r31, r31
    281a:	e6 53       	subi	r30, 0x36	; 54
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	99 27       	eor	r25, r25
    2820:	33 27       	eor	r19, r19
    2822:	ee 24       	eor	r14, r14
    2824:	ff 24       	eor	r15, r15
    2826:	a7 01       	movw	r20, r14
    2828:	e7 01       	movw	r28, r14
    282a:	05 90       	lpm	r0, Z+
    282c:	08 94       	sec
    282e:	07 94       	ror	r0
    2830:	28 f4       	brcc	.+10     	; 0x283c <__ftoa_engine+0x80>
    2832:	36 0f       	add	r19, r22
    2834:	e7 1e       	adc	r14, r23
    2836:	f8 1e       	adc	r15, r24
    2838:	49 1f       	adc	r20, r25
    283a:	51 1d       	adc	r21, r1
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	06 94       	lsr	r0
    2846:	a1 f7       	brne	.-24     	; 0x2830 <__ftoa_engine+0x74>
    2848:	05 90       	lpm	r0, Z+
    284a:	07 94       	ror	r0
    284c:	28 f4       	brcc	.+10     	; 0x2858 <__ftoa_engine+0x9c>
    284e:	e7 0e       	add	r14, r23
    2850:	f8 1e       	adc	r15, r24
    2852:	49 1f       	adc	r20, r25
    2854:	56 1f       	adc	r21, r22
    2856:	c1 1d       	adc	r28, r1
    2858:	77 0f       	add	r23, r23
    285a:	88 1f       	adc	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	66 1f       	adc	r22, r22
    2860:	06 94       	lsr	r0
    2862:	a1 f7       	brne	.-24     	; 0x284c <__ftoa_engine+0x90>
    2864:	05 90       	lpm	r0, Z+
    2866:	07 94       	ror	r0
    2868:	28 f4       	brcc	.+10     	; 0x2874 <__ftoa_engine+0xb8>
    286a:	f8 0e       	add	r15, r24
    286c:	49 1f       	adc	r20, r25
    286e:	56 1f       	adc	r21, r22
    2870:	c7 1f       	adc	r28, r23
    2872:	d1 1d       	adc	r29, r1
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	66 1f       	adc	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	06 94       	lsr	r0
    287e:	a1 f7       	brne	.-24     	; 0x2868 <__ftoa_engine+0xac>
    2880:	05 90       	lpm	r0, Z+
    2882:	07 94       	ror	r0
    2884:	20 f4       	brcc	.+8      	; 0x288e <__ftoa_engine+0xd2>
    2886:	49 0f       	add	r20, r25
    2888:	56 1f       	adc	r21, r22
    288a:	c7 1f       	adc	r28, r23
    288c:	d8 1f       	adc	r29, r24
    288e:	99 0f       	add	r25, r25
    2890:	66 1f       	adc	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	88 1f       	adc	r24, r24
    2896:	06 94       	lsr	r0
    2898:	a9 f7       	brne	.-22     	; 0x2884 <__ftoa_engine+0xc8>
    289a:	84 91       	lpm	r24, Z
    289c:	10 95       	com	r17
    289e:	17 70       	andi	r17, 0x07	; 7
    28a0:	41 f0       	breq	.+16     	; 0x28b2 <__ftoa_engine+0xf6>
    28a2:	d6 95       	lsr	r29
    28a4:	c7 95       	ror	r28
    28a6:	57 95       	ror	r21
    28a8:	47 95       	ror	r20
    28aa:	f7 94       	ror	r15
    28ac:	e7 94       	ror	r14
    28ae:	1a 95       	dec	r17
    28b0:	c1 f7       	brne	.-16     	; 0x28a2 <__ftoa_engine+0xe6>
    28b2:	e0 e7       	ldi	r30, 0x70	; 112
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	68 94       	set
    28b8:	15 90       	lpm	r1, Z+
    28ba:	15 91       	lpm	r17, Z+
    28bc:	35 91       	lpm	r19, Z+
    28be:	65 91       	lpm	r22, Z+
    28c0:	95 91       	lpm	r25, Z+
    28c2:	05 90       	lpm	r0, Z+
    28c4:	7f e2       	ldi	r23, 0x2F	; 47
    28c6:	73 95       	inc	r23
    28c8:	e1 18       	sub	r14, r1
    28ca:	f1 0a       	sbc	r15, r17
    28cc:	43 0b       	sbc	r20, r19
    28ce:	56 0b       	sbc	r21, r22
    28d0:	c9 0b       	sbc	r28, r25
    28d2:	d0 09       	sbc	r29, r0
    28d4:	c0 f7       	brcc	.-16     	; 0x28c6 <__ftoa_engine+0x10a>
    28d6:	e1 0c       	add	r14, r1
    28d8:	f1 1e       	adc	r15, r17
    28da:	43 1f       	adc	r20, r19
    28dc:	56 1f       	adc	r21, r22
    28de:	c9 1f       	adc	r28, r25
    28e0:	d0 1d       	adc	r29, r0
    28e2:	7e f4       	brtc	.+30     	; 0x2902 <__ftoa_engine+0x146>
    28e4:	70 33       	cpi	r23, 0x30	; 48
    28e6:	11 f4       	brne	.+4      	; 0x28ec <__ftoa_engine+0x130>
    28e8:	8a 95       	dec	r24
    28ea:	e6 cf       	rjmp	.-52     	; 0x28b8 <__ftoa_engine+0xfc>
    28ec:	e8 94       	clt
    28ee:	01 50       	subi	r16, 0x01	; 1
    28f0:	30 f0       	brcs	.+12     	; 0x28fe <__ftoa_engine+0x142>
    28f2:	08 0f       	add	r16, r24
    28f4:	0a f4       	brpl	.+2      	; 0x28f8 <__ftoa_engine+0x13c>
    28f6:	00 27       	eor	r16, r16
    28f8:	02 17       	cp	r16, r18
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <__ftoa_engine+0x142>
    28fc:	20 2f       	mov	r18, r16
    28fe:	23 95       	inc	r18
    2900:	02 2f       	mov	r16, r18
    2902:	7a 33       	cpi	r23, 0x3A	; 58
    2904:	28 f0       	brcs	.+10     	; 0x2910 <__ftoa_engine+0x154>
    2906:	79 e3       	ldi	r23, 0x39	; 57
    2908:	7d 93       	st	X+, r23
    290a:	2a 95       	dec	r18
    290c:	e9 f7       	brne	.-6      	; 0x2908 <__ftoa_engine+0x14c>
    290e:	10 c0       	rjmp	.+32     	; 0x2930 <__ftoa_engine+0x174>
    2910:	7d 93       	st	X+, r23
    2912:	2a 95       	dec	r18
    2914:	89 f6       	brne	.-94     	; 0x28b8 <__ftoa_engine+0xfc>
    2916:	06 94       	lsr	r0
    2918:	97 95       	ror	r25
    291a:	67 95       	ror	r22
    291c:	37 95       	ror	r19
    291e:	17 95       	ror	r17
    2920:	17 94       	ror	r1
    2922:	e1 18       	sub	r14, r1
    2924:	f1 0a       	sbc	r15, r17
    2926:	43 0b       	sbc	r20, r19
    2928:	56 0b       	sbc	r21, r22
    292a:	c9 0b       	sbc	r28, r25
    292c:	d0 09       	sbc	r29, r0
    292e:	98 f0       	brcs	.+38     	; 0x2956 <__ftoa_engine+0x19a>
    2930:	23 95       	inc	r18
    2932:	7e 91       	ld	r23, -X
    2934:	73 95       	inc	r23
    2936:	7a 33       	cpi	r23, 0x3A	; 58
    2938:	08 f0       	brcs	.+2      	; 0x293c <__ftoa_engine+0x180>
    293a:	70 e3       	ldi	r23, 0x30	; 48
    293c:	7c 93       	st	X, r23
    293e:	20 13       	cpse	r18, r16
    2940:	b8 f7       	brcc	.-18     	; 0x2930 <__ftoa_engine+0x174>
    2942:	7e 91       	ld	r23, -X
    2944:	70 61       	ori	r23, 0x10	; 16
    2946:	7d 93       	st	X+, r23
    2948:	30 f0       	brcs	.+12     	; 0x2956 <__ftoa_engine+0x19a>
    294a:	83 95       	inc	r24
    294c:	71 e3       	ldi	r23, 0x31	; 49
    294e:	7d 93       	st	X+, r23
    2950:	70 e3       	ldi	r23, 0x30	; 48
    2952:	2a 95       	dec	r18
    2954:	e1 f7       	brne	.-8      	; 0x294e <__ftoa_engine+0x192>
    2956:	11 24       	eor	r1, r1
    2958:	ef 90       	pop	r14
    295a:	ff 90       	pop	r15
    295c:	0f 91       	pop	r16
    295e:	1f 91       	pop	r17
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	99 27       	eor	r25, r25
    2966:	87 fd       	sbrc	r24, 7
    2968:	90 95       	com	r25
    296a:	08 95       	ret

0000296c <strnlen_P>:
    296c:	fc 01       	movw	r30, r24
    296e:	05 90       	lpm	r0, Z+
    2970:	61 50       	subi	r22, 0x01	; 1
    2972:	70 40       	sbci	r23, 0x00	; 0
    2974:	01 10       	cpse	r0, r1
    2976:	d8 f7       	brcc	.-10     	; 0x296e <strnlen_P+0x2>
    2978:	80 95       	com	r24
    297a:	90 95       	com	r25
    297c:	8e 0f       	add	r24, r30
    297e:	9f 1f       	adc	r25, r31
    2980:	08 95       	ret

00002982 <strnlen>:
    2982:	fc 01       	movw	r30, r24
    2984:	61 50       	subi	r22, 0x01	; 1
    2986:	70 40       	sbci	r23, 0x00	; 0
    2988:	01 90       	ld	r0, Z+
    298a:	01 10       	cpse	r0, r1
    298c:	d8 f7       	brcc	.-10     	; 0x2984 <strnlen+0x2>
    298e:	80 95       	com	r24
    2990:	90 95       	com	r25
    2992:	8e 0f       	add	r24, r30
    2994:	9f 1f       	adc	r25, r31
    2996:	08 95       	ret

00002998 <strrev>:
    2998:	dc 01       	movw	r26, r24
    299a:	fc 01       	movw	r30, r24
    299c:	67 2f       	mov	r22, r23
    299e:	71 91       	ld	r23, Z+
    29a0:	77 23       	and	r23, r23
    29a2:	e1 f7       	brne	.-8      	; 0x299c <strrev+0x4>
    29a4:	32 97       	sbiw	r30, 0x02	; 2
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <strrev+0x18>
    29a8:	7c 91       	ld	r23, X
    29aa:	6d 93       	st	X+, r22
    29ac:	70 83       	st	Z, r23
    29ae:	62 91       	ld	r22, -Z
    29b0:	ae 17       	cp	r26, r30
    29b2:	bf 07       	cpc	r27, r31
    29b4:	c8 f3       	brcs	.-14     	; 0x29a8 <strrev+0x10>
    29b6:	08 95       	ret

000029b8 <fputc>:
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	fb 01       	movw	r30, r22
    29c2:	23 81       	ldd	r18, Z+3	; 0x03
    29c4:	21 fd       	sbrc	r18, 1
    29c6:	03 c0       	rjmp	.+6      	; 0x29ce <fputc+0x16>
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	9f ef       	ldi	r25, 0xFF	; 255
    29cc:	2c c0       	rjmp	.+88     	; 0x2a26 <fputc+0x6e>
    29ce:	22 ff       	sbrs	r18, 2
    29d0:	16 c0       	rjmp	.+44     	; 0x29fe <fputc+0x46>
    29d2:	46 81       	ldd	r20, Z+6	; 0x06
    29d4:	57 81       	ldd	r21, Z+7	; 0x07
    29d6:	24 81       	ldd	r18, Z+4	; 0x04
    29d8:	35 81       	ldd	r19, Z+5	; 0x05
    29da:	42 17       	cp	r20, r18
    29dc:	53 07       	cpc	r21, r19
    29de:	44 f4       	brge	.+16     	; 0x29f0 <fputc+0x38>
    29e0:	a0 81       	ld	r26, Z
    29e2:	b1 81       	ldd	r27, Z+1	; 0x01
    29e4:	9d 01       	movw	r18, r26
    29e6:	2f 5f       	subi	r18, 0xFF	; 255
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	31 83       	std	Z+1, r19	; 0x01
    29ec:	20 83       	st	Z, r18
    29ee:	8c 93       	st	X, r24
    29f0:	26 81       	ldd	r18, Z+6	; 0x06
    29f2:	37 81       	ldd	r19, Z+7	; 0x07
    29f4:	2f 5f       	subi	r18, 0xFF	; 255
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	37 83       	std	Z+7, r19	; 0x07
    29fa:	26 83       	std	Z+6, r18	; 0x06
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <fputc+0x6e>
    29fe:	8b 01       	movw	r16, r22
    2a00:	ec 01       	movw	r28, r24
    2a02:	fb 01       	movw	r30, r22
    2a04:	00 84       	ldd	r0, Z+8	; 0x08
    2a06:	f1 85       	ldd	r31, Z+9	; 0x09
    2a08:	e0 2d       	mov	r30, r0
    2a0a:	09 95       	icall
    2a0c:	89 2b       	or	r24, r25
    2a0e:	e1 f6       	brne	.-72     	; 0x29c8 <fputc+0x10>
    2a10:	d8 01       	movw	r26, r16
    2a12:	16 96       	adiw	r26, 0x06	; 6
    2a14:	8d 91       	ld	r24, X+
    2a16:	9c 91       	ld	r25, X
    2a18:	17 97       	sbiw	r26, 0x07	; 7
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	17 96       	adiw	r26, 0x07	; 7
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	16 97       	sbiw	r26, 0x06	; 6
    2a24:	ce 01       	movw	r24, r28
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	08 95       	ret

00002a30 <__ultoa_invert>:
    2a30:	fa 01       	movw	r30, r20
    2a32:	aa 27       	eor	r26, r26
    2a34:	28 30       	cpi	r18, 0x08	; 8
    2a36:	51 f1       	breq	.+84     	; 0x2a8c <__ultoa_invert+0x5c>
    2a38:	20 31       	cpi	r18, 0x10	; 16
    2a3a:	81 f1       	breq	.+96     	; 0x2a9c <__ultoa_invert+0x6c>
    2a3c:	e8 94       	clt
    2a3e:	6f 93       	push	r22
    2a40:	6e 7f       	andi	r22, 0xFE	; 254
    2a42:	6e 5f       	subi	r22, 0xFE	; 254
    2a44:	7f 4f       	sbci	r23, 0xFF	; 255
    2a46:	8f 4f       	sbci	r24, 0xFF	; 255
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	af 4f       	sbci	r26, 0xFF	; 255
    2a4c:	b1 e0       	ldi	r27, 0x01	; 1
    2a4e:	3e d0       	rcall	.+124    	; 0x2acc <__ultoa_invert+0x9c>
    2a50:	b4 e0       	ldi	r27, 0x04	; 4
    2a52:	3c d0       	rcall	.+120    	; 0x2acc <__ultoa_invert+0x9c>
    2a54:	67 0f       	add	r22, r23
    2a56:	78 1f       	adc	r23, r24
    2a58:	89 1f       	adc	r24, r25
    2a5a:	9a 1f       	adc	r25, r26
    2a5c:	a1 1d       	adc	r26, r1
    2a5e:	68 0f       	add	r22, r24
    2a60:	79 1f       	adc	r23, r25
    2a62:	8a 1f       	adc	r24, r26
    2a64:	91 1d       	adc	r25, r1
    2a66:	a1 1d       	adc	r26, r1
    2a68:	6a 0f       	add	r22, r26
    2a6a:	71 1d       	adc	r23, r1
    2a6c:	81 1d       	adc	r24, r1
    2a6e:	91 1d       	adc	r25, r1
    2a70:	a1 1d       	adc	r26, r1
    2a72:	20 d0       	rcall	.+64     	; 0x2ab4 <__ultoa_invert+0x84>
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <__ultoa_invert+0x48>
    2a76:	68 94       	set
    2a78:	3f 91       	pop	r19
    2a7a:	2a e0       	ldi	r18, 0x0A	; 10
    2a7c:	26 9f       	mul	r18, r22
    2a7e:	11 24       	eor	r1, r1
    2a80:	30 19       	sub	r19, r0
    2a82:	30 5d       	subi	r19, 0xD0	; 208
    2a84:	31 93       	st	Z+, r19
    2a86:	de f6       	brtc	.-74     	; 0x2a3e <__ultoa_invert+0xe>
    2a88:	cf 01       	movw	r24, r30
    2a8a:	08 95       	ret
    2a8c:	46 2f       	mov	r20, r22
    2a8e:	47 70       	andi	r20, 0x07	; 7
    2a90:	40 5d       	subi	r20, 0xD0	; 208
    2a92:	41 93       	st	Z+, r20
    2a94:	b3 e0       	ldi	r27, 0x03	; 3
    2a96:	0f d0       	rcall	.+30     	; 0x2ab6 <__ultoa_invert+0x86>
    2a98:	c9 f7       	brne	.-14     	; 0x2a8c <__ultoa_invert+0x5c>
    2a9a:	f6 cf       	rjmp	.-20     	; 0x2a88 <__ultoa_invert+0x58>
    2a9c:	46 2f       	mov	r20, r22
    2a9e:	4f 70       	andi	r20, 0x0F	; 15
    2aa0:	40 5d       	subi	r20, 0xD0	; 208
    2aa2:	4a 33       	cpi	r20, 0x3A	; 58
    2aa4:	18 f0       	brcs	.+6      	; 0x2aac <__ultoa_invert+0x7c>
    2aa6:	49 5d       	subi	r20, 0xD9	; 217
    2aa8:	31 fd       	sbrc	r19, 1
    2aaa:	40 52       	subi	r20, 0x20	; 32
    2aac:	41 93       	st	Z+, r20
    2aae:	02 d0       	rcall	.+4      	; 0x2ab4 <__ultoa_invert+0x84>
    2ab0:	a9 f7       	brne	.-22     	; 0x2a9c <__ultoa_invert+0x6c>
    2ab2:	ea cf       	rjmp	.-44     	; 0x2a88 <__ultoa_invert+0x58>
    2ab4:	b4 e0       	ldi	r27, 0x04	; 4
    2ab6:	a6 95       	lsr	r26
    2ab8:	97 95       	ror	r25
    2aba:	87 95       	ror	r24
    2abc:	77 95       	ror	r23
    2abe:	67 95       	ror	r22
    2ac0:	ba 95       	dec	r27
    2ac2:	c9 f7       	brne	.-14     	; 0x2ab6 <__ultoa_invert+0x86>
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	61 05       	cpc	r22, r1
    2ac8:	71 05       	cpc	r23, r1
    2aca:	08 95       	ret
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	0a 2e       	mov	r0, r26
    2ad2:	06 94       	lsr	r0
    2ad4:	57 95       	ror	r21
    2ad6:	47 95       	ror	r20
    2ad8:	37 95       	ror	r19
    2ada:	27 95       	ror	r18
    2adc:	ba 95       	dec	r27
    2ade:	c9 f7       	brne	.-14     	; 0x2ad2 <__ultoa_invert+0xa2>
    2ae0:	62 0f       	add	r22, r18
    2ae2:	73 1f       	adc	r23, r19
    2ae4:	84 1f       	adc	r24, r20
    2ae6:	95 1f       	adc	r25, r21
    2ae8:	a0 1d       	adc	r26, r0
    2aea:	08 95       	ret

00002aec <__prologue_saves__>:
    2aec:	2f 92       	push	r2
    2aee:	3f 92       	push	r3
    2af0:	4f 92       	push	r4
    2af2:	5f 92       	push	r5
    2af4:	6f 92       	push	r6
    2af6:	7f 92       	push	r7
    2af8:	8f 92       	push	r8
    2afa:	9f 92       	push	r9
    2afc:	af 92       	push	r10
    2afe:	bf 92       	push	r11
    2b00:	cf 92       	push	r12
    2b02:	df 92       	push	r13
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	ca 1b       	sub	r28, r26
    2b16:	db 0b       	sbc	r29, r27
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	09 94       	ijmp

00002b24 <__epilogue_restores__>:
    2b24:	2a 88       	ldd	r2, Y+18	; 0x12
    2b26:	39 88       	ldd	r3, Y+17	; 0x11
    2b28:	48 88       	ldd	r4, Y+16	; 0x10
    2b2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b36:	b9 84       	ldd	r11, Y+9	; 0x09
    2b38:	c8 84       	ldd	r12, Y+8	; 0x08
    2b3a:	df 80       	ldd	r13, Y+7	; 0x07
    2b3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b40:	0c 81       	ldd	r16, Y+4	; 0x04
    2b42:	1b 81       	ldd	r17, Y+3	; 0x03
    2b44:	aa 81       	ldd	r26, Y+2	; 0x02
    2b46:	b9 81       	ldd	r27, Y+1	; 0x01
    2b48:	ce 0f       	add	r28, r30
    2b4a:	d1 1d       	adc	r29, r1
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	ed 01       	movw	r28, r26
    2b58:	08 95       	ret

00002b5a <_exit>:
    2b5a:	f8 94       	cli

00002b5c <__stop_program>:
    2b5c:	ff cf       	rjmp	.-2      	; 0x2b5c <__stop_program>
