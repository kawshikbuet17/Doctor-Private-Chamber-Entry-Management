
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  000013e4  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008001a6  008001a6  000015be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ac4  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001208  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001be9  00000000  00000000  00005614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00007200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dd  00000000  00000000  000077f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001903  00000000  00000000  00007fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  000098d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 06 	call	0xc2e	; 0xc2e <main>
      8a:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
      92:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
      96:	08 95       	ret

00000098 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
      98:	0f 93       	push	r16
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	2a 97       	sbiw	r28, 0x0a	; 10
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
      b0:	16 2f       	mov	r17, r22
      b2:	07 2f       	mov	r16, r23
	HC05_SendString(text);
      b4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	85 e6       	ldi	r24, 0x65	; 101
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	9f 93       	push	r25
      c2:	8f 93       	push	r24
      c4:	8e 01       	movw	r16, r28
      c6:	0f 5f       	subi	r16, 0xFF	; 255
      c8:	1f 4f       	sbci	r17, 0xFF	; 255
      ca:	1f 93       	push	r17
      cc:	0f 93       	push	r16
      ce:	0e 94 06 07 	call	0xe0c	; 0xe0c <sprintf>
	HC05_SendString(temp);
      d2:	c8 01       	movw	r24, r16
      d4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
      d8:	8c e6       	ldi	r24, 0x6C	; 108
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	2a 96       	adiw	r28, 0x0a	; 10
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	08 95       	ret

00000102 <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	2a 97       	sbiw	r28, 0x0a	; 10
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     11c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     120:	fe 01       	movw	r30, r28
     122:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     128:	c8 01       	movw	r24, r16
     12a:	02 2e       	mov	r0, r18
     12c:	02 c0       	rjmp	.+4      	; 0x132 <Error_ErrorBin+0x30>
     12e:	95 95       	asr	r25
     130:	87 95       	ror	r24
     132:	0a 94       	dec	r0
     134:	e2 f7       	brpl	.-8      	; 0x12e <Error_ErrorBin+0x2c>
     136:	81 70       	andi	r24, 0x01	; 1
     138:	80 5d       	subi	r24, 0xD0	; 208
     13a:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     13c:	2f 5f       	subi	r18, 0xFF	; 255
     13e:	3f 4f       	sbci	r19, 0xFF	; 255
     140:	28 30       	cpi	r18, 0x08	; 8
     142:	31 05       	cpc	r19, r1
     144:	89 f7       	brne	.-30     	; 0x128 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     146:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     148:	ce 01       	movw	r24, r28
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
     150:	8c e6       	ldi	r24, 0x6C	; 108
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     158:	2a 96       	adiw	r28, 0x0a	; 10
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	08 95       	ret

0000016e <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	8b b9       	out	0x0b, r24	; 11
     172:	88 e1       	ldi	r24, 0x18	; 24
     174:	8a b9       	out	0x0a, r24	; 10
     176:	86 e8       	ldi	r24, 0x86	; 134
     178:	80 bd       	out	0x20, r24	; 32
     17a:	8c e0       	ldi	r24, 0x0C	; 12
     17c:	89 b9       	out	0x09, r24	; 9
     17e:	10 bc       	out	0x20, r1	; 32
     180:	08 95       	ret

00000182 <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     182:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     184:	5d 9b       	sbis	0x0b, 5	; 11
     186:	fe cf       	rjmp	.-4      	; 0x184 <HC05_SendChar+0x2>
}
     188:	08 95       	ret

0000018a <HC05_SendString>:
void HC05_SendString(char * s)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
	while(*s)
     190:	88 81       	ld	r24, Y
     192:	88 23       	and	r24, r24
     194:	31 f0       	breq	.+12     	; 0x1a2 <HC05_SendString+0x18>
     196:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     198:	0e 94 c1 00 	call	0x182	; 0x182 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     19c:	89 91       	ld	r24, Y+
     19e:	81 11       	cpse	r24, r1
     1a0:	fb cf       	rjmp	.-10     	; 0x198 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     1a8:	8a b3       	in	r24, 0x1a	; 26
     1aa:	83 70       	andi	r24, 0x03	; 3
     1ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     1b2:	88 bb       	out	0x18, r24	; 24
     1b4:	08 95       	ret

000001b6 <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     1b6:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <isNumber>
     1ba:	81 11       	cpse	r24, r1
     1bc:	07 c0       	rjmp	.+14     	; 0x1cc <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     1be:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <isUpperCase>
     1c2:	81 11       	cpse	r24, r1
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     1c6:	87 e7       	ldi	r24, 0x77	; 119
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     1cc:	8f e6       	ldi	r24, 0x6F	; 111
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     1d2:	83 e7       	ldi	r24, 0x73	; 115
     1d4:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     1d6:	08 95       	ret

000001d8 <Keypad_KeyPressed>:

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     1d8:	89 b3       	in	r24, 0x19	; 25
}
     1da:	82 95       	swap	r24
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	08 95       	ret

000001e0 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
	int pin = PINA >> 4;
     1e6:	c9 b3       	in	r28, 0x19	; 25
     1e8:	c2 95       	swap	r28
     1ea:	cf 70       	andi	r28, 0x0F	; 15
     1ec:	0c 2f       	mov	r16, r28
     1ee:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     1f0:	b8 01       	movw	r22, r16
     1f2:	8b e7       	ldi	r24, 0x7B	; 123
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     1fa:	c0 fd       	sbrc	r28, 0
     1fc:	0c c0       	rjmp	.+24     	; 0x216 <Keypad_GetRow+0x36>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	98 01       	movw	r18, r16
     204:	08 2e       	mov	r0, r24
     206:	02 c0       	rjmp	.+4      	; 0x20c <Keypad_GetRow+0x2c>
     208:	35 95       	asr	r19
     20a:	27 95       	ror	r18
     20c:	0a 94       	dec	r0
     20e:	e2 f7       	brpl	.-8      	; 0x208 <Keypad_GetRow+0x28>
     210:	20 ff       	sbrs	r18, 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <Keypad_GetRow+0x3c>
     214:	0c c0       	rjmp	.+24     	; 0x22e <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     21a:	09 c0       	rjmp	.+18     	; 0x22e <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	84 30       	cpi	r24, 0x04	; 4
     220:	91 05       	cpc	r25, r1
     222:	79 f7       	brne	.-34     	; 0x202 <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     224:	84 e8       	ldi	r24, 0x84	; 132
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	return -1;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
}
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	08 95       	ret

00000236 <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
	int i = 7;
     23e:	c7 e0       	ldi	r28, 0x07	; 7
     240:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     242:	01 e0       	ldi	r16, 0x01	; 1
     244:	10 e0       	ldi	r17, 0x00	; 0
     246:	28 b3       	in	r18, 0x18	; 24
     248:	c8 01       	movw	r24, r16
     24a:	0c 2e       	mov	r0, r28
     24c:	02 c0       	rjmp	.+4      	; 0x252 <Keypad_GetCol+0x1c>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	0a 94       	dec	r0
     254:	e2 f7       	brpl	.-8      	; 0x24e <Keypad_GetCol+0x18>
     256:	82 27       	eor	r24, r18
     258:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     25a:	66 b3       	in	r22, 0x16	; 22
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	82 e9       	ldi	r24, 0x92	; 146
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	else return "abc";
}

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     266:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     268:	82 95       	swap	r24
     26a:	8f 70       	andi	r24, 0x0F	; 15
     26c:	11 f4       	brne	.+4      	; 0x272 <Keypad_GetCol+0x3c>
		{
			return i;
     26e:	8c 2f       	mov	r24, r28
     270:	07 c0       	rjmp	.+14     	; 0x280 <Keypad_GetCol+0x4a>
		}
		i--;
     272:	21 97       	sbiw	r28, 0x01	; 1
     274:	40 f7       	brcc	.-48     	; 0x246 <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     276:	88 e9       	ldi	r24, 0x98	; 152
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	// report error
	return -1;
     27e:	8f ef       	ldi	r24, 0xFF	; 255
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     28a:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__data_end>
     28e:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__data_end+0x1>
     292:	e6 55       	subi	r30, 0x56	; 86
     294:	fe 4f       	sbci	r31, 0xFE	; 254
     296:	80 83       	st	Z, r24
	if(position < 16)
     298:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     29c:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
     2a0:	40 97       	sbiw	r24, 0x10	; 16
     2a2:	4c f4       	brge	.+18     	; 0x2b6 <addChar+0x2c>
		position = position +1;
     2a4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2a8:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
     2b2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
	keyBuffer[position] = 0;
     2b6:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__data_end>
     2ba:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__data_end+0x1>
     2be:	e6 55       	subi	r30, 0x56	; 86
     2c0:	fe 4f       	sbci	r31, 0xFE	; 254
     2c2:	10 82       	st	Z, r1
     2c4:	08 95       	ret

000002c6 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     2c6:	cf 93       	push	r28
     2c8:	c8 2f       	mov	r28, r24
	if(key >= 30)
     2ca:	8e 31       	cpi	r24, 0x1E	; 30
     2cc:	24 f0       	brlt	.+8      	; 0x2d6 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     2ce:	86 ea       	ldi	r24, 0xA6	; 166
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	if(key == 29) 
     2d6:	cd 31       	cpi	r28, 0x1D	; 29
     2d8:	b9 f4       	brne	.+46     	; 0x308 <Keypad_AddKey+0x42>
	{
		// backspace = delete char
		if(position)
     2da:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2de:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
     2e2:	89 2b       	or	r24, r25
     2e4:	49 f0       	breq	.+18     	; 0x2f8 <Keypad_AddKey+0x32>
			position--;
     2e6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2ea:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
     2f4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		keyBuffer[position] = 0;
     2f8:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__data_end>
     2fc:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__data_end+0x1>
     300:	e6 55       	subi	r30, 0x56	; 86
     302:	fe 4f       	sbci	r31, 0xFE	; 254
     304:	10 82       	st	Z, r1
     306:	57 c0       	rjmp	.+174    	; 0x3b6 <Keypad_AddKey+0xf0>
	}
	else if(key == 28)
     308:	cc 31       	cpi	r28, 0x1C	; 28
     30a:	21 f4       	brne	.+8      	; 0x314 <Keypad_AddKey+0x4e>
	{
		// space
		addChar(' ');
     30c:	80 e2       	ldi	r24, 0x20	; 32
     30e:	0e 94 45 01 	call	0x28a	; 0x28a <addChar>
     312:	51 c0       	rjmp	.+162    	; 0x3b6 <Keypad_AddKey+0xf0>
	}
	else if(key == 27)
     314:	cb 31       	cpi	r28, 0x1B	; 27
     316:	39 f4       	brne	.+14     	; 0x326 <Keypad_AddKey+0x60>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     318:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <isNumber>
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	89 27       	eor	r24, r25
     320:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <isNumber>
     324:	48 c0       	rjmp	.+144    	; 0x3b6 <Keypad_AddKey+0xf0>
	}
	else if(isNumber) 
     326:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <isNumber>
     32a:	88 23       	and	r24, r24
     32c:	e9 f0       	breq	.+58     	; 0x368 <Keypad_AddKey+0xa2>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     32e:	9c 2f       	mov	r25, r28
     330:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     332:	93 30       	cpi	r25, 0x03	; 3
     334:	08 f0       	brcs	.+2      	; 0x338 <Keypad_AddKey+0x72>
     336:	3f c0       	rjmp	.+126    	; 0x3b6 <Keypad_AddKey+0xf0>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     338:	c5 95       	asr	r28
     33a:	c5 95       	asr	r28
     33c:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     33e:	c3 30       	cpi	r28, 0x03	; 3
     340:	38 f4       	brcc	.+14     	; 0x350 <Keypad_AddKey+0x8a>
			c = '1' + row * 3 + col;
     342:	8c 2f       	mov	r24, r28
     344:	88 0f       	add	r24, r24
     346:	c8 0f       	add	r28, r24
     348:	81 e3       	ldi	r24, 0x31	; 49
     34a:	89 0f       	add	r24, r25
     34c:	8c 0f       	add	r24, r28
     34e:	09 c0       	rjmp	.+18     	; 0x362 <Keypad_AddKey+0x9c>
		}
		else if(col == 0) {
     350:	99 23       	and	r25, r25
     352:	21 f0       	breq	.+8      	; 0x35c <Keypad_AddKey+0x96>
			c = '*';
		}
		else if(col == 1) {
     354:	91 30       	cpi	r25, 0x01	; 1
     356:	21 f0       	breq	.+8      	; 0x360 <Keypad_AddKey+0x9a>
			c = '0';
		}
		else  {
			c = '#';
     358:	83 e2       	ldi	r24, 0x23	; 35
     35a:	03 c0       	rjmp	.+6      	; 0x362 <Keypad_AddKey+0x9c>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     35c:	8a e2       	ldi	r24, 0x2A	; 42
     35e:	01 c0       	rjmp	.+2      	; 0x362 <Keypad_AddKey+0x9c>
		}
		else if(col == 1) {
			c = '0';
     360:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     362:	0e 94 45 01 	call	0x28a	; 0x28a <addChar>
     366:	27 c0       	rjmp	.+78     	; 0x3b6 <Keypad_AddKey+0xf0>
		
	}
	else if(key == 26)
     368:	ca 31       	cpi	r28, 0x1A	; 26
     36a:	39 f4       	brne	.+14     	; 0x37a <Keypad_AddKey+0xb4>
	{
		// capslock
		isUpperCase = !isUpperCase;
     36c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <isUpperCase>
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	89 27       	eor	r24, r25
     374:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <isUpperCase>
     378:	1e c0       	rjmp	.+60     	; 0x3b6 <Keypad_AddKey+0xf0>
	}
	else
	{
		// char
		char row = key >> 3;
     37a:	9c 2f       	mov	r25, r28
     37c:	95 95       	asr	r25
     37e:	95 95       	asr	r25
     380:	95 95       	asr	r25
		char col = key & 0b00000111;
     382:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     384:	93 30       	cpi	r25, 0x03	; 3
     386:	68 f4       	brcc	.+26     	; 0x3a2 <Keypad_AddKey+0xdc>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     388:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <isUpperCase>
     38c:	81 11       	cpse	r24, r1
     38e:	02 c0       	rjmp	.+4      	; 0x394 <Keypad_AddKey+0xce>
     390:	81 e6       	ldi	r24, 0x61	; 97
     392:	01 c0       	rjmp	.+2      	; 0x396 <Keypad_AddKey+0xd0>
     394:	81 e4       	ldi	r24, 0x41	; 65
     396:	99 0f       	add	r25, r25
     398:	99 0f       	add	r25, r25
     39a:	99 0f       	add	r25, r25
     39c:	c9 0f       	add	r28, r25
     39e:	8c 0f       	add	r24, r28
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <Keypad_AddKey+0xec>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     3a2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <isUpperCase>
     3a6:	81 11       	cpse	r24, r1
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <Keypad_AddKey+0xe8>
     3aa:	89 e7       	ldi	r24, 0x79	; 121
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <Keypad_AddKey+0xea>
     3ae:	89 e5       	ldi	r24, 0x59	; 89
     3b0:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     3b2:	0e 94 45 01 	call	0x28a	; 0x28a <addChar>
	}
	return ;
}
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     3be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Keypad_GetRow>
     3c2:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     3c4:	0e 94 1b 01 	call	0x236	; 0x236 <Keypad_GetCol>
     3c8:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     3ca:	6c 2f       	mov	r22, r28
     3cc:	0c 2e       	mov	r0, r28
     3ce:	00 0c       	add	r0, r0
     3d0:	77 0b       	sbc	r23, r23
     3d2:	8b eb       	ldi	r24, 0xBB	; 187
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     3da:	6d 2f       	mov	r22, r29
     3dc:	0d 2e       	mov	r0, r29
     3de:	00 0c       	add	r0, r0
     3e0:	77 0b       	sbc	r23, r23
     3e2:	8f eb       	ldi	r24, 0xBF	; 191
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	return row * 8 + col;
     3ea:	8c 2f       	mov	r24, r28
     3ec:	88 0f       	add	r24, r24
     3ee:	88 0f       	add	r24, r24
     3f0:	88 0f       	add	r24, r24
     3f2:	8d 0f       	add	r24, r29
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     3fa:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <currentState>
     3fe:	99 23       	and	r25, r25
     400:	19 f0       	breq	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     402:	91 30       	cpi	r25, 0x01	; 1
     404:	21 f0       	breq	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     406:	06 c0       	rjmp	.+12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		case IDLE:
			Idle_ProcessKey(key);
     408:	0e 94 9c 06 	call	0xd38	; 0xd38 <Idle_ProcessKey>
			break;
     40c:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     40e:	0e 94 65 06 	call	0xcca	; 0xcca <EnteringName_ProcessKey>
			break;
     412:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     414:	83 ec       	ldi	r24, 0xC3	; 195
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     41c:	08 95       	ret

0000041e <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     41e:	88 23       	and	r24, r24
     420:	19 f0       	breq	.+6      	; 0x428 <Lcd_Init+0xa>
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	39 f0       	breq	.+14     	; 0x434 <Lcd_Init+0x16>
     426:	24 c0       	rjmp	.+72     	; 0x470 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     428:	81 b3       	in	r24, 0x11	; 17
     42a:	8c 6f       	ori	r24, 0xFC	; 252
     42c:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     42e:	0e 94 4d 04 	call	0x89a	; 0x89a <Lcd4_Init>
			break;
     432:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	0e 94 a2 05 	call	0xb44	; 0xb44 <lcd_init>
			lcd_backlight(0);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	2f e9       	ldi	r18, 0x9F	; 159
     442:	86 e8       	ldi	r24, 0x86	; 134
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	21 50       	subi	r18, 0x01	; 1
     448:	80 40       	sbci	r24, 0x00	; 0
     44a:	90 40       	sbci	r25, 0x00	; 0
     44c:	e1 f7       	brne	.-8      	; 0x446 <Lcd_Init+0x28>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <Lcd_Init+0x32>
     450:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_backlight>
     458:	2f e9       	ldi	r18, 0x9F	; 159
     45a:	86 e8       	ldi	r24, 0x86	; 134
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 40       	sbci	r25, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <Lcd_Init+0x40>
     466:	00 c0       	rjmp	.+0      	; 0x468 <Lcd_Init+0x4a>
     468:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     46a:	0e 94 61 05 	call	0xac2	; 0xac2 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     46e:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     470:	87 ee       	ldi	r24, 0xE7	; 231
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     478:	08 95       	ret

0000047a <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     47a:	88 23       	and	r24, r24
     47c:	19 f0       	breq	.+6      	; 0x484 <Lcd_ClearScreen+0xa>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	21 f0       	breq	.+8      	; 0x48a <Lcd_ClearScreen+0x10>
     482:	06 c0       	rjmp	.+12     	; 0x490 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     484:	0e 94 29 04 	call	0x852	; 0x852 <Lcd4_Clear>
			break;
     488:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     48a:	0e 94 61 05 	call	0xac2	; 0xac2 <lcd_clrscr>
			break;
     48e:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     490:	86 e0       	ldi	r24, 0x06	; 6
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     498:	08 95       	ret

0000049a <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     49a:	88 23       	and	r24, r24
     49c:	19 f0       	breq	.+6      	; 0x4a4 <Lcd_Prints+0xa>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	29 f0       	breq	.+10     	; 0x4ac <Lcd_Prints+0x12>
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     4a4:	cb 01       	movw	r24, r22
     4a6:	0e 94 c6 04 	call	0x98c	; 0x98c <Lcd4_Write_String>
			break;
     4aa:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     4ac:	cb 01       	movw	r24, r22
     4ae:	0e 94 93 05 	call	0xb26	; 0xb26 <lcd_puts>
			break;
     4b2:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     4b4:	86 e0       	ldi	r24, 0x06	; 6
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     4bc:	08 95       	ret

000004be <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     4be:	96 2f       	mov	r25, r22
	switch(lcdType)
     4c0:	88 23       	and	r24, r24
     4c2:	19 f0       	breq	.+6      	; 0x4ca <Lcd_Position+0xc>
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	31 f0       	breq	.+12     	; 0x4d4 <Lcd_Position+0x16>
     4c8:	09 c0       	rjmp	.+18     	; 0x4dc <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     4ca:	64 2f       	mov	r22, r20
     4cc:	89 2f       	mov	r24, r25
     4ce:	0e 94 30 04 	call	0x860	; 0x860 <Lcd4_Set_Cursor>
		break;
     4d2:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     4d4:	84 2f       	mov	r24, r20
     4d6:	0e 94 4b 05 	call	0xa96	; 0xa96 <lcd_gotoxy>
		break;
     4da:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     4dc:	8d e2       	ldi	r24, 0x2D	; 45
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     4e4:	08 95       	ret

000004e6 <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <Lcd_Printc+0x6>
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     4f4:	be 01       	movw	r22, r28
     4f6:	6f 5f       	subi	r22, 0xFF	; 255
     4f8:	7f 4f       	sbci	r23, 0xFF	; 255
     4fa:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd_Prints>
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     508:	67 2b       	or	r22, r23
     50a:	09 f0       	breq	.+2      	; 0x50e <pinChange+0x6>
     50c:	9f c0       	rjmp	.+318    	; 0x64c <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	11 f4       	brne	.+4      	; 0x516 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     512:	d8 98       	cbi	0x1b, 0	; 27
     514:	08 95       	ret
		else if(a == eS_PORTA1)
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	91 05       	cpc	r25, r1
     51a:	11 f4       	brne	.+4      	; 0x520 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     51c:	d9 98       	cbi	0x1b, 1	; 27
     51e:	08 95       	ret
		else if(a == eS_PORTA2)
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	91 05       	cpc	r25, r1
     524:	11 f4       	brne	.+4      	; 0x52a <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     526:	da 98       	cbi	0x1b, 2	; 27
     528:	08 95       	ret
		else if(a == eS_PORTA3)
     52a:	83 30       	cpi	r24, 0x03	; 3
     52c:	91 05       	cpc	r25, r1
     52e:	11 f4       	brne	.+4      	; 0x534 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     530:	db 98       	cbi	0x1b, 3	; 27
     532:	08 95       	ret
		else if(a == eS_PORTA4)
     534:	84 30       	cpi	r24, 0x04	; 4
     536:	91 05       	cpc	r25, r1
     538:	11 f4       	brne	.+4      	; 0x53e <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     53a:	dc 98       	cbi	0x1b, 4	; 27
     53c:	08 95       	ret
		else if(a == eS_PORTA5)
     53e:	85 30       	cpi	r24, 0x05	; 5
     540:	91 05       	cpc	r25, r1
     542:	11 f4       	brne	.+4      	; 0x548 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     544:	dd 98       	cbi	0x1b, 5	; 27
     546:	08 95       	ret
		else if(a == eS_PORTA6)
     548:	86 30       	cpi	r24, 0x06	; 6
     54a:	91 05       	cpc	r25, r1
     54c:	11 f4       	brne	.+4      	; 0x552 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     54e:	de 98       	cbi	0x1b, 6	; 27
     550:	08 95       	ret
		else if(a == eS_PORTA7)
     552:	87 30       	cpi	r24, 0x07	; 7
     554:	91 05       	cpc	r25, r1
     556:	11 f4       	brne	.+4      	; 0x55c <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     558:	df 98       	cbi	0x1b, 7	; 27
     55a:	08 95       	ret
		else if(a == eS_PORTB0)
     55c:	8a 30       	cpi	r24, 0x0A	; 10
     55e:	91 05       	cpc	r25, r1
     560:	11 f4       	brne	.+4      	; 0x566 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     562:	c0 98       	cbi	0x18, 0	; 24
     564:	08 95       	ret
		else if(a == eS_PORTB1)
     566:	8b 30       	cpi	r24, 0x0B	; 11
     568:	91 05       	cpc	r25, r1
     56a:	11 f4       	brne	.+4      	; 0x570 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     56c:	c1 98       	cbi	0x18, 1	; 24
     56e:	08 95       	ret
		else if(a == eS_PORTB2)
     570:	8c 30       	cpi	r24, 0x0C	; 12
     572:	91 05       	cpc	r25, r1
     574:	11 f4       	brne	.+4      	; 0x57a <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     576:	c2 98       	cbi	0x18, 2	; 24
     578:	08 95       	ret
		else if(a == eS_PORTB3)
     57a:	8d 30       	cpi	r24, 0x0D	; 13
     57c:	91 05       	cpc	r25, r1
     57e:	11 f4       	brne	.+4      	; 0x584 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     580:	c3 98       	cbi	0x18, 3	; 24
     582:	08 95       	ret
		else if(a == eS_PORTB4)
     584:	8e 30       	cpi	r24, 0x0E	; 14
     586:	91 05       	cpc	r25, r1
     588:	11 f4       	brne	.+4      	; 0x58e <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     58a:	c4 98       	cbi	0x18, 4	; 24
     58c:	08 95       	ret
		else if(a == eS_PORTB5)
     58e:	8f 30       	cpi	r24, 0x0F	; 15
     590:	91 05       	cpc	r25, r1
     592:	11 f4       	brne	.+4      	; 0x598 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     594:	c5 98       	cbi	0x18, 5	; 24
     596:	08 95       	ret
		else if(a == eS_PORTB6)
     598:	80 31       	cpi	r24, 0x10	; 16
     59a:	91 05       	cpc	r25, r1
     59c:	11 f4       	brne	.+4      	; 0x5a2 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     59e:	c6 98       	cbi	0x18, 6	; 24
     5a0:	08 95       	ret
		else if(a == eS_PORTB7)
     5a2:	81 31       	cpi	r24, 0x11	; 17
     5a4:	91 05       	cpc	r25, r1
     5a6:	11 f4       	brne	.+4      	; 0x5ac <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     5a8:	c7 98       	cbi	0x18, 7	; 24
     5aa:	08 95       	ret
		else if(a == eS_PORTC0)
     5ac:	84 31       	cpi	r24, 0x14	; 20
     5ae:	91 05       	cpc	r25, r1
     5b0:	11 f4       	brne	.+4      	; 0x5b6 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     5b2:	a8 98       	cbi	0x15, 0	; 21
     5b4:	08 95       	ret
		else if(a == eS_PORTC1)
     5b6:	85 31       	cpi	r24, 0x15	; 21
     5b8:	91 05       	cpc	r25, r1
     5ba:	11 f4       	brne	.+4      	; 0x5c0 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     5bc:	a9 98       	cbi	0x15, 1	; 21
     5be:	08 95       	ret
		else if(a == eS_PORTC2)
     5c0:	86 31       	cpi	r24, 0x16	; 22
     5c2:	91 05       	cpc	r25, r1
     5c4:	11 f4       	brne	.+4      	; 0x5ca <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     5c6:	aa 98       	cbi	0x15, 2	; 21
     5c8:	08 95       	ret
		else if(a == eS_PORTC3)
     5ca:	87 31       	cpi	r24, 0x17	; 23
     5cc:	91 05       	cpc	r25, r1
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     5d0:	ab 98       	cbi	0x15, 3	; 21
     5d2:	08 95       	ret
		else if(a == eS_PORTC4)
     5d4:	88 31       	cpi	r24, 0x18	; 24
     5d6:	91 05       	cpc	r25, r1
     5d8:	11 f4       	brne	.+4      	; 0x5de <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     5da:	ac 98       	cbi	0x15, 4	; 21
     5dc:	08 95       	ret
		else if(a == eS_PORTC5)
     5de:	89 31       	cpi	r24, 0x19	; 25
     5e0:	91 05       	cpc	r25, r1
     5e2:	11 f4       	brne	.+4      	; 0x5e8 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     5e4:	ad 98       	cbi	0x15, 5	; 21
     5e6:	08 95       	ret
		else if(a == eS_PORTC6)
     5e8:	8a 31       	cpi	r24, 0x1A	; 26
     5ea:	91 05       	cpc	r25, r1
     5ec:	11 f4       	brne	.+4      	; 0x5f2 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     5ee:	ae 98       	cbi	0x15, 6	; 21
     5f0:	08 95       	ret
		else if(a == eS_PORTC7)
     5f2:	8b 31       	cpi	r24, 0x1B	; 27
     5f4:	91 05       	cpc	r25, r1
     5f6:	11 f4       	brne	.+4      	; 0x5fc <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     5f8:	af 98       	cbi	0x15, 7	; 21
     5fa:	08 95       	ret
		else if(a == eS_PORTD0)
     5fc:	8e 31       	cpi	r24, 0x1E	; 30
     5fe:	91 05       	cpc	r25, r1
     600:	11 f4       	brne	.+4      	; 0x606 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     602:	90 98       	cbi	0x12, 0	; 18
     604:	08 95       	ret
		else if(a == eS_PORTD1)
     606:	8f 31       	cpi	r24, 0x1F	; 31
     608:	91 05       	cpc	r25, r1
     60a:	11 f4       	brne	.+4      	; 0x610 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     60c:	91 98       	cbi	0x12, 1	; 18
     60e:	08 95       	ret
		else if(a == eS_PORTD2)
     610:	80 32       	cpi	r24, 0x20	; 32
     612:	91 05       	cpc	r25, r1
     614:	11 f4       	brne	.+4      	; 0x61a <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     616:	92 98       	cbi	0x12, 2	; 18
     618:	08 95       	ret
		else if(a == eS_PORTD3)
     61a:	81 32       	cpi	r24, 0x21	; 33
     61c:	91 05       	cpc	r25, r1
     61e:	11 f4       	brne	.+4      	; 0x624 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     620:	93 98       	cbi	0x12, 3	; 18
     622:	08 95       	ret
		else if(a == eS_PORTD4)
     624:	82 32       	cpi	r24, 0x22	; 34
     626:	91 05       	cpc	r25, r1
     628:	11 f4       	brne	.+4      	; 0x62e <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     62a:	94 98       	cbi	0x12, 4	; 18
     62c:	08 95       	ret
		else if(a == eS_PORTD5)
     62e:	83 32       	cpi	r24, 0x23	; 35
     630:	91 05       	cpc	r25, r1
     632:	11 f4       	brne	.+4      	; 0x638 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     634:	95 98       	cbi	0x12, 5	; 18
     636:	08 95       	ret
		else if(a == eS_PORTD6)
     638:	84 32       	cpi	r24, 0x24	; 36
     63a:	91 05       	cpc	r25, r1
     63c:	11 f4       	brne	.+4      	; 0x642 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     63e:	96 98       	cbi	0x12, 6	; 18
     640:	08 95       	ret
		else if(a == eS_PORTD7)
     642:	85 97       	sbiw	r24, 0x25	; 37
     644:	09 f0       	breq	.+2      	; 0x648 <pinChange+0x140>
     646:	9f c0       	rjmp	.+318    	; 0x786 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     648:	97 98       	cbi	0x12, 7	; 18
     64a:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	11 f4       	brne	.+4      	; 0x654 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     650:	d8 9a       	sbi	0x1b, 0	; 27
     652:	08 95       	ret
		else if(a == eS_PORTA1)
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	91 05       	cpc	r25, r1
     658:	11 f4       	brne	.+4      	; 0x65e <pinChange+0x156>
		PORTA |= (1<<PA1);
     65a:	d9 9a       	sbi	0x1b, 1	; 27
     65c:	08 95       	ret
		else if(a == eS_PORTA2)
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	91 05       	cpc	r25, r1
     662:	11 f4       	brne	.+4      	; 0x668 <pinChange+0x160>
		PORTA |= (1<<PA2);
     664:	da 9a       	sbi	0x1b, 2	; 27
     666:	08 95       	ret
		else if(a == eS_PORTA3)
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	91 05       	cpc	r25, r1
     66c:	11 f4       	brne	.+4      	; 0x672 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     66e:	db 9a       	sbi	0x1b, 3	; 27
     670:	08 95       	ret
		else if(a == eS_PORTA4)
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	91 05       	cpc	r25, r1
     676:	11 f4       	brne	.+4      	; 0x67c <pinChange+0x174>
		PORTA |= (1<<PA4);
     678:	dc 9a       	sbi	0x1b, 4	; 27
     67a:	08 95       	ret
		else if(a == eS_PORTA5)
     67c:	85 30       	cpi	r24, 0x05	; 5
     67e:	91 05       	cpc	r25, r1
     680:	11 f4       	brne	.+4      	; 0x686 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     682:	dd 9a       	sbi	0x1b, 5	; 27
     684:	08 95       	ret
		else if(a == eS_PORTA6)
     686:	86 30       	cpi	r24, 0x06	; 6
     688:	91 05       	cpc	r25, r1
     68a:	11 f4       	brne	.+4      	; 0x690 <pinChange+0x188>
		PORTA |= (1<<PA6);
     68c:	de 9a       	sbi	0x1b, 6	; 27
     68e:	08 95       	ret
		else if(a == eS_PORTA7)
     690:	87 30       	cpi	r24, 0x07	; 7
     692:	91 05       	cpc	r25, r1
     694:	11 f4       	brne	.+4      	; 0x69a <pinChange+0x192>
		PORTA |= (1<<PA7);
     696:	df 9a       	sbi	0x1b, 7	; 27
     698:	08 95       	ret
		else if(a == eS_PORTB0)
     69a:	8a 30       	cpi	r24, 0x0A	; 10
     69c:	91 05       	cpc	r25, r1
     69e:	11 f4       	brne	.+4      	; 0x6a4 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     6a0:	c0 9a       	sbi	0x18, 0	; 24
     6a2:	08 95       	ret
		else if(a == eS_PORTB1)
     6a4:	8b 30       	cpi	r24, 0x0B	; 11
     6a6:	91 05       	cpc	r25, r1
     6a8:	11 f4       	brne	.+4      	; 0x6ae <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     6aa:	c1 9a       	sbi	0x18, 1	; 24
     6ac:	08 95       	ret
		else if(a == eS_PORTB2)
     6ae:	8c 30       	cpi	r24, 0x0C	; 12
     6b0:	91 05       	cpc	r25, r1
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     6b4:	c2 9a       	sbi	0x18, 2	; 24
     6b6:	08 95       	ret
		else if(a == eS_PORTB3)
     6b8:	8d 30       	cpi	r24, 0x0D	; 13
     6ba:	91 05       	cpc	r25, r1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     6be:	c3 9a       	sbi	0x18, 3	; 24
     6c0:	08 95       	ret
		else if(a == eS_PORTB4)
     6c2:	8e 30       	cpi	r24, 0x0E	; 14
     6c4:	91 05       	cpc	r25, r1
     6c6:	11 f4       	brne	.+4      	; 0x6cc <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     6c8:	c4 9a       	sbi	0x18, 4	; 24
     6ca:	08 95       	ret
		else if(a == eS_PORTB5)
     6cc:	8f 30       	cpi	r24, 0x0F	; 15
     6ce:	91 05       	cpc	r25, r1
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     6d2:	c5 9a       	sbi	0x18, 5	; 24
     6d4:	08 95       	ret
		else if(a == eS_PORTB6)
     6d6:	80 31       	cpi	r24, 0x10	; 16
     6d8:	91 05       	cpc	r25, r1
     6da:	11 f4       	brne	.+4      	; 0x6e0 <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     6dc:	c6 9a       	sbi	0x18, 6	; 24
     6de:	08 95       	ret
		else if(a == eS_PORTB7)
     6e0:	81 31       	cpi	r24, 0x11	; 17
     6e2:	91 05       	cpc	r25, r1
     6e4:	11 f4       	brne	.+4      	; 0x6ea <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     6e6:	c7 9a       	sbi	0x18, 7	; 24
     6e8:	08 95       	ret
		else if(a == eS_PORTC0)
     6ea:	84 31       	cpi	r24, 0x14	; 20
     6ec:	91 05       	cpc	r25, r1
     6ee:	11 f4       	brne	.+4      	; 0x6f4 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     6f0:	a8 9a       	sbi	0x15, 0	; 21
     6f2:	08 95       	ret
		else if(a == eS_PORTC1)
     6f4:	85 31       	cpi	r24, 0x15	; 21
     6f6:	91 05       	cpc	r25, r1
     6f8:	11 f4       	brne	.+4      	; 0x6fe <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     6fa:	a9 9a       	sbi	0x15, 1	; 21
     6fc:	08 95       	ret
		else if(a == eS_PORTC2)
     6fe:	86 31       	cpi	r24, 0x16	; 22
     700:	91 05       	cpc	r25, r1
     702:	11 f4       	brne	.+4      	; 0x708 <pinChange+0x200>
		PORTC |= (1<<PC2);
     704:	aa 9a       	sbi	0x15, 2	; 21
     706:	08 95       	ret
		else if(a == eS_PORTC3)
     708:	87 31       	cpi	r24, 0x17	; 23
     70a:	91 05       	cpc	r25, r1
     70c:	11 f4       	brne	.+4      	; 0x712 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     70e:	ab 9a       	sbi	0x15, 3	; 21
     710:	08 95       	ret
		else if(a == eS_PORTC4)
     712:	88 31       	cpi	r24, 0x18	; 24
     714:	91 05       	cpc	r25, r1
     716:	11 f4       	brne	.+4      	; 0x71c <pinChange+0x214>
		PORTC |= (1<<PC4);
     718:	ac 9a       	sbi	0x15, 4	; 21
     71a:	08 95       	ret
		else if(a == eS_PORTC5)
     71c:	89 31       	cpi	r24, 0x19	; 25
     71e:	91 05       	cpc	r25, r1
     720:	11 f4       	brne	.+4      	; 0x726 <pinChange+0x21e>
		PORTC |= (1<<PC5);
     722:	ad 9a       	sbi	0x15, 5	; 21
     724:	08 95       	ret
		else if(a == eS_PORTC6)
     726:	8a 31       	cpi	r24, 0x1A	; 26
     728:	91 05       	cpc	r25, r1
     72a:	11 f4       	brne	.+4      	; 0x730 <pinChange+0x228>
		PORTC |= (1<<PC6);
     72c:	ae 9a       	sbi	0x15, 6	; 21
     72e:	08 95       	ret
		else if(a == eS_PORTC7)
     730:	8b 31       	cpi	r24, 0x1B	; 27
     732:	91 05       	cpc	r25, r1
     734:	11 f4       	brne	.+4      	; 0x73a <pinChange+0x232>
		PORTC |= (1<<PC7);
     736:	af 9a       	sbi	0x15, 7	; 21
     738:	08 95       	ret
		else if(a == eS_PORTD0)
     73a:	8e 31       	cpi	r24, 0x1E	; 30
     73c:	91 05       	cpc	r25, r1
     73e:	11 f4       	brne	.+4      	; 0x744 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     740:	90 9a       	sbi	0x12, 0	; 18
     742:	08 95       	ret
		else if(a == eS_PORTD1)
     744:	8f 31       	cpi	r24, 0x1F	; 31
     746:	91 05       	cpc	r25, r1
     748:	11 f4       	brne	.+4      	; 0x74e <pinChange+0x246>
		PORTD |= (1<<PD1);
     74a:	91 9a       	sbi	0x12, 1	; 18
     74c:	08 95       	ret
		else if(a == eS_PORTD2)
     74e:	80 32       	cpi	r24, 0x20	; 32
     750:	91 05       	cpc	r25, r1
     752:	11 f4       	brne	.+4      	; 0x758 <pinChange+0x250>
		PORTD |= (1<<PD2);
     754:	92 9a       	sbi	0x12, 2	; 18
     756:	08 95       	ret
		else if(a == eS_PORTD3)
     758:	81 32       	cpi	r24, 0x21	; 33
     75a:	91 05       	cpc	r25, r1
     75c:	11 f4       	brne	.+4      	; 0x762 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     75e:	93 9a       	sbi	0x12, 3	; 18
     760:	08 95       	ret
		else if(a == eS_PORTD4)
     762:	82 32       	cpi	r24, 0x22	; 34
     764:	91 05       	cpc	r25, r1
     766:	11 f4       	brne	.+4      	; 0x76c <pinChange+0x264>
		PORTD |= (1<<PD4);
     768:	94 9a       	sbi	0x12, 4	; 18
     76a:	08 95       	ret
		else if(a == eS_PORTD5)
     76c:	83 32       	cpi	r24, 0x23	; 35
     76e:	91 05       	cpc	r25, r1
     770:	11 f4       	brne	.+4      	; 0x776 <pinChange+0x26e>
		PORTD |= (1<<PD5);
     772:	95 9a       	sbi	0x12, 5	; 18
     774:	08 95       	ret
		else if(a == eS_PORTD6)
     776:	84 32       	cpi	r24, 0x24	; 36
     778:	91 05       	cpc	r25, r1
     77a:	11 f4       	brne	.+4      	; 0x780 <pinChange+0x278>
		PORTD |= (1<<PD6);
     77c:	96 9a       	sbi	0x12, 6	; 18
     77e:	08 95       	ret
		else if(a == eS_PORTD7)
     780:	85 97       	sbiw	r24, 0x25	; 37
     782:	09 f4       	brne	.+2      	; 0x786 <pinChange+0x27e>
		PORTD |= (1<<PD7);
     784:	97 9a       	sbi	0x12, 7	; 18
     786:	08 95       	ret

00000788 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     788:	cf 93       	push	r28
     78a:	c8 2f       	mov	r28, r24
	if(a & 1)
     78c:	80 ff       	sbrs	r24, 0
     78e:	07 c0       	rjmp	.+14     	; 0x79e <Lcd4_Port+0x16>
	pinChange(D4,1);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	83 e2       	ldi	r24, 0x23	; 35
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     79c:	06 c0       	rjmp	.+12     	; 0x7aa <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	83 e2       	ldi	r24, 0x23	; 35
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
	
	if(a & 2)
     7aa:	c1 ff       	sbrs	r28, 1
     7ac:	07 c0       	rjmp	.+14     	; 0x7bc <Lcd4_Port+0x34>
	pinChange(D5,1);
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	82 e2       	ldi	r24, 0x22	; 34
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	82 e2       	ldi	r24, 0x22	; 34
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
	
	if(a & 4)
     7c8:	c2 ff       	sbrs	r28, 2
     7ca:	07 c0       	rjmp	.+14     	; 0x7da <Lcd4_Port+0x52>
	pinChange(D6,1);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	81 e2       	ldi	r24, 0x21	; 33
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	81 e2       	ldi	r24, 0x21	; 33
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
	
	if(a & 8)
     7e6:	c3 ff       	sbrs	r28, 3
     7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <Lcd4_Port+0x70>
	pinChange(D7,1);
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e2       	ldi	r24, 0x20	; 32
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     7f6:	06 c0       	rjmp	.+12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	else
	pinChange(D7,0);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 e2       	ldi	r24, 0x20	; 32
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
}
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     808:	cf 93       	push	r28
     80a:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	85 e2       	ldi	r24, 0x25	; 37
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
	Lcd4_Port(a);
     818:	8c 2f       	mov	r24, r28
     81a:	0e 94 c4 03 	call	0x788	; 0x788 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	84 e2       	ldi	r24, 0x24	; 36
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     82a:	89 ef       	ldi	r24, 0xF9	; 249
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <Lcd4_Cmd+0x26>
     832:	00 c0       	rjmp	.+0      	; 0x834 <Lcd4_Cmd+0x2c>
     834:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	84 e2       	ldi	r24, 0x24	; 36
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     842:	89 ef       	ldi	r24, 0xF9	; 249
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <Lcd4_Cmd+0x3e>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <Lcd4_Cmd+0x44>
     84c:	00 00       	nop
	_delay_ms(1);
}
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
     85e:	08 95       	ret

00000860 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     860:	cf 93       	push	r28
     862:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     864:	81 11       	cpse	r24, r1
     866:	0b c0       	rjmp	.+22     	; 0x87e <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	86 0f       	add	r24, r22
     86c:	82 95       	swap	r24
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     874:	8c 2f       	mov	r24, r28
     876:	8f 70       	andi	r24, 0x0F	; 15
     878:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
     87c:	0c c0       	rjmp	.+24     	; 0x896 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	51 f4       	brne	.+20     	; 0x896 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     882:	80 ec       	ldi	r24, 0xC0	; 192
     884:	86 0f       	add	r24, r22
     886:	82 95       	swap	r24
     888:	8f 70       	andi	r24, 0x0F	; 15
     88a:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     88e:	8c 2f       	mov	r24, r28
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	}
}
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 c4 03 	call	0x788	; 0x788 <Lcd4_Port>
     8a0:	87 e8       	ldi	r24, 0x87	; 135
     8a2:	93 e1       	ldi	r25, 0x13	; 19
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <Lcd4_Init+0xa>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <Lcd4_Init+0x10>
     8aa:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
     8b2:	81 ee       	ldi	r24, 0xE1	; 225
     8b4:	94 e0       	ldi	r25, 0x04	; 4
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <Lcd4_Init+0x1c>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <Lcd4_Init+0x22>
     8bc:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
     8c4:	8d eb       	ldi	r24, 0xBD	; 189
     8c6:	9a e0       	ldi	r25, 0x0A	; 10
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <Lcd4_Init+0x2e>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <Lcd4_Init+0x34>
     8ce:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     8ee:	8c e0       	ldi	r24, 0x0C	; 12
     8f0:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	0e 94 04 04 	call	0x808	; 0x808 <Lcd4_Cmd>
	Lcd4_Clear();
     900:	0e 94 29 04 	call	0x852	; 0x852 <Lcd4_Clear>
     904:	08 95       	ret

00000906 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     906:	cf 93       	push	r28
     908:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	85 e2       	ldi	r24, 0x25	; 37
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     916:	8c 2f       	mov	r24, r28
     918:	82 95       	swap	r24
     91a:	8f 70       	andi	r24, 0x0F	; 15
     91c:	0e 94 c4 03 	call	0x788	; 0x788 <Lcd4_Port>
	pinChange(EN,1);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	84 e2       	ldi	r24, 0x24	; 36
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     92c:	89 ef       	ldi	r24, 0xF9	; 249
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <Lcd4_Write_Char+0x2a>
     934:	00 c0       	rjmp	.+0      	; 0x936 <Lcd4_Write_Char+0x30>
     936:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	84 e2       	ldi	r24, 0x24	; 36
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     944:	89 ef       	ldi	r24, 0xF9	; 249
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <Lcd4_Write_Char+0x42>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <Lcd4_Write_Char+0x48>
     94e:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     950:	8c 2f       	mov	r24, r28
     952:	8f 70       	andi	r24, 0x0F	; 15
     954:	0e 94 c4 03 	call	0x788	; 0x788 <Lcd4_Port>
	pinChange(EN,1);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	84 e2       	ldi	r24, 0x24	; 36
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     964:	89 ef       	ldi	r24, 0xF9	; 249
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <Lcd4_Write_Char+0x62>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <Lcd4_Write_Char+0x68>
     96e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	84 e2       	ldi	r24, 0x24	; 36
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 84 02 	call	0x508	; 0x508 <pinChange>
     97c:	89 ef       	ldi	r24, 0xF9	; 249
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <Lcd4_Write_Char+0x7a>
     984:	00 c0       	rjmp	.+0      	; 0x986 <Lcd4_Write_Char+0x80>
     986:	00 00       	nop
	_delay_ms(1);
}
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     992:	88 81       	ld	r24, Y
     994:	88 23       	and	r24, r24
     996:	31 f0       	breq	.+12     	; 0x9a4 <Lcd4_Write_String+0x18>
     998:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     99a:	0e 94 83 04 	call	0x906	; 0x906 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     99e:	89 91       	ld	r24, Y+
     9a0:	81 11       	cpse	r24, r1
     9a2:	fb cf       	rjmp	.-10     	; 0x99a <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	7b 01       	movw	r14, r22
     9b8:	14 2f       	mov	r17, r20
     9ba:	88 0f       	add	r24, r24
     9bc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <i2c_start>
     9c0:	81 11       	cpse	r24, r1
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <I2C_WRITESEQ+0x3e>
     9c4:	11 23       	and	r17, r17
     9c6:	91 f0       	breq	.+36     	; 0x9ec <I2C_WRITESEQ+0x42>
     9c8:	e7 01       	movw	r28, r14
     9ca:	11 50       	subi	r17, 0x01	; 1
     9cc:	01 2f       	mov	r16, r17
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	0f 5f       	subi	r16, 0xFF	; 255
     9d2:	1f 4f       	sbci	r17, 0xFF	; 255
     9d4:	0e 0d       	add	r16, r14
     9d6:	1f 1d       	adc	r17, r15
     9d8:	89 91       	ld	r24, Y+
     9da:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <i2c_write>
     9de:	c0 17       	cp	r28, r16
     9e0:	d1 07       	cpc	r29, r17
     9e2:	d1 f7       	brne	.-12     	; 0x9d8 <I2C_WRITESEQ+0x2e>
     9e4:	c0 e0       	ldi	r28, 0x00	; 0
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <I2C_WRITESEQ+0x44>
     9e8:	c1 e0       	ldi	r28, 0x01	; 1
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <I2C_WRITESEQ+0x44>
     9ec:	c0 e0       	ldi	r28, 0x00	; 0
     9ee:	0e 94 f3 06 	call	0xde6	; 0xde6 <i2c_stop>
     9f2:	8c 2f       	mov	r24, r28
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	08 95       	ret

00000a02 <wr_lcd_mode>:
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <wr_lcd_mode+0xa>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <wr_lcd_mode+0xc>
     a0e:	1f 92       	push	r1
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	08 2f       	mov	r16, r24
     a16:	68 30       	cpi	r22, 0x08	; 8
     a18:	71 f4       	brne	.+28     	; 0xa36 <wr_lcd_mode+0x34>
     a1a:	81 11       	cpse	r24, r1
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <wr_lcd_mode+0x20>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <wr_lcd_mode+0x22>
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	60 e6       	ldi	r22, 0x60	; 96
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	87 e2       	ldi	r24, 0x27	; 39
     a30:	0e 94 d5 04 	call	0x9aa	; 0x9aa <I2C_WRITESEQ>
     a34:	26 c0       	rjmp	.+76     	; 0xa82 <wr_lcd_mode+0x80>
     a36:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a3a:	16 2f       	mov	r17, r22
     a3c:	18 2b       	or	r17, r24
     a3e:	19 83       	std	Y+1, r17	; 0x01
     a40:	80 2f       	mov	r24, r16
     a42:	80 7f       	andi	r24, 0xF0	; 240
     a44:	84 60       	ori	r24, 0x04	; 4
     a46:	81 2b       	or	r24, r17
     a48:	8a 83       	std	Y+2, r24	; 0x02
     a4a:	8b 7f       	andi	r24, 0xFB	; 251
     a4c:	8b 83       	std	Y+3, r24	; 0x03
     a4e:	20 e1       	ldi	r18, 0x10	; 16
     a50:	02 9f       	mul	r16, r18
     a52:	c0 01       	movw	r24, r0
     a54:	11 24       	eor	r1, r1
     a56:	81 2b       	or	r24, r17
     a58:	84 60       	ori	r24, 0x04	; 4
     a5a:	8c 83       	std	Y+4, r24	; 0x04
     a5c:	8b 7f       	andi	r24, 0xFB	; 251
     a5e:	8d 83       	std	Y+5, r24	; 0x05
     a60:	45 e0       	ldi	r20, 0x05	; 5
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	87 e2       	ldi	r24, 0x27	; 39
     a6a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <I2C_WRITESEQ>
     a6e:	10 fd       	sbrc	r17, 0
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <wr_lcd_mode+0x80>
     a72:	03 30       	cpi	r16, 0x03	; 3
     a74:	30 f4       	brcc	.+12     	; 0xa82 <wr_lcd_mode+0x80>
     a76:	e3 ef       	ldi	r30, 0xF3	; 243
     a78:	f1 e0       	ldi	r31, 0x01	; 1
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <wr_lcd_mode+0x78>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <wr_lcd_mode+0x7e>
     a80:	00 00       	nop
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <lcd_gotoxy>:
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	d8 2f       	mov	r29, r24
     a9c:	c6 2f       	mov	r28, r22
     a9e:	e6 2f       	mov	r30, r22
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	ef 59       	subi	r30, 0x9F	; 159
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	98 2f       	mov	r25, r24
     aa8:	90 68       	ori	r25, 0x80	; 128
     aaa:	80 81       	ld	r24, Z
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	89 2b       	or	r24, r25
     ab0:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
     ab4:	d0 93 bc 01 	sts	0x01BC, r29	; 0x8001bc <_lcd_x>
     ab8:	c0 93 bd 01 	sts	0x01BD, r28	; 0x8001bd <_lcd_y>
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <lcd_clrscr>:
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
     aca:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <_lcd_y>
     ace:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_lcd_x>
     ad2:	08 95       	ret

00000ad4 <lcd_putc>:
     ad4:	cf 93       	push	r28
     ad6:	c8 2f       	mov	r28, r24
     ad8:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_lcd_x>
     adc:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_lcd_maxx>
     ae0:	98 17       	cp	r25, r24
     ae2:	18 f4       	brcc	.+6      	; 0xaea <lcd_putc+0x16>
     ae4:	ca 30       	cpi	r28, 0x0A	; 10
     ae6:	59 f4       	brne	.+22     	; 0xafe <lcd_putc+0x2a>
     ae8:	14 c0       	rjmp	.+40     	; 0xb12 <lcd_putc+0x3e>
     aea:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <_lcd_y>
     aee:	6f 5f       	subi	r22, 0xFF	; 255
     af0:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <_lcd_y>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 4b 05 	call	0xa96	; 0xa96 <lcd_gotoxy>
     afa:	ca 30       	cpi	r28, 0x0A	; 10
     afc:	91 f0       	breq	.+36     	; 0xb22 <lcd_putc+0x4e>
     afe:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_lcd_x>
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_lcd_x>
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	8c 2f       	mov	r24, r28
     b0c:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <lcd_putc+0x4e>
     b12:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <_lcd_y>
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <_lcd_y>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 4b 05 	call	0xa96	; 0xa96 <lcd_gotoxy>
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <lcd_puts>:
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
     b2c:	88 81       	ld	r24, Y
     b2e:	88 23       	and	r24, r24
     b30:	31 f0       	breq	.+12     	; 0xb3e <lcd_puts+0x18>
     b32:	21 96       	adiw	r28, 0x01	; 1
     b34:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_putc>
     b38:	89 91       	ld	r24, Y+
     b3a:	81 11       	cpse	r24, r1
     b3c:	fb cf       	rjmp	.-10     	; 0xb34 <lcd_puts+0xe>
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <lcd_init+0xa>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <lcd_init+0xc>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <lcd_init+0xe>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     b58:	80 e3       	ldi	r24, 0x30	; 48
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	94 e3       	ldi	r25, 0x34	; 52
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	8c 83       	std	Y+4, r24	; 0x04
     b66:	94 e2       	ldi	r25, 0x24	; 36
     b68:	9d 83       	std	Y+5, r25	; 0x05
     b6a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     b6c:	80 e1       	ldi	r24, 0x10	; 16
     b6e:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     b72:	e1 e6       	ldi	r30, 0x61	; 97
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 5f       	subi	r24, 0xF0	; 240
     b7a:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     b7c:	81 81       	ldd	r24, Z+1	; 0x01
     b7e:	80 5f       	subi	r24, 0xF0	; 240
     b80:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     b82:	bd 9a       	sbi	0x17, 5	; 23
     b84:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
     b86:	0e 94 d1 06 	call	0xda2	; 0xda2 <i2c_init>
     b8a:	8b e4       	ldi	r24, 0x4B	; 75
     b8c:	9d e1       	ldi	r25, 0x1D	; 29
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <lcd_init+0x4a>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <lcd_init+0x50>
     b94:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     b96:	43 e0       	ldi	r20, 0x03	; 3
     b98:	be 01       	movw	r22, r28
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	87 e2       	ldi	r24, 0x27	; 39
     ba0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <I2C_WRITESEQ>
     ba4:	18 2f       	mov	r17, r24
     ba6:	81 ee       	ldi	r24, 0xE1	; 225
     ba8:	94 e0       	ldi	r25, 0x04	; 4
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <lcd_init+0x66>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <lcd_init+0x6c>
     bb0:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     bb2:	43 e0       	ldi	r20, 0x03	; 3
     bb4:	be 01       	movw	r22, r28
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	87 e2       	ldi	r24, 0x27	; 39
     bbc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <I2C_WRITESEQ>
     bc0:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     bc2:	43 e0       	ldi	r20, 0x03	; 3
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	87 e2       	ldi	r24, 0x27	; 39
     bcc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <I2C_WRITESEQ>
     bd0:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     bd2:	43 e0       	ldi	r20, 0x03	; 3
     bd4:	be 01       	movw	r22, r28
     bd6:	6c 5f       	subi	r22, 0xFC	; 252
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	87 e2       	ldi	r24, 0x27	; 39
     bdc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <I2C_WRITESEQ>
     be0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	88 e2       	ldi	r24, 0x28	; 40
     be6:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
     bea:	81 2b       	or	r24, r17
     bec:	09 f0       	breq	.+2      	; 0xbf0 <lcd_init+0xac>
     bee:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	8c e0       	ldi	r24, 0x0C	; 12
     bf4:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	86 e0       	ldi	r24, 0x06	; 6
     bfc:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	80 2f       	mov	r24, r16
     c0c:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
}
     c10:	26 96       	adiw	r28, 0x06	; 6
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     c26:	68 e0       	ldi	r22, 0x08	; 8
     c28:	0e 94 01 05 	call	0xa02	; 0xa02 <wr_lcd_mode>
     c2c:	08 95       	ret

00000c2e <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
     c2e:	0e 94 b7 00 	call	0x16e	; 0x16e <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
     c32:	81 e5       	ldi	r24, 0x51	; 81
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0e 94 0f 02 	call	0x41e	; 0x41e <Lcd_Init>
	Lcd_Init(LCDNOTICE);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 0f 02 	call	0x41e	; 0x41e <Lcd_Init>
	
	States_GotoState(IDLE);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	0e 94 bc 06 	call	0xd78	; 0xd78 <States_GotoState>
	Keypad_Init();
     c4c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
     c50:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Keypad_KeyPressed>
     c54:	88 23       	and	r24, r24
     c56:	e1 f3       	breq	.-8      	; 0xc50 <main+0x22>
		{
			int_fast8_t x = Keypad_GetKey();
     c58:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Keypad_GetKey>
     c5c:	ef e4       	ldi	r30, 0x4F	; 79
     c5e:	f3 ec       	ldi	r31, 0xC3	; 195
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <main+0x32>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <main+0x38>
     c66:	00 00       	nop
			_delay_ms(200);
			KeyProcessor_ProcessKey(x);
     c68:	0e 94 fd 01 	call	0x3fa	; 0x3fa <KeyProcessor_ProcessKey>
			Keypad_Init();
     c6c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
     c70:	ef cf       	rjmp	.-34     	; 0xc50 <main+0x22>

00000c72 <UpdateKeyMode>:
//

#include "../../all.h"

void UpdateKeyMode()
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     c76:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_GetMode>
     c7a:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     c7c:	fc 01       	movw	r30, r24
     c7e:	01 90       	ld	r0, Z+
     c80:	00 20       	and	r0, r0
     c82:	e9 f7       	brne	.-6      	; 0xc7e <UpdateKeyMode+0xc>
     c84:	ac 01       	movw	r20, r24
     c86:	4e 1b       	sub	r20, r30
     c88:	5f 0b       	sbc	r21, r31
     c8a:	4f 5e       	subi	r20, 0xEF	; 239
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     c98:	be 01       	movw	r22, r28
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd_Prints>
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <EnteringName_Init>:
void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 3d 02 	call	0x47a	; 0x47a <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
     cba:	6d e5       	ldi	r22, 0x5D	; 93
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd_Prints>
	UpdateKeyMode();
     cc4:	0e 94 39 06 	call	0xc72	; 0xc72 <UpdateKeyMode>
     cc8:	08 95       	ret

00000cca <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
	if(key == 31)
	{
		// nxt
	}
	else if(key == 30)
     cd2:	92 ee       	ldi	r25, 0xE2	; 226
     cd4:	98 0f       	add	r25, r24
     cd6:	92 30       	cpi	r25, 0x02	; 2
     cd8:	50 f1       	brcs	.+84     	; 0xd2e <EnteringName_ProcessKey+0x64>
	{
		
	}
	else 
	{
		Keypad_AddKey(key);
     cda:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd_Position>
		int sz = strlen(keyBuffer);
     cec:	ea ea       	ldi	r30, 0xAA	; 170
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	01 90       	ld	r0, Z+
     cf2:	00 20       	and	r0, r0
     cf4:	e9 f7       	brne	.-6      	; 0xcf0 <EnteringName_ProcessKey+0x26>
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	8f 01       	movw	r16, r30
     cfa:	0a 5a       	subi	r16, 0xAA	; 170
     cfc:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     cfe:	6a ea       	ldi	r22, 0xAA	; 170
     d00:	71 e0       	ldi	r23, 0x01	; 1
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     d08:	cf e0       	ldi	r28, 0x0F	; 15
     d0a:	d0 e0       	ldi	r29, 0x00	; 0
     d0c:	c0 1b       	sub	r28, r16
     d0e:	d1 0b       	sbc	r29, r17
     d10:	00 31       	cpi	r16, 0x10	; 16
     d12:	11 05       	cpc	r17, r1
     d14:	31 f0       	breq	.+12     	; 0xd22 <EnteringName_ProcessKey+0x58>
			Lcd_Printc(LCDKEYPAD,' ');
     d16:	60 e2       	ldi	r22, 0x20	; 32
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     d1e:	21 97       	sbiw	r28, 0x01	; 1
     d20:	d0 f7       	brcc	.-12     	; 0xd16 <EnteringName_ProcessKey+0x4c>
			Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     d22:	8a ea       	ldi	r24, 0xAA	; 170
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		UpdateKeyMode();
     d2a:	0e 94 39 06 	call	0xc72	; 0xc72 <UpdateKeyMode>
	}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 bc 06 	call	0xd78	; 0xd78 <States_GotoState>
     d3e:	08 95       	ret

00000d40 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0e 94 3d 02 	call	0x47a	; 0x47a <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome to xyz");
     d54:	69 e6       	ldi	r22, 0x69	; 105
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1.New Serial");
     d6c:	68 e7       	ldi	r22, 0x78	; 120
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd_Prints>
     d76:	08 95       	ret

00000d78 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
     d78:	cf 93       	push	r28
     d7a:	c8 2f       	mov	r28, r24
	switch(newState)
     d7c:	88 23       	and	r24, r24
     d7e:	19 f0       	breq	.+6      	; 0xd86 <States_GotoState+0xe>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	21 f0       	breq	.+8      	; 0xd8c <States_GotoState+0x14>
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <States_GotoState+0x1a>
	{
		case IDLE:
			Idle_Init();
     d86:	0e 94 a0 06 	call	0xd40	; 0xd40 <Idle_Init>
			break;
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <States_GotoState+0x22>
		case ENTERING_NAME:
			EnteringName_Init();
     d8c:	0e 94 53 06 	call	0xca6	; 0xca6 <EnteringName_Init>
			break;
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <States_GotoState+0x22>
		default:
			Error_Error("GotoState: newState not defined");
     d92:	85 e8       	ldi	r24, 0x85	; 133
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	}
	currentState = newState;
     d9a:	c0 93 be 01 	sts	0x01BE, r28	; 0x8001be <currentState>
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     da2:	11 b8       	out	0x01, r1	; 1
     da4:	8c e0       	ldi	r24, 0x0C	; 12
     da6:	80 b9       	out	0x00, r24	; 0
     da8:	08 95       	ret

00000daa <i2c_start>:
     daa:	94 ea       	ldi	r25, 0xA4	; 164
     dac:	96 bf       	out	0x36, r25	; 54
     dae:	06 b6       	in	r0, 0x36	; 54
     db0:	07 fe       	sbrs	r0, 7
     db2:	fd cf       	rjmp	.-6      	; 0xdae <i2c_start+0x4>
     db4:	91 b1       	in	r25, 0x01	; 1
     db6:	98 7f       	andi	r25, 0xF8	; 248
     db8:	98 30       	cpi	r25, 0x08	; 8
     dba:	11 f0       	breq	.+4      	; 0xdc0 <i2c_start+0x16>
     dbc:	90 31       	cpi	r25, 0x10	; 16
     dbe:	79 f4       	brne	.+30     	; 0xdde <i2c_start+0x34>
     dc0:	83 b9       	out	0x03, r24	; 3
     dc2:	84 e8       	ldi	r24, 0x84	; 132
     dc4:	86 bf       	out	0x36, r24	; 54
     dc6:	06 b6       	in	r0, 0x36	; 54
     dc8:	07 fe       	sbrs	r0, 7
     dca:	fd cf       	rjmp	.-6      	; 0xdc6 <i2c_start+0x1c>
     dcc:	91 b1       	in	r25, 0x01	; 1
     dce:	98 7f       	andi	r25, 0xF8	; 248
     dd0:	98 31       	cpi	r25, 0x18	; 24
     dd2:	39 f0       	breq	.+14     	; 0xde2 <i2c_start+0x38>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 34       	cpi	r25, 0x40	; 64
     dd8:	29 f4       	brne	.+10     	; 0xde4 <i2c_start+0x3a>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	08 95       	ret
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	08 95       	ret
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	08 95       	ret

00000de6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     de6:	84 e9       	ldi	r24, 0x94	; 148
     de8:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     dea:	06 b6       	in	r0, 0x36	; 54
     dec:	04 fc       	sbrc	r0, 4
     dee:	fd cf       	rjmp	.-6      	; 0xdea <i2c_stop+0x4>

}/* i2c_stop */
     df0:	08 95       	ret

00000df2 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     df2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     df4:	84 e8       	ldi	r24, 0x84	; 132
     df6:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     df8:	06 b6       	in	r0, 0x36	; 54
     dfa:	07 fe       	sbrs	r0, 7
     dfc:	fd cf       	rjmp	.-6      	; 0xdf8 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     dfe:	91 b1       	in	r25, 0x01	; 1
     e00:	98 7f       	andi	r25, 0xF8	; 248
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	98 32       	cpi	r25, 0x28	; 40
     e06:	09 f4       	brne	.+2      	; 0xe0a <i2c_write+0x18>
     e08:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     e0a:	08 95       	ret

00000e0c <sprintf>:
     e0c:	ae e0       	ldi	r26, 0x0E	; 14
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ec e0       	ldi	r30, 0x0C	; 12
     e12:	f7 e0       	ldi	r31, 0x07	; 7
     e14:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__prologue_saves__+0x1c>
     e18:	0d 89       	ldd	r16, Y+21	; 0x15
     e1a:	1e 89       	ldd	r17, Y+22	; 0x16
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	8c 83       	std	Y+4, r24	; 0x04
     e20:	1a 83       	std	Y+2, r17	; 0x02
     e22:	09 83       	std	Y+1, r16	; 0x01
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	9f e7       	ldi	r25, 0x7F	; 127
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	ae 01       	movw	r20, r28
     e2e:	47 5e       	subi	r20, 0xE7	; 231
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
     e32:	6f 89       	ldd	r22, Y+23	; 0x17
     e34:	78 8d       	ldd	r23, Y+24	; 0x18
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	0e 94 28 07 	call	0xe50	; 0xe50 <vfprintf>
     e3e:	ef 81       	ldd	r30, Y+7	; 0x07
     e40:	f8 85       	ldd	r31, Y+8	; 0x08
     e42:	e0 0f       	add	r30, r16
     e44:	f1 1f       	adc	r31, r17
     e46:	10 82       	st	Z, r1
     e48:	2e 96       	adiw	r28, 0x0e	; 14
     e4a:	e4 e0       	ldi	r30, 0x04	; 4
     e4c:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__epilogue_restores__+0x1c>

00000e50 <vfprintf>:
     e50:	ab e0       	ldi	r26, 0x0B	; 11
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ee e2       	ldi	r30, 0x2E	; 46
     e56:	f7 e0       	ldi	r31, 0x07	; 7
     e58:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__prologue_saves__>
     e5c:	6c 01       	movw	r12, r24
     e5e:	7b 01       	movw	r14, r22
     e60:	8a 01       	movw	r16, r20
     e62:	fc 01       	movw	r30, r24
     e64:	17 82       	std	Z+7, r1	; 0x07
     e66:	16 82       	std	Z+6, r1	; 0x06
     e68:	83 81       	ldd	r24, Z+3	; 0x03
     e6a:	81 ff       	sbrs	r24, 1
     e6c:	cc c1       	rjmp	.+920    	; 0x1206 <vfprintf+0x3b6>
     e6e:	ce 01       	movw	r24, r28
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	3c 01       	movw	r6, r24
     e74:	f6 01       	movw	r30, r12
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	f7 01       	movw	r30, r14
     e7a:	93 fd       	sbrc	r25, 3
     e7c:	85 91       	lpm	r24, Z+
     e7e:	93 ff       	sbrs	r25, 3
     e80:	81 91       	ld	r24, Z+
     e82:	7f 01       	movw	r14, r30
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <vfprintf+0x3a>
     e88:	ba c1       	rjmp	.+884    	; 0x11fe <vfprintf+0x3ae>
     e8a:	85 32       	cpi	r24, 0x25	; 37
     e8c:	39 f4       	brne	.+14     	; 0xe9c <vfprintf+0x4c>
     e8e:	93 fd       	sbrc	r25, 3
     e90:	85 91       	lpm	r24, Z+
     e92:	93 ff       	sbrs	r25, 3
     e94:	81 91       	ld	r24, Z+
     e96:	7f 01       	movw	r14, r30
     e98:	85 32       	cpi	r24, 0x25	; 37
     e9a:	29 f4       	brne	.+10     	; 0xea6 <vfprintf+0x56>
     e9c:	b6 01       	movw	r22, r12
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
     ea4:	e7 cf       	rjmp	.-50     	; 0xe74 <vfprintf+0x24>
     ea6:	91 2c       	mov	r9, r1
     ea8:	21 2c       	mov	r2, r1
     eaa:	31 2c       	mov	r3, r1
     eac:	ff e1       	ldi	r31, 0x1F	; 31
     eae:	f3 15       	cp	r31, r3
     eb0:	d8 f0       	brcs	.+54     	; 0xee8 <vfprintf+0x98>
     eb2:	8b 32       	cpi	r24, 0x2B	; 43
     eb4:	79 f0       	breq	.+30     	; 0xed4 <vfprintf+0x84>
     eb6:	38 f4       	brcc	.+14     	; 0xec6 <vfprintf+0x76>
     eb8:	80 32       	cpi	r24, 0x20	; 32
     eba:	79 f0       	breq	.+30     	; 0xeda <vfprintf+0x8a>
     ebc:	83 32       	cpi	r24, 0x23	; 35
     ebe:	a1 f4       	brne	.+40     	; 0xee8 <vfprintf+0x98>
     ec0:	23 2d       	mov	r18, r3
     ec2:	20 61       	ori	r18, 0x10	; 16
     ec4:	1d c0       	rjmp	.+58     	; 0xf00 <vfprintf+0xb0>
     ec6:	8d 32       	cpi	r24, 0x2D	; 45
     ec8:	61 f0       	breq	.+24     	; 0xee2 <vfprintf+0x92>
     eca:	80 33       	cpi	r24, 0x30	; 48
     ecc:	69 f4       	brne	.+26     	; 0xee8 <vfprintf+0x98>
     ece:	23 2d       	mov	r18, r3
     ed0:	21 60       	ori	r18, 0x01	; 1
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <vfprintf+0xb0>
     ed4:	83 2d       	mov	r24, r3
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	38 2e       	mov	r3, r24
     eda:	e3 2d       	mov	r30, r3
     edc:	e4 60       	ori	r30, 0x04	; 4
     ede:	3e 2e       	mov	r3, r30
     ee0:	2a c0       	rjmp	.+84     	; 0xf36 <vfprintf+0xe6>
     ee2:	f3 2d       	mov	r31, r3
     ee4:	f8 60       	ori	r31, 0x08	; 8
     ee6:	1d c0       	rjmp	.+58     	; 0xf22 <vfprintf+0xd2>
     ee8:	37 fc       	sbrc	r3, 7
     eea:	2d c0       	rjmp	.+90     	; 0xf46 <vfprintf+0xf6>
     eec:	20 ed       	ldi	r18, 0xD0	; 208
     eee:	28 0f       	add	r18, r24
     ef0:	2a 30       	cpi	r18, 0x0A	; 10
     ef2:	40 f0       	brcs	.+16     	; 0xf04 <vfprintf+0xb4>
     ef4:	8e 32       	cpi	r24, 0x2E	; 46
     ef6:	b9 f4       	brne	.+46     	; 0xf26 <vfprintf+0xd6>
     ef8:	36 fc       	sbrc	r3, 6
     efa:	81 c1       	rjmp	.+770    	; 0x11fe <vfprintf+0x3ae>
     efc:	23 2d       	mov	r18, r3
     efe:	20 64       	ori	r18, 0x40	; 64
     f00:	32 2e       	mov	r3, r18
     f02:	19 c0       	rjmp	.+50     	; 0xf36 <vfprintf+0xe6>
     f04:	36 fe       	sbrs	r3, 6
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <vfprintf+0xc4>
     f08:	8a e0       	ldi	r24, 0x0A	; 10
     f0a:	98 9e       	mul	r9, r24
     f0c:	20 0d       	add	r18, r0
     f0e:	11 24       	eor	r1, r1
     f10:	92 2e       	mov	r9, r18
     f12:	11 c0       	rjmp	.+34     	; 0xf36 <vfprintf+0xe6>
     f14:	ea e0       	ldi	r30, 0x0A	; 10
     f16:	2e 9e       	mul	r2, r30
     f18:	20 0d       	add	r18, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	22 2e       	mov	r2, r18
     f1e:	f3 2d       	mov	r31, r3
     f20:	f0 62       	ori	r31, 0x20	; 32
     f22:	3f 2e       	mov	r3, r31
     f24:	08 c0       	rjmp	.+16     	; 0xf36 <vfprintf+0xe6>
     f26:	8c 36       	cpi	r24, 0x6C	; 108
     f28:	21 f4       	brne	.+8      	; 0xf32 <vfprintf+0xe2>
     f2a:	83 2d       	mov	r24, r3
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	38 2e       	mov	r3, r24
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0xe6>
     f32:	88 36       	cpi	r24, 0x68	; 104
     f34:	41 f4       	brne	.+16     	; 0xf46 <vfprintf+0xf6>
     f36:	f7 01       	movw	r30, r14
     f38:	93 fd       	sbrc	r25, 3
     f3a:	85 91       	lpm	r24, Z+
     f3c:	93 ff       	sbrs	r25, 3
     f3e:	81 91       	ld	r24, Z+
     f40:	7f 01       	movw	r14, r30
     f42:	81 11       	cpse	r24, r1
     f44:	b3 cf       	rjmp	.-154    	; 0xeac <vfprintf+0x5c>
     f46:	98 2f       	mov	r25, r24
     f48:	9f 7d       	andi	r25, 0xDF	; 223
     f4a:	95 54       	subi	r25, 0x45	; 69
     f4c:	93 30       	cpi	r25, 0x03	; 3
     f4e:	28 f4       	brcc	.+10     	; 0xf5a <vfprintf+0x10a>
     f50:	0c 5f       	subi	r16, 0xFC	; 252
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	9f e3       	ldi	r25, 0x3F	; 63
     f56:	99 83       	std	Y+1, r25	; 0x01
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <vfprintf+0x124>
     f5a:	83 36       	cpi	r24, 0x63	; 99
     f5c:	31 f0       	breq	.+12     	; 0xf6a <vfprintf+0x11a>
     f5e:	83 37       	cpi	r24, 0x73	; 115
     f60:	71 f0       	breq	.+28     	; 0xf7e <vfprintf+0x12e>
     f62:	83 35       	cpi	r24, 0x53	; 83
     f64:	09 f0       	breq	.+2      	; 0xf68 <vfprintf+0x118>
     f66:	59 c0       	rjmp	.+178    	; 0x101a <vfprintf+0x1ca>
     f68:	21 c0       	rjmp	.+66     	; 0xfac <vfprintf+0x15c>
     f6a:	f8 01       	movw	r30, r16
     f6c:	80 81       	ld	r24, Z
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	0e 5f       	subi	r16, 0xFE	; 254
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	88 24       	eor	r8, r8
     f76:	83 94       	inc	r8
     f78:	91 2c       	mov	r9, r1
     f7a:	53 01       	movw	r10, r6
     f7c:	13 c0       	rjmp	.+38     	; 0xfa4 <vfprintf+0x154>
     f7e:	28 01       	movw	r4, r16
     f80:	f2 e0       	ldi	r31, 0x02	; 2
     f82:	4f 0e       	add	r4, r31
     f84:	51 1c       	adc	r5, r1
     f86:	f8 01       	movw	r30, r16
     f88:	a0 80       	ld	r10, Z
     f8a:	b1 80       	ldd	r11, Z+1	; 0x01
     f8c:	36 fe       	sbrs	r3, 6
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <vfprintf+0x146>
     f90:	69 2d       	mov	r22, r9
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <vfprintf+0x14a>
     f96:	6f ef       	ldi	r22, 0xFF	; 255
     f98:	7f ef       	ldi	r23, 0xFF	; 255
     f9a:	c5 01       	movw	r24, r10
     f9c:	0e 94 14 09 	call	0x1228	; 0x1228 <strnlen>
     fa0:	4c 01       	movw	r8, r24
     fa2:	82 01       	movw	r16, r4
     fa4:	f3 2d       	mov	r31, r3
     fa6:	ff 77       	andi	r31, 0x7F	; 127
     fa8:	3f 2e       	mov	r3, r31
     faa:	16 c0       	rjmp	.+44     	; 0xfd8 <vfprintf+0x188>
     fac:	28 01       	movw	r4, r16
     fae:	22 e0       	ldi	r18, 0x02	; 2
     fb0:	42 0e       	add	r4, r18
     fb2:	51 1c       	adc	r5, r1
     fb4:	f8 01       	movw	r30, r16
     fb6:	a0 80       	ld	r10, Z
     fb8:	b1 80       	ldd	r11, Z+1	; 0x01
     fba:	36 fe       	sbrs	r3, 6
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <vfprintf+0x174>
     fbe:	69 2d       	mov	r22, r9
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <vfprintf+0x178>
     fc4:	6f ef       	ldi	r22, 0xFF	; 255
     fc6:	7f ef       	ldi	r23, 0xFF	; 255
     fc8:	c5 01       	movw	r24, r10
     fca:	0e 94 09 09 	call	0x1212	; 0x1212 <strnlen_P>
     fce:	4c 01       	movw	r8, r24
     fd0:	f3 2d       	mov	r31, r3
     fd2:	f0 68       	ori	r31, 0x80	; 128
     fd4:	3f 2e       	mov	r3, r31
     fd6:	82 01       	movw	r16, r4
     fd8:	33 fc       	sbrc	r3, 3
     fda:	1b c0       	rjmp	.+54     	; 0x1012 <vfprintf+0x1c2>
     fdc:	82 2d       	mov	r24, r2
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	88 16       	cp	r8, r24
     fe2:	99 06       	cpc	r9, r25
     fe4:	b0 f4       	brcc	.+44     	; 0x1012 <vfprintf+0x1c2>
     fe6:	b6 01       	movw	r22, r12
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
     ff0:	2a 94       	dec	r2
     ff2:	f4 cf       	rjmp	.-24     	; 0xfdc <vfprintf+0x18c>
     ff4:	f5 01       	movw	r30, r10
     ff6:	37 fc       	sbrc	r3, 7
     ff8:	85 91       	lpm	r24, Z+
     ffa:	37 fe       	sbrs	r3, 7
     ffc:	81 91       	ld	r24, Z+
     ffe:	5f 01       	movw	r10, r30
    1000:	b6 01       	movw	r22, r12
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    1008:	21 10       	cpse	r2, r1
    100a:	2a 94       	dec	r2
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	82 1a       	sub	r8, r18
    1010:	91 08       	sbc	r9, r1
    1012:	81 14       	cp	r8, r1
    1014:	91 04       	cpc	r9, r1
    1016:	71 f7       	brne	.-36     	; 0xff4 <vfprintf+0x1a4>
    1018:	e8 c0       	rjmp	.+464    	; 0x11ea <vfprintf+0x39a>
    101a:	84 36       	cpi	r24, 0x64	; 100
    101c:	11 f0       	breq	.+4      	; 0x1022 <vfprintf+0x1d2>
    101e:	89 36       	cpi	r24, 0x69	; 105
    1020:	41 f5       	brne	.+80     	; 0x1072 <vfprintf+0x222>
    1022:	f8 01       	movw	r30, r16
    1024:	37 fe       	sbrs	r3, 7
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <vfprintf+0x1e6>
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	0c 5f       	subi	r16, 0xFC	; 252
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <vfprintf+0x1f6>
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	07 2e       	mov	r0, r23
    103c:	00 0c       	add	r0, r0
    103e:	88 0b       	sbc	r24, r24
    1040:	99 0b       	sbc	r25, r25
    1042:	0e 5f       	subi	r16, 0xFE	; 254
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	f3 2d       	mov	r31, r3
    1048:	ff 76       	andi	r31, 0x6F	; 111
    104a:	3f 2e       	mov	r3, r31
    104c:	97 ff       	sbrs	r25, 7
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <vfprintf+0x212>
    1050:	90 95       	com	r25
    1052:	80 95       	com	r24
    1054:	70 95       	com	r23
    1056:	61 95       	neg	r22
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	f0 68       	ori	r31, 0x80	; 128
    1060:	3f 2e       	mov	r3, r31
    1062:	2a e0       	ldi	r18, 0x0A	; 10
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	a3 01       	movw	r20, r6
    1068:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__ultoa_invert>
    106c:	88 2e       	mov	r8, r24
    106e:	86 18       	sub	r8, r6
    1070:	45 c0       	rjmp	.+138    	; 0x10fc <vfprintf+0x2ac>
    1072:	85 37       	cpi	r24, 0x75	; 117
    1074:	31 f4       	brne	.+12     	; 0x1082 <vfprintf+0x232>
    1076:	23 2d       	mov	r18, r3
    1078:	2f 7e       	andi	r18, 0xEF	; 239
    107a:	b2 2e       	mov	r11, r18
    107c:	2a e0       	ldi	r18, 0x0A	; 10
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	25 c0       	rjmp	.+74     	; 0x10cc <vfprintf+0x27c>
    1082:	93 2d       	mov	r25, r3
    1084:	99 7f       	andi	r25, 0xF9	; 249
    1086:	b9 2e       	mov	r11, r25
    1088:	8f 36       	cpi	r24, 0x6F	; 111
    108a:	c1 f0       	breq	.+48     	; 0x10bc <vfprintf+0x26c>
    108c:	18 f4       	brcc	.+6      	; 0x1094 <vfprintf+0x244>
    108e:	88 35       	cpi	r24, 0x58	; 88
    1090:	79 f0       	breq	.+30     	; 0x10b0 <vfprintf+0x260>
    1092:	b5 c0       	rjmp	.+362    	; 0x11fe <vfprintf+0x3ae>
    1094:	80 37       	cpi	r24, 0x70	; 112
    1096:	19 f0       	breq	.+6      	; 0x109e <vfprintf+0x24e>
    1098:	88 37       	cpi	r24, 0x78	; 120
    109a:	21 f0       	breq	.+8      	; 0x10a4 <vfprintf+0x254>
    109c:	b0 c0       	rjmp	.+352    	; 0x11fe <vfprintf+0x3ae>
    109e:	e9 2f       	mov	r30, r25
    10a0:	e0 61       	ori	r30, 0x10	; 16
    10a2:	be 2e       	mov	r11, r30
    10a4:	b4 fe       	sbrs	r11, 4
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <vfprintf+0x272>
    10a8:	fb 2d       	mov	r31, r11
    10aa:	f4 60       	ori	r31, 0x04	; 4
    10ac:	bf 2e       	mov	r11, r31
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <vfprintf+0x272>
    10b0:	34 fe       	sbrs	r3, 4
    10b2:	0a c0       	rjmp	.+20     	; 0x10c8 <vfprintf+0x278>
    10b4:	29 2f       	mov	r18, r25
    10b6:	26 60       	ori	r18, 0x06	; 6
    10b8:	b2 2e       	mov	r11, r18
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <vfprintf+0x278>
    10bc:	28 e0       	ldi	r18, 0x08	; 8
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <vfprintf+0x27c>
    10c2:	20 e1       	ldi	r18, 0x10	; 16
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x27c>
    10c8:	20 e1       	ldi	r18, 0x10	; 16
    10ca:	32 e0       	ldi	r19, 0x02	; 2
    10cc:	f8 01       	movw	r30, r16
    10ce:	b7 fe       	sbrs	r11, 7
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <vfprintf+0x290>
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	0c 5f       	subi	r16, 0xFC	; 252
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0x29c>
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 5f       	subi	r16, 0xFE	; 254
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
    10ec:	a3 01       	movw	r20, r6
    10ee:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__ultoa_invert>
    10f2:	88 2e       	mov	r8, r24
    10f4:	86 18       	sub	r8, r6
    10f6:	fb 2d       	mov	r31, r11
    10f8:	ff 77       	andi	r31, 0x7F	; 127
    10fa:	3f 2e       	mov	r3, r31
    10fc:	36 fe       	sbrs	r3, 6
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <vfprintf+0x2ca>
    1100:	23 2d       	mov	r18, r3
    1102:	2e 7f       	andi	r18, 0xFE	; 254
    1104:	a2 2e       	mov	r10, r18
    1106:	89 14       	cp	r8, r9
    1108:	58 f4       	brcc	.+22     	; 0x1120 <vfprintf+0x2d0>
    110a:	34 fe       	sbrs	r3, 4
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <vfprintf+0x2d4>
    110e:	32 fc       	sbrc	r3, 2
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <vfprintf+0x2d4>
    1112:	83 2d       	mov	r24, r3
    1114:	8e 7e       	andi	r24, 0xEE	; 238
    1116:	a8 2e       	mov	r10, r24
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <vfprintf+0x2d4>
    111a:	b8 2c       	mov	r11, r8
    111c:	a3 2c       	mov	r10, r3
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <vfprintf+0x2d6>
    1120:	b8 2c       	mov	r11, r8
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <vfprintf+0x2d6>
    1124:	b9 2c       	mov	r11, r9
    1126:	a4 fe       	sbrs	r10, 4
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <vfprintf+0x2f8>
    112a:	fe 01       	movw	r30, r28
    112c:	e8 0d       	add	r30, r8
    112e:	f1 1d       	adc	r31, r1
    1130:	80 81       	ld	r24, Z
    1132:	80 33       	cpi	r24, 0x30	; 48
    1134:	21 f4       	brne	.+8      	; 0x113e <vfprintf+0x2ee>
    1136:	9a 2d       	mov	r25, r10
    1138:	99 7e       	andi	r25, 0xE9	; 233
    113a:	a9 2e       	mov	r10, r25
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <vfprintf+0x300>
    113e:	a2 fe       	sbrs	r10, 2
    1140:	06 c0       	rjmp	.+12     	; 0x114e <vfprintf+0x2fe>
    1142:	b3 94       	inc	r11
    1144:	b3 94       	inc	r11
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <vfprintf+0x300>
    1148:	8a 2d       	mov	r24, r10
    114a:	86 78       	andi	r24, 0x86	; 134
    114c:	09 f0       	breq	.+2      	; 0x1150 <vfprintf+0x300>
    114e:	b3 94       	inc	r11
    1150:	a3 fc       	sbrc	r10, 3
    1152:	11 c0       	rjmp	.+34     	; 0x1176 <vfprintf+0x326>
    1154:	a0 fe       	sbrs	r10, 0
    1156:	06 c0       	rjmp	.+12     	; 0x1164 <vfprintf+0x314>
    1158:	b2 14       	cp	r11, r2
    115a:	88 f4       	brcc	.+34     	; 0x117e <vfprintf+0x32e>
    115c:	28 0c       	add	r2, r8
    115e:	92 2c       	mov	r9, r2
    1160:	9b 18       	sub	r9, r11
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <vfprintf+0x330>
    1164:	b2 14       	cp	r11, r2
    1166:	60 f4       	brcc	.+24     	; 0x1180 <vfprintf+0x330>
    1168:	b6 01       	movw	r22, r12
    116a:	80 e2       	ldi	r24, 0x20	; 32
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    1172:	b3 94       	inc	r11
    1174:	f7 cf       	rjmp	.-18     	; 0x1164 <vfprintf+0x314>
    1176:	b2 14       	cp	r11, r2
    1178:	18 f4       	brcc	.+6      	; 0x1180 <vfprintf+0x330>
    117a:	2b 18       	sub	r2, r11
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <vfprintf+0x332>
    117e:	98 2c       	mov	r9, r8
    1180:	21 2c       	mov	r2, r1
    1182:	a4 fe       	sbrs	r10, 4
    1184:	10 c0       	rjmp	.+32     	; 0x11a6 <vfprintf+0x356>
    1186:	b6 01       	movw	r22, r12
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    1190:	a2 fe       	sbrs	r10, 2
    1192:	17 c0       	rjmp	.+46     	; 0x11c2 <vfprintf+0x372>
    1194:	a1 fc       	sbrc	r10, 1
    1196:	03 c0       	rjmp	.+6      	; 0x119e <vfprintf+0x34e>
    1198:	88 e7       	ldi	r24, 0x78	; 120
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x352>
    119e:	88 e5       	ldi	r24, 0x58	; 88
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	b6 01       	movw	r22, r12
    11a4:	0c c0       	rjmp	.+24     	; 0x11be <vfprintf+0x36e>
    11a6:	8a 2d       	mov	r24, r10
    11a8:	86 78       	andi	r24, 0x86	; 134
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <vfprintf+0x372>
    11ac:	a1 fe       	sbrs	r10, 1
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0x364>
    11b0:	8b e2       	ldi	r24, 0x2B	; 43
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <vfprintf+0x366>
    11b4:	80 e2       	ldi	r24, 0x20	; 32
    11b6:	a7 fc       	sbrc	r10, 7
    11b8:	8d e2       	ldi	r24, 0x2D	; 45
    11ba:	b6 01       	movw	r22, r12
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    11c2:	89 14       	cp	r8, r9
    11c4:	38 f4       	brcc	.+14     	; 0x11d4 <vfprintf+0x384>
    11c6:	b6 01       	movw	r22, r12
    11c8:	80 e3       	ldi	r24, 0x30	; 48
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    11d0:	9a 94       	dec	r9
    11d2:	f7 cf       	rjmp	.-18     	; 0x11c2 <vfprintf+0x372>
    11d4:	8a 94       	dec	r8
    11d6:	f3 01       	movw	r30, r6
    11d8:	e8 0d       	add	r30, r8
    11da:	f1 1d       	adc	r31, r1
    11dc:	80 81       	ld	r24, Z
    11de:	b6 01       	movw	r22, r12
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    11e6:	81 10       	cpse	r8, r1
    11e8:	f5 cf       	rjmp	.-22     	; 0x11d4 <vfprintf+0x384>
    11ea:	22 20       	and	r2, r2
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <vfprintf+0x3a0>
    11ee:	42 ce       	rjmp	.-892    	; 0xe74 <vfprintf+0x24>
    11f0:	b6 01       	movw	r22, r12
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 1f 09 	call	0x123e	; 0x123e <fputc>
    11fa:	2a 94       	dec	r2
    11fc:	f6 cf       	rjmp	.-20     	; 0x11ea <vfprintf+0x39a>
    11fe:	f6 01       	movw	r30, r12
    1200:	86 81       	ldd	r24, Z+6	; 0x06
    1202:	97 81       	ldd	r25, Z+7	; 0x07
    1204:	02 c0       	rjmp	.+4      	; 0x120a <vfprintf+0x3ba>
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	2b 96       	adiw	r28, 0x0b	; 11
    120c:	e2 e1       	ldi	r30, 0x12	; 18
    120e:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__epilogue_restores__>

00001212 <strnlen_P>:
    1212:	fc 01       	movw	r30, r24
    1214:	05 90       	lpm	r0, Z+
    1216:	61 50       	subi	r22, 0x01	; 1
    1218:	70 40       	sbci	r23, 0x00	; 0
    121a:	01 10       	cpse	r0, r1
    121c:	d8 f7       	brcc	.-10     	; 0x1214 <strnlen_P+0x2>
    121e:	80 95       	com	r24
    1220:	90 95       	com	r25
    1222:	8e 0f       	add	r24, r30
    1224:	9f 1f       	adc	r25, r31
    1226:	08 95       	ret

00001228 <strnlen>:
    1228:	fc 01       	movw	r30, r24
    122a:	61 50       	subi	r22, 0x01	; 1
    122c:	70 40       	sbci	r23, 0x00	; 0
    122e:	01 90       	ld	r0, Z+
    1230:	01 10       	cpse	r0, r1
    1232:	d8 f7       	brcc	.-10     	; 0x122a <strnlen+0x2>
    1234:	80 95       	com	r24
    1236:	90 95       	com	r25
    1238:	8e 0f       	add	r24, r30
    123a:	9f 1f       	adc	r25, r31
    123c:	08 95       	ret

0000123e <fputc>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	fb 01       	movw	r30, r22
    1248:	23 81       	ldd	r18, Z+3	; 0x03
    124a:	21 fd       	sbrc	r18, 1
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <fputc+0x16>
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	2c c0       	rjmp	.+88     	; 0x12ac <fputc+0x6e>
    1254:	22 ff       	sbrs	r18, 2
    1256:	16 c0       	rjmp	.+44     	; 0x1284 <fputc+0x46>
    1258:	46 81       	ldd	r20, Z+6	; 0x06
    125a:	57 81       	ldd	r21, Z+7	; 0x07
    125c:	24 81       	ldd	r18, Z+4	; 0x04
    125e:	35 81       	ldd	r19, Z+5	; 0x05
    1260:	42 17       	cp	r20, r18
    1262:	53 07       	cpc	r21, r19
    1264:	44 f4       	brge	.+16     	; 0x1276 <fputc+0x38>
    1266:	a0 81       	ld	r26, Z
    1268:	b1 81       	ldd	r27, Z+1	; 0x01
    126a:	9d 01       	movw	r18, r26
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	31 83       	std	Z+1, r19	; 0x01
    1272:	20 83       	st	Z, r18
    1274:	8c 93       	st	X, r24
    1276:	26 81       	ldd	r18, Z+6	; 0x06
    1278:	37 81       	ldd	r19, Z+7	; 0x07
    127a:	2f 5f       	subi	r18, 0xFF	; 255
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	37 83       	std	Z+7, r19	; 0x07
    1280:	26 83       	std	Z+6, r18	; 0x06
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <fputc+0x6e>
    1284:	8b 01       	movw	r16, r22
    1286:	ec 01       	movw	r28, r24
    1288:	fb 01       	movw	r30, r22
    128a:	00 84       	ldd	r0, Z+8	; 0x08
    128c:	f1 85       	ldd	r31, Z+9	; 0x09
    128e:	e0 2d       	mov	r30, r0
    1290:	09 95       	icall
    1292:	89 2b       	or	r24, r25
    1294:	e1 f6       	brne	.-72     	; 0x124e <fputc+0x10>
    1296:	d8 01       	movw	r26, r16
    1298:	16 96       	adiw	r26, 0x06	; 6
    129a:	8d 91       	ld	r24, X+
    129c:	9c 91       	ld	r25, X
    129e:	17 97       	sbiw	r26, 0x07	; 7
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	17 96       	adiw	r26, 0x07	; 7
    12a4:	9c 93       	st	X, r25
    12a6:	8e 93       	st	-X, r24
    12a8:	16 97       	sbiw	r26, 0x06	; 6
    12aa:	ce 01       	movw	r24, r28
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <__ultoa_invert>:
    12b6:	fa 01       	movw	r30, r20
    12b8:	aa 27       	eor	r26, r26
    12ba:	28 30       	cpi	r18, 0x08	; 8
    12bc:	51 f1       	breq	.+84     	; 0x1312 <__ultoa_invert+0x5c>
    12be:	20 31       	cpi	r18, 0x10	; 16
    12c0:	81 f1       	breq	.+96     	; 0x1322 <__ultoa_invert+0x6c>
    12c2:	e8 94       	clt
    12c4:	6f 93       	push	r22
    12c6:	6e 7f       	andi	r22, 0xFE	; 254
    12c8:	6e 5f       	subi	r22, 0xFE	; 254
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	af 4f       	sbci	r26, 0xFF	; 255
    12d2:	b1 e0       	ldi	r27, 0x01	; 1
    12d4:	3e d0       	rcall	.+124    	; 0x1352 <__ultoa_invert+0x9c>
    12d6:	b4 e0       	ldi	r27, 0x04	; 4
    12d8:	3c d0       	rcall	.+120    	; 0x1352 <__ultoa_invert+0x9c>
    12da:	67 0f       	add	r22, r23
    12dc:	78 1f       	adc	r23, r24
    12de:	89 1f       	adc	r24, r25
    12e0:	9a 1f       	adc	r25, r26
    12e2:	a1 1d       	adc	r26, r1
    12e4:	68 0f       	add	r22, r24
    12e6:	79 1f       	adc	r23, r25
    12e8:	8a 1f       	adc	r24, r26
    12ea:	91 1d       	adc	r25, r1
    12ec:	a1 1d       	adc	r26, r1
    12ee:	6a 0f       	add	r22, r26
    12f0:	71 1d       	adc	r23, r1
    12f2:	81 1d       	adc	r24, r1
    12f4:	91 1d       	adc	r25, r1
    12f6:	a1 1d       	adc	r26, r1
    12f8:	20 d0       	rcall	.+64     	; 0x133a <__ultoa_invert+0x84>
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__ultoa_invert+0x48>
    12fc:	68 94       	set
    12fe:	3f 91       	pop	r19
    1300:	2a e0       	ldi	r18, 0x0A	; 10
    1302:	26 9f       	mul	r18, r22
    1304:	11 24       	eor	r1, r1
    1306:	30 19       	sub	r19, r0
    1308:	30 5d       	subi	r19, 0xD0	; 208
    130a:	31 93       	st	Z+, r19
    130c:	de f6       	brtc	.-74     	; 0x12c4 <__ultoa_invert+0xe>
    130e:	cf 01       	movw	r24, r30
    1310:	08 95       	ret
    1312:	46 2f       	mov	r20, r22
    1314:	47 70       	andi	r20, 0x07	; 7
    1316:	40 5d       	subi	r20, 0xD0	; 208
    1318:	41 93       	st	Z+, r20
    131a:	b3 e0       	ldi	r27, 0x03	; 3
    131c:	0f d0       	rcall	.+30     	; 0x133c <__ultoa_invert+0x86>
    131e:	c9 f7       	brne	.-14     	; 0x1312 <__ultoa_invert+0x5c>
    1320:	f6 cf       	rjmp	.-20     	; 0x130e <__ultoa_invert+0x58>
    1322:	46 2f       	mov	r20, r22
    1324:	4f 70       	andi	r20, 0x0F	; 15
    1326:	40 5d       	subi	r20, 0xD0	; 208
    1328:	4a 33       	cpi	r20, 0x3A	; 58
    132a:	18 f0       	brcs	.+6      	; 0x1332 <__ultoa_invert+0x7c>
    132c:	49 5d       	subi	r20, 0xD9	; 217
    132e:	31 fd       	sbrc	r19, 1
    1330:	40 52       	subi	r20, 0x20	; 32
    1332:	41 93       	st	Z+, r20
    1334:	02 d0       	rcall	.+4      	; 0x133a <__ultoa_invert+0x84>
    1336:	a9 f7       	brne	.-22     	; 0x1322 <__ultoa_invert+0x6c>
    1338:	ea cf       	rjmp	.-44     	; 0x130e <__ultoa_invert+0x58>
    133a:	b4 e0       	ldi	r27, 0x04	; 4
    133c:	a6 95       	lsr	r26
    133e:	97 95       	ror	r25
    1340:	87 95       	ror	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	ba 95       	dec	r27
    1348:	c9 f7       	brne	.-14     	; 0x133c <__ultoa_invert+0x86>
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 05       	cpc	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	08 95       	ret
    1352:	9b 01       	movw	r18, r22
    1354:	ac 01       	movw	r20, r24
    1356:	0a 2e       	mov	r0, r26
    1358:	06 94       	lsr	r0
    135a:	57 95       	ror	r21
    135c:	47 95       	ror	r20
    135e:	37 95       	ror	r19
    1360:	27 95       	ror	r18
    1362:	ba 95       	dec	r27
    1364:	c9 f7       	brne	.-14     	; 0x1358 <__ultoa_invert+0xa2>
    1366:	62 0f       	add	r22, r18
    1368:	73 1f       	adc	r23, r19
    136a:	84 1f       	adc	r24, r20
    136c:	95 1f       	adc	r25, r21
    136e:	a0 1d       	adc	r26, r0
    1370:	08 95       	ret

00001372 <__prologue_saves__>:
    1372:	2f 92       	push	r2
    1374:	3f 92       	push	r3
    1376:	4f 92       	push	r4
    1378:	5f 92       	push	r5
    137a:	6f 92       	push	r6
    137c:	7f 92       	push	r7
    137e:	8f 92       	push	r8
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	ca 1b       	sub	r28, r26
    139c:	db 0b       	sbc	r29, r27
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	09 94       	ijmp

000013aa <__epilogue_restores__>:
    13aa:	2a 88       	ldd	r2, Y+18	; 0x12
    13ac:	39 88       	ldd	r3, Y+17	; 0x11
    13ae:	48 88       	ldd	r4, Y+16	; 0x10
    13b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    13b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    13b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    13bc:	b9 84       	ldd	r11, Y+9	; 0x09
    13be:	c8 84       	ldd	r12, Y+8	; 0x08
    13c0:	df 80       	ldd	r13, Y+7	; 0x07
    13c2:	ee 80       	ldd	r14, Y+6	; 0x06
    13c4:	fd 80       	ldd	r15, Y+5	; 0x05
    13c6:	0c 81       	ldd	r16, Y+4	; 0x04
    13c8:	1b 81       	ldd	r17, Y+3	; 0x03
    13ca:	aa 81       	ldd	r26, Y+2	; 0x02
    13cc:	b9 81       	ldd	r27, Y+1	; 0x01
    13ce:	ce 0f       	add	r28, r30
    13d0:	d1 1d       	adc	r29, r1
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	ed 01       	movw	r28, r26
    13de:	08 95       	ret

000013e0 <_exit>:
    13e0:	f8 94       	cli

000013e2 <__stop_program>:
    13e2:	ff cf       	rjmp	.-2      	; 0x13e2 <__stop_program>
