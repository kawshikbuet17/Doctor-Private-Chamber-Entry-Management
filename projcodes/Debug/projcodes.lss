
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000216  00800060  00002c3c  00002cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000357  00800276  00800276  00002ee6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ee6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005115  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f78  00000000  00000000  000085d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033c7  00000000  00000000  0000a54d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  0000d914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d14  00000000  00000000  0000e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a7f  00000000  00000000  0000f134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00011bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	1c 05       	cpc	r17, r12
      56:	1f 05       	cpc	r17, r15
      58:	22 05       	cpc	r18, r2
      5a:	25 05       	cpc	r18, r5
      5c:	28 05       	cpc	r18, r8
      5e:	2b 05       	cpc	r18, r11
      60:	2e 05       	cpc	r18, r14
      62:	05 0d       	add	r16, r5
      64:	08 0d       	add	r16, r8
      66:	0b 0d       	add	r16, r11
      68:	0e 0d       	add	r16, r14
      6a:	11 0d       	add	r17, r1
      6c:	14 0d       	add	r17, r4
      6e:	17 0d       	add	r17, r7

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <Keypad_AddKey+0xdc>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <Error_ErrorBin+0x58>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <regression+0x13e>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <sumit+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	ec e3       	ldi	r30, 0x3C	; 60
     17e:	fc e2       	ldi	r31, 0x2C	; 44
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 37       	cpi	r26, 0x76	; 118
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	25 e0       	ldi	r18, 0x05	; 5
     18e:	a6 e7       	ldi	r26, 0x76	; 118
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ad 3c       	cpi	r26, 0xCD	; 205
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <main>
     1a0:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <sumit>:
char disp[16] = "00000000000001";
char result[8] = "000001"; 

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=data_points[i];
     1bc:	16 16       	cp	r1, r22
     1be:	17 06       	cpc	r1, r23
     1c0:	04 f5       	brge	.+64     	; 0x202 <sumit+0x5a>
     1c2:	7b 01       	movw	r14, r22
     1c4:	8c 01       	movw	r16, r24
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	c1 e0       	ldi	r28, 0x01	; 1
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	f8 01       	movw	r30, r16
     1d6:	61 91       	ld	r22, Z+
     1d8:	71 91       	ld	r23, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	07 2e       	mov	r0, r23
     1de:	00 0c       	add	r0, r0
     1e0:	88 0b       	sbc	r24, r24
     1e2:	99 0b       	sbc	r25, r25
     1e4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__addsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	ec 16       	cp	r14, r28
     1fc:	fd 06       	cpc	r15, r29
     1fe:	54 f7       	brge	.-44     	; 0x1d4 <sumit+0x2c>
     200:	03 c0       	rjmp	.+6      	; 0x208 <sumit+0x60>

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	 int i;
	 double sum=0;
     202:	81 2c       	mov	r8, r1
     204:	91 2c       	mov	r9, r1
     206:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=data_points[i];
	 return sum;
}
     208:	c5 01       	movw	r24, r10
     20a:	b4 01       	movw	r22, r8
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <xysum>:

double xysum(int data_points[],int length){
     222:	8f 92       	push	r8
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     236:	16 16       	cp	r1, r22
     238:	17 06       	cpc	r1, r23
     23a:	3c f5       	brge	.+78     	; 0x28a <xysum+0x68>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	c1 e0       	ldi	r28, 0x01	; 1
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	54 01       	movw	r10, r8
     24e:	f8 01       	movw	r30, r16
     250:	81 91       	ld	r24, Z+
     252:	91 91       	ld	r25, Z+
     254:	8f 01       	movw	r16, r30
     256:	8c 9f       	mul	r24, r28
     258:	b0 01       	movw	r22, r0
     25a:	8d 9f       	mul	r24, r29
     25c:	70 0d       	add	r23, r0
     25e:	9c 9f       	mul	r25, r28
     260:	70 0d       	add	r23, r0
     262:	11 24       	eor	r1, r1
     264:	07 2e       	mov	r0, r23
     266:	00 0c       	add	r0, r0
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ec 16       	cp	r14, r28
     284:	fd 06       	cpc	r15, r29
     286:	1c f7       	brge	.-58     	; 0x24e <xysum+0x2c>
     288:	03 c0       	rjmp	.+6      	; 0x290 <xysum+0x6e>
	 return sum;
}

double xysum(int data_points[],int length){
	 int i;
	 double sum=0;
     28a:	81 2c       	mov	r8, r1
     28c:	91 2c       	mov	r9, r1
     28e:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
	 return sum;
}
     290:	c5 01       	movw	r24, r10
     292:	b4 01       	movw	r22, r8
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret

000002aa <regression>:

void regression(int data_points[],double n){
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	60 97       	sbiw	r28, 0x10	; 16
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	3c 01       	movw	r6, r24
     2d8:	6a 01       	movw	r12, r20
     2da:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__addsf3>
     2ec:	6d 83       	std	Y+5, r22	; 0x05
     2ee:	7e 83       	std	Y+6, r23	; 0x06
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
	double xbar = (n+1)/2.0;
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__fixsfsi>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	c3 01       	movw	r24, r6
     316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sumit>
     31a:	a7 01       	movw	r20, r14
     31c:	96 01       	movw	r18, r12
     31e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__divsf3>
     322:	69 87       	std	Y+9, r22	; 0x09
     324:	7a 87       	std	Y+10, r23	; 0x0a
     326:	8b 87       	std	Y+11, r24	; 0x0b
     328:	9c 87       	std	Y+12, r25	; 0x0c
	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     32a:	b4 01       	movw	r22, r8
     32c:	c3 01       	movw	r24, r6
     32e:	0e 94 11 01 	call	0x222	; 0x222 <xysum>
     332:	4b 01       	movw	r8, r22
     334:	5c 01       	movw	r10, r24
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     346:	2b 01       	movw	r4, r22
     348:	3c 01       	movw	r6, r24
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	69 85       	ldd	r22, Y+9	; 0x09
     350:	7a 85       	ldd	r23, Y+10	; 0x0a
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__subsf3>
     366:	4b 01       	movw	r8, r22
     368:	5c 01       	movw	r10, r24
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__addsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__addsf3>
     382:	6d 87       	std	Y+13, r22	; 0x0d
     384:	7e 87       	std	Y+14, r23	; 0x0e
     386:	8f 87       	std	Y+15, r24	; 0x0f
     388:	98 8b       	std	Y+16, r25	; 0x10
     38a:	2d 81       	ldd	r18, Y+5	; 0x05
     38c:	3e 81       	ldd	r19, Y+6	; 0x06
     38e:	4f 81       	ldd	r20, Y+7	; 0x07
     390:	58 85       	ldd	r21, Y+8	; 0x08
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a4:	98 89       	ldd	r25, Y+16	; 0x10
     3a6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 ec       	ldi	r20, 0xC0	; 192
     3b0:	50 e4       	ldi	r21, 0x40	; 64
     3b2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a3 01       	movw	r20, r6
     3bc:	92 01       	movw	r18, r4
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__subsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__divsf3>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <m>
     3ea:	70 93 7b 02 	sts	0x027B, r23	; 0x80027b <m+0x1>
     3ee:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <m+0x2>
     3f2:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <m+0x3>
	c=ybar-m*xbar;
     3f6:	69 81       	ldd	r22, Y+1	; 0x01
     3f8:	7a 81       	ldd	r23, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	69 85       	ldd	r22, Y+9	; 0x09
     408:	7a 85       	ldd	r23, Y+10	; 0x0a
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__subsf3>
     412:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <__data_end>
     416:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <__data_end+0x1>
     41a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end+0x2>
     41e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <__data_end+0x3>
}
     422:	60 96       	adiw	r28, 0x10	; 16
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	08 95       	ret

0000044c <Bp_Read>:

int Bp_Read()
{
   ADCSRA |= (1<<ADSC);
     44c:	36 9a       	sbi	0x06, 6	; 6
   while(ADCSRA & (1<<ADSC));
     44e:	36 99       	sbic	0x06, 6	; 6
     450:	fe cf       	rjmp	.-4      	; 0x44e <Bp_Read+0x2>
   
   return ADC;
     452:	84 b1       	in	r24, 0x04	; 4
     454:	95 b1       	in	r25, 0x05	; 5
}
     456:	08 95       	ret

00000458 <Bp_Init>:

void Bp_Init()
{
	DDRA &= ~2;		/* Vref: Avcc, ADC channel: 1 */
     458:	d1 98       	cbi	0x1a, 1	; 26
	ADMUX = 0b11000001; 		//internal voltage 2.56V, right-justified, input ADC0
     45a:	81 ec       	ldi	r24, 0xC1	; 193
     45c:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	86 b9       	out	0x06, r24	; 6
     462:	08 95       	ret

00000464 <Bp_PrintBp>:
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
}

void Bp_PrintBp()
{
     464:	6f 92       	push	r6
     466:	7f 92       	push	r7
     468:	8f 92       	push	r8
     46a:	9f 92       	push	r9
     46c:	af 92       	push	r10
     46e:	bf 92       	push	r11
     470:	cf 92       	push	r12
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	00 d0       	rcall	.+0      	; 0x482 <Bp_PrintBp+0x1e>
     482:	00 d0       	rcall	.+0      	; 0x484 <Bp_PrintBp+0x20>
     484:	00 d0       	rcall	.+0      	; 0x486 <Bp_PrintBp+0x22>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
}
     48a:	6d b6       	in	r6, 0x3d	; 61
     48c:	7e b6       	in	r7, 0x3e	; 62
	
	/*  timing data */
    const double sampling_rate = 0.100 ;	   	// actually this is the _delay_ms val
    const int time_limit = 30 ;  				 //in seconds
    const int size=time_limit/(sampling_rate*2);
    int data_points[size+1];
     48e:	8d b7       	in	r24, 0x3d	; 61
     490:	9e b7       	in	r25, 0x3e	; 62
     492:	8e 52       	subi	r24, 0x2E	; 46
     494:	91 40       	sbci	r25, 0x01	; 1
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	9e bf       	out	0x3e, r25	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	8d bf       	out	0x3d, r24	; 61
     4a0:	ed b7       	in	r30, 0x3d	; 61
     4a2:	fe b7       	in	r31, 0x3e	; 62
     4a4:	31 96       	adiw	r30, 0x01	; 1
     4a6:	4f 01       	movw	r8, r30

	data_points[0]=0;
     4a8:	ed b7       	in	r30, 0x3d	; 61
     4aa:	fe b7       	in	r31, 0x3e	; 62
     4ac:	12 82       	std	Z+2, r1	; 0x02
     4ae:	11 82       	std	Z+1, r1	; 0x01
     4b0:	ad b6       	in	r10, 0x3d	; 61
     4b2:	be b6       	in	r11, 0x3e	; 62
     4b4:	f3 e0       	ldi	r31, 0x03	; 3
     4b6:	af 0e       	add	r10, r31
     4b8:	b1 1c       	adc	r11, r1
     4ba:	06 e9       	ldi	r16, 0x96	; 150
     4bc:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
		
		sprintf(val , "%2d",size-i);
     4be:	0f 2e       	mov	r0, r31
     4c0:	fb e6       	ldi	r31, 0x6B	; 107
     4c2:	cf 2e       	mov	r12, r31
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	df 2e       	mov	r13, r31
     4c8:	f0 2d       	mov	r31, r0
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	7c 01       	movw	r14, r24
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
     4d0:	0e 94 26 02 	call	0x44c	; 0x44c <Bp_Read>
     4d4:	f5 01       	movw	r30, r10
     4d6:	81 93       	st	Z+, r24
     4d8:	91 93       	st	Z+, r25
     4da:	5f 01       	movw	r10, r30
		
		sprintf(val , "%2d",size-i);
     4dc:	1f 93       	push	r17
     4de:	0f 93       	push	r16
     4e0:	df 92       	push	r13
     4e2:	cf 92       	push	r12
     4e4:	ff 92       	push	r15
     4e6:	ef 92       	push	r14
     4e8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <sprintf>
		Lcd_Position(LCDKEYPAD , 1, 6 );
     4ec:	46 e0       	ldi	r20, 0x06	; 6
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
		Lcd_Prints(LCDKEYPAD , val);
     4fa:	b7 01       	movw	r22, r14
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     502:	ff ef       	ldi	r31, 0xFF	; 255
     504:	20 e7       	ldi	r18, 0x70	; 112
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	f1 50       	subi	r31, 0x01	; 1
     50a:	20 40       	sbci	r18, 0x00	; 0
     50c:	80 40       	sbci	r24, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <Bp_PrintBp+0xa4>
     510:	00 c0       	rjmp	.+0      	; 0x512 <Bp_PrintBp+0xae>
     512:	00 00       	nop
     514:	01 50       	subi	r16, 0x01	; 1
     516:	11 09       	sbc	r17, r1
	/* /timing data */
	
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 3f       	cpi	r16, 0xFF	; 255
     526:	9f ef       	ldi	r25, 0xFF	; 255
     528:	19 07       	cpc	r17, r25
     52a:	91 f6       	brne	.-92     	; 0x4d0 <Bp_PrintBp+0x6c>

		_delay_ms(sampling_rate*1000);
	
	}

	regression(data_points,size);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	66 e1       	ldi	r22, 0x16	; 22
     532:	73 e4       	ldi	r23, 0x43	; 67
     534:	c4 01       	movw	r24, r8
     536:	0e 94 55 01 	call	0x2aa	; 0x2aa <regression>
     53a:	f4 01       	movw	r30, r8
     53c:	24 ed       	ldi	r18, 0xD4	; 212
     53e:	82 1a       	sub	r8, r18
     540:	2e ef       	ldi	r18, 0xFE	; 254
     542:	92 0a       	sbc	r9, r18
	int count3 =  0;
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
	
	//recorded wave form
	for(i=0;i<size;i++){	
		thresh=(i+2)*m+c;

		int a=data_points[i+1];//current value
     548:	22 81       	ldd	r18, Z+2	; 0x02
     54a:	33 81       	ldd	r19, Z+3	; 0x03
			count1+=1; //peak counting]
			if(a>data_points[i] && a>data_points[i+2]){
				count2+=1;
			}
		}
		if(a>data_points[i] && a>data_points[i+2])
     54c:	40 81       	ld	r20, Z
     54e:	51 81       	ldd	r21, Z+1	; 0x01
     550:	32 96       	adiw	r30, 0x02	; 2
     552:	42 17       	cp	r20, r18
     554:	53 07       	cpc	r21, r19
     556:	34 f4       	brge	.+12     	; 0x564 <Bp_PrintBp+0x100>
     558:	42 81       	ldd	r20, Z+2	; 0x02
     55a:	53 81       	ldd	r21, Z+3	; 0x03
     55c:	42 17       	cp	r20, r18
     55e:	53 07       	cpc	r21, r19
     560:	0c f4       	brge	.+2      	; 0x564 <Bp_PrintBp+0x100>
		{
			count3++;
     562:	01 96       	adiw	r24, 0x01	; 1

	regression(data_points,size);
	int count3 =  0;
	
	//recorded wave form
	for(i=0;i<size;i++){	
     564:	8e 16       	cp	r8, r30
     566:	9f 06       	cpc	r9, r31
     568:	79 f7       	brne	.-34     	; 0x548 <Bp_PrintBp+0xe4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     56a:	4a e0       	ldi	r20, 0x0A	; 10
     56c:	be 01       	movw	r22, r28
     56e:	6f 5f       	subi	r22, 0xFF	; 255
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	0e 94 cb 10 	call	0x2196	; 0x2196 <__itoa_ncheck>
			count3++;
		}
	}
	
    itoa(count3*(60/time_limit),val,10);
	Lcd_Position(LCDKEYPAD , 1,  10);
     57a:	4a e0       	ldi	r20, 0x0A	; 10
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , val);
     588:	be 01       	movw	r22, r28
     58a:	6f 5f       	subi	r22, 0xFF	; 255
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	
	Lcd_Position(LCDKEYPAD , 1,  13);
     594:	4d e0       	ldi	r20, 0x0D	; 13
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "BPM");
     5a2:	6f e6       	ldi	r22, 0x6F	; 111
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	84 e8       	ldi	r24, 0x84	; 132
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
}
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	7e be       	out	0x3e, r7	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	6d be       	out	0x3d, r6	; 61
     5c4:	26 96       	adiw	r28, 0x06	; 6
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	9f 90       	pop	r9
     5e6:	8f 90       	pop	r8
     5e8:	7f 90       	pop	r7
     5ea:	6f 90       	pop	r6
     5ec:	08 95       	ret

000005ee <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
     5ee:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
     5f2:	08 95       	ret

000005f4 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	2a 97       	sbiw	r28, 0x0a	; 10
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	16 2f       	mov	r17, r22
     60e:	07 2f       	mov	r16, r23
	HC05_SendString(text);
     610:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	83 e7       	ldi	r24, 0x73	; 115
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	8e 01       	movw	r16, r28
     622:	0f 5f       	subi	r16, 0xFF	; 255
     624:	1f 4f       	sbci	r17, 0xFF	; 255
     626:	1f 93       	push	r17
     628:	0f 93       	push	r16
     62a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <sprintf>
	HC05_SendString(temp);
     62e:	c8 01       	movw	r24, r16
     630:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
	HC05_SendString("\r\n");
     634:	8a e7       	ldi	r24, 0x7A	; 122
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	2a 96       	adiw	r28, 0x0a	; 10
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret

0000065e <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	2a 97       	sbiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     678:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
     67c:	fe 01       	movw	r30, r28
     67e:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     684:	c8 01       	movw	r24, r16
     686:	02 2e       	mov	r0, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <Error_ErrorBin+0x30>
     68a:	95 95       	asr	r25
     68c:	87 95       	ror	r24
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <Error_ErrorBin+0x2c>
     692:	81 70       	andi	r24, 0x01	; 1
     694:	80 5d       	subi	r24, 0xD0	; 208
     696:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	28 30       	cpi	r18, 0x08	; 8
     69e:	31 05       	cpc	r19, r1
     6a0:	89 f7       	brne	.-30     	; 0x684 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     6a2:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
	HC05_SendString("\r\n");
     6ac:	8a e7       	ldi	r24, 0x7A	; 122
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
     6b4:	2a 96       	adiw	r28, 0x0a	; 10
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <HC05_Init_Data_Mode>:

char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     6ca:	1b b8       	out	0x0b, r1	; 11
     6cc:	88 e1       	ldi	r24, 0x18	; 24
     6ce:	8a b9       	out	0x0a, r24	; 10
     6d0:	86 e8       	ldi	r24, 0x86	; 134
     6d2:	80 bd       	out	0x20, r24	; 32
     6d4:	83 e3       	ldi	r24, 0x33	; 51
     6d6:	89 b9       	out	0x09, r24	; 9
     6d8:	10 bc       	out	0x20, r1	; 32
     6da:	08 95       	ret

000006dc <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     6dc:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     6de:	5d 9b       	sbis	0x0b, 5	; 11
     6e0:	fe cf       	rjmp	.-4      	; 0x6de <HC05_SendChar+0x2>
}
     6e2:	08 95       	ret

000006e4 <HC05_SendString>:
void HC05_SendString(char * s)
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
	while(*s)
     6ea:	88 81       	ld	r24, Y
     6ec:	88 23       	and	r24, r24
     6ee:	31 f0       	breq	.+12     	; 0x6fc <HC05_SendString+0x18>
     6f0:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     6f2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     6f6:	89 91       	ld	r24, Y+
     6f8:	81 11       	cpse	r24, r1
     6fa:	fb cf       	rjmp	.-10     	; 0x6f2 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     702:	8a b3       	in	r24, 0x1a	; 26
     704:	83 70       	andi	r24, 0x03	; 3
     706:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     70c:	88 bb       	out	0x18, r24	; 24
     70e:	08 95       	ret

00000710 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     710:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <isNumber>
	isUpperCase = false;
     714:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <isUpperCase>
	position = 0;
     718:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <position+0x1>
     71c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <position>
	keyBuffer[position] = 0;
     720:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <keyBuffer>
     724:	08 95       	ret

00000726 <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	59 f4       	brne	.+22     	; 0x740 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     72a:	8d e7       	ldi	r24, 0x7D	; 125
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
		position = 0;
     732:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <position+0x1>
     736:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <position>
		keyBuffer[position]=0;
     73a:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <keyBuffer>
     73e:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     740:	fc 01       	movw	r30, r24
     742:	01 90       	ld	r0, Z+
     744:	00 20       	and	r0, r0
     746:	e9 f7       	brne	.-6      	; 0x742 <Keypad_WriteToBuffer+0x1c>
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	e8 1b       	sub	r30, r24
     74c:	f9 0b       	sbc	r31, r25
     74e:	e0 31       	cpi	r30, 0x10	; 16
     750:	f1 05       	cpc	r31, r1
     752:	28 f5       	brcc	.+74     	; 0x79e <Keypad_WriteToBuffer+0x78>
     754:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     756:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <position+0x1>
     75a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <position>
     75e:	1e 16       	cp	r1, r30
     760:	1f 06       	cpc	r1, r31
     762:	b4 f4       	brge	.+44     	; 0x790 <Keypad_WriteToBuffer+0x6a>
     764:	fc 01       	movw	r30, r24
     766:	a4 e8       	ldi	r26, 0x84	; 132
     768:	b2 e0       	ldi	r27, 0x02	; 2
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     76e:	81 91       	ld	r24, Z+
     770:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     772:	2f 5f       	subi	r18, 0xFF	; 255
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <position+0x1>
     77a:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <position>
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	ac f3       	brlt	.-22     	; 0x76e <Keypad_WriteToBuffer+0x48>
     784:	14 16       	cp	r1, r20
     786:	15 06       	cpc	r1, r21
     788:	2c f0       	brlt	.+10     	; 0x794 <Keypad_WriteToBuffer+0x6e>
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	02 c0       	rjmp	.+4      	; 0x794 <Keypad_WriteToBuffer+0x6e>
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     794:	fa 01       	movw	r30, r20
     796:	ec 57       	subi	r30, 0x7C	; 124
     798:	fd 4f       	sbci	r31, 0xFD	; 253
     79a:	10 82       	st	Z, r1
	}
}
     79c:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     79e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <position+0x1>
     7a2:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <position>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     7a6:	40 e1       	ldi	r20, 0x10	; 16
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	dc cf       	rjmp	.-72     	; 0x764 <Keypad_WriteToBuffer+0x3e>

000007ac <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <isNumber>
     7b2:	08 95       	ret

000007b4 <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     7b4:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <isNumber>
     7b8:	81 11       	cpse	r24, r1
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     7bc:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <isUpperCase>
     7c0:	81 11       	cpse	r24, r1
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     7c4:	85 e9       	ldi	r24, 0x95	; 149
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     7ca:	8d e8       	ldi	r24, 0x8D	; 141
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     7d0:	81 e9       	ldi	r24, 0x91	; 145
     7d2:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     7d4:	08 95       	ret

000007d6 <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     7da:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Keypad_GetMode>
     7de:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     7e0:	fc 01       	movw	r30, r24
     7e2:	01 90       	ld	r0, Z+
     7e4:	00 20       	and	r0, r0
     7e6:	e9 f7       	brne	.-6      	; 0x7e2 <Keypad_UpdateKeyMode+0xc>
     7e8:	ac 01       	movw	r20, r24
     7ea:	4e 1b       	sub	r20, r30
     7ec:	5f 0b       	sbc	r21, r31
     7ee:	4f 5e       	subi	r20, 0xEF	; 239
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     7fc:	be 01       	movw	r22, r28
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     80a:	89 b3       	in	r24, 0x19	; 25
}
     80c:	82 95       	swap	r24
     80e:	8f 70       	andi	r24, 0x0F	; 15
     810:	08 95       	ret

00000812 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
	int pin = PINA >> 4;
     818:	c9 b3       	in	r28, 0x19	; 25
     81a:	c2 95       	swap	r28
     81c:	cf 70       	andi	r28, 0x0F	; 15
     81e:	0c 2f       	mov	r16, r28
     820:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     822:	b8 01       	movw	r22, r16
     824:	89 e9       	ldi	r24, 0x99	; 153
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 2f 03 	call	0x65e	; 0x65e <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     82c:	c0 fd       	sbrc	r28, 0
     82e:	0c c0       	rjmp	.+24     	; 0x848 <Keypad_GetRow+0x36>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	98 01       	movw	r18, r16
     836:	08 2e       	mov	r0, r24
     838:	02 c0       	rjmp	.+4      	; 0x83e <Keypad_GetRow+0x2c>
     83a:	35 95       	asr	r19
     83c:	27 95       	ror	r18
     83e:	0a 94       	dec	r0
     840:	e2 f7       	brpl	.-8      	; 0x83a <Keypad_GetRow+0x28>
     842:	20 ff       	sbrs	r18, 0
     844:	04 c0       	rjmp	.+8      	; 0x84e <Keypad_GetRow+0x3c>
     846:	0c c0       	rjmp	.+24     	; 0x860 <__stack+0x1>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     84c:	09 c0       	rjmp	.+18     	; 0x860 <__stack+0x1>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	84 30       	cpi	r24, 0x04	; 4
     852:	91 05       	cpc	r25, r1
     854:	79 f7       	brne	.-34     	; 0x834 <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     856:	82 ea       	ldi	r24, 0xA2	; 162
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
	return -1;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
}
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
	int i = 7;
     870:	c7 e0       	ldi	r28, 0x07	; 7
     872:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     874:	01 e0       	ldi	r16, 0x01	; 1
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	28 b3       	in	r18, 0x18	; 24
     87a:	c8 01       	movw	r24, r16
     87c:	0c 2e       	mov	r0, r28
     87e:	02 c0       	rjmp	.+4      	; 0x884 <Keypad_GetCol+0x1c>
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	0a 94       	dec	r0
     886:	e2 f7       	brpl	.-8      	; 0x880 <Keypad_GetCol+0x18>
     888:	82 27       	eor	r24, r18
     88a:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     88c:	66 b3       	in	r22, 0x16	; 22
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	80 eb       	ldi	r24, 0xB0	; 176
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 2f 03 	call	0x65e	; 0x65e <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     898:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     89a:	82 95       	swap	r24
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	11 f4       	brne	.+4      	; 0x8a4 <Keypad_GetCol+0x3c>
		{
			return i;
     8a0:	8c 2f       	mov	r24, r28
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <Keypad_GetCol+0x4a>
		}
		i--;
     8a4:	21 97       	sbiw	r28, 0x01	; 1
     8a6:	40 f7       	brcc	.-48     	; 0x878 <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     8a8:	86 eb       	ldi	r24, 0xB6	; 182
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
	// report error
	return -1;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     8bc:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <position>
     8c0:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <position+0x1>
     8c4:	f9 01       	movw	r30, r18
     8c6:	ec 57       	subi	r30, 0x7C	; 124
     8c8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ca:	80 83       	st	Z, r24
	if(position < 16)
     8cc:	20 31       	cpi	r18, 0x10	; 16
     8ce:	31 05       	cpc	r19, r1
     8d0:	34 f4       	brge	.+12     	; 0x8de <addChar+0x22>
		position = position +1;
     8d2:	2f 5f       	subi	r18, 0xFF	; 255
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <position+0x1>
     8da:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <position>
	keyBuffer[position] = 0;
     8de:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <position>
     8e2:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <position+0x1>
     8e6:	ec 57       	subi	r30, 0x7C	; 124
     8e8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ea:	10 82       	st	Z, r1
     8ec:	08 95       	ret

000008ee <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     8ee:	cf 93       	push	r28
     8f0:	c8 2f       	mov	r28, r24
	if(key >= 30)
     8f2:	8e 31       	cpi	r24, 0x1E	; 30
     8f4:	24 f0       	brlt	.+8      	; 0x8fe <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     8f6:	84 ec       	ldi	r24, 0xC4	; 196
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
	if(key == 29) 
     8fe:	cd 31       	cpi	r28, 0x1D	; 29
     900:	99 f4       	brne	.+38     	; 0x928 <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     902:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <position>
     906:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <position+0x1>
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	29 f0       	breq	.+10     	; 0x918 <Keypad_AddKey+0x2a>
			position--;
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <position+0x1>
     914:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <position>
		keyBuffer[position] = 0;
     918:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <position>
     91c:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <position+0x1>
     920:	ec 57       	subi	r30, 0x7C	; 124
     922:	fd 4f       	sbci	r31, 0xFD	; 253
     924:	10 82       	st	Z, r1
     926:	57 c0       	rjmp	.+174    	; 0x9d6 <Keypad_AddKey+0xe8>
	}
	else if(key == 28)
     928:	cc 31       	cpi	r28, 0x1C	; 28
     92a:	21 f4       	brne	.+8      	; 0x934 <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <addChar>
     932:	51 c0       	rjmp	.+162    	; 0x9d6 <Keypad_AddKey+0xe8>
	}
	else if(key == 27)
     934:	cb 31       	cpi	r28, 0x1B	; 27
     936:	39 f4       	brne	.+14     	; 0x946 <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     938:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <isNumber>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	89 27       	eor	r24, r25
     940:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <isNumber>
     944:	48 c0       	rjmp	.+144    	; 0x9d6 <Keypad_AddKey+0xe8>
	}
	else if(isNumber) 
     946:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <isNumber>
     94a:	88 23       	and	r24, r24
     94c:	e9 f0       	breq	.+58     	; 0x988 <Keypad_AddKey+0x9a>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     94e:	9c 2f       	mov	r25, r28
     950:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     952:	93 30       	cpi	r25, 0x03	; 3
     954:	08 f0       	brcs	.+2      	; 0x958 <Keypad_AddKey+0x6a>
     956:	3f c0       	rjmp	.+126    	; 0x9d6 <Keypad_AddKey+0xe8>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     958:	c5 95       	asr	r28
     95a:	c5 95       	asr	r28
     95c:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     95e:	c3 30       	cpi	r28, 0x03	; 3
     960:	38 f4       	brcc	.+14     	; 0x970 <Keypad_AddKey+0x82>
			c = '1' + row * 3 + col;
     962:	8c 2f       	mov	r24, r28
     964:	88 0f       	add	r24, r24
     966:	c8 0f       	add	r28, r24
     968:	81 e3       	ldi	r24, 0x31	; 49
     96a:	89 0f       	add	r24, r25
     96c:	8c 0f       	add	r24, r28
     96e:	09 c0       	rjmp	.+18     	; 0x982 <Keypad_AddKey+0x94>
		}
		else if(col == 0) {
     970:	99 23       	and	r25, r25
     972:	21 f0       	breq	.+8      	; 0x97c <Keypad_AddKey+0x8e>
			c = '*';
		}
		else if(col == 1) {
     974:	91 30       	cpi	r25, 0x01	; 1
     976:	21 f0       	breq	.+8      	; 0x980 <Keypad_AddKey+0x92>
			c = '0';
		}
		else  {
			c = '#';
     978:	83 e2       	ldi	r24, 0x23	; 35
     97a:	03 c0       	rjmp	.+6      	; 0x982 <Keypad_AddKey+0x94>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     97c:	8a e2       	ldi	r24, 0x2A	; 42
     97e:	01 c0       	rjmp	.+2      	; 0x982 <Keypad_AddKey+0x94>
		}
		else if(col == 1) {
			c = '0';
     980:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     982:	0e 94 5e 04 	call	0x8bc	; 0x8bc <addChar>
     986:	27 c0       	rjmp	.+78     	; 0x9d6 <Keypad_AddKey+0xe8>
		
	}
	else if(key == 26)
     988:	ca 31       	cpi	r28, 0x1A	; 26
     98a:	39 f4       	brne	.+14     	; 0x99a <Keypad_AddKey+0xac>
	{
		// capslock
		isUpperCase = !isUpperCase;
     98c:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <isUpperCase>
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	89 27       	eor	r24, r25
     994:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <isUpperCase>
     998:	1e c0       	rjmp	.+60     	; 0x9d6 <Keypad_AddKey+0xe8>
	}
	else
	{
		// char
		char row = key >> 3;
     99a:	9c 2f       	mov	r25, r28
     99c:	95 95       	asr	r25
     99e:	95 95       	asr	r25
     9a0:	95 95       	asr	r25
		char col = key & 0b00000111;
     9a2:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     9a4:	93 30       	cpi	r25, 0x03	; 3
     9a6:	68 f4       	brcc	.+26     	; 0x9c2 <Keypad_AddKey+0xd4>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     9a8:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <isUpperCase>
     9ac:	81 11       	cpse	r24, r1
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <Keypad_AddKey+0xc6>
     9b0:	81 e6       	ldi	r24, 0x61	; 97
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <Keypad_AddKey+0xc8>
     9b4:	81 e4       	ldi	r24, 0x41	; 65
     9b6:	99 0f       	add	r25, r25
     9b8:	99 0f       	add	r25, r25
     9ba:	99 0f       	add	r25, r25
     9bc:	c9 0f       	add	r28, r25
     9be:	8c 0f       	add	r24, r28
     9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <Keypad_AddKey+0xe4>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     9c2:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <isUpperCase>
     9c6:	81 11       	cpse	r24, r1
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <Keypad_AddKey+0xe0>
     9ca:	89 e7       	ldi	r24, 0x79	; 121
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <Keypad_AddKey+0xe2>
     9ce:	89 e5       	ldi	r24, 0x59	; 89
     9d0:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     9d2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <addChar>
	}
	return ;
}
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     9de:	0e 94 09 04 	call	0x812	; 0x812 <Keypad_GetRow>
     9e2:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     9e4:	0e 94 34 04 	call	0x868	; 0x868 <Keypad_GetCol>
     9e8:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     9ea:	6c 2f       	mov	r22, r28
     9ec:	0c 2e       	mov	r0, r28
     9ee:	00 0c       	add	r0, r0
     9f0:	77 0b       	sbc	r23, r23
     9f2:	89 ed       	ldi	r24, 0xD9	; 217
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     9fa:	6d 2f       	mov	r22, r29
     9fc:	0d 2e       	mov	r0, r29
     9fe:	00 0c       	add	r0, r0
     a00:	77 0b       	sbc	r23, r23
     a02:	8d ed       	ldi	r24, 0xDD	; 221
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Error_ErrorNum>
	return row * 8 + col;
     a0a:	8c 2f       	mov	r24, r28
     a0c:	88 0f       	add	r24, r24
     a0e:	88 0f       	add	r24, r24
     a10:	88 0f       	add	r24, r24
     a12:	8d 0f       	add	r24, r29
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     a1a:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <currentState>
     a1e:	4e 2f       	mov	r20, r30
     a20:	ee 0f       	add	r30, r30
     a22:	55 0b       	sbc	r21, r21
     a24:	66 0b       	sbc	r22, r22
     a26:	77 0b       	sbc	r23, r23
     a28:	47 30       	cpi	r20, 0x07	; 7
     a2a:	51 05       	cpc	r21, r1
     a2c:	d0 f4       	brcc	.+52     	; 0xa62 <KeyProcessor_ProcessKey+0x48>
     a2e:	fa 01       	movw	r30, r20
     a30:	e6 5d       	subi	r30, 0xD6	; 214
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__tablejump2__>
	{
		case IDLE:
			Idle_ProcessKey(key);
     a38:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <Idle_ProcessKey>
			break;
     a3c:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     a3e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <EnteringName_ProcessKey>
			break;
     a42:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     a44:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <EnteringAge_ProcessKey>
			break;
     a48:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     a4a:	0e 94 8f 0b 	call	0x171e	; 0x171e <EnteringPhone_ProcessKey>
			break;
     a4e:	08 95       	ret
		case ENTERING_TEMP :
			EnteringTemp_ProcessKey(key);
     a50:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <EnteringTemp_ProcessKey>
			break;
     a54:	08 95       	ret
		case ENTERING_BP :
			EnteringBp_ProcessKey(key);
     a56:	0e 94 13 0b 	call	0x1626	; 0x1626 <EnteringBp_ProcessKey>
			break;
     a5a:	08 95       	ret
		case GENERATE_SERIAL :
			GenerateSerial_ProcessKey(key);
     a5c:	0e 94 a7 0c 	call	0x194e	; 0x194e <GenerateSerial_ProcessKey>
			break;
     a60:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     a62:	81 ee       	ldi	r24, 0xE1	; 225
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
     a6a:	08 95       	ret

00000a6c <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     a6c:	88 23       	and	r24, r24
     a6e:	19 f0       	breq	.+6      	; 0xa76 <Lcd_Init+0xa>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	39 f0       	breq	.+14     	; 0xa82 <Lcd_Init+0x16>
     a74:	24 c0       	rjmp	.+72     	; 0xabe <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     a76:	81 b3       	in	r24, 0x11	; 17
     a78:	8c 6f       	ori	r24, 0xFC	; 252
     a7a:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     a7c:	0e 94 a4 07 	call	0xf48	; 0xf48 <Lcd4_Init>
			break;
     a80:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <lcd_init>
			lcd_backlight(0);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_backlight>
     a8e:	2f ef       	ldi	r18, 0xFF	; 255
     a90:	84 e3       	ldi	r24, 0x34	; 52
     a92:	9c e0       	ldi	r25, 0x0C	; 12
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	80 40       	sbci	r24, 0x00	; 0
     a98:	90 40       	sbci	r25, 0x00	; 0
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <Lcd_Init+0x28>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <Lcd_Init+0x32>
     a9e:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_backlight>
     aa6:	2f ef       	ldi	r18, 0xFF	; 255
     aa8:	84 e3       	ldi	r24, 0x34	; 52
     aaa:	9c e0       	ldi	r25, 0x0C	; 12
     aac:	21 50       	subi	r18, 0x01	; 1
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	90 40       	sbci	r25, 0x00	; 0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <Lcd_Init+0x40>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <Lcd_Init+0x4a>
     ab6:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     ab8:	0e 94 b8 08 	call	0x1170	; 0x1170 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     abc:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     abe:	85 e0       	ldi	r24, 0x05	; 5
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
     ac6:	08 95       	ret

00000ac8 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     ac8:	88 23       	and	r24, r24
     aca:	19 f0       	breq	.+6      	; 0xad2 <Lcd_ClearScreen+0xa>
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	21 f0       	breq	.+8      	; 0xad8 <Lcd_ClearScreen+0x10>
     ad0:	06 c0       	rjmp	.+12     	; 0xade <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     ad2:	0e 94 80 07 	call	0xf00	; 0xf00 <Lcd4_Clear>
			break;
     ad6:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     ad8:	0e 94 b8 08 	call	0x1170	; 0x1170 <lcd_clrscr>
			break;
     adc:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     ade:	84 e2       	ldi	r24, 0x24	; 36
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
     ae6:	08 95       	ret

00000ae8 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     ae8:	88 23       	and	r24, r24
     aea:	19 f0       	breq	.+6      	; 0xaf2 <Lcd_Prints+0xa>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	29 f0       	breq	.+10     	; 0xafa <Lcd_Prints+0x12>
     af0:	08 c0       	rjmp	.+16     	; 0xb02 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     af2:	cb 01       	movw	r24, r22
     af4:	0e 94 1d 08 	call	0x103a	; 0x103a <Lcd4_Write_String>
			break;
     af8:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     afa:	cb 01       	movw	r24, r22
     afc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <lcd_puts>
			break;
     b00:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     b02:	84 e2       	ldi	r24, 0x24	; 36
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
     b0a:	08 95       	ret

00000b0c <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     b0c:	96 2f       	mov	r25, r22
	switch(lcdType)
     b0e:	88 23       	and	r24, r24
     b10:	19 f0       	breq	.+6      	; 0xb18 <Lcd_Position+0xc>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	31 f0       	breq	.+12     	; 0xb22 <Lcd_Position+0x16>
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     b18:	64 2f       	mov	r22, r20
     b1a:	89 2f       	mov	r24, r25
     b1c:	0e 94 87 07 	call	0xf0e	; 0xf0e <Lcd4_Set_Cursor>
		break;
     b20:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     b22:	84 2f       	mov	r24, r20
     b24:	0e 94 a2 08 	call	0x1144	; 0x1144 <lcd_gotoxy>
		break;
     b28:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     b2a:	8b e4       	ldi	r24, 0x4B	; 75
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
     b32:	08 95       	ret

00000b34 <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <Lcd_Printc+0x6>
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     b3e:	69 83       	std	Y+1, r22	; 0x01
     b40:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     b42:	be 01       	movw	r22, r28
     b44:	6f 5f       	subi	r22, 0xFF	; 255
     b46:	7f 4f       	sbci	r23, 0xFF	; 255
     b48:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
}
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	f8 2e       	mov	r15, r24
     b62:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	int i =0;
	while (str[i])
     b6c:	68 81       	ld	r22, Y
     b6e:	66 23       	and	r22, r22
     b70:	91 f0       	breq	.+36     	; 0xb96 <Lcd_PrintLine+0x40>
     b72:	8e 01       	movw	r16, r28
     b74:	0f 5f       	subi	r16, 0xFF	; 255
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	c0 e0       	ldi	r28, 0x00	; 0
     b7a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     b7c:	21 96       	adiw	r28, 0x01	; 1
     b7e:	8f 2d       	mov	r24, r15
     b80:	0e 94 9a 05 	call	0xb34	; 0xb34 <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     b84:	f8 01       	movw	r30, r16
     b86:	61 91       	ld	r22, Z+
     b88:	8f 01       	movw	r16, r30
     b8a:	61 11       	cpse	r22, r1
     b8c:	f7 cf       	rjmp	.-18     	; 0xb7c <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     b8e:	c0 31       	cpi	r28, 0x10	; 16
     b90:	d1 05       	cpc	r29, r1
     b92:	1c f0       	brlt	.+6      	; 0xb9a <Lcd_PrintLine+0x44>
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     b96:	c0 e0       	ldi	r28, 0x00	; 0
     b98:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     b9a:	60 e2       	ldi	r22, 0x20	; 32
     b9c:	8f 2d       	mov	r24, r15
     b9e:	0e 94 9a 05 	call	0xb34	; 0xb34 <Lcd_Printc>
     ba2:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     ba4:	c0 31       	cpi	r28, 0x10	; 16
     ba6:	d1 05       	cpc	r29, r1
     ba8:	c4 f3       	brlt	.-16     	; 0xb9a <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	08 95       	ret

00000bb6 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     bb6:	67 2b       	or	r22, r23
     bb8:	09 f0       	breq	.+2      	; 0xbbc <pinChange+0x6>
     bba:	9f c0       	rjmp	.+318    	; 0xcfa <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     bc0:	d8 98       	cbi	0x1b, 0	; 27
     bc2:	08 95       	ret
		else if(a == eS_PORTA1)
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	11 f4       	brne	.+4      	; 0xbce <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     bca:	d9 98       	cbi	0x1b, 1	; 27
     bcc:	08 95       	ret
		else if(a == eS_PORTA2)
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	91 05       	cpc	r25, r1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     bd4:	da 98       	cbi	0x1b, 2	; 27
     bd6:	08 95       	ret
		else if(a == eS_PORTA3)
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	91 05       	cpc	r25, r1
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     bde:	db 98       	cbi	0x1b, 3	; 27
     be0:	08 95       	ret
		else if(a == eS_PORTA4)
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	91 05       	cpc	r25, r1
     be6:	11 f4       	brne	.+4      	; 0xbec <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     be8:	dc 98       	cbi	0x1b, 4	; 27
     bea:	08 95       	ret
		else if(a == eS_PORTA5)
     bec:	85 30       	cpi	r24, 0x05	; 5
     bee:	91 05       	cpc	r25, r1
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     bf2:	dd 98       	cbi	0x1b, 5	; 27
     bf4:	08 95       	ret
		else if(a == eS_PORTA6)
     bf6:	86 30       	cpi	r24, 0x06	; 6
     bf8:	91 05       	cpc	r25, r1
     bfa:	11 f4       	brne	.+4      	; 0xc00 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     bfc:	de 98       	cbi	0x1b, 6	; 27
     bfe:	08 95       	ret
		else if(a == eS_PORTA7)
     c00:	87 30       	cpi	r24, 0x07	; 7
     c02:	91 05       	cpc	r25, r1
     c04:	11 f4       	brne	.+4      	; 0xc0a <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     c06:	df 98       	cbi	0x1b, 7	; 27
     c08:	08 95       	ret
		else if(a == eS_PORTB0)
     c0a:	8a 30       	cpi	r24, 0x0A	; 10
     c0c:	91 05       	cpc	r25, r1
     c0e:	11 f4       	brne	.+4      	; 0xc14 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     c10:	c0 98       	cbi	0x18, 0	; 24
     c12:	08 95       	ret
		else if(a == eS_PORTB1)
     c14:	8b 30       	cpi	r24, 0x0B	; 11
     c16:	91 05       	cpc	r25, r1
     c18:	11 f4       	brne	.+4      	; 0xc1e <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     c1a:	c1 98       	cbi	0x18, 1	; 24
     c1c:	08 95       	ret
		else if(a == eS_PORTB2)
     c1e:	8c 30       	cpi	r24, 0x0C	; 12
     c20:	91 05       	cpc	r25, r1
     c22:	11 f4       	brne	.+4      	; 0xc28 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     c24:	c2 98       	cbi	0x18, 2	; 24
     c26:	08 95       	ret
		else if(a == eS_PORTB3)
     c28:	8d 30       	cpi	r24, 0x0D	; 13
     c2a:	91 05       	cpc	r25, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     c2e:	c3 98       	cbi	0x18, 3	; 24
     c30:	08 95       	ret
		else if(a == eS_PORTB4)
     c32:	8e 30       	cpi	r24, 0x0E	; 14
     c34:	91 05       	cpc	r25, r1
     c36:	11 f4       	brne	.+4      	; 0xc3c <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     c38:	c4 98       	cbi	0x18, 4	; 24
     c3a:	08 95       	ret
		else if(a == eS_PORTB5)
     c3c:	8f 30       	cpi	r24, 0x0F	; 15
     c3e:	91 05       	cpc	r25, r1
     c40:	11 f4       	brne	.+4      	; 0xc46 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     c42:	c5 98       	cbi	0x18, 5	; 24
     c44:	08 95       	ret
		else if(a == eS_PORTB6)
     c46:	80 31       	cpi	r24, 0x10	; 16
     c48:	91 05       	cpc	r25, r1
     c4a:	11 f4       	brne	.+4      	; 0xc50 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     c4c:	c6 98       	cbi	0x18, 6	; 24
     c4e:	08 95       	ret
		else if(a == eS_PORTB7)
     c50:	81 31       	cpi	r24, 0x11	; 17
     c52:	91 05       	cpc	r25, r1
     c54:	11 f4       	brne	.+4      	; 0xc5a <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     c56:	c7 98       	cbi	0x18, 7	; 24
     c58:	08 95       	ret
		else if(a == eS_PORTC0)
     c5a:	84 31       	cpi	r24, 0x14	; 20
     c5c:	91 05       	cpc	r25, r1
     c5e:	11 f4       	brne	.+4      	; 0xc64 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     c60:	a8 98       	cbi	0x15, 0	; 21
     c62:	08 95       	ret
		else if(a == eS_PORTC1)
     c64:	85 31       	cpi	r24, 0x15	; 21
     c66:	91 05       	cpc	r25, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     c6a:	a9 98       	cbi	0x15, 1	; 21
     c6c:	08 95       	ret
		else if(a == eS_PORTC2)
     c6e:	86 31       	cpi	r24, 0x16	; 22
     c70:	91 05       	cpc	r25, r1
     c72:	11 f4       	brne	.+4      	; 0xc78 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     c74:	aa 98       	cbi	0x15, 2	; 21
     c76:	08 95       	ret
		else if(a == eS_PORTC3)
     c78:	87 31       	cpi	r24, 0x17	; 23
     c7a:	91 05       	cpc	r25, r1
     c7c:	11 f4       	brne	.+4      	; 0xc82 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     c7e:	ab 98       	cbi	0x15, 3	; 21
     c80:	08 95       	ret
		else if(a == eS_PORTC4)
     c82:	88 31       	cpi	r24, 0x18	; 24
     c84:	91 05       	cpc	r25, r1
     c86:	11 f4       	brne	.+4      	; 0xc8c <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     c88:	ac 98       	cbi	0x15, 4	; 21
     c8a:	08 95       	ret
		else if(a == eS_PORTC5)
     c8c:	89 31       	cpi	r24, 0x19	; 25
     c8e:	91 05       	cpc	r25, r1
     c90:	11 f4       	brne	.+4      	; 0xc96 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     c92:	ad 98       	cbi	0x15, 5	; 21
     c94:	08 95       	ret
		else if(a == eS_PORTC6)
     c96:	8a 31       	cpi	r24, 0x1A	; 26
     c98:	91 05       	cpc	r25, r1
     c9a:	11 f4       	brne	.+4      	; 0xca0 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     c9c:	ae 98       	cbi	0x15, 6	; 21
     c9e:	08 95       	ret
		else if(a == eS_PORTC7)
     ca0:	8b 31       	cpi	r24, 0x1B	; 27
     ca2:	91 05       	cpc	r25, r1
     ca4:	11 f4       	brne	.+4      	; 0xcaa <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     ca6:	af 98       	cbi	0x15, 7	; 21
     ca8:	08 95       	ret
		else if(a == eS_PORTD0)
     caa:	8e 31       	cpi	r24, 0x1E	; 30
     cac:	91 05       	cpc	r25, r1
     cae:	11 f4       	brne	.+4      	; 0xcb4 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     cb0:	90 98       	cbi	0x12, 0	; 18
     cb2:	08 95       	ret
		else if(a == eS_PORTD1)
     cb4:	8f 31       	cpi	r24, 0x1F	; 31
     cb6:	91 05       	cpc	r25, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     cba:	91 98       	cbi	0x12, 1	; 18
     cbc:	08 95       	ret
		else if(a == eS_PORTD2)
     cbe:	80 32       	cpi	r24, 0x20	; 32
     cc0:	91 05       	cpc	r25, r1
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     cc4:	92 98       	cbi	0x12, 2	; 18
     cc6:	08 95       	ret
		else if(a == eS_PORTD3)
     cc8:	81 32       	cpi	r24, 0x21	; 33
     cca:	91 05       	cpc	r25, r1
     ccc:	11 f4       	brne	.+4      	; 0xcd2 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     cce:	93 98       	cbi	0x12, 3	; 18
     cd0:	08 95       	ret
		else if(a == eS_PORTD4)
     cd2:	82 32       	cpi	r24, 0x22	; 34
     cd4:	91 05       	cpc	r25, r1
     cd6:	11 f4       	brne	.+4      	; 0xcdc <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     cd8:	94 98       	cbi	0x12, 4	; 18
     cda:	08 95       	ret
		else if(a == eS_PORTD5)
     cdc:	83 32       	cpi	r24, 0x23	; 35
     cde:	91 05       	cpc	r25, r1
     ce0:	11 f4       	brne	.+4      	; 0xce6 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     ce2:	95 98       	cbi	0x12, 5	; 18
     ce4:	08 95       	ret
		else if(a == eS_PORTD6)
     ce6:	84 32       	cpi	r24, 0x24	; 36
     ce8:	91 05       	cpc	r25, r1
     cea:	11 f4       	brne	.+4      	; 0xcf0 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     cec:	96 98       	cbi	0x12, 6	; 18
     cee:	08 95       	ret
		else if(a == eS_PORTD7)
     cf0:	85 97       	sbiw	r24, 0x25	; 37
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <pinChange+0x140>
     cf4:	9f c0       	rjmp	.+318    	; 0xe34 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     cf6:	97 98       	cbi	0x12, 7	; 18
     cf8:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	11 f4       	brne	.+4      	; 0xd02 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     cfe:	d8 9a       	sbi	0x1b, 0	; 27
     d00:	08 95       	ret
		else if(a == eS_PORTA1)
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	11 f4       	brne	.+4      	; 0xd0c <pinChange+0x156>
		PORTA |= (1<<PA1);
     d08:	d9 9a       	sbi	0x1b, 1	; 27
     d0a:	08 95       	ret
		else if(a == eS_PORTA2)
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	91 05       	cpc	r25, r1
     d10:	11 f4       	brne	.+4      	; 0xd16 <pinChange+0x160>
		PORTA |= (1<<PA2);
     d12:	da 9a       	sbi	0x1b, 2	; 27
     d14:	08 95       	ret
		else if(a == eS_PORTA3)
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 05       	cpc	r25, r1
     d1a:	11 f4       	brne	.+4      	; 0xd20 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     d1c:	db 9a       	sbi	0x1b, 3	; 27
     d1e:	08 95       	ret
		else if(a == eS_PORTA4)
     d20:	84 30       	cpi	r24, 0x04	; 4
     d22:	91 05       	cpc	r25, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <pinChange+0x174>
		PORTA |= (1<<PA4);
     d26:	dc 9a       	sbi	0x1b, 4	; 27
     d28:	08 95       	ret
		else if(a == eS_PORTA5)
     d2a:	85 30       	cpi	r24, 0x05	; 5
     d2c:	91 05       	cpc	r25, r1
     d2e:	11 f4       	brne	.+4      	; 0xd34 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     d30:	dd 9a       	sbi	0x1b, 5	; 27
     d32:	08 95       	ret
		else if(a == eS_PORTA6)
     d34:	86 30       	cpi	r24, 0x06	; 6
     d36:	91 05       	cpc	r25, r1
     d38:	11 f4       	brne	.+4      	; 0xd3e <pinChange+0x188>
		PORTA |= (1<<PA6);
     d3a:	de 9a       	sbi	0x1b, 6	; 27
     d3c:	08 95       	ret
		else if(a == eS_PORTA7)
     d3e:	87 30       	cpi	r24, 0x07	; 7
     d40:	91 05       	cpc	r25, r1
     d42:	11 f4       	brne	.+4      	; 0xd48 <pinChange+0x192>
		PORTA |= (1<<PA7);
     d44:	df 9a       	sbi	0x1b, 7	; 27
     d46:	08 95       	ret
		else if(a == eS_PORTB0)
     d48:	8a 30       	cpi	r24, 0x0A	; 10
     d4a:	91 05       	cpc	r25, r1
     d4c:	11 f4       	brne	.+4      	; 0xd52 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     d4e:	c0 9a       	sbi	0x18, 0	; 24
     d50:	08 95       	ret
		else if(a == eS_PORTB1)
     d52:	8b 30       	cpi	r24, 0x0B	; 11
     d54:	91 05       	cpc	r25, r1
     d56:	11 f4       	brne	.+4      	; 0xd5c <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     d58:	c1 9a       	sbi	0x18, 1	; 24
     d5a:	08 95       	ret
		else if(a == eS_PORTB2)
     d5c:	8c 30       	cpi	r24, 0x0C	; 12
     d5e:	91 05       	cpc	r25, r1
     d60:	11 f4       	brne	.+4      	; 0xd66 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     d62:	c2 9a       	sbi	0x18, 2	; 24
     d64:	08 95       	ret
		else if(a == eS_PORTB3)
     d66:	8d 30       	cpi	r24, 0x0D	; 13
     d68:	91 05       	cpc	r25, r1
     d6a:	11 f4       	brne	.+4      	; 0xd70 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     d6c:	c3 9a       	sbi	0x18, 3	; 24
     d6e:	08 95       	ret
		else if(a == eS_PORTB4)
     d70:	8e 30       	cpi	r24, 0x0E	; 14
     d72:	91 05       	cpc	r25, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     d76:	c4 9a       	sbi	0x18, 4	; 24
     d78:	08 95       	ret
		else if(a == eS_PORTB5)
     d7a:	8f 30       	cpi	r24, 0x0F	; 15
     d7c:	91 05       	cpc	r25, r1
     d7e:	11 f4       	brne	.+4      	; 0xd84 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     d80:	c5 9a       	sbi	0x18, 5	; 24
     d82:	08 95       	ret
		else if(a == eS_PORTB6)
     d84:	80 31       	cpi	r24, 0x10	; 16
     d86:	91 05       	cpc	r25, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     d8a:	c6 9a       	sbi	0x18, 6	; 24
     d8c:	08 95       	ret
		else if(a == eS_PORTB7)
     d8e:	81 31       	cpi	r24, 0x11	; 17
     d90:	91 05       	cpc	r25, r1
     d92:	11 f4       	brne	.+4      	; 0xd98 <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     d94:	c7 9a       	sbi	0x18, 7	; 24
     d96:	08 95       	ret
		else if(a == eS_PORTC0)
     d98:	84 31       	cpi	r24, 0x14	; 20
     d9a:	91 05       	cpc	r25, r1
     d9c:	11 f4       	brne	.+4      	; 0xda2 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     d9e:	a8 9a       	sbi	0x15, 0	; 21
     da0:	08 95       	ret
		else if(a == eS_PORTC1)
     da2:	85 31       	cpi	r24, 0x15	; 21
     da4:	91 05       	cpc	r25, r1
     da6:	11 f4       	brne	.+4      	; 0xdac <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     da8:	a9 9a       	sbi	0x15, 1	; 21
     daa:	08 95       	ret
		else if(a == eS_PORTC2)
     dac:	86 31       	cpi	r24, 0x16	; 22
     dae:	91 05       	cpc	r25, r1
     db0:	11 f4       	brne	.+4      	; 0xdb6 <pinChange+0x200>
		PORTC |= (1<<PC2);
     db2:	aa 9a       	sbi	0x15, 2	; 21
     db4:	08 95       	ret
		else if(a == eS_PORTC3)
     db6:	87 31       	cpi	r24, 0x17	; 23
     db8:	91 05       	cpc	r25, r1
     dba:	11 f4       	brne	.+4      	; 0xdc0 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     dbc:	ab 9a       	sbi	0x15, 3	; 21
     dbe:	08 95       	ret
		else if(a == eS_PORTC4)
     dc0:	88 31       	cpi	r24, 0x18	; 24
     dc2:	91 05       	cpc	r25, r1
     dc4:	11 f4       	brne	.+4      	; 0xdca <pinChange+0x214>
		PORTC |= (1<<PC4);
     dc6:	ac 9a       	sbi	0x15, 4	; 21
     dc8:	08 95       	ret
		else if(a == eS_PORTC5)
     dca:	89 31       	cpi	r24, 0x19	; 25
     dcc:	91 05       	cpc	r25, r1
     dce:	11 f4       	brne	.+4      	; 0xdd4 <pinChange+0x21e>
		PORTC |= (1<<PC5);
     dd0:	ad 9a       	sbi	0x15, 5	; 21
     dd2:	08 95       	ret
		else if(a == eS_PORTC6)
     dd4:	8a 31       	cpi	r24, 0x1A	; 26
     dd6:	91 05       	cpc	r25, r1
     dd8:	11 f4       	brne	.+4      	; 0xdde <pinChange+0x228>
		PORTC |= (1<<PC6);
     dda:	ae 9a       	sbi	0x15, 6	; 21
     ddc:	08 95       	ret
		else if(a == eS_PORTC7)
     dde:	8b 31       	cpi	r24, 0x1B	; 27
     de0:	91 05       	cpc	r25, r1
     de2:	11 f4       	brne	.+4      	; 0xde8 <pinChange+0x232>
		PORTC |= (1<<PC7);
     de4:	af 9a       	sbi	0x15, 7	; 21
     de6:	08 95       	ret
		else if(a == eS_PORTD0)
     de8:	8e 31       	cpi	r24, 0x1E	; 30
     dea:	91 05       	cpc	r25, r1
     dec:	11 f4       	brne	.+4      	; 0xdf2 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     dee:	90 9a       	sbi	0x12, 0	; 18
     df0:	08 95       	ret
		else if(a == eS_PORTD1)
     df2:	8f 31       	cpi	r24, 0x1F	; 31
     df4:	91 05       	cpc	r25, r1
     df6:	11 f4       	brne	.+4      	; 0xdfc <pinChange+0x246>
		PORTD |= (1<<PD1);
     df8:	91 9a       	sbi	0x12, 1	; 18
     dfa:	08 95       	ret
		else if(a == eS_PORTD2)
     dfc:	80 32       	cpi	r24, 0x20	; 32
     dfe:	91 05       	cpc	r25, r1
     e00:	11 f4       	brne	.+4      	; 0xe06 <pinChange+0x250>
		PORTD |= (1<<PD2);
     e02:	92 9a       	sbi	0x12, 2	; 18
     e04:	08 95       	ret
		else if(a == eS_PORTD3)
     e06:	81 32       	cpi	r24, 0x21	; 33
     e08:	91 05       	cpc	r25, r1
     e0a:	11 f4       	brne	.+4      	; 0xe10 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     e0c:	93 9a       	sbi	0x12, 3	; 18
     e0e:	08 95       	ret
		else if(a == eS_PORTD4)
     e10:	82 32       	cpi	r24, 0x22	; 34
     e12:	91 05       	cpc	r25, r1
     e14:	11 f4       	brne	.+4      	; 0xe1a <pinChange+0x264>
		PORTD |= (1<<PD4);
     e16:	94 9a       	sbi	0x12, 4	; 18
     e18:	08 95       	ret
		else if(a == eS_PORTD5)
     e1a:	83 32       	cpi	r24, 0x23	; 35
     e1c:	91 05       	cpc	r25, r1
     e1e:	11 f4       	brne	.+4      	; 0xe24 <pinChange+0x26e>
		PORTD |= (1<<PD5);
     e20:	95 9a       	sbi	0x12, 5	; 18
     e22:	08 95       	ret
		else if(a == eS_PORTD6)
     e24:	84 32       	cpi	r24, 0x24	; 36
     e26:	91 05       	cpc	r25, r1
     e28:	11 f4       	brne	.+4      	; 0xe2e <pinChange+0x278>
		PORTD |= (1<<PD6);
     e2a:	96 9a       	sbi	0x12, 6	; 18
     e2c:	08 95       	ret
		else if(a == eS_PORTD7)
     e2e:	85 97       	sbiw	r24, 0x25	; 37
     e30:	09 f4       	brne	.+2      	; 0xe34 <pinChange+0x27e>
		PORTD |= (1<<PD7);
     e32:	97 9a       	sbi	0x12, 7	; 18
     e34:	08 95       	ret

00000e36 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     e36:	cf 93       	push	r28
     e38:	c8 2f       	mov	r28, r24
	if(a & 1)
     e3a:	80 ff       	sbrs	r24, 0
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <Lcd4_Port+0x16>
	pinChange(D4,1);
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	83 e2       	ldi	r24, 0x23	; 35
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     e4a:	06 c0       	rjmp	.+12     	; 0xe58 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	83 e2       	ldi	r24, 0x23	; 35
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
	
	if(a & 2)
     e58:	c1 ff       	sbrs	r28, 1
     e5a:	07 c0       	rjmp	.+14     	; 0xe6a <Lcd4_Port+0x34>
	pinChange(D5,1);
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	82 e2       	ldi	r24, 0x22	; 34
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	82 e2       	ldi	r24, 0x22	; 34
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
	
	if(a & 4)
     e76:	c2 ff       	sbrs	r28, 2
     e78:	07 c0       	rjmp	.+14     	; 0xe88 <Lcd4_Port+0x52>
	pinChange(D6,1);
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	81 e2       	ldi	r24, 0x21	; 33
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	81 e2       	ldi	r24, 0x21	; 33
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
	
	if(a & 8)
     e94:	c3 ff       	sbrs	r28, 3
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <Lcd4_Port+0x70>
	pinChange(D7,1);
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e2       	ldi	r24, 0x20	; 32
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 e2       	ldi	r24, 0x20	; 32
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
}
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     eb6:	cf 93       	push	r28
     eb8:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	85 e2       	ldi	r24, 0x25	; 37
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
	Lcd4_Port(a);
     ec6:	8c 2f       	mov	r24, r28
     ec8:	0e 94 1b 07 	call	0xe36	; 0xe36 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	84 e2       	ldi	r24, 0x24	; 36
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     ed8:	8f ec       	ldi	r24, 0xCF	; 207
     eda:	97 e0       	ldi	r25, 0x07	; 7
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <Lcd4_Cmd+0x26>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <Lcd4_Cmd+0x2c>
     ee2:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	84 e2       	ldi	r24, 0x24	; 36
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     ef0:	8f ec       	ldi	r24, 0xCF	; 207
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <Lcd4_Cmd+0x3e>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <Lcd4_Cmd+0x44>
     efa:	00 00       	nop
	_delay_ms(1);
}
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
     f0c:	08 95       	ret

00000f0e <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     f0e:	cf 93       	push	r28
     f10:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     f12:	81 11       	cpse	r24, r1
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	86 0f       	add	r24, r22
     f1a:	82 95       	swap	r24
     f1c:	8f 70       	andi	r24, 0x0F	; 15
     f1e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f22:	8c 2f       	mov	r24, r28
     f24:	8f 70       	andi	r24, 0x0F	; 15
     f26:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	51 f4       	brne	.+20     	; 0xf44 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     f30:	80 ec       	ldi	r24, 0xC0	; 192
     f32:	86 0f       	add	r24, r22
     f34:	82 95       	swap	r24
     f36:	8f 70       	andi	r24, 0x0F	; 15
     f38:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f3c:	8c 2f       	mov	r24, r28
     f3e:	8f 70       	andi	r24, 0x0F	; 15
     f40:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	}
}
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	0e 94 1b 07 	call	0xe36	; 0xe36 <Lcd4_Port>
     f4e:	8f e3       	ldi	r24, 0x3F	; 63
     f50:	9c e9       	ldi	r25, 0x9C	; 156
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <Lcd4_Init+0xa>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <Lcd4_Init+0x10>
     f58:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
     f60:	8f e0       	ldi	r24, 0x0F	; 15
     f62:	97 e2       	ldi	r25, 0x27	; 39
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <Lcd4_Init+0x1c>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <Lcd4_Init+0x22>
     f6a:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
     f72:	8f ee       	ldi	r24, 0xEF	; 239
     f74:	95 e5       	ldi	r25, 0x55	; 85
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <Lcd4_Init+0x2e>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <Lcd4_Init+0x34>
     f7c:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     f90:	88 e0       	ldi	r24, 0x08	; 8
     f92:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     f9c:	8c e0       	ldi	r24, 0x0C	; 12
     f9e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     fa8:	86 e0       	ldi	r24, 0x06	; 6
     faa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Lcd4_Cmd>
	Lcd4_Clear();
     fae:	0e 94 80 07 	call	0xf00	; 0xf00 <Lcd4_Clear>
     fb2:	08 95       	ret

00000fb4 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     fb4:	cf 93       	push	r28
     fb6:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	85 e2       	ldi	r24, 0x25	; 37
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     fc4:	8c 2f       	mov	r24, r28
     fc6:	82 95       	swap	r24
     fc8:	8f 70       	andi	r24, 0x0F	; 15
     fca:	0e 94 1b 07 	call	0xe36	; 0xe36 <Lcd4_Port>
	pinChange(EN,1);
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	84 e2       	ldi	r24, 0x24	; 36
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     fda:	8f ec       	ldi	r24, 0xCF	; 207
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <Lcd4_Write_Char+0x2a>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <Lcd4_Write_Char+0x30>
     fe4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	84 e2       	ldi	r24, 0x24	; 36
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
     ff2:	8f ec       	ldi	r24, 0xCF	; 207
     ff4:	97 e0       	ldi	r25, 0x07	; 7
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <Lcd4_Write_Char+0x42>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <Lcd4_Write_Char+0x48>
     ffc:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     ffe:	8c 2f       	mov	r24, r28
    1000:	8f 70       	andi	r24, 0x0F	; 15
    1002:	0e 94 1b 07 	call	0xe36	; 0xe36 <Lcd4_Port>
	pinChange(EN,1);
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	84 e2       	ldi	r24, 0x24	; 36
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
    1012:	8f ec       	ldi	r24, 0xCF	; 207
    1014:	97 e0       	ldi	r25, 0x07	; 7
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <Lcd4_Write_Char+0x62>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <Lcd4_Write_Char+0x68>
    101c:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	84 e2       	ldi	r24, 0x24	; 36
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pinChange>
    102a:	8f ec       	ldi	r24, 0xCF	; 207
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <Lcd4_Write_Char+0x7a>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <Lcd4_Write_Char+0x80>
    1034:	00 00       	nop
	_delay_ms(1);
}
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    1040:	88 81       	ld	r24, Y
    1042:	88 23       	and	r24, r24
    1044:	31 f0       	breq	.+12     	; 0x1052 <Lcd4_Write_String+0x18>
    1046:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
    1048:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    104c:	89 91       	ld	r24, Y+
    104e:	81 11       	cpse	r24, r1
    1050:	fb cf       	rjmp	.-10     	; 0x1048 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	7b 01       	movw	r14, r22
    1066:	14 2f       	mov	r17, r20
    1068:	88 0f       	add	r24, r24
    106a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <i2c_start>
    106e:	81 11       	cpse	r24, r1
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <I2C_WRITESEQ+0x3e>
    1072:	11 23       	and	r17, r17
    1074:	91 f0       	breq	.+36     	; 0x109a <I2C_WRITESEQ+0x42>
    1076:	e7 01       	movw	r28, r14
    1078:	11 50       	subi	r17, 0x01	; 1
    107a:	01 2f       	mov	r16, r17
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	0f 5f       	subi	r16, 0xFF	; 255
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	0e 0d       	add	r16, r14
    1084:	1f 1d       	adc	r17, r15
    1086:	89 91       	ld	r24, Y+
    1088:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2c_write>
    108c:	c0 17       	cp	r28, r16
    108e:	d1 07       	cpc	r29, r17
    1090:	d1 f7       	brne	.-12     	; 0x1086 <I2C_WRITESEQ+0x2e>
    1092:	c0 e0       	ldi	r28, 0x00	; 0
    1094:	03 c0       	rjmp	.+6      	; 0x109c <I2C_WRITESEQ+0x44>
    1096:	c1 e0       	ldi	r28, 0x01	; 1
    1098:	01 c0       	rjmp	.+2      	; 0x109c <I2C_WRITESEQ+0x44>
    109a:	c0 e0       	ldi	r28, 0x00	; 0
    109c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2c_stop>
    10a0:	8c 2f       	mov	r24, r28
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	08 95       	ret

000010b0 <wr_lcd_mode>:
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <wr_lcd_mode+0xa>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <wr_lcd_mode+0xc>
    10bc:	1f 92       	push	r1
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	08 2f       	mov	r16, r24
    10c4:	68 30       	cpi	r22, 0x08	; 8
    10c6:	71 f4       	brne	.+28     	; 0x10e4 <wr_lcd_mode+0x34>
    10c8:	81 11       	cpse	r24, r1
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <wr_lcd_mode+0x20>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <wr_lcd_mode+0x22>
    10d0:	88 e0       	ldi	r24, 0x08	; 8
    10d2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <backlight.1943>
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	66 e6       	ldi	r22, 0x66	; 102
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	87 e2       	ldi	r24, 0x27	; 39
    10de:	0e 94 2c 08 	call	0x1058	; 0x1058 <I2C_WRITESEQ>
    10e2:	26 c0       	rjmp	.+76     	; 0x1130 <wr_lcd_mode+0x80>
    10e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <backlight.1943>
    10e8:	16 2f       	mov	r17, r22
    10ea:	18 2b       	or	r17, r24
    10ec:	19 83       	std	Y+1, r17	; 0x01
    10ee:	80 2f       	mov	r24, r16
    10f0:	80 7f       	andi	r24, 0xF0	; 240
    10f2:	84 60       	ori	r24, 0x04	; 4
    10f4:	81 2b       	or	r24, r17
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	8b 83       	std	Y+3, r24	; 0x03
    10fc:	20 e1       	ldi	r18, 0x10	; 16
    10fe:	02 9f       	mul	r16, r18
    1100:	c0 01       	movw	r24, r0
    1102:	11 24       	eor	r1, r1
    1104:	81 2b       	or	r24, r17
    1106:	84 60       	ori	r24, 0x04	; 4
    1108:	8c 83       	std	Y+4, r24	; 0x04
    110a:	8b 7f       	andi	r24, 0xFB	; 251
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	45 e0       	ldi	r20, 0x05	; 5
    1110:	be 01       	movw	r22, r28
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	87 e2       	ldi	r24, 0x27	; 39
    1118:	0e 94 2c 08 	call	0x1058	; 0x1058 <I2C_WRITESEQ>
    111c:	10 fd       	sbrc	r17, 0
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <wr_lcd_mode+0x80>
    1120:	03 30       	cpi	r16, 0x03	; 3
    1122:	30 f4       	brcc	.+12     	; 0x1130 <wr_lcd_mode+0x80>
    1124:	e3 ef       	ldi	r30, 0xF3	; 243
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	31 97       	sbiw	r30, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <wr_lcd_mode+0x78>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <wr_lcd_mode+0x7e>
    112e:	00 00       	nop
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <lcd_gotoxy>:
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	d8 2f       	mov	r29, r24
    114a:	c6 2f       	mov	r28, r22
    114c:	e6 2f       	mov	r30, r22
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	e9 59       	subi	r30, 0x99	; 153
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	98 2f       	mov	r25, r24
    1156:	90 68       	ori	r25, 0x80	; 128
    1158:	80 81       	ld	r24, Z
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	89 2b       	or	r24, r25
    115e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    1162:	d0 93 96 02 	sts	0x0296, r29	; 0x800296 <_lcd_x>
    1166:	c0 93 97 02 	sts	0x0297, r28	; 0x800297 <_lcd_y>
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <lcd_clrscr>:
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    1178:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_lcd_y>
    117c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_lcd_x>
    1180:	08 95       	ret

00001182 <lcd_putc>:
    1182:	cf 93       	push	r28
    1184:	c8 2f       	mov	r28, r24
    1186:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <_lcd_x>
    118a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <_lcd_maxx>
    118e:	98 17       	cp	r25, r24
    1190:	18 f4       	brcc	.+6      	; 0x1198 <lcd_putc+0x16>
    1192:	ca 30       	cpi	r28, 0x0A	; 10
    1194:	59 f4       	brne	.+22     	; 0x11ac <lcd_putc+0x2a>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <lcd_putc+0x3e>
    1198:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <_lcd_y>
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <_lcd_y>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 a2 08 	call	0x1144	; 0x1144 <lcd_gotoxy>
    11a8:	ca 30       	cpi	r28, 0x0A	; 10
    11aa:	91 f0       	breq	.+36     	; 0x11d0 <lcd_putc+0x4e>
    11ac:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_lcd_x>
    11b0:	8f 5f       	subi	r24, 0xFF	; 255
    11b2:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <_lcd_x>
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	8c 2f       	mov	r24, r28
    11ba:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <lcd_putc+0x4e>
    11c0:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <_lcd_y>
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <_lcd_y>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 a2 08 	call	0x1144	; 0x1144 <lcd_gotoxy>
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <lcd_puts>:
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
    11da:	88 81       	ld	r24, Y
    11dc:	88 23       	and	r24, r24
    11de:	31 f0       	breq	.+12     	; 0x11ec <lcd_puts+0x18>
    11e0:	21 96       	adiw	r28, 0x01	; 1
    11e2:	0e 94 c1 08 	call	0x1182	; 0x1182 <lcd_putc>
    11e6:	89 91       	ld	r24, Y+
    11e8:	81 11       	cpse	r24, r1
    11ea:	fb cf       	rjmp	.-10     	; 0x11e2 <lcd_puts+0xe>
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <lcd_init+0xa>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <lcd_init+0xc>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <lcd_init+0xe>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
    1206:	80 e3       	ldi	r24, 0x30	; 48
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	94 e3       	ldi	r25, 0x34	; 52
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	8c 83       	std	Y+4, r24	; 0x04
    1214:	94 e2       	ldi	r25, 0x24	; 36
    1216:	9d 83       	std	Y+5, r25	; 0x05
    1218:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
    121a:	80 e1       	ldi	r24, 0x10	; 16
    121c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
    1220:	e7 e6       	ldi	r30, 0x67	; 103
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 5f       	subi	r24, 0xF0	; 240
    1228:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
    122a:	81 81       	ldd	r24, Z+1	; 0x01
    122c:	80 5f       	subi	r24, 0xF0	; 240
    122e:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
    1230:	bd 9a       	sbi	0x17, 5	; 23
    1232:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
    1234:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_init>
    1238:	8b e4       	ldi	r24, 0x4B	; 75
    123a:	9d e1       	ldi	r25, 0x1D	; 29
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <lcd_init+0x4a>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <lcd_init+0x50>
    1242:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
    1244:	43 e0       	ldi	r20, 0x03	; 3
    1246:	be 01       	movw	r22, r28
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	87 e2       	ldi	r24, 0x27	; 39
    124e:	0e 94 2c 08 	call	0x1058	; 0x1058 <I2C_WRITESEQ>
    1252:	18 2f       	mov	r17, r24
    1254:	81 ee       	ldi	r24, 0xE1	; 225
    1256:	94 e0       	ldi	r25, 0x04	; 4
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <lcd_init+0x66>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <lcd_init+0x6c>
    125e:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    1260:	43 e0       	ldi	r20, 0x03	; 3
    1262:	be 01       	movw	r22, r28
    1264:	6f 5f       	subi	r22, 0xFF	; 255
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	87 e2       	ldi	r24, 0x27	; 39
    126a:	0e 94 2c 08 	call	0x1058	; 0x1058 <I2C_WRITESEQ>
    126e:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    1270:	43 e0       	ldi	r20, 0x03	; 3
    1272:	be 01       	movw	r22, r28
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	87 e2       	ldi	r24, 0x27	; 39
    127a:	0e 94 2c 08 	call	0x1058	; 0x1058 <I2C_WRITESEQ>
    127e:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
    1280:	43 e0       	ldi	r20, 0x03	; 3
    1282:	be 01       	movw	r22, r28
    1284:	6c 5f       	subi	r22, 0xFC	; 252
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	87 e2       	ldi	r24, 0x27	; 39
    128a:	0e 94 2c 08 	call	0x1058	; 0x1058 <I2C_WRITESEQ>
    128e:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	88 e2       	ldi	r24, 0x28	; 40
    1294:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
    1298:	81 2b       	or	r24, r17
    129a:	09 f0       	breq	.+2      	; 0x129e <lcd_init+0xac>
    129c:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	8c e0       	ldi	r24, 0x0C	; 12
    12a2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	86 e0       	ldi	r24, 0x06	; 6
    12aa:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	80 2f       	mov	r24, r16
    12ba:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
}
    12be:	26 96       	adiw	r28, 0x06	; 6
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
    12d4:	68 e0       	ldi	r22, 0x08	; 8
    12d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <wr_lcd_mode>
    12da:	08 95       	ret

000012dc <Lm35_Init>:
#include "../all.h"

void Lm35_Init()
{
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
    12dc:	80 ec       	ldi	r24, 0xC0	; 192
    12de:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	86 b9       	out	0x06, r24	; 6
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
	DDRA &= ~1;
    12e4:	d0 98       	cbi	0x1a, 0	; 26
    12e6:	08 95       	ret

000012e8 <Lm35_GetTemp>:

float Lm35_GetTemp()
{
	float tempC, tempF, vref = 2.56;

	ADCSRA |= (1<<ADSC);
    12e8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    12ea:	36 99       	sbic	0x06, 6	; 6
    12ec:	fe cf       	rjmp	.-4      	; 0x12ea <Lm35_GetTemp+0x2>

	unsigned int i = ADC;
    12ee:	64 b1       	in	r22, 0x04	; 4
    12f0:	75 b1       	in	r23, 0x05	; 5
	tempC = (i * vref * 1000.0) / (10.0 * 1024);
	tempF = tempC * (9.0 / 5)  + 32.0;

	return tempF;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__floatunsisf>
    12fa:	2a e0       	ldi	r18, 0x0A	; 10
    12fc:	37 ed       	ldi	r19, 0xD7	; 215
    12fe:	43 e2       	ldi	r20, 0x23	; 35
    1300:	50 e4       	ldi	r21, 0x40	; 64
    1302:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a e7       	ldi	r20, 0x7A	; 122
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e2       	ldi	r20, 0x20	; 32
    1318:	56 e4       	ldi	r21, 0x46	; 70
    131a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__divsf3>
    131e:	26 e6       	ldi	r18, 0x66	; 102
    1320:	36 e6       	ldi	r19, 0x66	; 102
    1322:	46 ee       	ldi	r20, 0xE6	; 230
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__mulsf3>
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	52 e4       	ldi	r21, 0x42	; 66
    1332:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__addsf3>
    1336:	08 95       	ret

00001338 <enqueue>:
	if(!empty(qptr))
	return &qptr->queue[qptr->rear_num];
	else
	return NULL;

}
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	fc 01       	movw	r30, r24
    1342:	e2 52       	subi	r30, 0x22	; 34
    1344:	fd 4f       	sbci	r31, 0xFD	; 253
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	31 83       	std	Z+1, r19	; 0x01
    1350:	20 83       	st	Z, r18
    1352:	69 e4       	ldi	r22, 0x49	; 73
    1354:	62 9f       	mul	r22, r18
    1356:	a0 01       	movw	r20, r0
    1358:	63 9f       	mul	r22, r19
    135a:	50 0d       	add	r21, r0
    135c:	11 24       	eor	r1, r1
    135e:	dc 01       	movw	r26, r24
    1360:	a4 0f       	add	r26, r20
    1362:	b5 1f       	adc	r27, r21
    1364:	89 e4       	ldi	r24, 0x49	; 73
    1366:	fe 01       	movw	r30, r28
    1368:	35 96       	adiw	r30, 0x05	; 5
    136a:	01 90       	ld	r0, Z+
    136c:	0d 92       	st	X+, r0
    136e:	8a 95       	dec	r24
    1370:	e1 f7       	brne	.-8      	; 0x136a <enqueue+0x32>
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <front>:
    1378:	fc 01       	movw	r30, r24
    137a:	e4 52       	subi	r30, 0x24	; 36
    137c:	fd 4f       	sbci	r31, 0xFD	; 253
    137e:	40 81       	ld	r20, Z
    1380:	51 81       	ldd	r21, Z+1	; 0x01
    1382:	32 96       	adiw	r30, 0x02	; 2
    1384:	20 81       	ld	r18, Z
    1386:	31 81       	ldd	r19, Z+1	; 0x01
    1388:	24 17       	cp	r18, r20
    138a:	35 07       	cpc	r19, r21
    138c:	4c f0       	brlt	.+18     	; 0x13a0 <front+0x28>
    138e:	69 e4       	ldi	r22, 0x49	; 73
    1390:	64 9f       	mul	r22, r20
    1392:	90 01       	movw	r18, r0
    1394:	65 9f       	mul	r22, r21
    1396:	30 0d       	add	r19, r0
    1398:	11 24       	eor	r1, r1
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	08 95       	ret
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	08 95       	ret

000013a6 <currentPatientSerial>:

int currentPatientSerial(struct Queue *qptr)
{
	return front(qptr)->serial;
    13a6:	0e 94 bc 09 	call	0x1378	; 0x1378 <front>
    13aa:	89 5b       	subi	r24, 0xB9	; 185
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
}
    13ae:	fc 01       	movw	r30, r24
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	08 95       	ret

000013b6 <nextPatientSerial>:

int nextPatientSerial(struct Queue *qptr)
{
	return qptr->queue[qptr->front_num + 1].serial;
    13b6:	fc 01       	movw	r30, r24
    13b8:	e4 52       	subi	r30, 0x24	; 36
    13ba:	fd 4f       	sbci	r31, 0xFD	; 253
    13bc:	40 81       	ld	r20, Z
    13be:	51 81       	ldd	r21, Z+1	; 0x01
    13c0:	4f 5f       	subi	r20, 0xFF	; 255
    13c2:	5f 4f       	sbci	r21, 0xFF	; 255
    13c4:	69 e4       	ldi	r22, 0x49	; 73
    13c6:	64 9f       	mul	r22, r20
    13c8:	90 01       	movw	r18, r0
    13ca:	65 9f       	mul	r22, r21
    13cc:	30 0d       	add	r19, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	fc 01       	movw	r30, r24
    13d2:	e2 0f       	add	r30, r18
    13d4:	f3 1f       	adc	r31, r19
    13d6:	e9 5b       	subi	r30, 0xB9	; 185
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	08 95       	ret

000013e0 <main>:
};

void Queue_Init(struct Queue *qptr)
{
	//toq=0;
	qptr->front_num = 0;
    13e0:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <q+0x2dd>
    13e4:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <q+0x2dc>
	qptr->rear_num = -1;
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <q+0x2df>
    13f0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <q+0x2de>

int main(void)
{
	Queue_Init(&q);
	
	HC05_Init_Data_Mode();
    13f4:	0e 94 65 03 	call	0x6ca	; 0x6ca <HC05_Init_Data_Mode>
	//HC05_Init_ATCommand_Mode();
	
	HC05_SendString("hello there");
    13f8:	8f e6       	ldi	r24, 0x6F	; 111
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 36 05 	call	0xa6c	; 0xa6c <Lcd_Init>
	Lcd_Init(LCDNOTICE);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	0e 94 36 05 	call	0xa6c	; 0xa6c <Lcd_Init>
	
	Lcd_Position(LCDNOTICE , 0,0);
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    141a:	6b e7       	ldi	r22, 0x7B	; 123
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Lcd_Position(LCDNOTICE , 0,0);
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    1432:	6b e7       	ldi	r22, 0x7B	; 123
    1434:	71 e0       	ldi	r23, 0x01	; 1
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    143c:	6b e7       	ldi	r22, 0x7B	; 123
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	
	States_GotoState(IDLE);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
	//States_GotoState(ENTERING_BP);
	
	Keypad_Init();
    144c:	0e 94 81 03 	call	0x702	; 0x702 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
    1450:	0e 94 05 04 	call	0x80a	; 0x80a <Keypad_KeyPressed>
    1454:	88 23       	and	r24, r24
    1456:	b1 f0       	breq	.+44     	; 0x1484 <main+0xa4>
    1458:	8f e3       	ldi	r24, 0x3F	; 63
    145a:	9c e9       	ldi	r25, 0x9C	; 156
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <main+0x7c>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <main+0x82>
    1462:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
    1464:	0e 94 05 04 	call	0x80a	; 0x80a <Keypad_KeyPressed>
    1468:	88 23       	and	r24, r24
    146a:	61 f0       	breq	.+24     	; 0x1484 <main+0xa4>
			{
				int_fast8_t x = Keypad_GetKey();
    146c:	0e 94 ed 04 	call	0x9da	; 0x9da <Keypad_GetKey>
    1470:	ef e3       	ldi	r30, 0x3F	; 63
    1472:	fc e9       	ldi	r31, 0x9C	; 156
    1474:	31 97       	sbiw	r30, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <main+0x94>
    1478:	00 c0       	rjmp	.+0      	; 0x147a <main+0x9a>
    147a:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
    147c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <KeyProcessor_ProcessKey>
				Keypad_Init();
    1480:	0e 94 81 03 	call	0x702	; 0x702 <Keypad_Init>
			}
		}
		States_Refresh();
    1484:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <States_Refresh>
		DisplaySerial();
    1488:	0e 94 9c 0a 	call	0x1538	; 0x1538 <DisplaySerial>
	}
    148c:	e1 cf       	rjmp	.-62     	; 0x1450 <main+0x70>

0000148e <Patient_UpdateName>:
struct Patient currentPatient ;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
    148e:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
    1492:	08 95       	ret

00001494 <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
    1494:	41 96       	adiw	r24, 0x11	; 17
    1496:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
    149a:	08 95       	ret

0000149c <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
    149c:	82 96       	adiw	r24, 0x22	; 34
    149e:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
    14a2:	08 95       	ret

000014a4 <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
    14a4:	89 5b       	subi	r24, 0xB9	; 185
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	fc 01       	movw	r30, r24
    14aa:	71 83       	std	Z+1, r23	; 0x01
    14ac:	60 83       	st	Z, r22
    14ae:	08 95       	ret

000014b0 <Patient_UpdateTemperature>:
}
void Patient_UpdateTemperature(struct Patient *p, char *newTemp)
{
	strcpy(p->temperature , newTemp);
    14b0:	c3 96       	adiw	r24, 0x33	; 51
    14b2:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
    14b6:	08 95       	ret

000014b8 <Patient_UpdateBp>:
}
void Patient_UpdateBp(struct Patient *p, char *newBp)
{
	strcpy(p->bp, newBp);
    14b8:	cd 96       	adiw	r24, 0x3d	; 61
    14ba:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
    14be:	08 95       	ret

000014c0 <Current_Serial>:
	Lcd_Prints(LCDNOTICE,"Next: ");
	Next_Serial();
}

void Current_Serial()
{
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
	dtostrf((float) currentPatientSerial(), 4, 0, curr);
    14c4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <currentPatientSerial>
    14c8:	bc 01       	movw	r22, r24
    14ca:	99 0f       	add	r25, r25
    14cc:	88 0b       	sbc	r24, r24
    14ce:	99 0b       	sbc	r25, r25
    14d0:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    14d4:	03 ec       	ldi	r16, 0xC3	; 195
    14d6:	15 e0       	ldi	r17, 0x05	; 5
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	44 e0       	ldi	r20, 0x04	; 4
    14dc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <dtostrf>
	Lcd_Position(LCDNOTICE, 0, 9);
    14e0:	49 e0       	ldi	r20, 0x09	; 9
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDNOTICE, curr);
    14ee:	b8 01       	movw	r22, r16
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
}
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <Next_Serial>:

void Next_Serial()
{
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
	dtostrf((float) nextPatientSerial(), 4, 0, curr);
    1500:	0e 94 db 09 	call	0x13b6	; 0x13b6 <nextPatientSerial>
    1504:	bc 01       	movw	r22, r24
    1506:	99 0f       	add	r25, r25
    1508:	88 0b       	sbc	r24, r24
    150a:	99 0b       	sbc	r25, r25
    150c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    1510:	03 ec       	ldi	r16, 0xC3	; 195
    1512:	15 e0       	ldi	r17, 0x05	; 5
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	44 e0       	ldi	r20, 0x04	; 4
    1518:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <dtostrf>
	Lcd_Position(LCDNOTICE, 1, 6);
    151c:	46 e0       	ldi	r20, 0x06	; 6
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDNOTICE, curr);
    152a:	b8 01       	movw	r22, r16
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <DisplaySerial>:
#include "../../all.h"

char curr[5];
void DisplaySerial()
{
    Lcd_ClearScreen(LCDNOTICE);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	0e 94 64 05 	call	0xac8	; 0xac8 <Lcd_ClearScreen>
	Lcd_Position(LCDNOTICE,0,0);
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDNOTICE,"Current: ");
    154c:	66 e9       	ldi	r22, 0x96	; 150
    154e:	71 e0       	ldi	r23, 0x01	; 1
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Current_Serial();
    1556:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <Current_Serial>
	Lcd_Position(LCDNOTICE,1,0);
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDNOTICE,"Next: ");
    1568:	60 ea       	ldi	r22, 0xA0	; 160
    156a:	71 e0       	ldi	r23, 0x01	; 1
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Next_Serial();
    1572:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <Next_Serial>
    1576:	08 95       	ret

00001578 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
    1578:	47 ea       	ldi	r20, 0xA7	; 167
    157a:	51 e0       	ldi	r21, 0x01	; 1
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
	Keypad_InitNumpad();
    1586:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    158a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
    158e:	8b e8       	ldi	r24, 0x8B	; 139
    1590:	95 e0       	ldi	r25, 0x05	; 5
    1592:	0e 94 93 03 	call	0x726	; 0x726 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1596:	44 e8       	ldi	r20, 0x84	; 132
    1598:	52 e0       	ldi	r21, 0x02	; 2
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
    15a4:	08 95       	ret

000015a6 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    15a6:	8f 31       	cpi	r24, 0x1F	; 31
    15a8:	61 f4       	brne	.+24     	; 0x15c2 <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    15aa:	64 e8       	ldi	r22, 0x84	; 132
    15ac:	72 e0       	ldi	r23, 0x02	; 2
    15ae:	8a e7       	ldi	r24, 0x7A	; 122
    15b0:	95 e0       	ldi	r25, 0x05	; 5
    15b2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    15b6:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    15c0:	08 95       	ret
	}
	else if(key == 30)
    15c2:	8e 31       	cpi	r24, 0x1E	; 30
    15c4:	61 f4       	brne	.+24     	; 0x15de <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    15c6:	64 e8       	ldi	r22, 0x84	; 132
    15c8:	72 e0       	ldi	r23, 0x02	; 2
    15ca:	8a e7       	ldi	r24, 0x7A	; 122
    15cc:	95 e0       	ldi	r25, 0x05	; 5
    15ce:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    15d2:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    15dc:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    15de:	0e 94 77 04 	call	0x8ee	; 0x8ee <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    15e2:	44 e8       	ldi	r20, 0x84	; 132
    15e4:	52 e0       	ldi	r21, 0x02	; 2
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    15f0:	84 e8       	ldi	r24, 0x84	; 132
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    15f8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Keypad_UpdateKeyMode>
    15fc:	08 95       	ret

000015fe <EnteringBp_Init>:
#include "../../all.h"

void EnteringBp_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Finger on green-");
    15fe:	42 eb       	ldi	r20, 0xB2	; 178
    1600:	51 e0       	ldi	r21, 0x01	; 1
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
	Lcd_PrintLine(LCDKEYPAD , 1, "Light ");
    160c:	43 ec       	ldi	r20, 0xC3	; 195
    160e:	51 e0       	ldi	r21, 0x01	; 1
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
	Bp_Init();
    161a:	0e 94 2c 02 	call	0x458	; 0x458 <Bp_Init>
    161e:	08 95       	ret

00001620 <EntetingBp_Refresh>:
}

void EntetingBp_Refresh()
{
	
	Bp_PrintBp();
    1620:	0e 94 32 02 	call	0x464	; 0x464 <Bp_PrintBp>
    1624:	08 95       	ret

00001626 <EnteringBp_ProcessKey>:
}

void EnteringBp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1626:	8f 31       	cpi	r24, 0x1F	; 31
    1628:	61 f4       	brne	.+24     	; 0x1642 <EnteringBp_ProcessKey+0x1c>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    162a:	64 e8       	ldi	r22, 0x84	; 132
    162c:	72 e0       	ldi	r23, 0x02	; 2
    162e:	8a e7       	ldi	r24, 0x7A	; 122
    1630:	95 e0       	ldi	r25, 0x05	; 5
    1632:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    1636:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(GENERATE_SERIAL);
    163a:	86 e0       	ldi	r24, 0x06	; 6
    163c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    1640:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    1642:	8e 31       	cpi	r24, 0x1E	; 30
    1644:	59 f4       	brne	.+22     	; 0x165c <EnteringBp_ProcessKey+0x36>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    1646:	64 e8       	ldi	r22, 0x84	; 132
    1648:	72 e0       	ldi	r23, 0x02	; 2
    164a:	8a e7       	ldi	r24, 0x7A	; 122
    164c:	95 e0       	ldi	r25, 0x05	; 5
    164e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    1652:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    165c:	08 95       	ret

0000165e <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 64 05 	call	0xac8	; 0xac8 <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
    1672:	6a ec       	ldi	r22, 0xCA	; 202
    1674:	71 e0       	ldi	r23, 0x01	; 1
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Keypad_UpdateKeyMode();
    167c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
    1680:	8a e7       	ldi	r24, 0x7A	; 122
    1682:	95 e0       	ldi	r25, 0x05	; 5
    1684:	0e 94 93 03 	call	0x726	; 0x726 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1688:	44 e8       	ldi	r20, 0x84	; 132
    168a:	52 e0       	ldi	r21, 0x02	; 2
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
    1696:	08 95       	ret

00001698 <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1698:	8f 31       	cpi	r24, 0x1F	; 31
    169a:	61 f4       	brne	.+24     	; 0x16b4 <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    169c:	64 e8       	ldi	r22, 0x84	; 132
    169e:	72 e0       	ldi	r23, 0x02	; 2
    16a0:	8a e7       	ldi	r24, 0x7A	; 122
    16a2:	95 e0       	ldi	r25, 0x05	; 5
    16a4:	0e 94 47 0a 	call	0x148e	; 0x148e <Patient_UpdateName>
		Keypad_ResetBuffer();
    16a8:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    16b2:	08 95       	ret
	}
	else if(key == 30)
    16b4:	8e 31       	cpi	r24, 0x1E	; 30
    16b6:	61 f4       	brne	.+24     	; 0x16d0 <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    16b8:	64 e8       	ldi	r22, 0x84	; 132
    16ba:	72 e0       	ldi	r23, 0x02	; 2
    16bc:	8a e7       	ldi	r24, 0x7A	; 122
    16be:	95 e0       	ldi	r25, 0x05	; 5
    16c0:	0e 94 47 0a 	call	0x148e	; 0x148e <Patient_UpdateName>
		Keypad_ResetBuffer();
    16c4:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    16ce:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    16d0:	0e 94 77 04 	call	0x8ee	; 0x8ee <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    16d4:	44 e8       	ldi	r20, 0x84	; 132
    16d6:	52 e0       	ldi	r21, 0x02	; 2
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    16e2:	84 e8       	ldi	r24, 0x84	; 132
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    16ea:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Keypad_UpdateKeyMode>
    16ee:	08 95       	ret

000016f0 <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
    16f0:	46 ed       	ldi	r20, 0xD6	; 214
    16f2:	51 e0       	ldi	r21, 0x01	; 1
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    16fe:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1702:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    1706:	8c e9       	ldi	r24, 0x9C	; 156
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	0e 94 93 03 	call	0x726	; 0x726 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    170e:	44 e8       	ldi	r20, 0x84	; 132
    1710:	52 e0       	ldi	r21, 0x02	; 2
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
    171c:	08 95       	ret

0000171e <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    171e:	8f 31       	cpi	r24, 0x1F	; 31
    1720:	61 f4       	brne	.+24     	; 0x173a <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    1722:	64 e8       	ldi	r22, 0x84	; 132
    1724:	72 e0       	ldi	r23, 0x02	; 2
    1726:	8a e7       	ldi	r24, 0x7A	; 122
    1728:	95 e0       	ldi	r25, 0x05	; 5
    172a:	0e 94 4e 0a 	call	0x149c	; 0x149c <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    172e:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    1738:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    173a:	8e 31       	cpi	r24, 0x1E	; 30
    173c:	61 f4       	brne	.+24     	; 0x1756 <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    173e:	64 e8       	ldi	r22, 0x84	; 132
    1740:	72 e0       	ldi	r23, 0x02	; 2
    1742:	8a e7       	ldi	r24, 0x7A	; 122
    1744:	95 e0       	ldi	r25, 0x05	; 5
    1746:	0e 94 4e 0a 	call	0x149c	; 0x149c <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    174a:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    1754:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1756:	0e 94 77 04 	call	0x8ee	; 0x8ee <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    175a:	44 e8       	ldi	r20, 0x84	; 132
    175c:	52 e0       	ldi	r21, 0x02	; 2
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    1768:	84 e8       	ldi	r24, 0x84	; 132
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <HC05_SendString>
		
		Keypad_InitNumpad();
    1770:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    1774:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Keypad_UpdateKeyMode>
    1778:	08 95       	ret

0000177a <EnteringTemp_Init>:
#include "../../all.h"

void EnteringTemp_Init()
{
	Lcd_PrintLine(LCDKEYPAD, 0, "Temperature:");
    177a:	40 ee       	ldi	r20, 0xE0	; 224
    177c:	51 e0       	ldi	r21, 0x01	; 1
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
    Lm35_Init();
    1788:	0e 94 6e 09 	call	0x12dc	; 0x12dc <Lm35_Init>
    178c:	08 95       	ret

0000178e <EnteringTemp_Refresh>:
}

void EnteringTemp_Refresh()
{
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	64 97       	sbiw	r28, 0x14	; 20
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
	float tempF = Lm35_GetTemp();
    17a6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lm35_GetTemp>
	char tempF_txt[20];
	dtostrf(tempF, 5, 2, tempF_txt);
    17aa:	8e 01       	movw	r16, r28
    17ac:	0f 5f       	subi	r16, 0xFF	; 255
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	45 e0       	ldi	r20, 0x05	; 5
    17b4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <dtostrf>
	Lcd_PrintLine(LCDKEYPAD, 1, tempF_txt);
    17b8:	a8 01       	movw	r20, r16
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0e 94 ab 05 	call	0xb56	; 0xb56 <Lcd_PrintLine>
	strcpy(keyBuffer, tempF_txt);
    17c4:	b8 01       	movw	r22, r16
    17c6:	84 e8       	ldi	r24, 0x84	; 132
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
}
    17ce:	64 96       	adiw	r28, 0x14	; 20
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	08 95       	ret

000017e4 <EnteringTemp_ProcessKey>:

void EnteringTemp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    17e4:	8f 31       	cpi	r24, 0x1F	; 31
    17e6:	61 f4       	brne	.+24     	; 0x1800 <EnteringTemp_ProcessKey+0x1c>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    17e8:	64 e8       	ldi	r22, 0x84	; 132
    17ea:	72 e0       	ldi	r23, 0x02	; 2
    17ec:	8a e7       	ldi	r24, 0x7A	; 122
    17ee:	95 e0       	ldi	r25, 0x05	; 5
    17f0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    17f4:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_BP);
    17f8:	85 e0       	ldi	r24, 0x05	; 5
    17fa:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    17fe:	08 95       	ret
	}
	else if(key == 30)
    1800:	8e 31       	cpi	r24, 0x1E	; 30
    1802:	59 f4       	brne	.+22     	; 0x181a <EnteringTemp_ProcessKey+0x36>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    1804:	64 e8       	ldi	r22, 0x84	; 132
    1806:	72 e0       	ldi	r23, 0x02	; 2
    1808:	8a e7       	ldi	r24, 0x7A	; 122
    180a:	95 e0       	ldi	r25, 0x05	; 5
    180c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    1810:	0e 94 88 03 	call	0x710	; 0x710 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    181a:	08 95       	ret

0000181c <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount);
	Update_PatientsList();
}

void Update_PatientsList()
{
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));
    1820:	89 e4       	ldi	r24, 0x49	; 73
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <malloc>
    1828:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    182a:	6a e7       	ldi	r22, 0x7A	; 122
    182c:	75 e0       	ldi	r23, 0x05	; 5
    182e:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
	strcpy(cp->age, currentPatient.age);
    1832:	6b e8       	ldi	r22, 0x8B	; 139
    1834:	75 e0       	ldi	r23, 0x05	; 5
    1836:	ce 01       	movw	r24, r28
    1838:	41 96       	adiw	r24, 0x11	; 17
    183a:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    183e:	6c e9       	ldi	r22, 0x9C	; 156
    1840:	75 e0       	ldi	r23, 0x05	; 5
    1842:	ce 01       	movw	r24, r28
    1844:	82 96       	adiw	r24, 0x22	; 34
    1846:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
	cp->serial = currentPatient.serial;
    184a:	fe 01       	movw	r30, r28
    184c:	e9 5b       	subi	r30, 0xB9	; 185
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <currentPatient+0x47>
    1854:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <currentPatient+0x48>
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
	strcpy(cp->temperature, currentPatient.temperature);
    185c:	6d ea       	ldi	r22, 0xAD	; 173
    185e:	75 e0       	ldi	r23, 0x05	; 5
    1860:	ce 01       	movw	r24, r28
    1862:	c3 96       	adiw	r24, 0x33	; 51
    1864:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
	strcpy(cp->bp, currentPatient.bp);
    1868:	67 eb       	ldi	r22, 0xB7	; 183
    186a:	75 e0       	ldi	r23, 0x05	; 5
    186c:	ce 01       	movw	r24, r28
    186e:	cd 96       	adiw	r24, 0x3d	; 61
    1870:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcpy>
	enqueue(cp);	
    1874:	ce 01       	movw	r24, r28
    1876:	0e 94 9c 09 	call	0x1338	; 0x1338 <enqueue>
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <Update_Serial>:
		
	}
}

void Update_Serial()
{
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	c4 56       	subi	r28, 0x64	; 100
    188e:	d1 09       	sbc	r29, r1
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    189a:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <patientsCount>
    189e:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <patientsCount+0x1>
    18a2:	6f 5f       	subi	r22, 0xFF	; 255
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	07 2e       	mov	r0, r23
    18a8:	00 0c       	add	r0, r0
    18aa:	88 0b       	sbc	r24, r24
    18ac:	99 0b       	sbc	r25, r25
    18ae:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    18b2:	8e 01       	movw	r16, r28
    18b4:	0f 5f       	subi	r16, 0xFF	; 255
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	43 e0       	ldi	r20, 0x03	; 3
    18bc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    18c0:	4d e0       	ldi	r20, 0x0D	; 13
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    18ce:	b8 01       	movw	r22, r16
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount);
    18d6:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <patientsCount>
    18da:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <patientsCount+0x1>
    18de:	8a e7       	ldi	r24, 0x7A	; 122
    18e0:	95 e0       	ldi	r25, 0x05	; 5
    18e2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <Patient_UpdateSerial>
	Update_PatientsList();
    18e6:	0e 94 0e 0c 	call	0x181c	; 0x181c <Update_PatientsList>
}
    18ea:	cc 59       	subi	r28, 0x9C	; 156
    18ec:	df 4f       	sbci	r29, 0xFF	; 255
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	08 95       	ret

00001902 <GenerateSerial_Init>:
#include "../../all.h"


void GenerateSerial_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	0e 94 64 05 	call	0xac8	; 0xac8 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Your Serial: ");
    1916:	6d ee       	ldi	r22, 0xED	; 237
    1918:	71 e0       	ldi	r23, 0x01	; 1
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Update_Serial();
    1920:	0e 94 40 0c 	call	0x1880	; 0x1880 <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
    1932:	6b ef       	ldi	r22, 0xFB	; 251
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
    193c:	08 95       	ret

0000193e <Clear_CurrentPatient_Data>:
	strcpy(cp->bp, currentPatient.bp);
	enqueue(cp);	
}

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    193e:	ea e7       	ldi	r30, 0x7A	; 122
    1940:	f5 e0       	ldi	r31, 0x05	; 5
    1942:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    1944:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    1946:	12 a2       	std	Z+34, r1	; 0x22
	strcpy(currentPatient.temperature, "");
    1948:	13 aa       	std	Z+51, r1	; 0x33
	strcpy(currentPatient.bp, "");
    194a:	15 ae       	std	Z+61, r1	; 0x3d
    194c:	08 95       	ret

0000194e <GenerateSerial_ProcessKey>:
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    194e:	8f 31       	cpi	r24, 0x1F	; 31
    1950:	39 f5       	brne	.+78     	; 0x19a0 <GenerateSerial_ProcessKey+0x52>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 64 05 	call	0xac8	; 0xac8 <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    1958:	43 e0       	ldi	r20, 0x03	; 3
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
		patientsCount++;
    1966:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <patientsCount>
    196a:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <patientsCount+0x1>
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <patientsCount+0x1>
    1974:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <patientsCount>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    1978:	6c e0       	ldi	r22, 0x0C	; 12
    197a:	72 e0       	ldi	r23, 0x02	; 2
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
    1982:	2f ef       	ldi	r18, 0xFF	; 255
    1984:	83 ed       	ldi	r24, 0xD3	; 211
    1986:	90 e3       	ldi	r25, 0x30	; 48
    1988:	21 50       	subi	r18, 0x01	; 1
    198a:	80 40       	sbci	r24, 0x00	; 0
    198c:	90 40       	sbci	r25, 0x00	; 0
    198e:	e1 f7       	brne	.-8      	; 0x1988 <GenerateSerial_ProcessKey+0x3a>
    1990:	00 c0       	rjmp	.+0      	; 0x1992 <GenerateSerial_ProcessKey+0x44>
    1992:	00 00       	nop
		_delay_ms(2000);
		
		States_GotoState(IDLE);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
		Clear_CurrentPatient_Data();
    199a:	0e 94 9f 0c 	call	0x193e	; 0x193e <Clear_CurrentPatient_Data>
    199e:	08 95       	ret
	}
	else if(key == 30)
    19a0:	8e 31       	cpi	r24, 0x1E	; 30
    19a2:	19 f4       	brne	.+6      	; 0x19aa <GenerateSerial_ProcessKey+0x5c>
	{
		States_GotoState(ENTERING_PHONE);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    19aa:	08 95       	ret

000019ac <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <States_GotoState>
    19b2:	08 95       	ret

000019b4 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	0e 94 64 05 	call	0xac8	; 0xac8 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    19c8:	66 e1       	ldi	r22, 0x16	; 22
    19ca:	72 e0       	ldi	r23, 0x02	; 2
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	0e 94 86 05 	call	0xb0c	; 0xb0c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    19e0:	6f e1       	ldi	r22, 0x1F	; 31
    19e2:	72 e0       	ldi	r23, 0x02	; 2
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	0e 94 74 05 	call	0xae8	; 0xae8 <Lcd_Prints>
    19ea:	08 95       	ret

000019ec <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    19ec:	cf 93       	push	r28
    19ee:	c8 2f       	mov	r28, r24
	switch(newState)
    19f0:	08 2e       	mov	r0, r24
    19f2:	00 0c       	add	r0, r0
    19f4:	99 0b       	sbc	r25, r25
    19f6:	aa 0b       	sbc	r26, r26
    19f8:	bb 0b       	sbc	r27, r27
    19fa:	87 30       	cpi	r24, 0x07	; 7
    19fc:	91 05       	cpc	r25, r1
    19fe:	d0 f4       	brcc	.+52     	; 0x1a34 <States_GotoState+0x48>
    1a00:	fc 01       	movw	r30, r24
    1a02:	ef 5c       	subi	r30, 0xCF	; 207
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__tablejump2__>
	{
		case IDLE:
			Idle_Init();
    1a0a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <Idle_Init>
			break;
    1a0e:	16 c0       	rjmp	.+44     	; 0x1a3c <States_GotoState+0x50>
		case ENTERING_NAME:
			EnteringName_Init();
    1a10:	0e 94 2f 0b 	call	0x165e	; 0x165e <EnteringName_Init>
			break;
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <States_GotoState+0x50>
		case ENTERING_AGE:
			EnteringAge_Init();
    1a16:	0e 94 bc 0a 	call	0x1578	; 0x1578 <EnteringAge_Init>
			break;
    1a1a:	10 c0       	rjmp	.+32     	; 0x1a3c <States_GotoState+0x50>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    1a1c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <EnteringPhone_Init>
			break;
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <States_GotoState+0x50>
		case ENTERING_TEMP:
			EnteringTemp_Init();
    1a22:	0e 94 bd 0b 	call	0x177a	; 0x177a <EnteringTemp_Init>
			break;
    1a26:	0a c0       	rjmp	.+20     	; 0x1a3c <States_GotoState+0x50>
		case ENTERING_BP:
			EnteringBp_Init();
    1a28:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <EnteringBp_Init>
			break;
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <States_GotoState+0x50>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    1a2e:	0e 94 81 0c 	call	0x1902	; 0x1902 <GenerateSerial_Init>
			break;
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <States_GotoState+0x50>
		default:
			Error_Error("GotoState: newState not defined");
    1a34:	8c e2       	ldi	r24, 0x2C	; 44
    1a36:	92 e0       	ldi	r25, 0x02	; 2
    1a38:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
	}
	currentState = newState;
    1a3c:	c0 93 c8 05 	sts	0x05C8, r28	; 0x8005c8 <currentState>
}
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <States_Refresh>:
void States_Refresh()
{
	switch(currentState)
    1a44:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <currentState>
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	39 f0       	breq	.+14     	; 0x1a5a <States_Refresh+0x16>
    1a4c:	1c f4       	brge	.+6      	; 0x1a54 <States_Refresh+0x10>
    1a4e:	88 23       	and	r24, r24
    1a50:	74 f4       	brge	.+28     	; 0x1a6e <States_Refresh+0x2a>
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <States_Refresh+0x22>
    1a54:	85 30       	cpi	r24, 0x05	; 5
    1a56:	21 f0       	breq	.+8      	; 0x1a60 <States_Refresh+0x1c>
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <States_Refresh+0x22>
		
		case ENTERING_PHONE:
		
			break;
		case ENTERING_TEMP:
			EnteringTemp_Refresh();
    1a5a:	0e 94 c7 0b 	call	0x178e	; 0x178e <EnteringTemp_Refresh>
			break;
    1a5e:	08 95       	ret
		case ENTERING_BP:
			EntetingBp_Refresh();
    1a60:	0e 94 10 0b 	call	0x1620	; 0x1620 <EntetingBp_Refresh>
			break;
    1a64:	08 95       	ret
		default:
		Error_Error("States_Refresh: currentstate not defined");
    1a66:	8c e4       	ldi	r24, 0x4C	; 76
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Error_Error>
    1a6e:	08 95       	ret

00001a70 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1a70:	11 b8       	out	0x01, r1	; 1
    1a72:	80 e2       	ldi	r24, 0x20	; 32
    1a74:	80 b9       	out	0x00, r24	; 0
    1a76:	08 95       	ret

00001a78 <i2c_start>:
    1a78:	94 ea       	ldi	r25, 0xA4	; 164
    1a7a:	96 bf       	out	0x36, r25	; 54
    1a7c:	06 b6       	in	r0, 0x36	; 54
    1a7e:	07 fe       	sbrs	r0, 7
    1a80:	fd cf       	rjmp	.-6      	; 0x1a7c <i2c_start+0x4>
    1a82:	91 b1       	in	r25, 0x01	; 1
    1a84:	98 7f       	andi	r25, 0xF8	; 248
    1a86:	98 30       	cpi	r25, 0x08	; 8
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <i2c_start+0x16>
    1a8a:	90 31       	cpi	r25, 0x10	; 16
    1a8c:	79 f4       	brne	.+30     	; 0x1aac <i2c_start+0x34>
    1a8e:	83 b9       	out	0x03, r24	; 3
    1a90:	84 e8       	ldi	r24, 0x84	; 132
    1a92:	86 bf       	out	0x36, r24	; 54
    1a94:	06 b6       	in	r0, 0x36	; 54
    1a96:	07 fe       	sbrs	r0, 7
    1a98:	fd cf       	rjmp	.-6      	; 0x1a94 <i2c_start+0x1c>
    1a9a:	91 b1       	in	r25, 0x01	; 1
    1a9c:	98 7f       	andi	r25, 0xF8	; 248
    1a9e:	98 31       	cpi	r25, 0x18	; 24
    1aa0:	39 f0       	breq	.+14     	; 0x1ab0 <i2c_start+0x38>
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 34       	cpi	r25, 0x40	; 64
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <i2c_start+0x3a>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	08 95       	ret
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	08 95       	ret
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret

00001ab4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1ab4:	84 e9       	ldi	r24, 0x94	; 148
    1ab6:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1ab8:	06 b6       	in	r0, 0x36	; 54
    1aba:	04 fc       	sbrc	r0, 4
    1abc:	fd cf       	rjmp	.-6      	; 0x1ab8 <i2c_stop+0x4>

}/* i2c_stop */
    1abe:	08 95       	ret

00001ac0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1ac0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ac2:	84 e8       	ldi	r24, 0x84	; 132
    1ac4:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1ac6:	06 b6       	in	r0, 0x36	; 54
    1ac8:	07 fe       	sbrs	r0, 7
    1aca:	fd cf       	rjmp	.-6      	; 0x1ac6 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1acc:	91 b1       	in	r25, 0x01	; 1
    1ace:	98 7f       	andi	r25, 0xF8	; 248
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	98 32       	cpi	r25, 0x28	; 40
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <i2c_write+0x18>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1ad8:	08 95       	ret

00001ada <__subsf3>:
    1ada:	50 58       	subi	r21, 0x80	; 128

00001adc <__addsf3>:
    1adc:	bb 27       	eor	r27, r27
    1ade:	aa 27       	eor	r26, r26
    1ae0:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__addsf3x>
    1ae4:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_round>
    1ae8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_pscA>
    1aec:	38 f0       	brcs	.+14     	; 0x1afc <__addsf3+0x20>
    1aee:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__fp_pscB>
    1af2:	20 f0       	brcs	.+8      	; 0x1afc <__addsf3+0x20>
    1af4:	39 f4       	brne	.+14     	; 0x1b04 <__addsf3+0x28>
    1af6:	9f 3f       	cpi	r25, 0xFF	; 255
    1af8:	19 f4       	brne	.+6      	; 0x1b00 <__addsf3+0x24>
    1afa:	26 f4       	brtc	.+8      	; 0x1b04 <__addsf3+0x28>
    1afc:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__fp_nan>
    1b00:	0e f4       	brtc	.+2      	; 0x1b04 <__addsf3+0x28>
    1b02:	e0 95       	com	r30
    1b04:	e7 fb       	bst	r30, 7
    1b06:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_inf>

00001b0a <__addsf3x>:
    1b0a:	e9 2f       	mov	r30, r25
    1b0c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_split3>
    1b10:	58 f3       	brcs	.-42     	; 0x1ae8 <__addsf3+0xc>
    1b12:	ba 17       	cp	r27, r26
    1b14:	62 07       	cpc	r22, r18
    1b16:	73 07       	cpc	r23, r19
    1b18:	84 07       	cpc	r24, r20
    1b1a:	95 07       	cpc	r25, r21
    1b1c:	20 f0       	brcs	.+8      	; 0x1b26 <__addsf3x+0x1c>
    1b1e:	79 f4       	brne	.+30     	; 0x1b3e <__addsf3x+0x34>
    1b20:	a6 f5       	brtc	.+104    	; 0x1b8a <__addsf3x+0x80>
    1b22:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__fp_zero>
    1b26:	0e f4       	brtc	.+2      	; 0x1b2a <__addsf3x+0x20>
    1b28:	e0 95       	com	r30
    1b2a:	0b 2e       	mov	r0, r27
    1b2c:	ba 2f       	mov	r27, r26
    1b2e:	a0 2d       	mov	r26, r0
    1b30:	0b 01       	movw	r0, r22
    1b32:	b9 01       	movw	r22, r18
    1b34:	90 01       	movw	r18, r0
    1b36:	0c 01       	movw	r0, r24
    1b38:	ca 01       	movw	r24, r20
    1b3a:	a0 01       	movw	r20, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	ff 27       	eor	r31, r31
    1b40:	59 1b       	sub	r21, r25
    1b42:	99 f0       	breq	.+38     	; 0x1b6a <__addsf3x+0x60>
    1b44:	59 3f       	cpi	r21, 0xF9	; 249
    1b46:	50 f4       	brcc	.+20     	; 0x1b5c <__addsf3x+0x52>
    1b48:	50 3e       	cpi	r21, 0xE0	; 224
    1b4a:	68 f1       	brcs	.+90     	; 0x1ba6 <__addsf3x+0x9c>
    1b4c:	1a 16       	cp	r1, r26
    1b4e:	f0 40       	sbci	r31, 0x00	; 0
    1b50:	a2 2f       	mov	r26, r18
    1b52:	23 2f       	mov	r18, r19
    1b54:	34 2f       	mov	r19, r20
    1b56:	44 27       	eor	r20, r20
    1b58:	58 5f       	subi	r21, 0xF8	; 248
    1b5a:	f3 cf       	rjmp	.-26     	; 0x1b42 <__addsf3x+0x38>
    1b5c:	46 95       	lsr	r20
    1b5e:	37 95       	ror	r19
    1b60:	27 95       	ror	r18
    1b62:	a7 95       	ror	r26
    1b64:	f0 40       	sbci	r31, 0x00	; 0
    1b66:	53 95       	inc	r21
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__addsf3x+0x52>
    1b6a:	7e f4       	brtc	.+30     	; 0x1b8a <__addsf3x+0x80>
    1b6c:	1f 16       	cp	r1, r31
    1b6e:	ba 0b       	sbc	r27, r26
    1b70:	62 0b       	sbc	r22, r18
    1b72:	73 0b       	sbc	r23, r19
    1b74:	84 0b       	sbc	r24, r20
    1b76:	ba f0       	brmi	.+46     	; 0x1ba6 <__addsf3x+0x9c>
    1b78:	91 50       	subi	r25, 0x01	; 1
    1b7a:	a1 f0       	breq	.+40     	; 0x1ba4 <__addsf3x+0x9a>
    1b7c:	ff 0f       	add	r31, r31
    1b7e:	bb 1f       	adc	r27, r27
    1b80:	66 1f       	adc	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	c2 f7       	brpl	.-16     	; 0x1b78 <__addsf3x+0x6e>
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <__addsf3x+0x9c>
    1b8a:	ba 0f       	add	r27, r26
    1b8c:	62 1f       	adc	r22, r18
    1b8e:	73 1f       	adc	r23, r19
    1b90:	84 1f       	adc	r24, r20
    1b92:	48 f4       	brcc	.+18     	; 0x1ba6 <__addsf3x+0x9c>
    1b94:	87 95       	ror	r24
    1b96:	77 95       	ror	r23
    1b98:	67 95       	ror	r22
    1b9a:	b7 95       	ror	r27
    1b9c:	f7 95       	ror	r31
    1b9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <__addsf3x+0x9a>
    1ba2:	b0 cf       	rjmp	.-160    	; 0x1b04 <__addsf3+0x28>
    1ba4:	93 95       	inc	r25
    1ba6:	88 0f       	add	r24, r24
    1ba8:	08 f0       	brcs	.+2      	; 0x1bac <__addsf3x+0xa2>
    1baa:	99 27       	eor	r25, r25
    1bac:	ee 0f       	add	r30, r30
    1bae:	97 95       	ror	r25
    1bb0:	87 95       	ror	r24
    1bb2:	08 95       	ret

00001bb4 <__divsf3>:
    1bb4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__divsf3x>
    1bb8:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_round>
    1bbc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__fp_pscB>
    1bc0:	58 f0       	brcs	.+22     	; 0x1bd8 <__divsf3+0x24>
    1bc2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_pscA>
    1bc6:	40 f0       	brcs	.+16     	; 0x1bd8 <__divsf3+0x24>
    1bc8:	29 f4       	brne	.+10     	; 0x1bd4 <__divsf3+0x20>
    1bca:	5f 3f       	cpi	r21, 0xFF	; 255
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <__divsf3+0x24>
    1bce:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_inf>
    1bd2:	51 11       	cpse	r21, r1
    1bd4:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__fp_szero>
    1bd8:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__fp_nan>

00001bdc <__divsf3x>:
    1bdc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_split3>
    1be0:	68 f3       	brcs	.-38     	; 0x1bbc <__divsf3+0x8>

00001be2 <__divsf3_pse>:
    1be2:	99 23       	and	r25, r25
    1be4:	b1 f3       	breq	.-20     	; 0x1bd2 <__divsf3+0x1e>
    1be6:	55 23       	and	r21, r21
    1be8:	91 f3       	breq	.-28     	; 0x1bce <__divsf3+0x1a>
    1bea:	95 1b       	sub	r25, r21
    1bec:	55 0b       	sbc	r21, r21
    1bee:	bb 27       	eor	r27, r27
    1bf0:	aa 27       	eor	r26, r26
    1bf2:	62 17       	cp	r22, r18
    1bf4:	73 07       	cpc	r23, r19
    1bf6:	84 07       	cpc	r24, r20
    1bf8:	38 f0       	brcs	.+14     	; 0x1c08 <__divsf3_pse+0x26>
    1bfa:	9f 5f       	subi	r25, 0xFF	; 255
    1bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfe:	22 0f       	add	r18, r18
    1c00:	33 1f       	adc	r19, r19
    1c02:	44 1f       	adc	r20, r20
    1c04:	aa 1f       	adc	r26, r26
    1c06:	a9 f3       	breq	.-22     	; 0x1bf2 <__divsf3_pse+0x10>
    1c08:	35 d0       	rcall	.+106    	; 0x1c74 <__divsf3_pse+0x92>
    1c0a:	0e 2e       	mov	r0, r30
    1c0c:	3a f0       	brmi	.+14     	; 0x1c1c <__divsf3_pse+0x3a>
    1c0e:	e0 e8       	ldi	r30, 0x80	; 128
    1c10:	32 d0       	rcall	.+100    	; 0x1c76 <__divsf3_pse+0x94>
    1c12:	91 50       	subi	r25, 0x01	; 1
    1c14:	50 40       	sbci	r21, 0x00	; 0
    1c16:	e6 95       	lsr	r30
    1c18:	00 1c       	adc	r0, r0
    1c1a:	ca f7       	brpl	.-14     	; 0x1c0e <__divsf3_pse+0x2c>
    1c1c:	2b d0       	rcall	.+86     	; 0x1c74 <__divsf3_pse+0x92>
    1c1e:	fe 2f       	mov	r31, r30
    1c20:	29 d0       	rcall	.+82     	; 0x1c74 <__divsf3_pse+0x92>
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	bb 1f       	adc	r27, r27
    1c2a:	26 17       	cp	r18, r22
    1c2c:	37 07       	cpc	r19, r23
    1c2e:	48 07       	cpc	r20, r24
    1c30:	ab 07       	cpc	r26, r27
    1c32:	b0 e8       	ldi	r27, 0x80	; 128
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <__divsf3_pse+0x56>
    1c36:	bb 0b       	sbc	r27, r27
    1c38:	80 2d       	mov	r24, r0
    1c3a:	bf 01       	movw	r22, r30
    1c3c:	ff 27       	eor	r31, r31
    1c3e:	93 58       	subi	r25, 0x83	; 131
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	3a f0       	brmi	.+14     	; 0x1c52 <__divsf3_pse+0x70>
    1c44:	9e 3f       	cpi	r25, 0xFE	; 254
    1c46:	51 05       	cpc	r21, r1
    1c48:	78 f0       	brcs	.+30     	; 0x1c68 <__divsf3_pse+0x86>
    1c4a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_inf>
    1c4e:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__fp_szero>
    1c52:	5f 3f       	cpi	r21, 0xFF	; 255
    1c54:	e4 f3       	brlt	.-8      	; 0x1c4e <__divsf3_pse+0x6c>
    1c56:	98 3e       	cpi	r25, 0xE8	; 232
    1c58:	d4 f3       	brlt	.-12     	; 0x1c4e <__divsf3_pse+0x6c>
    1c5a:	86 95       	lsr	r24
    1c5c:	77 95       	ror	r23
    1c5e:	67 95       	ror	r22
    1c60:	b7 95       	ror	r27
    1c62:	f7 95       	ror	r31
    1c64:	9f 5f       	subi	r25, 0xFF	; 255
    1c66:	c9 f7       	brne	.-14     	; 0x1c5a <__divsf3_pse+0x78>
    1c68:	88 0f       	add	r24, r24
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	96 95       	lsr	r25
    1c6e:	87 95       	ror	r24
    1c70:	97 f9       	bld	r25, 7
    1c72:	08 95       	ret
    1c74:	e1 e0       	ldi	r30, 0x01	; 1
    1c76:	66 0f       	add	r22, r22
    1c78:	77 1f       	adc	r23, r23
    1c7a:	88 1f       	adc	r24, r24
    1c7c:	bb 1f       	adc	r27, r27
    1c7e:	62 17       	cp	r22, r18
    1c80:	73 07       	cpc	r23, r19
    1c82:	84 07       	cpc	r24, r20
    1c84:	ba 07       	cpc	r27, r26
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <__divsf3_pse+0xae>
    1c88:	62 1b       	sub	r22, r18
    1c8a:	73 0b       	sbc	r23, r19
    1c8c:	84 0b       	sbc	r24, r20
    1c8e:	ba 0b       	sbc	r27, r26
    1c90:	ee 1f       	adc	r30, r30
    1c92:	88 f7       	brcc	.-30     	; 0x1c76 <__divsf3_pse+0x94>
    1c94:	e0 95       	com	r30
    1c96:	08 95       	ret

00001c98 <__fixsfsi>:
    1c98:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fixunssfsi>
    1c9c:	68 94       	set
    1c9e:	b1 11       	cpse	r27, r1
    1ca0:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__fp_szero>
    1ca4:	08 95       	ret

00001ca6 <__fixunssfsi>:
    1ca6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_splitA>
    1caa:	88 f0       	brcs	.+34     	; 0x1cce <__fixunssfsi+0x28>
    1cac:	9f 57       	subi	r25, 0x7F	; 127
    1cae:	98 f0       	brcs	.+38     	; 0x1cd6 <__fixunssfsi+0x30>
    1cb0:	b9 2f       	mov	r27, r25
    1cb2:	99 27       	eor	r25, r25
    1cb4:	b7 51       	subi	r27, 0x17	; 23
    1cb6:	b0 f0       	brcs	.+44     	; 0x1ce4 <__fixunssfsi+0x3e>
    1cb8:	e1 f0       	breq	.+56     	; 0x1cf2 <__fixunssfsi+0x4c>
    1cba:	66 0f       	add	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	88 1f       	adc	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	1a f0       	brmi	.+6      	; 0x1cca <__fixunssfsi+0x24>
    1cc4:	ba 95       	dec	r27
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <__fixunssfsi+0x14>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <__fixunssfsi+0x4c>
    1cca:	b1 30       	cpi	r27, 0x01	; 1
    1ccc:	91 f0       	breq	.+36     	; 0x1cf2 <__fixunssfsi+0x4c>
    1cce:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__fp_zero>
    1cd2:	b1 e0       	ldi	r27, 0x01	; 1
    1cd4:	08 95       	ret
    1cd6:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__fp_zero>
    1cda:	67 2f       	mov	r22, r23
    1cdc:	78 2f       	mov	r23, r24
    1cde:	88 27       	eor	r24, r24
    1ce0:	b8 5f       	subi	r27, 0xF8	; 248
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <__fixunssfsi+0x4c>
    1ce4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ce6:	cc f3       	brlt	.-14     	; 0x1cda <__fixunssfsi+0x34>
    1ce8:	86 95       	lsr	r24
    1cea:	77 95       	ror	r23
    1cec:	67 95       	ror	r22
    1cee:	b3 95       	inc	r27
    1cf0:	d9 f7       	brne	.-10     	; 0x1ce8 <__fixunssfsi+0x42>
    1cf2:	3e f4       	brtc	.+14     	; 0x1d02 <__fixunssfsi+0x5c>
    1cf4:	90 95       	com	r25
    1cf6:	80 95       	com	r24
    1cf8:	70 95       	com	r23
    1cfa:	61 95       	neg	r22
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	08 95       	ret

00001d04 <__floatunsisf>:
    1d04:	e8 94       	clt
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <__floatsisf+0x12>

00001d08 <__floatsisf>:
    1d08:	97 fb       	bst	r25, 7
    1d0a:	3e f4       	brtc	.+14     	; 0x1d1a <__floatsisf+0x12>
    1d0c:	90 95       	com	r25
    1d0e:	80 95       	com	r24
    1d10:	70 95       	com	r23
    1d12:	61 95       	neg	r22
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	99 23       	and	r25, r25
    1d1c:	a9 f0       	breq	.+42     	; 0x1d48 <__floatsisf+0x40>
    1d1e:	f9 2f       	mov	r31, r25
    1d20:	96 e9       	ldi	r25, 0x96	; 150
    1d22:	bb 27       	eor	r27, r27
    1d24:	93 95       	inc	r25
    1d26:	f6 95       	lsr	r31
    1d28:	87 95       	ror	r24
    1d2a:	77 95       	ror	r23
    1d2c:	67 95       	ror	r22
    1d2e:	b7 95       	ror	r27
    1d30:	f1 11       	cpse	r31, r1
    1d32:	f8 cf       	rjmp	.-16     	; 0x1d24 <__floatsisf+0x1c>
    1d34:	fa f4       	brpl	.+62     	; 0x1d74 <__floatsisf+0x6c>
    1d36:	bb 0f       	add	r27, r27
    1d38:	11 f4       	brne	.+4      	; 0x1d3e <__floatsisf+0x36>
    1d3a:	60 ff       	sbrs	r22, 0
    1d3c:	1b c0       	rjmp	.+54     	; 0x1d74 <__floatsisf+0x6c>
    1d3e:	6f 5f       	subi	r22, 0xFF	; 255
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	8f 4f       	sbci	r24, 0xFF	; 255
    1d44:	9f 4f       	sbci	r25, 0xFF	; 255
    1d46:	16 c0       	rjmp	.+44     	; 0x1d74 <__floatsisf+0x6c>
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <__floatsisf+0x48>
    1d4c:	96 e9       	ldi	r25, 0x96	; 150
    1d4e:	11 c0       	rjmp	.+34     	; 0x1d72 <__floatsisf+0x6a>
    1d50:	77 23       	and	r23, r23
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <__floatsisf+0x54>
    1d54:	9e e8       	ldi	r25, 0x8E	; 142
    1d56:	87 2f       	mov	r24, r23
    1d58:	76 2f       	mov	r23, r22
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <__floatsisf+0x5e>
    1d5c:	66 23       	and	r22, r22
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <__floatsisf+0x74>
    1d60:	96 e8       	ldi	r25, 0x86	; 134
    1d62:	86 2f       	mov	r24, r22
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	2a f0       	brmi	.+10     	; 0x1d74 <__floatsisf+0x6c>
    1d6a:	9a 95       	dec	r25
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	da f7       	brpl	.-10     	; 0x1d6a <__floatsisf+0x62>
    1d74:	88 0f       	add	r24, r24
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	97 f9       	bld	r25, 7
    1d7c:	08 95       	ret

00001d7e <__fp_inf>:
    1d7e:	97 f9       	bld	r25, 7
    1d80:	9f 67       	ori	r25, 0x7F	; 127
    1d82:	80 e8       	ldi	r24, 0x80	; 128
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	08 95       	ret

00001d8a <__fp_nan>:
    1d8a:	9f ef       	ldi	r25, 0xFF	; 255
    1d8c:	80 ec       	ldi	r24, 0xC0	; 192
    1d8e:	08 95       	ret

00001d90 <__fp_pscA>:
    1d90:	00 24       	eor	r0, r0
    1d92:	0a 94       	dec	r0
    1d94:	16 16       	cp	r1, r22
    1d96:	17 06       	cpc	r1, r23
    1d98:	18 06       	cpc	r1, r24
    1d9a:	09 06       	cpc	r0, r25
    1d9c:	08 95       	ret

00001d9e <__fp_pscB>:
    1d9e:	00 24       	eor	r0, r0
    1da0:	0a 94       	dec	r0
    1da2:	12 16       	cp	r1, r18
    1da4:	13 06       	cpc	r1, r19
    1da6:	14 06       	cpc	r1, r20
    1da8:	05 06       	cpc	r0, r21
    1daa:	08 95       	ret

00001dac <__fp_round>:
    1dac:	09 2e       	mov	r0, r25
    1dae:	03 94       	inc	r0
    1db0:	00 0c       	add	r0, r0
    1db2:	11 f4       	brne	.+4      	; 0x1db8 <__fp_round+0xc>
    1db4:	88 23       	and	r24, r24
    1db6:	52 f0       	brmi	.+20     	; 0x1dcc <__fp_round+0x20>
    1db8:	bb 0f       	add	r27, r27
    1dba:	40 f4       	brcc	.+16     	; 0x1dcc <__fp_round+0x20>
    1dbc:	bf 2b       	or	r27, r31
    1dbe:	11 f4       	brne	.+4      	; 0x1dc4 <__fp_round+0x18>
    1dc0:	60 ff       	sbrs	r22, 0
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <__fp_round+0x20>
    1dc4:	6f 5f       	subi	r22, 0xFF	; 255
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	08 95       	ret

00001dce <__fp_split3>:
    1dce:	57 fd       	sbrc	r21, 7
    1dd0:	90 58       	subi	r25, 0x80	; 128
    1dd2:	44 0f       	add	r20, r20
    1dd4:	55 1f       	adc	r21, r21
    1dd6:	59 f0       	breq	.+22     	; 0x1dee <__fp_splitA+0x10>
    1dd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dda:	71 f0       	breq	.+28     	; 0x1df8 <__fp_splitA+0x1a>
    1ddc:	47 95       	ror	r20

00001dde <__fp_splitA>:
    1dde:	88 0f       	add	r24, r24
    1de0:	97 fb       	bst	r25, 7
    1de2:	99 1f       	adc	r25, r25
    1de4:	61 f0       	breq	.+24     	; 0x1dfe <__fp_splitA+0x20>
    1de6:	9f 3f       	cpi	r25, 0xFF	; 255
    1de8:	79 f0       	breq	.+30     	; 0x1e08 <__fp_splitA+0x2a>
    1dea:	87 95       	ror	r24
    1dec:	08 95       	ret
    1dee:	12 16       	cp	r1, r18
    1df0:	13 06       	cpc	r1, r19
    1df2:	14 06       	cpc	r1, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	f2 cf       	rjmp	.-28     	; 0x1ddc <__fp_split3+0xe>
    1df8:	46 95       	lsr	r20
    1dfa:	f1 df       	rcall	.-30     	; 0x1dde <__fp_splitA>
    1dfc:	08 c0       	rjmp	.+16     	; 0x1e0e <__fp_splitA+0x30>
    1dfe:	16 16       	cp	r1, r22
    1e00:	17 06       	cpc	r1, r23
    1e02:	18 06       	cpc	r1, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	f1 cf       	rjmp	.-30     	; 0x1dea <__fp_splitA+0xc>
    1e08:	86 95       	lsr	r24
    1e0a:	71 05       	cpc	r23, r1
    1e0c:	61 05       	cpc	r22, r1
    1e0e:	08 94       	sec
    1e10:	08 95       	ret

00001e12 <__fp_zero>:
    1e12:	e8 94       	clt

00001e14 <__fp_szero>:
    1e14:	bb 27       	eor	r27, r27
    1e16:	66 27       	eor	r22, r22
    1e18:	77 27       	eor	r23, r23
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	97 f9       	bld	r25, 7
    1e1e:	08 95       	ret

00001e20 <__mulsf3>:
    1e20:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__mulsf3x>
    1e24:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_round>
    1e28:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_pscA>
    1e2c:	38 f0       	brcs	.+14     	; 0x1e3c <__mulsf3+0x1c>
    1e2e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__fp_pscB>
    1e32:	20 f0       	brcs	.+8      	; 0x1e3c <__mulsf3+0x1c>
    1e34:	95 23       	and	r25, r21
    1e36:	11 f0       	breq	.+4      	; 0x1e3c <__mulsf3+0x1c>
    1e38:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_inf>
    1e3c:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__fp_nan>
    1e40:	11 24       	eor	r1, r1
    1e42:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__fp_szero>

00001e46 <__mulsf3x>:
    1e46:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_split3>
    1e4a:	70 f3       	brcs	.-36     	; 0x1e28 <__mulsf3+0x8>

00001e4c <__mulsf3_pse>:
    1e4c:	95 9f       	mul	r25, r21
    1e4e:	c1 f3       	breq	.-16     	; 0x1e40 <__mulsf3+0x20>
    1e50:	95 0f       	add	r25, r21
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	55 1f       	adc	r21, r21
    1e56:	62 9f       	mul	r22, r18
    1e58:	f0 01       	movw	r30, r0
    1e5a:	72 9f       	mul	r23, r18
    1e5c:	bb 27       	eor	r27, r27
    1e5e:	f0 0d       	add	r31, r0
    1e60:	b1 1d       	adc	r27, r1
    1e62:	63 9f       	mul	r22, r19
    1e64:	aa 27       	eor	r26, r26
    1e66:	f0 0d       	add	r31, r0
    1e68:	b1 1d       	adc	r27, r1
    1e6a:	aa 1f       	adc	r26, r26
    1e6c:	64 9f       	mul	r22, r20
    1e6e:	66 27       	eor	r22, r22
    1e70:	b0 0d       	add	r27, r0
    1e72:	a1 1d       	adc	r26, r1
    1e74:	66 1f       	adc	r22, r22
    1e76:	82 9f       	mul	r24, r18
    1e78:	22 27       	eor	r18, r18
    1e7a:	b0 0d       	add	r27, r0
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	62 1f       	adc	r22, r18
    1e80:	73 9f       	mul	r23, r19
    1e82:	b0 0d       	add	r27, r0
    1e84:	a1 1d       	adc	r26, r1
    1e86:	62 1f       	adc	r22, r18
    1e88:	83 9f       	mul	r24, r19
    1e8a:	a0 0d       	add	r26, r0
    1e8c:	61 1d       	adc	r22, r1
    1e8e:	22 1f       	adc	r18, r18
    1e90:	74 9f       	mul	r23, r20
    1e92:	33 27       	eor	r19, r19
    1e94:	a0 0d       	add	r26, r0
    1e96:	61 1d       	adc	r22, r1
    1e98:	23 1f       	adc	r18, r19
    1e9a:	84 9f       	mul	r24, r20
    1e9c:	60 0d       	add	r22, r0
    1e9e:	21 1d       	adc	r18, r1
    1ea0:	82 2f       	mov	r24, r18
    1ea2:	76 2f       	mov	r23, r22
    1ea4:	6a 2f       	mov	r22, r26
    1ea6:	11 24       	eor	r1, r1
    1ea8:	9f 57       	subi	r25, 0x7F	; 127
    1eaa:	50 40       	sbci	r21, 0x00	; 0
    1eac:	9a f0       	brmi	.+38     	; 0x1ed4 <__mulsf3_pse+0x88>
    1eae:	f1 f0       	breq	.+60     	; 0x1eec <__mulsf3_pse+0xa0>
    1eb0:	88 23       	and	r24, r24
    1eb2:	4a f0       	brmi	.+18     	; 0x1ec6 <__mulsf3_pse+0x7a>
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	66 1f       	adc	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	91 50       	subi	r25, 0x01	; 1
    1ec2:	50 40       	sbci	r21, 0x00	; 0
    1ec4:	a9 f7       	brne	.-22     	; 0x1eb0 <__mulsf3_pse+0x64>
    1ec6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec8:	51 05       	cpc	r21, r1
    1eca:	80 f0       	brcs	.+32     	; 0x1eec <__mulsf3_pse+0xa0>
    1ecc:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__fp_inf>
    1ed0:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__fp_szero>
    1ed4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed6:	e4 f3       	brlt	.-8      	; 0x1ed0 <__mulsf3_pse+0x84>
    1ed8:	98 3e       	cpi	r25, 0xE8	; 232
    1eda:	d4 f3       	brlt	.-12     	; 0x1ed0 <__mulsf3_pse+0x84>
    1edc:	86 95       	lsr	r24
    1ede:	77 95       	ror	r23
    1ee0:	67 95       	ror	r22
    1ee2:	b7 95       	ror	r27
    1ee4:	f7 95       	ror	r31
    1ee6:	e7 95       	ror	r30
    1ee8:	9f 5f       	subi	r25, 0xFF	; 255
    1eea:	c1 f7       	brne	.-16     	; 0x1edc <__mulsf3_pse+0x90>
    1eec:	fe 2b       	or	r31, r30
    1eee:	88 0f       	add	r24, r24
    1ef0:	91 1d       	adc	r25, r1
    1ef2:	96 95       	lsr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	97 f9       	bld	r25, 7
    1ef8:	08 95       	ret

00001efa <__tablejump2__>:
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	05 90       	lpm	r0, Z+
    1f00:	f4 91       	lpm	r31, Z
    1f02:	e0 2d       	mov	r30, r0
    1f04:	09 94       	ijmp

00001f06 <dtostrf>:
    1f06:	ef 92       	push	r14
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	e8 01       	movw	r28, r16
    1f12:	47 fd       	sbrc	r20, 7
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <dtostrf+0x14>
    1f16:	34 e0       	ldi	r19, 0x04	; 4
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <dtostrf+0x16>
    1f1a:	34 e1       	ldi	r19, 0x14	; 20
    1f1c:	04 2e       	mov	r0, r20
    1f1e:	00 0c       	add	r0, r0
    1f20:	55 0b       	sbc	r21, r21
    1f22:	57 ff       	sbrs	r21, 7
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <dtostrf+0x26>
    1f26:	51 95       	neg	r21
    1f28:	41 95       	neg	r20
    1f2a:	51 09       	sbc	r21, r1
    1f2c:	e3 2e       	mov	r14, r19
    1f2e:	02 2f       	mov	r16, r18
    1f30:	24 2f       	mov	r18, r20
    1f32:	ae 01       	movw	r20, r28
    1f34:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <dtoa_prf>
    1f38:	ce 01       	movw	r24, r28
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ef 90       	pop	r14
    1f44:	08 95       	ret

00001f46 <malloc>:
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	91 05       	cpc	r25, r1
    1f52:	10 f4       	brcc	.+4      	; 0x1f58 <malloc+0x12>
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <__flp>
    1f5c:	f0 91 cc 05 	lds	r31, 0x05CC	; 0x8005cc <__flp+0x1>
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	30 97       	sbiw	r30, 0x00	; 0
    1f6a:	19 f1       	breq	.+70     	; 0x1fb2 <malloc+0x6c>
    1f6c:	40 81       	ld	r20, Z
    1f6e:	51 81       	ldd	r21, Z+1	; 0x01
    1f70:	02 81       	ldd	r16, Z+2	; 0x02
    1f72:	13 81       	ldd	r17, Z+3	; 0x03
    1f74:	48 17       	cp	r20, r24
    1f76:	59 07       	cpc	r21, r25
    1f78:	c8 f0       	brcs	.+50     	; 0x1fac <malloc+0x66>
    1f7a:	84 17       	cp	r24, r20
    1f7c:	95 07       	cpc	r25, r21
    1f7e:	69 f4       	brne	.+26     	; 0x1f9a <malloc+0x54>
    1f80:	10 97       	sbiw	r26, 0x00	; 0
    1f82:	31 f0       	breq	.+12     	; 0x1f90 <malloc+0x4a>
    1f84:	12 96       	adiw	r26, 0x02	; 2
    1f86:	0c 93       	st	X, r16
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	13 96       	adiw	r26, 0x03	; 3
    1f8c:	1c 93       	st	X, r17
    1f8e:	27 c0       	rjmp	.+78     	; 0x1fde <malloc+0x98>
    1f90:	00 93 cb 05 	sts	0x05CB, r16	; 0x8005cb <__flp>
    1f94:	10 93 cc 05 	sts	0x05CC, r17	; 0x8005cc <__flp+0x1>
    1f98:	22 c0       	rjmp	.+68     	; 0x1fde <malloc+0x98>
    1f9a:	21 15       	cp	r18, r1
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <malloc+0x60>
    1fa0:	42 17       	cp	r20, r18
    1fa2:	53 07       	cpc	r21, r19
    1fa4:	18 f4       	brcc	.+6      	; 0x1fac <malloc+0x66>
    1fa6:	9a 01       	movw	r18, r20
    1fa8:	bd 01       	movw	r22, r26
    1faa:	ef 01       	movw	r28, r30
    1fac:	df 01       	movw	r26, r30
    1fae:	f8 01       	movw	r30, r16
    1fb0:	db cf       	rjmp	.-74     	; 0x1f68 <malloc+0x22>
    1fb2:	21 15       	cp	r18, r1
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	f9 f0       	breq	.+62     	; 0x1ff6 <malloc+0xb0>
    1fb8:	28 1b       	sub	r18, r24
    1fba:	39 0b       	sbc	r19, r25
    1fbc:	24 30       	cpi	r18, 0x04	; 4
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	80 f4       	brcc	.+32     	; 0x1fe2 <malloc+0x9c>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	61 15       	cp	r22, r1
    1fc8:	71 05       	cpc	r23, r1
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <malloc+0x8e>
    1fcc:	fb 01       	movw	r30, r22
    1fce:	93 83       	std	Z+3, r25	; 0x03
    1fd0:	82 83       	std	Z+2, r24	; 0x02
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <malloc+0x96>
    1fd4:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <__flp+0x1>
    1fd8:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <__flp>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	32 96       	adiw	r30, 0x02	; 2
    1fe0:	44 c0       	rjmp	.+136    	; 0x206a <malloc+0x124>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e2 0f       	add	r30, r18
    1fe6:	f3 1f       	adc	r31, r19
    1fe8:	81 93       	st	Z+, r24
    1fea:	91 93       	st	Z+, r25
    1fec:	22 50       	subi	r18, 0x02	; 2
    1fee:	31 09       	sbc	r19, r1
    1ff0:	39 83       	std	Y+1, r19	; 0x01
    1ff2:	28 83       	st	Y, r18
    1ff4:	3a c0       	rjmp	.+116    	; 0x206a <malloc+0x124>
    1ff6:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <__brkval>
    1ffa:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <__brkval+0x1>
    1ffe:	23 2b       	or	r18, r19
    2000:	41 f4       	brne	.+16     	; 0x2012 <malloc+0xcc>
    2002:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    2006:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    200a:	30 93 ca 05 	sts	0x05CA, r19	; 0x8005ca <__brkval+0x1>
    200e:	20 93 c9 05 	sts	0x05C9, r18	; 0x8005c9 <__brkval>
    2012:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2016:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    201a:	21 15       	cp	r18, r1
    201c:	31 05       	cpc	r19, r1
    201e:	41 f4       	brne	.+16     	; 0x2030 <malloc+0xea>
    2020:	2d b7       	in	r18, 0x3d	; 61
    2022:	3e b7       	in	r19, 0x3e	; 62
    2024:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    2028:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    202c:	24 1b       	sub	r18, r20
    202e:	35 0b       	sbc	r19, r21
    2030:	e0 91 c9 05 	lds	r30, 0x05C9	; 0x8005c9 <__brkval>
    2034:	f0 91 ca 05 	lds	r31, 0x05CA	; 0x8005ca <__brkval+0x1>
    2038:	e2 17       	cp	r30, r18
    203a:	f3 07       	cpc	r31, r19
    203c:	a0 f4       	brcc	.+40     	; 0x2066 <malloc+0x120>
    203e:	2e 1b       	sub	r18, r30
    2040:	3f 0b       	sbc	r19, r31
    2042:	28 17       	cp	r18, r24
    2044:	39 07       	cpc	r19, r25
    2046:	78 f0       	brcs	.+30     	; 0x2066 <malloc+0x120>
    2048:	ac 01       	movw	r20, r24
    204a:	4e 5f       	subi	r20, 0xFE	; 254
    204c:	5f 4f       	sbci	r21, 0xFF	; 255
    204e:	24 17       	cp	r18, r20
    2050:	35 07       	cpc	r19, r21
    2052:	48 f0       	brcs	.+18     	; 0x2066 <malloc+0x120>
    2054:	4e 0f       	add	r20, r30
    2056:	5f 1f       	adc	r21, r31
    2058:	50 93 ca 05 	sts	0x05CA, r21	; 0x8005ca <__brkval+0x1>
    205c:	40 93 c9 05 	sts	0x05C9, r20	; 0x8005c9 <__brkval>
    2060:	81 93       	st	Z+, r24
    2062:	91 93       	st	Z+, r25
    2064:	02 c0       	rjmp	.+4      	; 0x206a <malloc+0x124>
    2066:	e0 e0       	ldi	r30, 0x00	; 0
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	cf 01       	movw	r24, r30
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <free>:
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	09 f4       	brne	.+2      	; 0x2080 <free+0xa>
    207e:	81 c0       	rjmp	.+258    	; 0x2182 <free+0x10c>
    2080:	fc 01       	movw	r30, r24
    2082:	32 97       	sbiw	r30, 0x02	; 2
    2084:	13 82       	std	Z+3, r1	; 0x03
    2086:	12 82       	std	Z+2, r1	; 0x02
    2088:	a0 91 cb 05 	lds	r26, 0x05CB	; 0x8005cb <__flp>
    208c:	b0 91 cc 05 	lds	r27, 0x05CC	; 0x8005cc <__flp+0x1>
    2090:	10 97       	sbiw	r26, 0x00	; 0
    2092:	81 f4       	brne	.+32     	; 0x20b4 <free+0x3e>
    2094:	20 81       	ld	r18, Z
    2096:	31 81       	ldd	r19, Z+1	; 0x01
    2098:	82 0f       	add	r24, r18
    209a:	93 1f       	adc	r25, r19
    209c:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <__brkval>
    20a0:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <__brkval+0x1>
    20a4:	28 17       	cp	r18, r24
    20a6:	39 07       	cpc	r19, r25
    20a8:	51 f5       	brne	.+84     	; 0x20fe <free+0x88>
    20aa:	f0 93 ca 05 	sts	0x05CA, r31	; 0x8005ca <__brkval+0x1>
    20ae:	e0 93 c9 05 	sts	0x05C9, r30	; 0x8005c9 <__brkval>
    20b2:	67 c0       	rjmp	.+206    	; 0x2182 <free+0x10c>
    20b4:	ed 01       	movw	r28, r26
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	ce 17       	cp	r28, r30
    20bc:	df 07       	cpc	r29, r31
    20be:	40 f4       	brcc	.+16     	; 0x20d0 <free+0x5a>
    20c0:	4a 81       	ldd	r20, Y+2	; 0x02
    20c2:	5b 81       	ldd	r21, Y+3	; 0x03
    20c4:	9e 01       	movw	r18, r28
    20c6:	41 15       	cp	r20, r1
    20c8:	51 05       	cpc	r21, r1
    20ca:	f1 f0       	breq	.+60     	; 0x2108 <free+0x92>
    20cc:	ea 01       	movw	r28, r20
    20ce:	f5 cf       	rjmp	.-22     	; 0x20ba <free+0x44>
    20d0:	d3 83       	std	Z+3, r29	; 0x03
    20d2:	c2 83       	std	Z+2, r28	; 0x02
    20d4:	40 81       	ld	r20, Z
    20d6:	51 81       	ldd	r21, Z+1	; 0x01
    20d8:	84 0f       	add	r24, r20
    20da:	95 1f       	adc	r25, r21
    20dc:	c8 17       	cp	r28, r24
    20de:	d9 07       	cpc	r29, r25
    20e0:	59 f4       	brne	.+22     	; 0x20f8 <free+0x82>
    20e2:	88 81       	ld	r24, Y
    20e4:	99 81       	ldd	r25, Y+1	; 0x01
    20e6:	84 0f       	add	r24, r20
    20e8:	95 1f       	adc	r25, r21
    20ea:	02 96       	adiw	r24, 0x02	; 2
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	93 83       	std	Z+3, r25	; 0x03
    20f6:	82 83       	std	Z+2, r24	; 0x02
    20f8:	21 15       	cp	r18, r1
    20fa:	31 05       	cpc	r19, r1
    20fc:	29 f4       	brne	.+10     	; 0x2108 <free+0x92>
    20fe:	f0 93 cc 05 	sts	0x05CC, r31	; 0x8005cc <__flp+0x1>
    2102:	e0 93 cb 05 	sts	0x05CB, r30	; 0x8005cb <__flp>
    2106:	3d c0       	rjmp	.+122    	; 0x2182 <free+0x10c>
    2108:	e9 01       	movw	r28, r18
    210a:	fb 83       	std	Y+3, r31	; 0x03
    210c:	ea 83       	std	Y+2, r30	; 0x02
    210e:	49 91       	ld	r20, Y+
    2110:	59 91       	ld	r21, Y+
    2112:	c4 0f       	add	r28, r20
    2114:	d5 1f       	adc	r29, r21
    2116:	ec 17       	cp	r30, r28
    2118:	fd 07       	cpc	r31, r29
    211a:	61 f4       	brne	.+24     	; 0x2134 <free+0xbe>
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	84 0f       	add	r24, r20
    2122:	95 1f       	adc	r25, r21
    2124:	02 96       	adiw	r24, 0x02	; 2
    2126:	e9 01       	movw	r28, r18
    2128:	99 83       	std	Y+1, r25	; 0x01
    212a:	88 83       	st	Y, r24
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	9b 83       	std	Y+3, r25	; 0x03
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	e0 e0       	ldi	r30, 0x00	; 0
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	12 96       	adiw	r26, 0x02	; 2
    213a:	8d 91       	ld	r24, X+
    213c:	9c 91       	ld	r25, X
    213e:	13 97       	sbiw	r26, 0x03	; 3
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	19 f0       	breq	.+6      	; 0x214a <free+0xd4>
    2144:	fd 01       	movw	r30, r26
    2146:	dc 01       	movw	r26, r24
    2148:	f7 cf       	rjmp	.-18     	; 0x2138 <free+0xc2>
    214a:	8d 91       	ld	r24, X+
    214c:	9c 91       	ld	r25, X
    214e:	11 97       	sbiw	r26, 0x01	; 1
    2150:	9d 01       	movw	r18, r26
    2152:	2e 5f       	subi	r18, 0xFE	; 254
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <__brkval>
    215e:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <__brkval+0x1>
    2162:	28 17       	cp	r18, r24
    2164:	39 07       	cpc	r19, r25
    2166:	69 f4       	brne	.+26     	; 0x2182 <free+0x10c>
    2168:	30 97       	sbiw	r30, 0x00	; 0
    216a:	29 f4       	brne	.+10     	; 0x2176 <free+0x100>
    216c:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <__flp+0x1>
    2170:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <__flp>
    2174:	02 c0       	rjmp	.+4      	; 0x217a <free+0x104>
    2176:	13 82       	std	Z+3, r1	; 0x03
    2178:	12 82       	std	Z+2, r1	; 0x02
    217a:	b0 93 ca 05 	sts	0x05CA, r27	; 0x8005ca <__brkval+0x1>
    217e:	a0 93 c9 05 	sts	0x05C9, r26	; 0x8005c9 <__brkval>
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <strcpy>:
    2188:	fb 01       	movw	r30, r22
    218a:	dc 01       	movw	r26, r24
    218c:	01 90       	ld	r0, Z+
    218e:	0d 92       	st	X+, r0
    2190:	00 20       	and	r0, r0
    2192:	e1 f7       	brne	.-8      	; 0x218c <strcpy+0x4>
    2194:	08 95       	ret

00002196 <__itoa_ncheck>:
    2196:	bb 27       	eor	r27, r27
    2198:	4a 30       	cpi	r20, 0x0A	; 10
    219a:	31 f4       	brne	.+12     	; 0x21a8 <__itoa_ncheck+0x12>
    219c:	99 23       	and	r25, r25
    219e:	22 f4       	brpl	.+8      	; 0x21a8 <__itoa_ncheck+0x12>
    21a0:	bd e2       	ldi	r27, 0x2D	; 45
    21a2:	90 95       	com	r25
    21a4:	81 95       	neg	r24
    21a6:	9f 4f       	sbci	r25, 0xFF	; 255
    21a8:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__utoa_common>

000021ac <__utoa_ncheck>:
    21ac:	bb 27       	eor	r27, r27

000021ae <__utoa_common>:
    21ae:	fb 01       	movw	r30, r22
    21b0:	55 27       	eor	r21, r21
    21b2:	aa 27       	eor	r26, r26
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	aa 1f       	adc	r26, r26
    21ba:	a4 17       	cp	r26, r20
    21bc:	10 f0       	brcs	.+4      	; 0x21c2 <__utoa_common+0x14>
    21be:	a4 1b       	sub	r26, r20
    21c0:	83 95       	inc	r24
    21c2:	50 51       	subi	r21, 0x10	; 16
    21c4:	b9 f7       	brne	.-18     	; 0x21b4 <__utoa_common+0x6>
    21c6:	a0 5d       	subi	r26, 0xD0	; 208
    21c8:	aa 33       	cpi	r26, 0x3A	; 58
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <__utoa_common+0x20>
    21cc:	a9 5d       	subi	r26, 0xD9	; 217
    21ce:	a1 93       	st	Z+, r26
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	79 f7       	brne	.-34     	; 0x21b2 <__utoa_common+0x4>
    21d4:	b1 11       	cpse	r27, r1
    21d6:	b1 93       	st	Z+, r27
    21d8:	11 92       	st	Z+, r1
    21da:	cb 01       	movw	r24, r22
    21dc:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <strrev>

000021e0 <sprintf>:
    21e0:	ae e0       	ldi	r26, 0x0E	; 14
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e6 ef       	ldi	r30, 0xF6	; 246
    21e6:	f0 e1       	ldi	r31, 0x10	; 16
    21e8:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x1c>
    21ec:	0d 89       	ldd	r16, Y+21	; 0x15
    21ee:	1e 89       	ldd	r17, Y+22	; 0x16
    21f0:	86 e0       	ldi	r24, 0x06	; 6
    21f2:	8c 83       	std	Y+4, r24	; 0x04
    21f4:	1a 83       	std	Y+2, r17	; 0x02
    21f6:	09 83       	std	Y+1, r16	; 0x01
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	9f e7       	ldi	r25, 0x7F	; 127
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	ae 01       	movw	r20, r28
    2202:	47 5e       	subi	r20, 0xE7	; 231
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
    2206:	6f 89       	ldd	r22, Y+23	; 0x17
    2208:	78 8d       	ldd	r23, Y+24	; 0x18
    220a:	ce 01       	movw	r24, r28
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 12 11 	call	0x2224	; 0x2224 <vfprintf>
    2212:	ef 81       	ldd	r30, Y+7	; 0x07
    2214:	f8 85       	ldd	r31, Y+8	; 0x08
    2216:	e0 0f       	add	r30, r16
    2218:	f1 1f       	adc	r31, r17
    221a:	10 82       	st	Z, r1
    221c:	2e 96       	adiw	r28, 0x0e	; 14
    221e:	e4 e0       	ldi	r30, 0x04	; 4
    2220:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x1c>

00002224 <vfprintf>:
    2224:	ab e0       	ldi	r26, 0x0B	; 11
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e1       	ldi	r30, 0x18	; 24
    222a:	f1 e1       	ldi	r31, 0x11	; 17
    222c:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__>
    2230:	6c 01       	movw	r12, r24
    2232:	7b 01       	movw	r14, r22
    2234:	8a 01       	movw	r16, r20
    2236:	fc 01       	movw	r30, r24
    2238:	17 82       	std	Z+7, r1	; 0x07
    223a:	16 82       	std	Z+6, r1	; 0x06
    223c:	83 81       	ldd	r24, Z+3	; 0x03
    223e:	81 ff       	sbrs	r24, 1
    2240:	cc c1       	rjmp	.+920    	; 0x25da <vfprintf+0x3b6>
    2242:	ce 01       	movw	r24, r28
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	3c 01       	movw	r6, r24
    2248:	f6 01       	movw	r30, r12
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	f7 01       	movw	r30, r14
    224e:	93 fd       	sbrc	r25, 3
    2250:	85 91       	lpm	r24, Z+
    2252:	93 ff       	sbrs	r25, 3
    2254:	81 91       	ld	r24, Z+
    2256:	7f 01       	movw	r14, r30
    2258:	88 23       	and	r24, r24
    225a:	09 f4       	brne	.+2      	; 0x225e <vfprintf+0x3a>
    225c:	ba c1       	rjmp	.+884    	; 0x25d2 <vfprintf+0x3ae>
    225e:	85 32       	cpi	r24, 0x25	; 37
    2260:	39 f4       	brne	.+14     	; 0x2270 <vfprintf+0x4c>
    2262:	93 fd       	sbrc	r25, 3
    2264:	85 91       	lpm	r24, Z+
    2266:	93 ff       	sbrs	r25, 3
    2268:	81 91       	ld	r24, Z+
    226a:	7f 01       	movw	r14, r30
    226c:	85 32       	cpi	r24, 0x25	; 37
    226e:	29 f4       	brne	.+10     	; 0x227a <vfprintf+0x56>
    2270:	b6 01       	movw	r22, r12
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    2278:	e7 cf       	rjmp	.-50     	; 0x2248 <vfprintf+0x24>
    227a:	91 2c       	mov	r9, r1
    227c:	21 2c       	mov	r2, r1
    227e:	31 2c       	mov	r3, r1
    2280:	ff e1       	ldi	r31, 0x1F	; 31
    2282:	f3 15       	cp	r31, r3
    2284:	d8 f0       	brcs	.+54     	; 0x22bc <vfprintf+0x98>
    2286:	8b 32       	cpi	r24, 0x2B	; 43
    2288:	79 f0       	breq	.+30     	; 0x22a8 <vfprintf+0x84>
    228a:	38 f4       	brcc	.+14     	; 0x229a <vfprintf+0x76>
    228c:	80 32       	cpi	r24, 0x20	; 32
    228e:	79 f0       	breq	.+30     	; 0x22ae <vfprintf+0x8a>
    2290:	83 32       	cpi	r24, 0x23	; 35
    2292:	a1 f4       	brne	.+40     	; 0x22bc <vfprintf+0x98>
    2294:	23 2d       	mov	r18, r3
    2296:	20 61       	ori	r18, 0x10	; 16
    2298:	1d c0       	rjmp	.+58     	; 0x22d4 <vfprintf+0xb0>
    229a:	8d 32       	cpi	r24, 0x2D	; 45
    229c:	61 f0       	breq	.+24     	; 0x22b6 <vfprintf+0x92>
    229e:	80 33       	cpi	r24, 0x30	; 48
    22a0:	69 f4       	brne	.+26     	; 0x22bc <vfprintf+0x98>
    22a2:	23 2d       	mov	r18, r3
    22a4:	21 60       	ori	r18, 0x01	; 1
    22a6:	16 c0       	rjmp	.+44     	; 0x22d4 <vfprintf+0xb0>
    22a8:	83 2d       	mov	r24, r3
    22aa:	82 60       	ori	r24, 0x02	; 2
    22ac:	38 2e       	mov	r3, r24
    22ae:	e3 2d       	mov	r30, r3
    22b0:	e4 60       	ori	r30, 0x04	; 4
    22b2:	3e 2e       	mov	r3, r30
    22b4:	2a c0       	rjmp	.+84     	; 0x230a <vfprintf+0xe6>
    22b6:	f3 2d       	mov	r31, r3
    22b8:	f8 60       	ori	r31, 0x08	; 8
    22ba:	1d c0       	rjmp	.+58     	; 0x22f6 <vfprintf+0xd2>
    22bc:	37 fc       	sbrc	r3, 7
    22be:	2d c0       	rjmp	.+90     	; 0x231a <vfprintf+0xf6>
    22c0:	20 ed       	ldi	r18, 0xD0	; 208
    22c2:	28 0f       	add	r18, r24
    22c4:	2a 30       	cpi	r18, 0x0A	; 10
    22c6:	40 f0       	brcs	.+16     	; 0x22d8 <vfprintf+0xb4>
    22c8:	8e 32       	cpi	r24, 0x2E	; 46
    22ca:	b9 f4       	brne	.+46     	; 0x22fa <vfprintf+0xd6>
    22cc:	36 fc       	sbrc	r3, 6
    22ce:	81 c1       	rjmp	.+770    	; 0x25d2 <vfprintf+0x3ae>
    22d0:	23 2d       	mov	r18, r3
    22d2:	20 64       	ori	r18, 0x40	; 64
    22d4:	32 2e       	mov	r3, r18
    22d6:	19 c0       	rjmp	.+50     	; 0x230a <vfprintf+0xe6>
    22d8:	36 fe       	sbrs	r3, 6
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <vfprintf+0xc4>
    22dc:	8a e0       	ldi	r24, 0x0A	; 10
    22de:	98 9e       	mul	r9, r24
    22e0:	20 0d       	add	r18, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	92 2e       	mov	r9, r18
    22e6:	11 c0       	rjmp	.+34     	; 0x230a <vfprintf+0xe6>
    22e8:	ea e0       	ldi	r30, 0x0A	; 10
    22ea:	2e 9e       	mul	r2, r30
    22ec:	20 0d       	add	r18, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	22 2e       	mov	r2, r18
    22f2:	f3 2d       	mov	r31, r3
    22f4:	f0 62       	ori	r31, 0x20	; 32
    22f6:	3f 2e       	mov	r3, r31
    22f8:	08 c0       	rjmp	.+16     	; 0x230a <vfprintf+0xe6>
    22fa:	8c 36       	cpi	r24, 0x6C	; 108
    22fc:	21 f4       	brne	.+8      	; 0x2306 <vfprintf+0xe2>
    22fe:	83 2d       	mov	r24, r3
    2300:	80 68       	ori	r24, 0x80	; 128
    2302:	38 2e       	mov	r3, r24
    2304:	02 c0       	rjmp	.+4      	; 0x230a <vfprintf+0xe6>
    2306:	88 36       	cpi	r24, 0x68	; 104
    2308:	41 f4       	brne	.+16     	; 0x231a <vfprintf+0xf6>
    230a:	f7 01       	movw	r30, r14
    230c:	93 fd       	sbrc	r25, 3
    230e:	85 91       	lpm	r24, Z+
    2310:	93 ff       	sbrs	r25, 3
    2312:	81 91       	ld	r24, Z+
    2314:	7f 01       	movw	r14, r30
    2316:	81 11       	cpse	r24, r1
    2318:	b3 cf       	rjmp	.-154    	; 0x2280 <vfprintf+0x5c>
    231a:	98 2f       	mov	r25, r24
    231c:	9f 7d       	andi	r25, 0xDF	; 223
    231e:	95 54       	subi	r25, 0x45	; 69
    2320:	93 30       	cpi	r25, 0x03	; 3
    2322:	28 f4       	brcc	.+10     	; 0x232e <vfprintf+0x10a>
    2324:	0c 5f       	subi	r16, 0xFC	; 252
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	9f e3       	ldi	r25, 0x3F	; 63
    232a:	99 83       	std	Y+1, r25	; 0x01
    232c:	0d c0       	rjmp	.+26     	; 0x2348 <vfprintf+0x124>
    232e:	83 36       	cpi	r24, 0x63	; 99
    2330:	31 f0       	breq	.+12     	; 0x233e <vfprintf+0x11a>
    2332:	83 37       	cpi	r24, 0x73	; 115
    2334:	71 f0       	breq	.+28     	; 0x2352 <vfprintf+0x12e>
    2336:	83 35       	cpi	r24, 0x53	; 83
    2338:	09 f0       	breq	.+2      	; 0x233c <vfprintf+0x118>
    233a:	59 c0       	rjmp	.+178    	; 0x23ee <vfprintf+0x1ca>
    233c:	21 c0       	rjmp	.+66     	; 0x2380 <vfprintf+0x15c>
    233e:	f8 01       	movw	r30, r16
    2340:	80 81       	ld	r24, Z
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	0e 5f       	subi	r16, 0xFE	; 254
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	88 24       	eor	r8, r8
    234a:	83 94       	inc	r8
    234c:	91 2c       	mov	r9, r1
    234e:	53 01       	movw	r10, r6
    2350:	13 c0       	rjmp	.+38     	; 0x2378 <vfprintf+0x154>
    2352:	28 01       	movw	r4, r16
    2354:	f2 e0       	ldi	r31, 0x02	; 2
    2356:	4f 0e       	add	r4, r31
    2358:	51 1c       	adc	r5, r1
    235a:	f8 01       	movw	r30, r16
    235c:	a0 80       	ld	r10, Z
    235e:	b1 80       	ldd	r11, Z+1	; 0x01
    2360:	36 fe       	sbrs	r3, 6
    2362:	03 c0       	rjmp	.+6      	; 0x236a <vfprintf+0x146>
    2364:	69 2d       	mov	r22, r9
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0x14a>
    236a:	6f ef       	ldi	r22, 0xFF	; 255
    236c:	7f ef       	ldi	r23, 0xFF	; 255
    236e:	c5 01       	movw	r24, r10
    2370:	0e 94 30 15 	call	0x2a60	; 0x2a60 <strnlen>
    2374:	4c 01       	movw	r8, r24
    2376:	82 01       	movw	r16, r4
    2378:	f3 2d       	mov	r31, r3
    237a:	ff 77       	andi	r31, 0x7F	; 127
    237c:	3f 2e       	mov	r3, r31
    237e:	16 c0       	rjmp	.+44     	; 0x23ac <vfprintf+0x188>
    2380:	28 01       	movw	r4, r16
    2382:	22 e0       	ldi	r18, 0x02	; 2
    2384:	42 0e       	add	r4, r18
    2386:	51 1c       	adc	r5, r1
    2388:	f8 01       	movw	r30, r16
    238a:	a0 80       	ld	r10, Z
    238c:	b1 80       	ldd	r11, Z+1	; 0x01
    238e:	36 fe       	sbrs	r3, 6
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <vfprintf+0x174>
    2392:	69 2d       	mov	r22, r9
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	02 c0       	rjmp	.+4      	; 0x239c <vfprintf+0x178>
    2398:	6f ef       	ldi	r22, 0xFF	; 255
    239a:	7f ef       	ldi	r23, 0xFF	; 255
    239c:	c5 01       	movw	r24, r10
    239e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <strnlen_P>
    23a2:	4c 01       	movw	r8, r24
    23a4:	f3 2d       	mov	r31, r3
    23a6:	f0 68       	ori	r31, 0x80	; 128
    23a8:	3f 2e       	mov	r3, r31
    23aa:	82 01       	movw	r16, r4
    23ac:	33 fc       	sbrc	r3, 3
    23ae:	1b c0       	rjmp	.+54     	; 0x23e6 <vfprintf+0x1c2>
    23b0:	82 2d       	mov	r24, r2
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	88 16       	cp	r8, r24
    23b6:	99 06       	cpc	r9, r25
    23b8:	b0 f4       	brcc	.+44     	; 0x23e6 <vfprintf+0x1c2>
    23ba:	b6 01       	movw	r22, r12
    23bc:	80 e2       	ldi	r24, 0x20	; 32
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    23c4:	2a 94       	dec	r2
    23c6:	f4 cf       	rjmp	.-24     	; 0x23b0 <vfprintf+0x18c>
    23c8:	f5 01       	movw	r30, r10
    23ca:	37 fc       	sbrc	r3, 7
    23cc:	85 91       	lpm	r24, Z+
    23ce:	37 fe       	sbrs	r3, 7
    23d0:	81 91       	ld	r24, Z+
    23d2:	5f 01       	movw	r10, r30
    23d4:	b6 01       	movw	r22, r12
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    23dc:	21 10       	cpse	r2, r1
    23de:	2a 94       	dec	r2
    23e0:	21 e0       	ldi	r18, 0x01	; 1
    23e2:	82 1a       	sub	r8, r18
    23e4:	91 08       	sbc	r9, r1
    23e6:	81 14       	cp	r8, r1
    23e8:	91 04       	cpc	r9, r1
    23ea:	71 f7       	brne	.-36     	; 0x23c8 <vfprintf+0x1a4>
    23ec:	e8 c0       	rjmp	.+464    	; 0x25be <vfprintf+0x39a>
    23ee:	84 36       	cpi	r24, 0x64	; 100
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <vfprintf+0x1d2>
    23f2:	89 36       	cpi	r24, 0x69	; 105
    23f4:	41 f5       	brne	.+80     	; 0x2446 <vfprintf+0x222>
    23f6:	f8 01       	movw	r30, r16
    23f8:	37 fe       	sbrs	r3, 7
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <vfprintf+0x1e6>
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	0c 5f       	subi	r16, 0xFC	; 252
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	08 c0       	rjmp	.+16     	; 0x241a <vfprintf+0x1f6>
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	07 2e       	mov	r0, r23
    2410:	00 0c       	add	r0, r0
    2412:	88 0b       	sbc	r24, r24
    2414:	99 0b       	sbc	r25, r25
    2416:	0e 5f       	subi	r16, 0xFE	; 254
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	f3 2d       	mov	r31, r3
    241c:	ff 76       	andi	r31, 0x6F	; 111
    241e:	3f 2e       	mov	r3, r31
    2420:	97 ff       	sbrs	r25, 7
    2422:	09 c0       	rjmp	.+18     	; 0x2436 <vfprintf+0x212>
    2424:	90 95       	com	r25
    2426:	80 95       	com	r24
    2428:	70 95       	com	r23
    242a:	61 95       	neg	r22
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
    242e:	8f 4f       	sbci	r24, 0xFF	; 255
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	f0 68       	ori	r31, 0x80	; 128
    2434:	3f 2e       	mov	r3, r31
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	a3 01       	movw	r20, r6
    243c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__ultoa_invert>
    2440:	88 2e       	mov	r8, r24
    2442:	86 18       	sub	r8, r6
    2444:	45 c0       	rjmp	.+138    	; 0x24d0 <vfprintf+0x2ac>
    2446:	85 37       	cpi	r24, 0x75	; 117
    2448:	31 f4       	brne	.+12     	; 0x2456 <vfprintf+0x232>
    244a:	23 2d       	mov	r18, r3
    244c:	2f 7e       	andi	r18, 0xEF	; 239
    244e:	b2 2e       	mov	r11, r18
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	25 c0       	rjmp	.+74     	; 0x24a0 <vfprintf+0x27c>
    2456:	93 2d       	mov	r25, r3
    2458:	99 7f       	andi	r25, 0xF9	; 249
    245a:	b9 2e       	mov	r11, r25
    245c:	8f 36       	cpi	r24, 0x6F	; 111
    245e:	c1 f0       	breq	.+48     	; 0x2490 <vfprintf+0x26c>
    2460:	18 f4       	brcc	.+6      	; 0x2468 <vfprintf+0x244>
    2462:	88 35       	cpi	r24, 0x58	; 88
    2464:	79 f0       	breq	.+30     	; 0x2484 <vfprintf+0x260>
    2466:	b5 c0       	rjmp	.+362    	; 0x25d2 <vfprintf+0x3ae>
    2468:	80 37       	cpi	r24, 0x70	; 112
    246a:	19 f0       	breq	.+6      	; 0x2472 <vfprintf+0x24e>
    246c:	88 37       	cpi	r24, 0x78	; 120
    246e:	21 f0       	breq	.+8      	; 0x2478 <vfprintf+0x254>
    2470:	b0 c0       	rjmp	.+352    	; 0x25d2 <vfprintf+0x3ae>
    2472:	e9 2f       	mov	r30, r25
    2474:	e0 61       	ori	r30, 0x10	; 16
    2476:	be 2e       	mov	r11, r30
    2478:	b4 fe       	sbrs	r11, 4
    247a:	0d c0       	rjmp	.+26     	; 0x2496 <vfprintf+0x272>
    247c:	fb 2d       	mov	r31, r11
    247e:	f4 60       	ori	r31, 0x04	; 4
    2480:	bf 2e       	mov	r11, r31
    2482:	09 c0       	rjmp	.+18     	; 0x2496 <vfprintf+0x272>
    2484:	34 fe       	sbrs	r3, 4
    2486:	0a c0       	rjmp	.+20     	; 0x249c <vfprintf+0x278>
    2488:	29 2f       	mov	r18, r25
    248a:	26 60       	ori	r18, 0x06	; 6
    248c:	b2 2e       	mov	r11, r18
    248e:	06 c0       	rjmp	.+12     	; 0x249c <vfprintf+0x278>
    2490:	28 e0       	ldi	r18, 0x08	; 8
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	05 c0       	rjmp	.+10     	; 0x24a0 <vfprintf+0x27c>
    2496:	20 e1       	ldi	r18, 0x10	; 16
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <vfprintf+0x27c>
    249c:	20 e1       	ldi	r18, 0x10	; 16
    249e:	32 e0       	ldi	r19, 0x02	; 2
    24a0:	f8 01       	movw	r30, r16
    24a2:	b7 fe       	sbrs	r11, 7
    24a4:	07 c0       	rjmp	.+14     	; 0x24b4 <vfprintf+0x290>
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	0c 5f       	subi	r16, 0xFC	; 252
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	06 c0       	rjmp	.+12     	; 0x24c0 <vfprintf+0x29c>
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 5f       	subi	r16, 0xFE	; 254
    24be:	1f 4f       	sbci	r17, 0xFF	; 255
    24c0:	a3 01       	movw	r20, r6
    24c2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__ultoa_invert>
    24c6:	88 2e       	mov	r8, r24
    24c8:	86 18       	sub	r8, r6
    24ca:	fb 2d       	mov	r31, r11
    24cc:	ff 77       	andi	r31, 0x7F	; 127
    24ce:	3f 2e       	mov	r3, r31
    24d0:	36 fe       	sbrs	r3, 6
    24d2:	0d c0       	rjmp	.+26     	; 0x24ee <vfprintf+0x2ca>
    24d4:	23 2d       	mov	r18, r3
    24d6:	2e 7f       	andi	r18, 0xFE	; 254
    24d8:	a2 2e       	mov	r10, r18
    24da:	89 14       	cp	r8, r9
    24dc:	58 f4       	brcc	.+22     	; 0x24f4 <vfprintf+0x2d0>
    24de:	34 fe       	sbrs	r3, 4
    24e0:	0b c0       	rjmp	.+22     	; 0x24f8 <vfprintf+0x2d4>
    24e2:	32 fc       	sbrc	r3, 2
    24e4:	09 c0       	rjmp	.+18     	; 0x24f8 <vfprintf+0x2d4>
    24e6:	83 2d       	mov	r24, r3
    24e8:	8e 7e       	andi	r24, 0xEE	; 238
    24ea:	a8 2e       	mov	r10, r24
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <vfprintf+0x2d4>
    24ee:	b8 2c       	mov	r11, r8
    24f0:	a3 2c       	mov	r10, r3
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <vfprintf+0x2d6>
    24f4:	b8 2c       	mov	r11, r8
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <vfprintf+0x2d6>
    24f8:	b9 2c       	mov	r11, r9
    24fa:	a4 fe       	sbrs	r10, 4
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <vfprintf+0x2f8>
    24fe:	fe 01       	movw	r30, r28
    2500:	e8 0d       	add	r30, r8
    2502:	f1 1d       	adc	r31, r1
    2504:	80 81       	ld	r24, Z
    2506:	80 33       	cpi	r24, 0x30	; 48
    2508:	21 f4       	brne	.+8      	; 0x2512 <vfprintf+0x2ee>
    250a:	9a 2d       	mov	r25, r10
    250c:	99 7e       	andi	r25, 0xE9	; 233
    250e:	a9 2e       	mov	r10, r25
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <vfprintf+0x300>
    2512:	a2 fe       	sbrs	r10, 2
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <vfprintf+0x2fe>
    2516:	b3 94       	inc	r11
    2518:	b3 94       	inc	r11
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <vfprintf+0x300>
    251c:	8a 2d       	mov	r24, r10
    251e:	86 78       	andi	r24, 0x86	; 134
    2520:	09 f0       	breq	.+2      	; 0x2524 <vfprintf+0x300>
    2522:	b3 94       	inc	r11
    2524:	a3 fc       	sbrc	r10, 3
    2526:	11 c0       	rjmp	.+34     	; 0x254a <vfprintf+0x326>
    2528:	a0 fe       	sbrs	r10, 0
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <vfprintf+0x314>
    252c:	b2 14       	cp	r11, r2
    252e:	88 f4       	brcc	.+34     	; 0x2552 <vfprintf+0x32e>
    2530:	28 0c       	add	r2, r8
    2532:	92 2c       	mov	r9, r2
    2534:	9b 18       	sub	r9, r11
    2536:	0e c0       	rjmp	.+28     	; 0x2554 <vfprintf+0x330>
    2538:	b2 14       	cp	r11, r2
    253a:	60 f4       	brcc	.+24     	; 0x2554 <vfprintf+0x330>
    253c:	b6 01       	movw	r22, r12
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    2546:	b3 94       	inc	r11
    2548:	f7 cf       	rjmp	.-18     	; 0x2538 <vfprintf+0x314>
    254a:	b2 14       	cp	r11, r2
    254c:	18 f4       	brcc	.+6      	; 0x2554 <vfprintf+0x330>
    254e:	2b 18       	sub	r2, r11
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <vfprintf+0x332>
    2552:	98 2c       	mov	r9, r8
    2554:	21 2c       	mov	r2, r1
    2556:	a4 fe       	sbrs	r10, 4
    2558:	10 c0       	rjmp	.+32     	; 0x257a <vfprintf+0x356>
    255a:	b6 01       	movw	r22, r12
    255c:	80 e3       	ldi	r24, 0x30	; 48
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    2564:	a2 fe       	sbrs	r10, 2
    2566:	17 c0       	rjmp	.+46     	; 0x2596 <vfprintf+0x372>
    2568:	a1 fc       	sbrc	r10, 1
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <vfprintf+0x34e>
    256c:	88 e7       	ldi	r24, 0x78	; 120
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <vfprintf+0x352>
    2572:	88 e5       	ldi	r24, 0x58	; 88
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	b6 01       	movw	r22, r12
    2578:	0c c0       	rjmp	.+24     	; 0x2592 <vfprintf+0x36e>
    257a:	8a 2d       	mov	r24, r10
    257c:	86 78       	andi	r24, 0x86	; 134
    257e:	59 f0       	breq	.+22     	; 0x2596 <vfprintf+0x372>
    2580:	a1 fe       	sbrs	r10, 1
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <vfprintf+0x364>
    2584:	8b e2       	ldi	r24, 0x2B	; 43
    2586:	01 c0       	rjmp	.+2      	; 0x258a <vfprintf+0x366>
    2588:	80 e2       	ldi	r24, 0x20	; 32
    258a:	a7 fc       	sbrc	r10, 7
    258c:	8d e2       	ldi	r24, 0x2D	; 45
    258e:	b6 01       	movw	r22, r12
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    2596:	89 14       	cp	r8, r9
    2598:	38 f4       	brcc	.+14     	; 0x25a8 <vfprintf+0x384>
    259a:	b6 01       	movw	r22, r12
    259c:	80 e3       	ldi	r24, 0x30	; 48
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    25a4:	9a 94       	dec	r9
    25a6:	f7 cf       	rjmp	.-18     	; 0x2596 <vfprintf+0x372>
    25a8:	8a 94       	dec	r8
    25aa:	f3 01       	movw	r30, r6
    25ac:	e8 0d       	add	r30, r8
    25ae:	f1 1d       	adc	r31, r1
    25b0:	80 81       	ld	r24, Z
    25b2:	b6 01       	movw	r22, r12
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    25ba:	81 10       	cpse	r8, r1
    25bc:	f5 cf       	rjmp	.-22     	; 0x25a8 <vfprintf+0x384>
    25be:	22 20       	and	r2, r2
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <vfprintf+0x3a0>
    25c2:	42 ce       	rjmp	.-892    	; 0x2248 <vfprintf+0x24>
    25c4:	b6 01       	movw	r22, r12
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <fputc>
    25ce:	2a 94       	dec	r2
    25d0:	f6 cf       	rjmp	.-20     	; 0x25be <vfprintf+0x39a>
    25d2:	f6 01       	movw	r30, r12
    25d4:	86 81       	ldd	r24, Z+6	; 0x06
    25d6:	97 81       	ldd	r25, Z+7	; 0x07
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <vfprintf+0x3ba>
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	2b 96       	adiw	r28, 0x0b	; 11
    25e0:	e2 e1       	ldi	r30, 0x12	; 18
    25e2:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__>

000025e6 <dtoa_prf>:
    25e6:	a9 e0       	ldi	r26, 0x09	; 9
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e9 ef       	ldi	r30, 0xF9	; 249
    25ec:	f2 e1       	ldi	r31, 0x12	; 18
    25ee:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__prologue_saves__+0xc>
    25f2:	6a 01       	movw	r12, r20
    25f4:	12 2f       	mov	r17, r18
    25f6:	b0 2e       	mov	r11, r16
    25f8:	2b e3       	ldi	r18, 0x3B	; 59
    25fa:	20 17       	cp	r18, r16
    25fc:	20 f0       	brcs	.+8      	; 0x2606 <dtoa_prf+0x20>
    25fe:	ff 24       	eor	r15, r15
    2600:	f3 94       	inc	r15
    2602:	f0 0e       	add	r15, r16
    2604:	02 c0       	rjmp	.+4      	; 0x260a <dtoa_prf+0x24>
    2606:	2c e3       	ldi	r18, 0x3C	; 60
    2608:	f2 2e       	mov	r15, r18
    260a:	0f 2d       	mov	r16, r15
    260c:	27 e0       	ldi	r18, 0x07	; 7
    260e:	ae 01       	movw	r20, r28
    2610:	4f 5f       	subi	r20, 0xFF	; 255
    2612:	5f 4f       	sbci	r21, 0xFF	; 255
    2614:	0e 94 4d 14 	call	0x289a	; 0x289a <__ftoa_engine>
    2618:	bc 01       	movw	r22, r24
    261a:	49 81       	ldd	r20, Y+1	; 0x01
    261c:	84 2f       	mov	r24, r20
    261e:	89 70       	andi	r24, 0x09	; 9
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	31 f0       	breq	.+12     	; 0x2630 <dtoa_prf+0x4a>
    2624:	e1 fc       	sbrc	r14, 1
    2626:	06 c0       	rjmp	.+12     	; 0x2634 <dtoa_prf+0x4e>
    2628:	e0 fe       	sbrs	r14, 0
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <dtoa_prf+0x52>
    262c:	90 e2       	ldi	r25, 0x20	; 32
    262e:	05 c0       	rjmp	.+10     	; 0x263a <dtoa_prf+0x54>
    2630:	9d e2       	ldi	r25, 0x2D	; 45
    2632:	03 c0       	rjmp	.+6      	; 0x263a <dtoa_prf+0x54>
    2634:	9b e2       	ldi	r25, 0x2B	; 43
    2636:	01 c0       	rjmp	.+2      	; 0x263a <dtoa_prf+0x54>
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	5e 2d       	mov	r21, r14
    263c:	50 71       	andi	r21, 0x10	; 16
    263e:	43 ff       	sbrs	r20, 3
    2640:	3c c0       	rjmp	.+120    	; 0x26ba <dtoa_prf+0xd4>
    2642:	91 11       	cpse	r25, r1
    2644:	02 c0       	rjmp	.+4      	; 0x264a <dtoa_prf+0x64>
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	01 c0       	rjmp	.+2      	; 0x264c <dtoa_prf+0x66>
    264a:	84 e0       	ldi	r24, 0x04	; 4
    264c:	81 17       	cp	r24, r17
    264e:	18 f4       	brcc	.+6      	; 0x2656 <dtoa_prf+0x70>
    2650:	21 2f       	mov	r18, r17
    2652:	28 1b       	sub	r18, r24
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <dtoa_prf+0x72>
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	51 11       	cpse	r21, r1
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <dtoa_prf+0x8c>
    265c:	f6 01       	movw	r30, r12
    265e:	82 2f       	mov	r24, r18
    2660:	30 e2       	ldi	r19, 0x20	; 32
    2662:	88 23       	and	r24, r24
    2664:	19 f0       	breq	.+6      	; 0x266c <dtoa_prf+0x86>
    2666:	31 93       	st	Z+, r19
    2668:	81 50       	subi	r24, 0x01	; 1
    266a:	fb cf       	rjmp	.-10     	; 0x2662 <dtoa_prf+0x7c>
    266c:	c2 0e       	add	r12, r18
    266e:	d1 1c       	adc	r13, r1
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	99 23       	and	r25, r25
    2674:	29 f0       	breq	.+10     	; 0x2680 <dtoa_prf+0x9a>
    2676:	d6 01       	movw	r26, r12
    2678:	9c 93       	st	X, r25
    267a:	f6 01       	movw	r30, r12
    267c:	31 96       	adiw	r30, 0x01	; 1
    267e:	6f 01       	movw	r12, r30
    2680:	c6 01       	movw	r24, r12
    2682:	03 96       	adiw	r24, 0x03	; 3
    2684:	e2 fe       	sbrs	r14, 2
    2686:	0a c0       	rjmp	.+20     	; 0x269c <dtoa_prf+0xb6>
    2688:	3e e4       	ldi	r19, 0x4E	; 78
    268a:	d6 01       	movw	r26, r12
    268c:	3c 93       	st	X, r19
    268e:	41 e4       	ldi	r20, 0x41	; 65
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	4c 93       	st	X, r20
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	12 96       	adiw	r26, 0x02	; 2
    2698:	3c 93       	st	X, r19
    269a:	06 c0       	rjmp	.+12     	; 0x26a8 <dtoa_prf+0xc2>
    269c:	3e e6       	ldi	r19, 0x6E	; 110
    269e:	f6 01       	movw	r30, r12
    26a0:	30 83       	st	Z, r19
    26a2:	41 e6       	ldi	r20, 0x61	; 97
    26a4:	41 83       	std	Z+1, r20	; 0x01
    26a6:	32 83       	std	Z+2, r19	; 0x02
    26a8:	fc 01       	movw	r30, r24
    26aa:	32 2f       	mov	r19, r18
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	33 23       	and	r19, r19
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <dtoa_prf+0xce>
    26b2:	42 c0       	rjmp	.+132    	; 0x2738 <dtoa_prf+0x152>
    26b4:	41 93       	st	Z+, r20
    26b6:	31 50       	subi	r19, 0x01	; 1
    26b8:	fa cf       	rjmp	.-12     	; 0x26ae <dtoa_prf+0xc8>
    26ba:	42 ff       	sbrs	r20, 2
    26bc:	44 c0       	rjmp	.+136    	; 0x2746 <dtoa_prf+0x160>
    26be:	91 11       	cpse	r25, r1
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <dtoa_prf+0xe0>
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	01 c0       	rjmp	.+2      	; 0x26c8 <dtoa_prf+0xe2>
    26c6:	84 e0       	ldi	r24, 0x04	; 4
    26c8:	81 17       	cp	r24, r17
    26ca:	18 f4       	brcc	.+6      	; 0x26d2 <dtoa_prf+0xec>
    26cc:	21 2f       	mov	r18, r17
    26ce:	28 1b       	sub	r18, r24
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <dtoa_prf+0xee>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	51 11       	cpse	r21, r1
    26d6:	0b c0       	rjmp	.+22     	; 0x26ee <dtoa_prf+0x108>
    26d8:	f6 01       	movw	r30, r12
    26da:	82 2f       	mov	r24, r18
    26dc:	30 e2       	ldi	r19, 0x20	; 32
    26de:	88 23       	and	r24, r24
    26e0:	19 f0       	breq	.+6      	; 0x26e8 <dtoa_prf+0x102>
    26e2:	31 93       	st	Z+, r19
    26e4:	81 50       	subi	r24, 0x01	; 1
    26e6:	fb cf       	rjmp	.-10     	; 0x26de <dtoa_prf+0xf8>
    26e8:	c2 0e       	add	r12, r18
    26ea:	d1 1c       	adc	r13, r1
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	99 23       	and	r25, r25
    26f0:	29 f0       	breq	.+10     	; 0x26fc <dtoa_prf+0x116>
    26f2:	d6 01       	movw	r26, r12
    26f4:	9c 93       	st	X, r25
    26f6:	f6 01       	movw	r30, r12
    26f8:	31 96       	adiw	r30, 0x01	; 1
    26fa:	6f 01       	movw	r12, r30
    26fc:	c6 01       	movw	r24, r12
    26fe:	03 96       	adiw	r24, 0x03	; 3
    2700:	e2 fe       	sbrs	r14, 2
    2702:	0b c0       	rjmp	.+22     	; 0x271a <dtoa_prf+0x134>
    2704:	39 e4       	ldi	r19, 0x49	; 73
    2706:	d6 01       	movw	r26, r12
    2708:	3c 93       	st	X, r19
    270a:	3e e4       	ldi	r19, 0x4E	; 78
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	3c 93       	st	X, r19
    2710:	11 97       	sbiw	r26, 0x01	; 1
    2712:	36 e4       	ldi	r19, 0x46	; 70
    2714:	12 96       	adiw	r26, 0x02	; 2
    2716:	3c 93       	st	X, r19
    2718:	07 c0       	rjmp	.+14     	; 0x2728 <dtoa_prf+0x142>
    271a:	39 e6       	ldi	r19, 0x69	; 105
    271c:	f6 01       	movw	r30, r12
    271e:	30 83       	st	Z, r19
    2720:	3e e6       	ldi	r19, 0x6E	; 110
    2722:	31 83       	std	Z+1, r19	; 0x01
    2724:	36 e6       	ldi	r19, 0x66	; 102
    2726:	32 83       	std	Z+2, r19	; 0x02
    2728:	fc 01       	movw	r30, r24
    272a:	32 2f       	mov	r19, r18
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	33 23       	and	r19, r19
    2730:	19 f0       	breq	.+6      	; 0x2738 <dtoa_prf+0x152>
    2732:	41 93       	st	Z+, r20
    2734:	31 50       	subi	r19, 0x01	; 1
    2736:	fb cf       	rjmp	.-10     	; 0x272e <dtoa_prf+0x148>
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f1 1d       	adc	r31, r1
    273e:	10 82       	st	Z, r1
    2740:	8e ef       	ldi	r24, 0xFE	; 254
    2742:	9f ef       	ldi	r25, 0xFF	; 255
    2744:	a6 c0       	rjmp	.+332    	; 0x2892 <dtoa_prf+0x2ac>
    2746:	21 e0       	ldi	r18, 0x01	; 1
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	91 11       	cpse	r25, r1
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <dtoa_prf+0x16c>
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	16 16       	cp	r1, r22
    2754:	17 06       	cpc	r1, r23
    2756:	1c f4       	brge	.+6      	; 0x275e <dtoa_prf+0x178>
    2758:	fb 01       	movw	r30, r22
    275a:	31 96       	adiw	r30, 0x01	; 1
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <dtoa_prf+0x17c>
    275e:	e1 e0       	ldi	r30, 0x01	; 1
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	2e 0f       	add	r18, r30
    2764:	3f 1f       	adc	r19, r31
    2766:	bb 20       	and	r11, r11
    2768:	21 f0       	breq	.+8      	; 0x2772 <dtoa_prf+0x18c>
    276a:	eb 2d       	mov	r30, r11
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	31 96       	adiw	r30, 0x01	; 1
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <dtoa_prf+0x190>
    2772:	e0 e0       	ldi	r30, 0x00	; 0
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	2e 0f       	add	r18, r30
    2778:	3f 1f       	adc	r19, r31
    277a:	e1 2f       	mov	r30, r17
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	2e 17       	cp	r18, r30
    2780:	3f 07       	cpc	r19, r31
    2782:	1c f4       	brge	.+6      	; 0x278a <dtoa_prf+0x1a4>
    2784:	12 1b       	sub	r17, r18
    2786:	21 2f       	mov	r18, r17
    2788:	01 c0       	rjmp	.+2      	; 0x278c <dtoa_prf+0x1a6>
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	8e 2d       	mov	r24, r14
    278e:	88 71       	andi	r24, 0x18	; 24
    2790:	59 f4       	brne	.+22     	; 0x27a8 <dtoa_prf+0x1c2>
    2792:	f6 01       	movw	r30, r12
    2794:	82 2f       	mov	r24, r18
    2796:	30 e2       	ldi	r19, 0x20	; 32
    2798:	88 23       	and	r24, r24
    279a:	19 f0       	breq	.+6      	; 0x27a2 <dtoa_prf+0x1bc>
    279c:	31 93       	st	Z+, r19
    279e:	81 50       	subi	r24, 0x01	; 1
    27a0:	fb cf       	rjmp	.-10     	; 0x2798 <dtoa_prf+0x1b2>
    27a2:	c2 0e       	add	r12, r18
    27a4:	d1 1c       	adc	r13, r1
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	99 23       	and	r25, r25
    27aa:	29 f0       	breq	.+10     	; 0x27b6 <dtoa_prf+0x1d0>
    27ac:	d6 01       	movw	r26, r12
    27ae:	9c 93       	st	X, r25
    27b0:	f6 01       	movw	r30, r12
    27b2:	31 96       	adiw	r30, 0x01	; 1
    27b4:	6f 01       	movw	r12, r30
    27b6:	51 11       	cpse	r21, r1
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <dtoa_prf+0x1ea>
    27ba:	f6 01       	movw	r30, r12
    27bc:	82 2f       	mov	r24, r18
    27be:	90 e3       	ldi	r25, 0x30	; 48
    27c0:	88 23       	and	r24, r24
    27c2:	19 f0       	breq	.+6      	; 0x27ca <dtoa_prf+0x1e4>
    27c4:	91 93       	st	Z+, r25
    27c6:	81 50       	subi	r24, 0x01	; 1
    27c8:	fb cf       	rjmp	.-10     	; 0x27c0 <dtoa_prf+0x1da>
    27ca:	c2 0e       	add	r12, r18
    27cc:	d1 1c       	adc	r13, r1
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	0f 2d       	mov	r16, r15
    27d2:	06 0f       	add	r16, r22
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	34 2f       	mov	r19, r20
    27d8:	30 71       	andi	r19, 0x10	; 16
    27da:	44 ff       	sbrs	r20, 4
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <dtoa_prf+0x1fe>
    27de:	91 33       	cpi	r25, 0x31	; 49
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <dtoa_prf+0x1fe>
    27e2:	01 50       	subi	r16, 0x01	; 1
    27e4:	10 16       	cp	r1, r16
    27e6:	24 f4       	brge	.+8      	; 0x27f0 <dtoa_prf+0x20a>
    27e8:	09 30       	cpi	r16, 0x09	; 9
    27ea:	18 f0       	brcs	.+6      	; 0x27f2 <dtoa_prf+0x20c>
    27ec:	08 e0       	ldi	r16, 0x08	; 8
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <dtoa_prf+0x20c>
    27f0:	01 e0       	ldi	r16, 0x01	; 1
    27f2:	ab 01       	movw	r20, r22
    27f4:	77 ff       	sbrs	r23, 7
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <dtoa_prf+0x216>
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	fb 01       	movw	r30, r22
    27fe:	e4 1b       	sub	r30, r20
    2800:	f5 0b       	sbc	r31, r21
    2802:	a1 e0       	ldi	r26, 0x01	; 1
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ac 0f       	add	r26, r28
    2808:	bd 1f       	adc	r27, r29
    280a:	ea 0f       	add	r30, r26
    280c:	fb 1f       	adc	r31, r27
    280e:	8e e2       	ldi	r24, 0x2E	; 46
    2810:	a8 2e       	mov	r10, r24
    2812:	4b 01       	movw	r8, r22
    2814:	80 1a       	sub	r8, r16
    2816:	91 08       	sbc	r9, r1
    2818:	0b 2d       	mov	r16, r11
    281a:	10 e0       	ldi	r17, 0x00	; 0
    281c:	11 95       	neg	r17
    281e:	01 95       	neg	r16
    2820:	11 09       	sbc	r17, r1
    2822:	4f 3f       	cpi	r20, 0xFF	; 255
    2824:	bf ef       	ldi	r27, 0xFF	; 255
    2826:	5b 07       	cpc	r21, r27
    2828:	21 f4       	brne	.+8      	; 0x2832 <dtoa_prf+0x24c>
    282a:	d6 01       	movw	r26, r12
    282c:	ac 92       	st	X, r10
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	6d 01       	movw	r12, r26
    2832:	64 17       	cp	r22, r20
    2834:	75 07       	cpc	r23, r21
    2836:	2c f0       	brlt	.+10     	; 0x2842 <dtoa_prf+0x25c>
    2838:	84 16       	cp	r8, r20
    283a:	95 06       	cpc	r9, r21
    283c:	14 f4       	brge	.+4      	; 0x2842 <dtoa_prf+0x25c>
    283e:	81 81       	ldd	r24, Z+1	; 0x01
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <dtoa_prf+0x25e>
    2842:	80 e3       	ldi	r24, 0x30	; 48
    2844:	41 50       	subi	r20, 0x01	; 1
    2846:	51 09       	sbc	r21, r1
    2848:	31 96       	adiw	r30, 0x01	; 1
    284a:	d6 01       	movw	r26, r12
    284c:	11 96       	adiw	r26, 0x01	; 1
    284e:	7d 01       	movw	r14, r26
    2850:	40 17       	cp	r20, r16
    2852:	51 07       	cpc	r21, r17
    2854:	24 f0       	brlt	.+8      	; 0x285e <dtoa_prf+0x278>
    2856:	d6 01       	movw	r26, r12
    2858:	8c 93       	st	X, r24
    285a:	67 01       	movw	r12, r14
    285c:	e2 cf       	rjmp	.-60     	; 0x2822 <dtoa_prf+0x23c>
    285e:	64 17       	cp	r22, r20
    2860:	75 07       	cpc	r23, r21
    2862:	39 f4       	brne	.+14     	; 0x2872 <dtoa_prf+0x28c>
    2864:	96 33       	cpi	r25, 0x36	; 54
    2866:	20 f4       	brcc	.+8      	; 0x2870 <dtoa_prf+0x28a>
    2868:	95 33       	cpi	r25, 0x35	; 53
    286a:	19 f4       	brne	.+6      	; 0x2872 <dtoa_prf+0x28c>
    286c:	31 11       	cpse	r19, r1
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <dtoa_prf+0x28c>
    2870:	81 e3       	ldi	r24, 0x31	; 49
    2872:	f6 01       	movw	r30, r12
    2874:	80 83       	st	Z, r24
    2876:	f7 01       	movw	r30, r14
    2878:	82 2f       	mov	r24, r18
    287a:	90 e2       	ldi	r25, 0x20	; 32
    287c:	88 23       	and	r24, r24
    287e:	19 f0       	breq	.+6      	; 0x2886 <dtoa_prf+0x2a0>
    2880:	91 93       	st	Z+, r25
    2882:	81 50       	subi	r24, 0x01	; 1
    2884:	fb cf       	rjmp	.-10     	; 0x287c <dtoa_prf+0x296>
    2886:	f7 01       	movw	r30, r14
    2888:	e2 0f       	add	r30, r18
    288a:	f1 1d       	adc	r31, r1
    288c:	10 82       	st	Z, r1
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	29 96       	adiw	r28, 0x09	; 9
    2894:	ec e0       	ldi	r30, 0x0C	; 12
    2896:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__epilogue_restores__+0xc>

0000289a <__ftoa_engine>:
    289a:	28 30       	cpi	r18, 0x08	; 8
    289c:	08 f0       	brcs	.+2      	; 0x28a0 <__ftoa_engine+0x6>
    289e:	27 e0       	ldi	r18, 0x07	; 7
    28a0:	33 27       	eor	r19, r19
    28a2:	da 01       	movw	r26, r20
    28a4:	99 0f       	add	r25, r25
    28a6:	31 1d       	adc	r19, r1
    28a8:	87 fd       	sbrc	r24, 7
    28aa:	91 60       	ori	r25, 0x01	; 1
    28ac:	00 96       	adiw	r24, 0x00	; 0
    28ae:	61 05       	cpc	r22, r1
    28b0:	71 05       	cpc	r23, r1
    28b2:	39 f4       	brne	.+14     	; 0x28c2 <__ftoa_engine+0x28>
    28b4:	32 60       	ori	r19, 0x02	; 2
    28b6:	2e 5f       	subi	r18, 0xFE	; 254
    28b8:	3d 93       	st	X+, r19
    28ba:	30 e3       	ldi	r19, 0x30	; 48
    28bc:	2a 95       	dec	r18
    28be:	e1 f7       	brne	.-8      	; 0x28b8 <__ftoa_engine+0x1e>
    28c0:	08 95       	ret
    28c2:	9f 3f       	cpi	r25, 0xFF	; 255
    28c4:	30 f0       	brcs	.+12     	; 0x28d2 <__ftoa_engine+0x38>
    28c6:	80 38       	cpi	r24, 0x80	; 128
    28c8:	71 05       	cpc	r23, r1
    28ca:	61 05       	cpc	r22, r1
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <__ftoa_engine+0x36>
    28ce:	3c 5f       	subi	r19, 0xFC	; 252
    28d0:	3c 5f       	subi	r19, 0xFC	; 252
    28d2:	3d 93       	st	X+, r19
    28d4:	91 30       	cpi	r25, 0x01	; 1
    28d6:	08 f0       	brcs	.+2      	; 0x28da <__ftoa_engine+0x40>
    28d8:	80 68       	ori	r24, 0x80	; 128
    28da:	91 1d       	adc	r25, r1
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	1f 93       	push	r17
    28e2:	0f 93       	push	r16
    28e4:	ff 92       	push	r15
    28e6:	ef 92       	push	r14
    28e8:	19 2f       	mov	r17, r25
    28ea:	98 7f       	andi	r25, 0xF8	; 248
    28ec:	96 95       	lsr	r25
    28ee:	e9 2f       	mov	r30, r25
    28f0:	96 95       	lsr	r25
    28f2:	96 95       	lsr	r25
    28f4:	e9 0f       	add	r30, r25
    28f6:	ff 27       	eor	r31, r31
    28f8:	e6 53       	subi	r30, 0x36	; 54
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	99 27       	eor	r25, r25
    28fe:	33 27       	eor	r19, r19
    2900:	ee 24       	eor	r14, r14
    2902:	ff 24       	eor	r15, r15
    2904:	a7 01       	movw	r20, r14
    2906:	e7 01       	movw	r28, r14
    2908:	05 90       	lpm	r0, Z+
    290a:	08 94       	sec
    290c:	07 94       	ror	r0
    290e:	28 f4       	brcc	.+10     	; 0x291a <__ftoa_engine+0x80>
    2910:	36 0f       	add	r19, r22
    2912:	e7 1e       	adc	r14, r23
    2914:	f8 1e       	adc	r15, r24
    2916:	49 1f       	adc	r20, r25
    2918:	51 1d       	adc	r21, r1
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	06 94       	lsr	r0
    2924:	a1 f7       	brne	.-24     	; 0x290e <__ftoa_engine+0x74>
    2926:	05 90       	lpm	r0, Z+
    2928:	07 94       	ror	r0
    292a:	28 f4       	brcc	.+10     	; 0x2936 <__ftoa_engine+0x9c>
    292c:	e7 0e       	add	r14, r23
    292e:	f8 1e       	adc	r15, r24
    2930:	49 1f       	adc	r20, r25
    2932:	56 1f       	adc	r21, r22
    2934:	c1 1d       	adc	r28, r1
    2936:	77 0f       	add	r23, r23
    2938:	88 1f       	adc	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	66 1f       	adc	r22, r22
    293e:	06 94       	lsr	r0
    2940:	a1 f7       	brne	.-24     	; 0x292a <__ftoa_engine+0x90>
    2942:	05 90       	lpm	r0, Z+
    2944:	07 94       	ror	r0
    2946:	28 f4       	brcc	.+10     	; 0x2952 <__ftoa_engine+0xb8>
    2948:	f8 0e       	add	r15, r24
    294a:	49 1f       	adc	r20, r25
    294c:	56 1f       	adc	r21, r22
    294e:	c7 1f       	adc	r28, r23
    2950:	d1 1d       	adc	r29, r1
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	66 1f       	adc	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	06 94       	lsr	r0
    295c:	a1 f7       	brne	.-24     	; 0x2946 <__ftoa_engine+0xac>
    295e:	05 90       	lpm	r0, Z+
    2960:	07 94       	ror	r0
    2962:	20 f4       	brcc	.+8      	; 0x296c <__ftoa_engine+0xd2>
    2964:	49 0f       	add	r20, r25
    2966:	56 1f       	adc	r21, r22
    2968:	c7 1f       	adc	r28, r23
    296a:	d8 1f       	adc	r29, r24
    296c:	99 0f       	add	r25, r25
    296e:	66 1f       	adc	r22, r22
    2970:	77 1f       	adc	r23, r23
    2972:	88 1f       	adc	r24, r24
    2974:	06 94       	lsr	r0
    2976:	a9 f7       	brne	.-22     	; 0x2962 <__ftoa_engine+0xc8>
    2978:	84 91       	lpm	r24, Z
    297a:	10 95       	com	r17
    297c:	17 70       	andi	r17, 0x07	; 7
    297e:	41 f0       	breq	.+16     	; 0x2990 <__ftoa_engine+0xf6>
    2980:	d6 95       	lsr	r29
    2982:	c7 95       	ror	r28
    2984:	57 95       	ror	r21
    2986:	47 95       	ror	r20
    2988:	f7 94       	ror	r15
    298a:	e7 94       	ror	r14
    298c:	1a 95       	dec	r17
    298e:	c1 f7       	brne	.-16     	; 0x2980 <__ftoa_engine+0xe6>
    2990:	e0 e7       	ldi	r30, 0x70	; 112
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	68 94       	set
    2996:	15 90       	lpm	r1, Z+
    2998:	15 91       	lpm	r17, Z+
    299a:	35 91       	lpm	r19, Z+
    299c:	65 91       	lpm	r22, Z+
    299e:	95 91       	lpm	r25, Z+
    29a0:	05 90       	lpm	r0, Z+
    29a2:	7f e2       	ldi	r23, 0x2F	; 47
    29a4:	73 95       	inc	r23
    29a6:	e1 18       	sub	r14, r1
    29a8:	f1 0a       	sbc	r15, r17
    29aa:	43 0b       	sbc	r20, r19
    29ac:	56 0b       	sbc	r21, r22
    29ae:	c9 0b       	sbc	r28, r25
    29b0:	d0 09       	sbc	r29, r0
    29b2:	c0 f7       	brcc	.-16     	; 0x29a4 <__ftoa_engine+0x10a>
    29b4:	e1 0c       	add	r14, r1
    29b6:	f1 1e       	adc	r15, r17
    29b8:	43 1f       	adc	r20, r19
    29ba:	56 1f       	adc	r21, r22
    29bc:	c9 1f       	adc	r28, r25
    29be:	d0 1d       	adc	r29, r0
    29c0:	7e f4       	brtc	.+30     	; 0x29e0 <__ftoa_engine+0x146>
    29c2:	70 33       	cpi	r23, 0x30	; 48
    29c4:	11 f4       	brne	.+4      	; 0x29ca <__ftoa_engine+0x130>
    29c6:	8a 95       	dec	r24
    29c8:	e6 cf       	rjmp	.-52     	; 0x2996 <__ftoa_engine+0xfc>
    29ca:	e8 94       	clt
    29cc:	01 50       	subi	r16, 0x01	; 1
    29ce:	30 f0       	brcs	.+12     	; 0x29dc <__ftoa_engine+0x142>
    29d0:	08 0f       	add	r16, r24
    29d2:	0a f4       	brpl	.+2      	; 0x29d6 <__ftoa_engine+0x13c>
    29d4:	00 27       	eor	r16, r16
    29d6:	02 17       	cp	r16, r18
    29d8:	08 f4       	brcc	.+2      	; 0x29dc <__ftoa_engine+0x142>
    29da:	20 2f       	mov	r18, r16
    29dc:	23 95       	inc	r18
    29de:	02 2f       	mov	r16, r18
    29e0:	7a 33       	cpi	r23, 0x3A	; 58
    29e2:	28 f0       	brcs	.+10     	; 0x29ee <__ftoa_engine+0x154>
    29e4:	79 e3       	ldi	r23, 0x39	; 57
    29e6:	7d 93       	st	X+, r23
    29e8:	2a 95       	dec	r18
    29ea:	e9 f7       	brne	.-6      	; 0x29e6 <__ftoa_engine+0x14c>
    29ec:	10 c0       	rjmp	.+32     	; 0x2a0e <__ftoa_engine+0x174>
    29ee:	7d 93       	st	X+, r23
    29f0:	2a 95       	dec	r18
    29f2:	89 f6       	brne	.-94     	; 0x2996 <__ftoa_engine+0xfc>
    29f4:	06 94       	lsr	r0
    29f6:	97 95       	ror	r25
    29f8:	67 95       	ror	r22
    29fa:	37 95       	ror	r19
    29fc:	17 95       	ror	r17
    29fe:	17 94       	ror	r1
    2a00:	e1 18       	sub	r14, r1
    2a02:	f1 0a       	sbc	r15, r17
    2a04:	43 0b       	sbc	r20, r19
    2a06:	56 0b       	sbc	r21, r22
    2a08:	c9 0b       	sbc	r28, r25
    2a0a:	d0 09       	sbc	r29, r0
    2a0c:	98 f0       	brcs	.+38     	; 0x2a34 <__ftoa_engine+0x19a>
    2a0e:	23 95       	inc	r18
    2a10:	7e 91       	ld	r23, -X
    2a12:	73 95       	inc	r23
    2a14:	7a 33       	cpi	r23, 0x3A	; 58
    2a16:	08 f0       	brcs	.+2      	; 0x2a1a <__ftoa_engine+0x180>
    2a18:	70 e3       	ldi	r23, 0x30	; 48
    2a1a:	7c 93       	st	X, r23
    2a1c:	20 13       	cpse	r18, r16
    2a1e:	b8 f7       	brcc	.-18     	; 0x2a0e <__ftoa_engine+0x174>
    2a20:	7e 91       	ld	r23, -X
    2a22:	70 61       	ori	r23, 0x10	; 16
    2a24:	7d 93       	st	X+, r23
    2a26:	30 f0       	brcs	.+12     	; 0x2a34 <__ftoa_engine+0x19a>
    2a28:	83 95       	inc	r24
    2a2a:	71 e3       	ldi	r23, 0x31	; 49
    2a2c:	7d 93       	st	X+, r23
    2a2e:	70 e3       	ldi	r23, 0x30	; 48
    2a30:	2a 95       	dec	r18
    2a32:	e1 f7       	brne	.-8      	; 0x2a2c <__ftoa_engine+0x192>
    2a34:	11 24       	eor	r1, r1
    2a36:	ef 90       	pop	r14
    2a38:	ff 90       	pop	r15
    2a3a:	0f 91       	pop	r16
    2a3c:	1f 91       	pop	r17
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	99 27       	eor	r25, r25
    2a44:	87 fd       	sbrc	r24, 7
    2a46:	90 95       	com	r25
    2a48:	08 95       	ret

00002a4a <strnlen_P>:
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	05 90       	lpm	r0, Z+
    2a4e:	61 50       	subi	r22, 0x01	; 1
    2a50:	70 40       	sbci	r23, 0x00	; 0
    2a52:	01 10       	cpse	r0, r1
    2a54:	d8 f7       	brcc	.-10     	; 0x2a4c <strnlen_P+0x2>
    2a56:	80 95       	com	r24
    2a58:	90 95       	com	r25
    2a5a:	8e 0f       	add	r24, r30
    2a5c:	9f 1f       	adc	r25, r31
    2a5e:	08 95       	ret

00002a60 <strnlen>:
    2a60:	fc 01       	movw	r30, r24
    2a62:	61 50       	subi	r22, 0x01	; 1
    2a64:	70 40       	sbci	r23, 0x00	; 0
    2a66:	01 90       	ld	r0, Z+
    2a68:	01 10       	cpse	r0, r1
    2a6a:	d8 f7       	brcc	.-10     	; 0x2a62 <strnlen+0x2>
    2a6c:	80 95       	com	r24
    2a6e:	90 95       	com	r25
    2a70:	8e 0f       	add	r24, r30
    2a72:	9f 1f       	adc	r25, r31
    2a74:	08 95       	ret

00002a76 <strrev>:
    2a76:	dc 01       	movw	r26, r24
    2a78:	fc 01       	movw	r30, r24
    2a7a:	67 2f       	mov	r22, r23
    2a7c:	71 91       	ld	r23, Z+
    2a7e:	77 23       	and	r23, r23
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <strrev+0x4>
    2a82:	32 97       	sbiw	r30, 0x02	; 2
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <strrev+0x18>
    2a86:	7c 91       	ld	r23, X
    2a88:	6d 93       	st	X+, r22
    2a8a:	70 83       	st	Z, r23
    2a8c:	62 91       	ld	r22, -Z
    2a8e:	ae 17       	cp	r26, r30
    2a90:	bf 07       	cpc	r27, r31
    2a92:	c8 f3       	brcs	.-14     	; 0x2a86 <strrev+0x10>
    2a94:	08 95       	ret

00002a96 <fputc>:
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	fb 01       	movw	r30, r22
    2aa0:	23 81       	ldd	r18, Z+3	; 0x03
    2aa2:	21 fd       	sbrc	r18, 1
    2aa4:	03 c0       	rjmp	.+6      	; 0x2aac <fputc+0x16>
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
    2aa8:	9f ef       	ldi	r25, 0xFF	; 255
    2aaa:	2c c0       	rjmp	.+88     	; 0x2b04 <fputc+0x6e>
    2aac:	22 ff       	sbrs	r18, 2
    2aae:	16 c0       	rjmp	.+44     	; 0x2adc <fputc+0x46>
    2ab0:	46 81       	ldd	r20, Z+6	; 0x06
    2ab2:	57 81       	ldd	r21, Z+7	; 0x07
    2ab4:	24 81       	ldd	r18, Z+4	; 0x04
    2ab6:	35 81       	ldd	r19, Z+5	; 0x05
    2ab8:	42 17       	cp	r20, r18
    2aba:	53 07       	cpc	r21, r19
    2abc:	44 f4       	brge	.+16     	; 0x2ace <fputc+0x38>
    2abe:	a0 81       	ld	r26, Z
    2ac0:	b1 81       	ldd	r27, Z+1	; 0x01
    2ac2:	9d 01       	movw	r18, r26
    2ac4:	2f 5f       	subi	r18, 0xFF	; 255
    2ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac8:	31 83       	std	Z+1, r19	; 0x01
    2aca:	20 83       	st	Z, r18
    2acc:	8c 93       	st	X, r24
    2ace:	26 81       	ldd	r18, Z+6	; 0x06
    2ad0:	37 81       	ldd	r19, Z+7	; 0x07
    2ad2:	2f 5f       	subi	r18, 0xFF	; 255
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	37 83       	std	Z+7, r19	; 0x07
    2ad8:	26 83       	std	Z+6, r18	; 0x06
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <fputc+0x6e>
    2adc:	8b 01       	movw	r16, r22
    2ade:	ec 01       	movw	r28, r24
    2ae0:	fb 01       	movw	r30, r22
    2ae2:	00 84       	ldd	r0, Z+8	; 0x08
    2ae4:	f1 85       	ldd	r31, Z+9	; 0x09
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	09 95       	icall
    2aea:	89 2b       	or	r24, r25
    2aec:	e1 f6       	brne	.-72     	; 0x2aa6 <fputc+0x10>
    2aee:	d8 01       	movw	r26, r16
    2af0:	16 96       	adiw	r26, 0x06	; 6
    2af2:	8d 91       	ld	r24, X+
    2af4:	9c 91       	ld	r25, X
    2af6:	17 97       	sbiw	r26, 0x07	; 7
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	17 96       	adiw	r26, 0x07	; 7
    2afc:	9c 93       	st	X, r25
    2afe:	8e 93       	st	-X, r24
    2b00:	16 97       	sbiw	r26, 0x06	; 6
    2b02:	ce 01       	movw	r24, r28
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	08 95       	ret

00002b0e <__ultoa_invert>:
    2b0e:	fa 01       	movw	r30, r20
    2b10:	aa 27       	eor	r26, r26
    2b12:	28 30       	cpi	r18, 0x08	; 8
    2b14:	51 f1       	breq	.+84     	; 0x2b6a <__ultoa_invert+0x5c>
    2b16:	20 31       	cpi	r18, 0x10	; 16
    2b18:	81 f1       	breq	.+96     	; 0x2b7a <__ultoa_invert+0x6c>
    2b1a:	e8 94       	clt
    2b1c:	6f 93       	push	r22
    2b1e:	6e 7f       	andi	r22, 0xFE	; 254
    2b20:	6e 5f       	subi	r22, 0xFE	; 254
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255
    2b24:	8f 4f       	sbci	r24, 0xFF	; 255
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	af 4f       	sbci	r26, 0xFF	; 255
    2b2a:	b1 e0       	ldi	r27, 0x01	; 1
    2b2c:	3e d0       	rcall	.+124    	; 0x2baa <__ultoa_invert+0x9c>
    2b2e:	b4 e0       	ldi	r27, 0x04	; 4
    2b30:	3c d0       	rcall	.+120    	; 0x2baa <__ultoa_invert+0x9c>
    2b32:	67 0f       	add	r22, r23
    2b34:	78 1f       	adc	r23, r24
    2b36:	89 1f       	adc	r24, r25
    2b38:	9a 1f       	adc	r25, r26
    2b3a:	a1 1d       	adc	r26, r1
    2b3c:	68 0f       	add	r22, r24
    2b3e:	79 1f       	adc	r23, r25
    2b40:	8a 1f       	adc	r24, r26
    2b42:	91 1d       	adc	r25, r1
    2b44:	a1 1d       	adc	r26, r1
    2b46:	6a 0f       	add	r22, r26
    2b48:	71 1d       	adc	r23, r1
    2b4a:	81 1d       	adc	r24, r1
    2b4c:	91 1d       	adc	r25, r1
    2b4e:	a1 1d       	adc	r26, r1
    2b50:	20 d0       	rcall	.+64     	; 0x2b92 <__ultoa_invert+0x84>
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <__ultoa_invert+0x48>
    2b54:	68 94       	set
    2b56:	3f 91       	pop	r19
    2b58:	2a e0       	ldi	r18, 0x0A	; 10
    2b5a:	26 9f       	mul	r18, r22
    2b5c:	11 24       	eor	r1, r1
    2b5e:	30 19       	sub	r19, r0
    2b60:	30 5d       	subi	r19, 0xD0	; 208
    2b62:	31 93       	st	Z+, r19
    2b64:	de f6       	brtc	.-74     	; 0x2b1c <__ultoa_invert+0xe>
    2b66:	cf 01       	movw	r24, r30
    2b68:	08 95       	ret
    2b6a:	46 2f       	mov	r20, r22
    2b6c:	47 70       	andi	r20, 0x07	; 7
    2b6e:	40 5d       	subi	r20, 0xD0	; 208
    2b70:	41 93       	st	Z+, r20
    2b72:	b3 e0       	ldi	r27, 0x03	; 3
    2b74:	0f d0       	rcall	.+30     	; 0x2b94 <__ultoa_invert+0x86>
    2b76:	c9 f7       	brne	.-14     	; 0x2b6a <__ultoa_invert+0x5c>
    2b78:	f6 cf       	rjmp	.-20     	; 0x2b66 <__ultoa_invert+0x58>
    2b7a:	46 2f       	mov	r20, r22
    2b7c:	4f 70       	andi	r20, 0x0F	; 15
    2b7e:	40 5d       	subi	r20, 0xD0	; 208
    2b80:	4a 33       	cpi	r20, 0x3A	; 58
    2b82:	18 f0       	brcs	.+6      	; 0x2b8a <__ultoa_invert+0x7c>
    2b84:	49 5d       	subi	r20, 0xD9	; 217
    2b86:	31 fd       	sbrc	r19, 1
    2b88:	40 52       	subi	r20, 0x20	; 32
    2b8a:	41 93       	st	Z+, r20
    2b8c:	02 d0       	rcall	.+4      	; 0x2b92 <__ultoa_invert+0x84>
    2b8e:	a9 f7       	brne	.-22     	; 0x2b7a <__ultoa_invert+0x6c>
    2b90:	ea cf       	rjmp	.-44     	; 0x2b66 <__ultoa_invert+0x58>
    2b92:	b4 e0       	ldi	r27, 0x04	; 4
    2b94:	a6 95       	lsr	r26
    2b96:	97 95       	ror	r25
    2b98:	87 95       	ror	r24
    2b9a:	77 95       	ror	r23
    2b9c:	67 95       	ror	r22
    2b9e:	ba 95       	dec	r27
    2ba0:	c9 f7       	brne	.-14     	; 0x2b94 <__ultoa_invert+0x86>
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	61 05       	cpc	r22, r1
    2ba6:	71 05       	cpc	r23, r1
    2ba8:	08 95       	ret
    2baa:	9b 01       	movw	r18, r22
    2bac:	ac 01       	movw	r20, r24
    2bae:	0a 2e       	mov	r0, r26
    2bb0:	06 94       	lsr	r0
    2bb2:	57 95       	ror	r21
    2bb4:	47 95       	ror	r20
    2bb6:	37 95       	ror	r19
    2bb8:	27 95       	ror	r18
    2bba:	ba 95       	dec	r27
    2bbc:	c9 f7       	brne	.-14     	; 0x2bb0 <__ultoa_invert+0xa2>
    2bbe:	62 0f       	add	r22, r18
    2bc0:	73 1f       	adc	r23, r19
    2bc2:	84 1f       	adc	r24, r20
    2bc4:	95 1f       	adc	r25, r21
    2bc6:	a0 1d       	adc	r26, r0
    2bc8:	08 95       	ret

00002bca <__prologue_saves__>:
    2bca:	2f 92       	push	r2
    2bcc:	3f 92       	push	r3
    2bce:	4f 92       	push	r4
    2bd0:	5f 92       	push	r5
    2bd2:	6f 92       	push	r6
    2bd4:	7f 92       	push	r7
    2bd6:	8f 92       	push	r8
    2bd8:	9f 92       	push	r9
    2bda:	af 92       	push	r10
    2bdc:	bf 92       	push	r11
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	ca 1b       	sub	r28, r26
    2bf4:	db 0b       	sbc	r29, r27
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	09 94       	ijmp

00002c02 <__epilogue_restores__>:
    2c02:	2a 88       	ldd	r2, Y+18	; 0x12
    2c04:	39 88       	ldd	r3, Y+17	; 0x11
    2c06:	48 88       	ldd	r4, Y+16	; 0x10
    2c08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c14:	b9 84       	ldd	r11, Y+9	; 0x09
    2c16:	c8 84       	ldd	r12, Y+8	; 0x08
    2c18:	df 80       	ldd	r13, Y+7	; 0x07
    2c1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c20:	1b 81       	ldd	r17, Y+3	; 0x03
    2c22:	aa 81       	ldd	r26, Y+2	; 0x02
    2c24:	b9 81       	ldd	r27, Y+1	; 0x01
    2c26:	ce 0f       	add	r28, r30
    2c28:	d1 1d       	adc	r29, r1
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	ed 01       	movw	r28, r26
    2c36:	08 95       	ret

00002c38 <_exit>:
    2c38:	f8 94       	cli

00002c3a <__stop_program>:
    2c3a:	ff cf       	rjmp	.-2      	; 0x2c3a <__stop_program>
