
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  000015bc  00001650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008001bc  008001bc  000017ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030f8  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e9  00000000  00000000  00004c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d2  00000000  00000000  00006075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  00008248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a7  00000000  00000000  000088ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b64  00000000  00000000  00009193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000acf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 06 	call	0xca2	; 0xca2 <main>
      8a:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
      92:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
      96:	08 95       	ret

00000098 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
      98:	0f 93       	push	r16
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	2a 97       	sbiw	r28, 0x0a	; 10
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
      b0:	16 2f       	mov	r17, r22
      b2:	07 2f       	mov	r16, r23
	HC05_SendString(text);
      b4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	85 e6       	ldi	r24, 0x65	; 101
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	9f 93       	push	r25
      c2:	8f 93       	push	r24
      c4:	8e 01       	movw	r16, r28
      c6:	0f 5f       	subi	r16, 0xFF	; 255
      c8:	1f 4f       	sbci	r17, 0xFF	; 255
      ca:	1f 93       	push	r17
      cc:	0f 93       	push	r16
      ce:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <sprintf>
	HC05_SendString(temp);
      d2:	c8 01       	movw	r24, r16
      d4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
      d8:	8c e6       	ldi	r24, 0x6C	; 108
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	2a 96       	adiw	r28, 0x0a	; 10
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	08 95       	ret

00000102 <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	2a 97       	sbiw	r28, 0x0a	; 10
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     11c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     120:	fe 01       	movw	r30, r28
     122:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     128:	c8 01       	movw	r24, r16
     12a:	02 2e       	mov	r0, r18
     12c:	02 c0       	rjmp	.+4      	; 0x132 <Error_ErrorBin+0x30>
     12e:	95 95       	asr	r25
     130:	87 95       	ror	r24
     132:	0a 94       	dec	r0
     134:	e2 f7       	brpl	.-8      	; 0x12e <Error_ErrorBin+0x2c>
     136:	81 70       	andi	r24, 0x01	; 1
     138:	80 5d       	subi	r24, 0xD0	; 208
     13a:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     13c:	2f 5f       	subi	r18, 0xFF	; 255
     13e:	3f 4f       	sbci	r19, 0xFF	; 255
     140:	28 30       	cpi	r18, 0x08	; 8
     142:	31 05       	cpc	r19, r1
     144:	89 f7       	brne	.-30     	; 0x128 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     146:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     148:	ce 01       	movw	r24, r28
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
     150:	8c e6       	ldi	r24, 0x6C	; 108
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     158:	2a 96       	adiw	r28, 0x0a	; 10
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	08 95       	ret

0000016e <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	8b b9       	out	0x0b, r24	; 11
     172:	88 e1       	ldi	r24, 0x18	; 24
     174:	8a b9       	out	0x0a, r24	; 10
     176:	86 e8       	ldi	r24, 0x86	; 134
     178:	80 bd       	out	0x20, r24	; 32
     17a:	8c e0       	ldi	r24, 0x0C	; 12
     17c:	89 b9       	out	0x09, r24	; 9
     17e:	10 bc       	out	0x20, r1	; 32
     180:	08 95       	ret

00000182 <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     182:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     184:	5d 9b       	sbis	0x0b, 5	; 11
     186:	fe cf       	rjmp	.-4      	; 0x184 <HC05_SendChar+0x2>
}
     188:	08 95       	ret

0000018a <HC05_SendString>:
void HC05_SendString(char * s)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
	while(*s)
     190:	88 81       	ld	r24, Y
     192:	88 23       	and	r24, r24
     194:	31 f0       	breq	.+12     	; 0x1a2 <HC05_SendString+0x18>
     196:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     198:	0e 94 c1 00 	call	0x182	; 0x182 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     19c:	89 91       	ld	r24, Y+
     19e:	81 11       	cpse	r24, r1
     1a0:	fb cf       	rjmp	.-10     	; 0x198 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     1a8:	8a b3       	in	r24, 0x1a	; 26
     1aa:	83 70       	andi	r24, 0x03	; 3
     1ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     1b2:	88 bb       	out	0x18, r24	; 24
     1b4:	08 95       	ret

000001b6 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     1b6:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <isNumber>
	isUpperCase = false;
     1ba:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <isUpperCase>
	position = 0;
     1be:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <__data_end+0x1>
     1c2:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
	keyBuffer[position] = 0;
     1c6:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__data_end>
     1ca:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__data_end+0x1>
     1ce:	e0 54       	subi	r30, 0x40	; 64
     1d0:	fe 4f       	sbci	r31, 0xFE	; 254
     1d2:	10 82       	st	Z, r1
     1d4:	08 95       	ret

000001d6 <Keypad_InitNumpad>:
}
void Keypad_InitNumpad()
{
	isNumber = true;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <isNumber>
     1dc:	08 95       	ret

000001de <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     1de:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <isNumber>
     1e2:	81 11       	cpse	r24, r1
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     1e6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <isUpperCase>
     1ea:	81 11       	cpse	r24, r1
     1ec:	06 c0       	rjmp	.+12     	; 0x1fa <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     1ee:	87 e7       	ldi	r24, 0x77	; 119
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     1f4:	8f e6       	ldi	r24, 0x6F	; 111
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     1fa:	83 e7       	ldi	r24, 0x73	; 115
     1fc:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     1fe:	08 95       	ret

00000200 <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     204:	0e 94 ef 00 	call	0x1de	; 0x1de <Keypad_GetMode>
     208:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     20a:	fc 01       	movw	r30, r24
     20c:	01 90       	ld	r0, Z+
     20e:	00 20       	and	r0, r0
     210:	e9 f7       	brne	.-6      	; 0x20c <Keypad_UpdateKeyMode+0xc>
     212:	ac 01       	movw	r20, r24
     214:	4e 1b       	sub	r20, r30
     216:	5f 0b       	sbc	r21, r31
     218:	4f 5e       	subi	r20, 0xEF	; 239
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     226:	be 01       	movw	r22, r28
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <Keypad_KeyPressed>:

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     234:	89 b3       	in	r24, 0x19	; 25
}
     236:	82 95       	swap	r24
     238:	8f 70       	andi	r24, 0x0F	; 15
     23a:	08 95       	ret

0000023c <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
	int pin = PINA >> 4;
     242:	c9 b3       	in	r28, 0x19	; 25
     244:	c2 95       	swap	r28
     246:	cf 70       	andi	r28, 0x0F	; 15
     248:	0c 2f       	mov	r16, r28
     24a:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     24c:	b8 01       	movw	r22, r16
     24e:	8b e7       	ldi	r24, 0x7B	; 123
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     256:	c0 fd       	sbrc	r28, 0
     258:	0c c0       	rjmp	.+24     	; 0x272 <Keypad_GetRow+0x36>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	98 01       	movw	r18, r16
     260:	08 2e       	mov	r0, r24
     262:	02 c0       	rjmp	.+4      	; 0x268 <Keypad_GetRow+0x2c>
     264:	35 95       	asr	r19
     266:	27 95       	ror	r18
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <Keypad_GetRow+0x28>
     26c:	20 ff       	sbrs	r18, 0
     26e:	04 c0       	rjmp	.+8      	; 0x278 <Keypad_GetRow+0x3c>
     270:	0c c0       	rjmp	.+24     	; 0x28a <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     276:	09 c0       	rjmp	.+18     	; 0x28a <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	84 30       	cpi	r24, 0x04	; 4
     27c:	91 05       	cpc	r25, r1
     27e:	79 f7       	brne	.-34     	; 0x25e <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     280:	84 e8       	ldi	r24, 0x84	; 132
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	return -1;
     288:	8f ef       	ldi	r24, 0xFF	; 255
}
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret

00000292 <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
	int i = 7;
     29a:	c7 e0       	ldi	r28, 0x07	; 7
     29c:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     29e:	01 e0       	ldi	r16, 0x01	; 1
     2a0:	10 e0       	ldi	r17, 0x00	; 0
     2a2:	28 b3       	in	r18, 0x18	; 24
     2a4:	c8 01       	movw	r24, r16
     2a6:	0c 2e       	mov	r0, r28
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Keypad_GetCol+0x1c>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	0a 94       	dec	r0
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Keypad_GetCol+0x18>
     2b2:	82 27       	eor	r24, r18
     2b4:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     2b6:	66 b3       	in	r22, 0x16	; 22
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	82 e9       	ldi	r24, 0x92	; 146
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     2c2:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     2c4:	82 95       	swap	r24
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	11 f4       	brne	.+4      	; 0x2ce <Keypad_GetCol+0x3c>
		{
			return i;
     2ca:	8c 2f       	mov	r24, r28
     2cc:	07 c0       	rjmp	.+14     	; 0x2dc <Keypad_GetCol+0x4a>
		}
		i--;
     2ce:	21 97       	sbiw	r28, 0x01	; 1
     2d0:	40 f7       	brcc	.-48     	; 0x2a2 <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     2d2:	88 e9       	ldi	r24, 0x98	; 152
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	// report error
	return -1;
     2da:	8f ef       	ldi	r24, 0xFF	; 255
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     2e6:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__data_end>
     2ea:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__data_end+0x1>
     2ee:	e0 54       	subi	r30, 0x40	; 64
     2f0:	fe 4f       	sbci	r31, 0xFE	; 254
     2f2:	80 83       	st	Z, r24
	if(position < 16)
     2f4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     2f8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     2fc:	40 97       	sbiw	r24, 0x10	; 16
     2fe:	4c f4       	brge	.+18     	; 0x312 <addChar+0x2c>
		position = position +1;
     300:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     304:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     30e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
	keyBuffer[position] = 0;
     312:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__data_end>
     316:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__data_end+0x1>
     31a:	e0 54       	subi	r30, 0x40	; 64
     31c:	fe 4f       	sbci	r31, 0xFE	; 254
     31e:	10 82       	st	Z, r1
     320:	08 95       	ret

00000322 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     322:	cf 93       	push	r28
     324:	c8 2f       	mov	r28, r24
	if(key >= 30)
     326:	8e 31       	cpi	r24, 0x1E	; 30
     328:	24 f0       	brlt	.+8      	; 0x332 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     32a:	86 ea       	ldi	r24, 0xA6	; 166
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	if(key == 29) 
     332:	cd 31       	cpi	r28, 0x1D	; 29
     334:	b9 f4       	brne	.+46     	; 0x364 <Keypad_AddKey+0x42>
	{
		// backspace = delete char
		if(position)
     336:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     33a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     33e:	89 2b       	or	r24, r25
     340:	49 f0       	breq	.+18     	; 0x354 <Keypad_AddKey+0x32>
			position--;
     342:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     346:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     350:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
		keyBuffer[position] = 0;
     354:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__data_end>
     358:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__data_end+0x1>
     35c:	e0 54       	subi	r30, 0x40	; 64
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	10 82       	st	Z, r1
     362:	57 c0       	rjmp	.+174    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	}
	else if(key == 28)
     364:	cc 31       	cpi	r28, 0x1C	; 28
     366:	21 f4       	brne	.+8      	; 0x370 <Keypad_AddKey+0x4e>
	{
		// space
		addChar(' ');
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <addChar>
     36e:	51 c0       	rjmp	.+162    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	}
	else if(key == 27)
     370:	cb 31       	cpi	r28, 0x1B	; 27
     372:	39 f4       	brne	.+14     	; 0x382 <Keypad_AddKey+0x60>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     374:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <isNumber>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	89 27       	eor	r24, r25
     37c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <isNumber>
     380:	48 c0       	rjmp	.+144    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	}
	else if(isNumber) 
     382:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <isNumber>
     386:	88 23       	and	r24, r24
     388:	e9 f0       	breq	.+58     	; 0x3c4 <Keypad_AddKey+0xa2>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     38a:	9c 2f       	mov	r25, r28
     38c:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     38e:	93 30       	cpi	r25, 0x03	; 3
     390:	08 f0       	brcs	.+2      	; 0x394 <Keypad_AddKey+0x72>
     392:	3f c0       	rjmp	.+126    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     394:	c5 95       	asr	r28
     396:	c5 95       	asr	r28
     398:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     39a:	c3 30       	cpi	r28, 0x03	; 3
     39c:	38 f4       	brcc	.+14     	; 0x3ac <Keypad_AddKey+0x8a>
			c = '1' + row * 3 + col;
     39e:	8c 2f       	mov	r24, r28
     3a0:	88 0f       	add	r24, r24
     3a2:	c8 0f       	add	r28, r24
     3a4:	81 e3       	ldi	r24, 0x31	; 49
     3a6:	89 0f       	add	r24, r25
     3a8:	8c 0f       	add	r24, r28
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <Keypad_AddKey+0x9c>
		}
		else if(col == 0) {
     3ac:	99 23       	and	r25, r25
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <Keypad_AddKey+0x96>
			c = '*';
		}
		else if(col == 1) {
     3b0:	91 30       	cpi	r25, 0x01	; 1
     3b2:	21 f0       	breq	.+8      	; 0x3bc <Keypad_AddKey+0x9a>
			c = '0';
		}
		else  {
			c = '#';
     3b4:	83 e2       	ldi	r24, 0x23	; 35
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <Keypad_AddKey+0x9c>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     3b8:	8a e2       	ldi	r24, 0x2A	; 42
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <Keypad_AddKey+0x9c>
		}
		else if(col == 1) {
			c = '0';
     3bc:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     3be:	0e 94 73 01 	call	0x2e6	; 0x2e6 <addChar>
     3c2:	27 c0       	rjmp	.+78     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		
	}
	else if(key == 26)
     3c4:	ca 31       	cpi	r28, 0x1A	; 26
     3c6:	39 f4       	brne	.+14     	; 0x3d6 <Keypad_AddKey+0xb4>
	{
		// capslock
		isUpperCase = !isUpperCase;
     3c8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <isUpperCase>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	89 27       	eor	r24, r25
     3d0:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <isUpperCase>
     3d4:	1e c0       	rjmp	.+60     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	}
	else
	{
		// char
		char row = key >> 3;
     3d6:	9c 2f       	mov	r25, r28
     3d8:	95 95       	asr	r25
     3da:	95 95       	asr	r25
     3dc:	95 95       	asr	r25
		char col = key & 0b00000111;
     3de:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     3e0:	93 30       	cpi	r25, 0x03	; 3
     3e2:	68 f4       	brcc	.+26     	; 0x3fe <Keypad_AddKey+0xdc>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     3e4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <isUpperCase>
     3e8:	81 11       	cpse	r24, r1
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <Keypad_AddKey+0xce>
     3ec:	81 e6       	ldi	r24, 0x61	; 97
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <Keypad_AddKey+0xd0>
     3f0:	81 e4       	ldi	r24, 0x41	; 65
     3f2:	99 0f       	add	r25, r25
     3f4:	99 0f       	add	r25, r25
     3f6:	99 0f       	add	r25, r25
     3f8:	c9 0f       	add	r28, r25
     3fa:	8c 0f       	add	r24, r28
     3fc:	08 c0       	rjmp	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     3fe:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <isUpperCase>
     402:	81 11       	cpse	r24, r1
     404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	89 e7       	ldi	r24, 0x79	; 121
     408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	89 e5       	ldi	r24, 0x59	; 89
     40c:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     40e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <addChar>
	}
	return ;
}
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     41a:	0e 94 1e 01 	call	0x23c	; 0x23c <Keypad_GetRow>
     41e:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     420:	0e 94 49 01 	call	0x292	; 0x292 <Keypad_GetCol>
     424:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     426:	6c 2f       	mov	r22, r28
     428:	0c 2e       	mov	r0, r28
     42a:	00 0c       	add	r0, r0
     42c:	77 0b       	sbc	r23, r23
     42e:	8b eb       	ldi	r24, 0xBB	; 187
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     436:	6d 2f       	mov	r22, r29
     438:	0d 2e       	mov	r0, r29
     43a:	00 0c       	add	r0, r0
     43c:	77 0b       	sbc	r23, r23
     43e:	8f eb       	ldi	r24, 0xBF	; 191
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	return row * 8 + col;
     446:	8c 2f       	mov	r24, r28
     448:	88 0f       	add	r24, r24
     44a:	88 0f       	add	r24, r24
     44c:	88 0f       	add	r24, r24
     44e:	8d 0f       	add	r24, r29
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     456:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <currentState>
     45a:	91 30       	cpi	r25, 0x01	; 1
     45c:	61 f0       	breq	.+24     	; 0x476 <KeyProcessor_ProcessKey+0x20>
     45e:	1c f4       	brge	.+6      	; 0x466 <KeyProcessor_ProcessKey+0x10>
     460:	99 23       	and	r25, r25
     462:	31 f0       	breq	.+12     	; 0x470 <KeyProcessor_ProcessKey+0x1a>
     464:	11 c0       	rjmp	.+34     	; 0x488 <KeyProcessor_ProcessKey+0x32>
     466:	92 30       	cpi	r25, 0x02	; 2
     468:	49 f0       	breq	.+18     	; 0x47c <KeyProcessor_ProcessKey+0x26>
     46a:	93 30       	cpi	r25, 0x03	; 3
     46c:	51 f0       	breq	.+20     	; 0x482 <KeyProcessor_ProcessKey+0x2c>
     46e:	0c c0       	rjmp	.+24     	; 0x488 <KeyProcessor_ProcessKey+0x32>
	{
		case IDLE:
			Idle_ProcessKey(key);
     470:	0e 94 7c 07 	call	0xef8	; 0xef8 <Idle_ProcessKey>
			break;
     474:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     476:	0e 94 e6 06 	call	0xdcc	; 0xdcc <EnteringName_ProcessKey>
			break;
     47a:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     47c:	0e 94 91 06 	call	0xd22	; 0xd22 <EnteringAge_ProcessKey>
			break;
     480:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     482:	0e 94 3d 07 	call	0xe7a	; 0xe7a <EnteringPhone_ProcessKey>
			break;
     486:	08 95       	ret
			//break;
		//case STORE_RECORD :
			//Store_ProcessKey(key);
			//break;
		default:
			Error_Error("ProcessKey: Undefined Current State");
     488:	83 ec       	ldi	r24, 0xC3	; 195
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     490:	08 95       	ret

00000492 <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     492:	88 23       	and	r24, r24
     494:	19 f0       	breq	.+6      	; 0x49c <Lcd_Init+0xa>
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	39 f0       	breq	.+14     	; 0x4a8 <Lcd_Init+0x16>
     49a:	24 c0       	rjmp	.+72     	; 0x4e4 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     49c:	81 b3       	in	r24, 0x11	; 17
     49e:	8c 6f       	ori	r24, 0xFC	; 252
     4a0:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     4a2:	0e 94 87 04 	call	0x90e	; 0x90e <Lcd4_Init>
			break;
     4a6:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_init>
			lcd_backlight(0);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b4:	2f e9       	ldi	r18, 0x9F	; 159
     4b6:	86 e8       	ldi	r24, 0x86	; 134
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <Lcd_Init+0x28>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <Lcd_Init+0x32>
     4c4:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <lcd_backlight>
     4cc:	2f e9       	ldi	r18, 0x9F	; 159
     4ce:	86 e8       	ldi	r24, 0x86	; 134
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	21 50       	subi	r18, 0x01	; 1
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <Lcd_Init+0x40>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <Lcd_Init+0x4a>
     4dc:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     4de:	0e 94 9b 05 	call	0xb36	; 0xb36 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     4e2:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     4e4:	87 ee       	ldi	r24, 0xE7	; 231
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     4ec:	08 95       	ret

000004ee <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     4ee:	88 23       	and	r24, r24
     4f0:	19 f0       	breq	.+6      	; 0x4f8 <Lcd_ClearScreen+0xa>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	21 f0       	breq	.+8      	; 0x4fe <Lcd_ClearScreen+0x10>
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     4f8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Lcd4_Clear>
			break;
     4fc:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     4fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <lcd_clrscr>
			break;
     502:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     504:	86 e0       	ldi	r24, 0x06	; 6
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     50c:	08 95       	ret

0000050e <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     50e:	88 23       	and	r24, r24
     510:	19 f0       	breq	.+6      	; 0x518 <Lcd_Prints+0xa>
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	29 f0       	breq	.+10     	; 0x520 <Lcd_Prints+0x12>
     516:	08 c0       	rjmp	.+16     	; 0x528 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     518:	cb 01       	movw	r24, r22
     51a:	0e 94 00 05 	call	0xa00	; 0xa00 <Lcd4_Write_String>
			break;
     51e:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     520:	cb 01       	movw	r24, r22
     522:	0e 94 cd 05 	call	0xb9a	; 0xb9a <lcd_puts>
			break;
     526:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     528:	86 e0       	ldi	r24, 0x06	; 6
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     530:	08 95       	ret

00000532 <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     532:	96 2f       	mov	r25, r22
	switch(lcdType)
     534:	88 23       	and	r24, r24
     536:	19 f0       	breq	.+6      	; 0x53e <Lcd_Position+0xc>
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	31 f0       	breq	.+12     	; 0x548 <Lcd_Position+0x16>
     53c:	09 c0       	rjmp	.+18     	; 0x550 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     53e:	64 2f       	mov	r22, r20
     540:	89 2f       	mov	r24, r25
     542:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <Lcd4_Set_Cursor>
		break;
     546:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     548:	84 2f       	mov	r24, r20
     54a:	0e 94 85 05 	call	0xb0a	; 0xb0a <lcd_gotoxy>
		break;
     54e:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     550:	8d e2       	ldi	r24, 0x2D	; 45
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     558:	08 95       	ret

0000055a <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <Lcd_Printc+0x6>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     564:	69 83       	std	Y+1, r22	; 0x01
     566:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     568:	be 01       	movw	r22, r28
     56a:	6f 5f       	subi	r22, 0xFF	; 255
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     57c:	67 2b       	or	r22, r23
     57e:	09 f0       	breq	.+2      	; 0x582 <pinChange+0x6>
     580:	9f c0       	rjmp	.+318    	; 0x6c0 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	11 f4       	brne	.+4      	; 0x58a <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     586:	d8 98       	cbi	0x1b, 0	; 27
     588:	08 95       	ret
		else if(a == eS_PORTA1)
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	91 05       	cpc	r25, r1
     58e:	11 f4       	brne	.+4      	; 0x594 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     590:	d9 98       	cbi	0x1b, 1	; 27
     592:	08 95       	ret
		else if(a == eS_PORTA2)
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	91 05       	cpc	r25, r1
     598:	11 f4       	brne	.+4      	; 0x59e <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     59a:	da 98       	cbi	0x1b, 2	; 27
     59c:	08 95       	ret
		else if(a == eS_PORTA3)
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	91 05       	cpc	r25, r1
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     5a4:	db 98       	cbi	0x1b, 3	; 27
     5a6:	08 95       	ret
		else if(a == eS_PORTA4)
     5a8:	84 30       	cpi	r24, 0x04	; 4
     5aa:	91 05       	cpc	r25, r1
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     5ae:	dc 98       	cbi	0x1b, 4	; 27
     5b0:	08 95       	ret
		else if(a == eS_PORTA5)
     5b2:	85 30       	cpi	r24, 0x05	; 5
     5b4:	91 05       	cpc	r25, r1
     5b6:	11 f4       	brne	.+4      	; 0x5bc <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     5b8:	dd 98       	cbi	0x1b, 5	; 27
     5ba:	08 95       	ret
		else if(a == eS_PORTA6)
     5bc:	86 30       	cpi	r24, 0x06	; 6
     5be:	91 05       	cpc	r25, r1
     5c0:	11 f4       	brne	.+4      	; 0x5c6 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     5c2:	de 98       	cbi	0x1b, 6	; 27
     5c4:	08 95       	ret
		else if(a == eS_PORTA7)
     5c6:	87 30       	cpi	r24, 0x07	; 7
     5c8:	91 05       	cpc	r25, r1
     5ca:	11 f4       	brne	.+4      	; 0x5d0 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     5cc:	df 98       	cbi	0x1b, 7	; 27
     5ce:	08 95       	ret
		else if(a == eS_PORTB0)
     5d0:	8a 30       	cpi	r24, 0x0A	; 10
     5d2:	91 05       	cpc	r25, r1
     5d4:	11 f4       	brne	.+4      	; 0x5da <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     5d6:	c0 98       	cbi	0x18, 0	; 24
     5d8:	08 95       	ret
		else if(a == eS_PORTB1)
     5da:	8b 30       	cpi	r24, 0x0B	; 11
     5dc:	91 05       	cpc	r25, r1
     5de:	11 f4       	brne	.+4      	; 0x5e4 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     5e0:	c1 98       	cbi	0x18, 1	; 24
     5e2:	08 95       	ret
		else if(a == eS_PORTB2)
     5e4:	8c 30       	cpi	r24, 0x0C	; 12
     5e6:	91 05       	cpc	r25, r1
     5e8:	11 f4       	brne	.+4      	; 0x5ee <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     5ea:	c2 98       	cbi	0x18, 2	; 24
     5ec:	08 95       	ret
		else if(a == eS_PORTB3)
     5ee:	8d 30       	cpi	r24, 0x0D	; 13
     5f0:	91 05       	cpc	r25, r1
     5f2:	11 f4       	brne	.+4      	; 0x5f8 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     5f4:	c3 98       	cbi	0x18, 3	; 24
     5f6:	08 95       	ret
		else if(a == eS_PORTB4)
     5f8:	8e 30       	cpi	r24, 0x0E	; 14
     5fa:	91 05       	cpc	r25, r1
     5fc:	11 f4       	brne	.+4      	; 0x602 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     5fe:	c4 98       	cbi	0x18, 4	; 24
     600:	08 95       	ret
		else if(a == eS_PORTB5)
     602:	8f 30       	cpi	r24, 0x0F	; 15
     604:	91 05       	cpc	r25, r1
     606:	11 f4       	brne	.+4      	; 0x60c <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     608:	c5 98       	cbi	0x18, 5	; 24
     60a:	08 95       	ret
		else if(a == eS_PORTB6)
     60c:	80 31       	cpi	r24, 0x10	; 16
     60e:	91 05       	cpc	r25, r1
     610:	11 f4       	brne	.+4      	; 0x616 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     612:	c6 98       	cbi	0x18, 6	; 24
     614:	08 95       	ret
		else if(a == eS_PORTB7)
     616:	81 31       	cpi	r24, 0x11	; 17
     618:	91 05       	cpc	r25, r1
     61a:	11 f4       	brne	.+4      	; 0x620 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     61c:	c7 98       	cbi	0x18, 7	; 24
     61e:	08 95       	ret
		else if(a == eS_PORTC0)
     620:	84 31       	cpi	r24, 0x14	; 20
     622:	91 05       	cpc	r25, r1
     624:	11 f4       	brne	.+4      	; 0x62a <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     626:	a8 98       	cbi	0x15, 0	; 21
     628:	08 95       	ret
		else if(a == eS_PORTC1)
     62a:	85 31       	cpi	r24, 0x15	; 21
     62c:	91 05       	cpc	r25, r1
     62e:	11 f4       	brne	.+4      	; 0x634 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     630:	a9 98       	cbi	0x15, 1	; 21
     632:	08 95       	ret
		else if(a == eS_PORTC2)
     634:	86 31       	cpi	r24, 0x16	; 22
     636:	91 05       	cpc	r25, r1
     638:	11 f4       	brne	.+4      	; 0x63e <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     63a:	aa 98       	cbi	0x15, 2	; 21
     63c:	08 95       	ret
		else if(a == eS_PORTC3)
     63e:	87 31       	cpi	r24, 0x17	; 23
     640:	91 05       	cpc	r25, r1
     642:	11 f4       	brne	.+4      	; 0x648 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     644:	ab 98       	cbi	0x15, 3	; 21
     646:	08 95       	ret
		else if(a == eS_PORTC4)
     648:	88 31       	cpi	r24, 0x18	; 24
     64a:	91 05       	cpc	r25, r1
     64c:	11 f4       	brne	.+4      	; 0x652 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     64e:	ac 98       	cbi	0x15, 4	; 21
     650:	08 95       	ret
		else if(a == eS_PORTC5)
     652:	89 31       	cpi	r24, 0x19	; 25
     654:	91 05       	cpc	r25, r1
     656:	11 f4       	brne	.+4      	; 0x65c <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     658:	ad 98       	cbi	0x15, 5	; 21
     65a:	08 95       	ret
		else if(a == eS_PORTC6)
     65c:	8a 31       	cpi	r24, 0x1A	; 26
     65e:	91 05       	cpc	r25, r1
     660:	11 f4       	brne	.+4      	; 0x666 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     662:	ae 98       	cbi	0x15, 6	; 21
     664:	08 95       	ret
		else if(a == eS_PORTC7)
     666:	8b 31       	cpi	r24, 0x1B	; 27
     668:	91 05       	cpc	r25, r1
     66a:	11 f4       	brne	.+4      	; 0x670 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     66c:	af 98       	cbi	0x15, 7	; 21
     66e:	08 95       	ret
		else if(a == eS_PORTD0)
     670:	8e 31       	cpi	r24, 0x1E	; 30
     672:	91 05       	cpc	r25, r1
     674:	11 f4       	brne	.+4      	; 0x67a <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     676:	90 98       	cbi	0x12, 0	; 18
     678:	08 95       	ret
		else if(a == eS_PORTD1)
     67a:	8f 31       	cpi	r24, 0x1F	; 31
     67c:	91 05       	cpc	r25, r1
     67e:	11 f4       	brne	.+4      	; 0x684 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     680:	91 98       	cbi	0x12, 1	; 18
     682:	08 95       	ret
		else if(a == eS_PORTD2)
     684:	80 32       	cpi	r24, 0x20	; 32
     686:	91 05       	cpc	r25, r1
     688:	11 f4       	brne	.+4      	; 0x68e <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     68a:	92 98       	cbi	0x12, 2	; 18
     68c:	08 95       	ret
		else if(a == eS_PORTD3)
     68e:	81 32       	cpi	r24, 0x21	; 33
     690:	91 05       	cpc	r25, r1
     692:	11 f4       	brne	.+4      	; 0x698 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     694:	93 98       	cbi	0x12, 3	; 18
     696:	08 95       	ret
		else if(a == eS_PORTD4)
     698:	82 32       	cpi	r24, 0x22	; 34
     69a:	91 05       	cpc	r25, r1
     69c:	11 f4       	brne	.+4      	; 0x6a2 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     69e:	94 98       	cbi	0x12, 4	; 18
     6a0:	08 95       	ret
		else if(a == eS_PORTD5)
     6a2:	83 32       	cpi	r24, 0x23	; 35
     6a4:	91 05       	cpc	r25, r1
     6a6:	11 f4       	brne	.+4      	; 0x6ac <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     6a8:	95 98       	cbi	0x12, 5	; 18
     6aa:	08 95       	ret
		else if(a == eS_PORTD6)
     6ac:	84 32       	cpi	r24, 0x24	; 36
     6ae:	91 05       	cpc	r25, r1
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     6b2:	96 98       	cbi	0x12, 6	; 18
     6b4:	08 95       	ret
		else if(a == eS_PORTD7)
     6b6:	85 97       	sbiw	r24, 0x25	; 37
     6b8:	09 f0       	breq	.+2      	; 0x6bc <pinChange+0x140>
     6ba:	9f c0       	rjmp	.+318    	; 0x7fa <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     6bc:	97 98       	cbi	0x12, 7	; 18
     6be:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	11 f4       	brne	.+4      	; 0x6c8 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     6c4:	d8 9a       	sbi	0x1b, 0	; 27
     6c6:	08 95       	ret
		else if(a == eS_PORTA1)
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	91 05       	cpc	r25, r1
     6cc:	11 f4       	brne	.+4      	; 0x6d2 <pinChange+0x156>
		PORTA |= (1<<PA1);
     6ce:	d9 9a       	sbi	0x1b, 1	; 27
     6d0:	08 95       	ret
		else if(a == eS_PORTA2)
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	91 05       	cpc	r25, r1
     6d6:	11 f4       	brne	.+4      	; 0x6dc <pinChange+0x160>
		PORTA |= (1<<PA2);
     6d8:	da 9a       	sbi	0x1b, 2	; 27
     6da:	08 95       	ret
		else if(a == eS_PORTA3)
     6dc:	83 30       	cpi	r24, 0x03	; 3
     6de:	91 05       	cpc	r25, r1
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     6e2:	db 9a       	sbi	0x1b, 3	; 27
     6e4:	08 95       	ret
		else if(a == eS_PORTA4)
     6e6:	84 30       	cpi	r24, 0x04	; 4
     6e8:	91 05       	cpc	r25, r1
     6ea:	11 f4       	brne	.+4      	; 0x6f0 <pinChange+0x174>
		PORTA |= (1<<PA4);
     6ec:	dc 9a       	sbi	0x1b, 4	; 27
     6ee:	08 95       	ret
		else if(a == eS_PORTA5)
     6f0:	85 30       	cpi	r24, 0x05	; 5
     6f2:	91 05       	cpc	r25, r1
     6f4:	11 f4       	brne	.+4      	; 0x6fa <pinChange+0x17e>
		PORTA |= (1<<PA5);
     6f6:	dd 9a       	sbi	0x1b, 5	; 27
     6f8:	08 95       	ret
		else if(a == eS_PORTA6)
     6fa:	86 30       	cpi	r24, 0x06	; 6
     6fc:	91 05       	cpc	r25, r1
     6fe:	11 f4       	brne	.+4      	; 0x704 <pinChange+0x188>
		PORTA |= (1<<PA6);
     700:	de 9a       	sbi	0x1b, 6	; 27
     702:	08 95       	ret
		else if(a == eS_PORTA7)
     704:	87 30       	cpi	r24, 0x07	; 7
     706:	91 05       	cpc	r25, r1
     708:	11 f4       	brne	.+4      	; 0x70e <pinChange+0x192>
		PORTA |= (1<<PA7);
     70a:	df 9a       	sbi	0x1b, 7	; 27
     70c:	08 95       	ret
		else if(a == eS_PORTB0)
     70e:	8a 30       	cpi	r24, 0x0A	; 10
     710:	91 05       	cpc	r25, r1
     712:	11 f4       	brne	.+4      	; 0x718 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     714:	c0 9a       	sbi	0x18, 0	; 24
     716:	08 95       	ret
		else if(a == eS_PORTB1)
     718:	8b 30       	cpi	r24, 0x0B	; 11
     71a:	91 05       	cpc	r25, r1
     71c:	11 f4       	brne	.+4      	; 0x722 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     71e:	c1 9a       	sbi	0x18, 1	; 24
     720:	08 95       	ret
		else if(a == eS_PORTB2)
     722:	8c 30       	cpi	r24, 0x0C	; 12
     724:	91 05       	cpc	r25, r1
     726:	11 f4       	brne	.+4      	; 0x72c <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     728:	c2 9a       	sbi	0x18, 2	; 24
     72a:	08 95       	ret
		else if(a == eS_PORTB3)
     72c:	8d 30       	cpi	r24, 0x0D	; 13
     72e:	91 05       	cpc	r25, r1
     730:	11 f4       	brne	.+4      	; 0x736 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     732:	c3 9a       	sbi	0x18, 3	; 24
     734:	08 95       	ret
		else if(a == eS_PORTB4)
     736:	8e 30       	cpi	r24, 0x0E	; 14
     738:	91 05       	cpc	r25, r1
     73a:	11 f4       	brne	.+4      	; 0x740 <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     73c:	c4 9a       	sbi	0x18, 4	; 24
     73e:	08 95       	ret
		else if(a == eS_PORTB5)
     740:	8f 30       	cpi	r24, 0x0F	; 15
     742:	91 05       	cpc	r25, r1
     744:	11 f4       	brne	.+4      	; 0x74a <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     746:	c5 9a       	sbi	0x18, 5	; 24
     748:	08 95       	ret
		else if(a == eS_PORTB6)
     74a:	80 31       	cpi	r24, 0x10	; 16
     74c:	91 05       	cpc	r25, r1
     74e:	11 f4       	brne	.+4      	; 0x754 <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     750:	c6 9a       	sbi	0x18, 6	; 24
     752:	08 95       	ret
		else if(a == eS_PORTB7)
     754:	81 31       	cpi	r24, 0x11	; 17
     756:	91 05       	cpc	r25, r1
     758:	11 f4       	brne	.+4      	; 0x75e <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     75a:	c7 9a       	sbi	0x18, 7	; 24
     75c:	08 95       	ret
		else if(a == eS_PORTC0)
     75e:	84 31       	cpi	r24, 0x14	; 20
     760:	91 05       	cpc	r25, r1
     762:	11 f4       	brne	.+4      	; 0x768 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     764:	a8 9a       	sbi	0x15, 0	; 21
     766:	08 95       	ret
		else if(a == eS_PORTC1)
     768:	85 31       	cpi	r24, 0x15	; 21
     76a:	91 05       	cpc	r25, r1
     76c:	11 f4       	brne	.+4      	; 0x772 <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     76e:	a9 9a       	sbi	0x15, 1	; 21
     770:	08 95       	ret
		else if(a == eS_PORTC2)
     772:	86 31       	cpi	r24, 0x16	; 22
     774:	91 05       	cpc	r25, r1
     776:	11 f4       	brne	.+4      	; 0x77c <pinChange+0x200>
		PORTC |= (1<<PC2);
     778:	aa 9a       	sbi	0x15, 2	; 21
     77a:	08 95       	ret
		else if(a == eS_PORTC3)
     77c:	87 31       	cpi	r24, 0x17	; 23
     77e:	91 05       	cpc	r25, r1
     780:	11 f4       	brne	.+4      	; 0x786 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     782:	ab 9a       	sbi	0x15, 3	; 21
     784:	08 95       	ret
		else if(a == eS_PORTC4)
     786:	88 31       	cpi	r24, 0x18	; 24
     788:	91 05       	cpc	r25, r1
     78a:	11 f4       	brne	.+4      	; 0x790 <pinChange+0x214>
		PORTC |= (1<<PC4);
     78c:	ac 9a       	sbi	0x15, 4	; 21
     78e:	08 95       	ret
		else if(a == eS_PORTC5)
     790:	89 31       	cpi	r24, 0x19	; 25
     792:	91 05       	cpc	r25, r1
     794:	11 f4       	brne	.+4      	; 0x79a <pinChange+0x21e>
		PORTC |= (1<<PC5);
     796:	ad 9a       	sbi	0x15, 5	; 21
     798:	08 95       	ret
		else if(a == eS_PORTC6)
     79a:	8a 31       	cpi	r24, 0x1A	; 26
     79c:	91 05       	cpc	r25, r1
     79e:	11 f4       	brne	.+4      	; 0x7a4 <pinChange+0x228>
		PORTC |= (1<<PC6);
     7a0:	ae 9a       	sbi	0x15, 6	; 21
     7a2:	08 95       	ret
		else if(a == eS_PORTC7)
     7a4:	8b 31       	cpi	r24, 0x1B	; 27
     7a6:	91 05       	cpc	r25, r1
     7a8:	11 f4       	brne	.+4      	; 0x7ae <pinChange+0x232>
		PORTC |= (1<<PC7);
     7aa:	af 9a       	sbi	0x15, 7	; 21
     7ac:	08 95       	ret
		else if(a == eS_PORTD0)
     7ae:	8e 31       	cpi	r24, 0x1E	; 30
     7b0:	91 05       	cpc	r25, r1
     7b2:	11 f4       	brne	.+4      	; 0x7b8 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     7b4:	90 9a       	sbi	0x12, 0	; 18
     7b6:	08 95       	ret
		else if(a == eS_PORTD1)
     7b8:	8f 31       	cpi	r24, 0x1F	; 31
     7ba:	91 05       	cpc	r25, r1
     7bc:	11 f4       	brne	.+4      	; 0x7c2 <pinChange+0x246>
		PORTD |= (1<<PD1);
     7be:	91 9a       	sbi	0x12, 1	; 18
     7c0:	08 95       	ret
		else if(a == eS_PORTD2)
     7c2:	80 32       	cpi	r24, 0x20	; 32
     7c4:	91 05       	cpc	r25, r1
     7c6:	11 f4       	brne	.+4      	; 0x7cc <pinChange+0x250>
		PORTD |= (1<<PD2);
     7c8:	92 9a       	sbi	0x12, 2	; 18
     7ca:	08 95       	ret
		else if(a == eS_PORTD3)
     7cc:	81 32       	cpi	r24, 0x21	; 33
     7ce:	91 05       	cpc	r25, r1
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     7d2:	93 9a       	sbi	0x12, 3	; 18
     7d4:	08 95       	ret
		else if(a == eS_PORTD4)
     7d6:	82 32       	cpi	r24, 0x22	; 34
     7d8:	91 05       	cpc	r25, r1
     7da:	11 f4       	brne	.+4      	; 0x7e0 <pinChange+0x264>
		PORTD |= (1<<PD4);
     7dc:	94 9a       	sbi	0x12, 4	; 18
     7de:	08 95       	ret
		else if(a == eS_PORTD5)
     7e0:	83 32       	cpi	r24, 0x23	; 35
     7e2:	91 05       	cpc	r25, r1
     7e4:	11 f4       	brne	.+4      	; 0x7ea <pinChange+0x26e>
		PORTD |= (1<<PD5);
     7e6:	95 9a       	sbi	0x12, 5	; 18
     7e8:	08 95       	ret
		else if(a == eS_PORTD6)
     7ea:	84 32       	cpi	r24, 0x24	; 36
     7ec:	91 05       	cpc	r25, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <pinChange+0x278>
		PORTD |= (1<<PD6);
     7f0:	96 9a       	sbi	0x12, 6	; 18
     7f2:	08 95       	ret
		else if(a == eS_PORTD7)
     7f4:	85 97       	sbiw	r24, 0x25	; 37
     7f6:	09 f4       	brne	.+2      	; 0x7fa <pinChange+0x27e>
		PORTD |= (1<<PD7);
     7f8:	97 9a       	sbi	0x12, 7	; 18
     7fa:	08 95       	ret

000007fc <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     7fc:	cf 93       	push	r28
     7fe:	c8 2f       	mov	r28, r24
	if(a & 1)
     800:	80 ff       	sbrs	r24, 0
     802:	07 c0       	rjmp	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	pinChange(D4,1);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	83 e2       	ldi	r24, 0x23	; 35
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     810:	06 c0       	rjmp	.+12     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	else
	pinChange(D4,0);
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	83 e2       	ldi	r24, 0x23	; 35
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
	
	if(a & 2)
     81e:	c1 ff       	sbrs	r28, 1
     820:	07 c0       	rjmp	.+14     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
	pinChange(D5,1);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	82 e2       	ldi	r24, 0x22	; 34
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     82e:	06 c0       	rjmp	.+12     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	else
	pinChange(D5,0);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	82 e2       	ldi	r24, 0x22	; 34
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
	
	if(a & 4)
     83c:	c2 ff       	sbrs	r28, 2
     83e:	07 c0       	rjmp	.+14     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
	pinChange(D6,1);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	81 e2       	ldi	r24, 0x21	; 33
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     84c:	06 c0       	rjmp	.+12     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	else
	pinChange(D6,0);
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	81 e2       	ldi	r24, 0x21	; 33
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
	
	if(a & 8)
     85a:	c3 ff       	sbrs	r28, 3
     85c:	07 c0       	rjmp	.+14     	; 0x86c <__stack+0xd>
	pinChange(D7,1);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <__stack+0x19>
	else
	pinChange(D7,0);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	80 e2       	ldi	r24, 0x20	; 32
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
}
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     87c:	cf 93       	push	r28
     87e:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	85 e2       	ldi	r24, 0x25	; 37
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
	Lcd4_Port(a);
     88c:	8c 2f       	mov	r24, r28
     88e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	84 e2       	ldi	r24, 0x24	; 36
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     89e:	89 ef       	ldi	r24, 0xF9	; 249
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <Lcd4_Cmd+0x26>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <Lcd4_Cmd+0x2c>
     8a8:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	84 e2       	ldi	r24, 0x24	; 36
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     8b6:	89 ef       	ldi	r24, 0xF9	; 249
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <Lcd4_Cmd+0x3e>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <Lcd4_Cmd+0x44>
     8c0:	00 00       	nop
	_delay_ms(1);
}
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(1);
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
     8d2:	08 95       	ret

000008d4 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     8d4:	cf 93       	push	r28
     8d6:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     8d8:	81 11       	cpse	r24, r1
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	86 0f       	add	r24, r22
     8e0:	82 95       	swap	r24
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
		Lcd4_Cmd(y);
     8e8:	8c 2f       	mov	r24, r28
     8ea:	8f 70       	andi	r24, 0x0F	; 15
     8ec:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
     8f0:	0c c0       	rjmp	.+24     	; 0x90a <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	51 f4       	brne	.+20     	; 0x90a <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     8f6:	80 ec       	ldi	r24, 0xC0	; 192
     8f8:	86 0f       	add	r24, r22
     8fa:	82 95       	swap	r24
     8fc:	8f 70       	andi	r24, 0x0F	; 15
     8fe:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
		Lcd4_Cmd(y);
     902:	8c 2f       	mov	r24, r28
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	}
}
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Lcd4_Port>
     914:	87 e8       	ldi	r24, 0x87	; 135
     916:	93 e1       	ldi	r25, 0x13	; 19
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <Lcd4_Init+0xa>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <Lcd4_Init+0x10>
     91e:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
     926:	81 ee       	ldi	r24, 0xE1	; 225
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <Lcd4_Init+0x1c>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <Lcd4_Init+0x22>
     930:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
     938:	8d eb       	ldi	r24, 0xBD	; 189
     93a:	9a e0       	ldi	r25, 0x0A	; 10
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <Lcd4_Init+0x2e>
     940:	00 c0       	rjmp	.+0      	; 0x942 <Lcd4_Init+0x34>
     942:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     962:	8c e0       	ldi	r24, 0x0C	; 12
     964:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	0e 94 3e 04 	call	0x87c	; 0x87c <Lcd4_Cmd>
	Lcd4_Clear();
     974:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Lcd4_Clear>
     978:	08 95       	ret

0000097a <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     97a:	cf 93       	push	r28
     97c:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	85 e2       	ldi	r24, 0x25	; 37
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     98a:	8c 2f       	mov	r24, r28
     98c:	82 95       	swap	r24
     98e:	8f 70       	andi	r24, 0x0F	; 15
     990:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Lcd4_Port>
	pinChange(EN,1);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	84 e2       	ldi	r24, 0x24	; 36
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     9a0:	89 ef       	ldi	r24, 0xF9	; 249
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <Lcd4_Write_Char+0x2a>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <Lcd4_Write_Char+0x30>
     9aa:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	84 e2       	ldi	r24, 0x24	; 36
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     9b8:	89 ef       	ldi	r24, 0xF9	; 249
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <Lcd4_Write_Char+0x42>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <Lcd4_Write_Char+0x48>
     9c2:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     9c4:	8c 2f       	mov	r24, r28
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Lcd4_Port>
	pinChange(EN,1);
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	84 e2       	ldi	r24, 0x24	; 36
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     9d8:	89 ef       	ldi	r24, 0xF9	; 249
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <Lcd4_Write_Char+0x62>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <Lcd4_Write_Char+0x68>
     9e2:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	84 e2       	ldi	r24, 0x24	; 36
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 be 02 	call	0x57c	; 0x57c <pinChange>
     9f0:	89 ef       	ldi	r24, 0xF9	; 249
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <Lcd4_Write_Char+0x7a>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <Lcd4_Write_Char+0x80>
     9fa:	00 00       	nop
	_delay_ms(1);
}
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     a06:	88 81       	ld	r24, Y
     a08:	88 23       	and	r24, r24
     a0a:	31 f0       	breq	.+12     	; 0xa18 <Lcd4_Write_String+0x18>
     a0c:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     a0e:	0e 94 bd 04 	call	0x97a	; 0x97a <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     a12:	89 91       	ld	r24, Y+
     a14:	81 11       	cpse	r24, r1
     a16:	fb cf       	rjmp	.-10     	; 0xa0e <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	7b 01       	movw	r14, r22
     a2c:	14 2f       	mov	r17, r20
     a2e:	88 0f       	add	r24, r24
     a30:	0e 94 c1 07 	call	0xf82	; 0xf82 <i2c_start>
     a34:	81 11       	cpse	r24, r1
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <I2C_WRITESEQ+0x3e>
     a38:	11 23       	and	r17, r17
     a3a:	91 f0       	breq	.+36     	; 0xa60 <I2C_WRITESEQ+0x42>
     a3c:	e7 01       	movw	r28, r14
     a3e:	11 50       	subi	r17, 0x01	; 1
     a40:	01 2f       	mov	r16, r17
     a42:	10 e0       	ldi	r17, 0x00	; 0
     a44:	0f 5f       	subi	r16, 0xFF	; 255
     a46:	1f 4f       	sbci	r17, 0xFF	; 255
     a48:	0e 0d       	add	r16, r14
     a4a:	1f 1d       	adc	r17, r15
     a4c:	89 91       	ld	r24, Y+
     a4e:	0e 94 e5 07 	call	0xfca	; 0xfca <i2c_write>
     a52:	c0 17       	cp	r28, r16
     a54:	d1 07       	cpc	r29, r17
     a56:	d1 f7       	brne	.-12     	; 0xa4c <I2C_WRITESEQ+0x2e>
     a58:	c0 e0       	ldi	r28, 0x00	; 0
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <I2C_WRITESEQ+0x44>
     a5c:	c1 e0       	ldi	r28, 0x01	; 1
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <I2C_WRITESEQ+0x44>
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	0e 94 df 07 	call	0xfbe	; 0xfbe <i2c_stop>
     a66:	8c 2f       	mov	r24, r28
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	08 95       	ret

00000a76 <wr_lcd_mode>:
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <wr_lcd_mode+0xa>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <wr_lcd_mode+0xc>
     a82:	1f 92       	push	r1
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	08 2f       	mov	r16, r24
     a8a:	68 30       	cpi	r22, 0x08	; 8
     a8c:	71 f4       	brne	.+28     	; 0xaaa <wr_lcd_mode+0x34>
     a8e:	81 11       	cpse	r24, r1
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <wr_lcd_mode+0x20>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <wr_lcd_mode+0x22>
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	60 e6       	ldi	r22, 0x60	; 96
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	87 e2       	ldi	r24, 0x27	; 39
     aa4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_WRITESEQ>
     aa8:	26 c0       	rjmp	.+76     	; 0xaf6 <wr_lcd_mode+0x80>
     aaa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     aae:	16 2f       	mov	r17, r22
     ab0:	18 2b       	or	r17, r24
     ab2:	19 83       	std	Y+1, r17	; 0x01
     ab4:	80 2f       	mov	r24, r16
     ab6:	80 7f       	andi	r24, 0xF0	; 240
     ab8:	84 60       	ori	r24, 0x04	; 4
     aba:	81 2b       	or	r24, r17
     abc:	8a 83       	std	Y+2, r24	; 0x02
     abe:	8b 7f       	andi	r24, 0xFB	; 251
     ac0:	8b 83       	std	Y+3, r24	; 0x03
     ac2:	20 e1       	ldi	r18, 0x10	; 16
     ac4:	02 9f       	mul	r16, r18
     ac6:	c0 01       	movw	r24, r0
     ac8:	11 24       	eor	r1, r1
     aca:	81 2b       	or	r24, r17
     acc:	84 60       	ori	r24, 0x04	; 4
     ace:	8c 83       	std	Y+4, r24	; 0x04
     ad0:	8b 7f       	andi	r24, 0xFB	; 251
     ad2:	8d 83       	std	Y+5, r24	; 0x05
     ad4:	45 e0       	ldi	r20, 0x05	; 5
     ad6:	be 01       	movw	r22, r28
     ad8:	6f 5f       	subi	r22, 0xFF	; 255
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	87 e2       	ldi	r24, 0x27	; 39
     ade:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_WRITESEQ>
     ae2:	10 fd       	sbrc	r17, 0
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <wr_lcd_mode+0x80>
     ae6:	03 30       	cpi	r16, 0x03	; 3
     ae8:	30 f4       	brcc	.+12     	; 0xaf6 <wr_lcd_mode+0x80>
     aea:	e3 ef       	ldi	r30, 0xF3	; 243
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <wr_lcd_mode+0x78>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <wr_lcd_mode+0x7e>
     af4:	00 00       	nop
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <lcd_gotoxy>:
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	d8 2f       	mov	r29, r24
     b10:	c6 2f       	mov	r28, r22
     b12:	e6 2f       	mov	r30, r22
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	ef 59       	subi	r30, 0x9F	; 159
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	98 2f       	mov	r25, r24
     b1c:	90 68       	ori	r25, 0x80	; 128
     b1e:	80 81       	ld	r24, Z
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	89 2b       	or	r24, r25
     b24:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
     b28:	d0 93 d2 01 	sts	0x01D2, r29	; 0x8001d2 <_lcd_x>
     b2c:	c0 93 d3 01 	sts	0x01D3, r28	; 0x8001d3 <_lcd_y>
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <lcd_clrscr>:
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
     b3e:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <_lcd_y>
     b42:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <_lcd_x>
     b46:	08 95       	ret

00000b48 <lcd_putc>:
     b48:	cf 93       	push	r28
     b4a:	c8 2f       	mov	r28, r24
     b4c:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <_lcd_x>
     b50:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <_lcd_maxx>
     b54:	98 17       	cp	r25, r24
     b56:	18 f4       	brcc	.+6      	; 0xb5e <lcd_putc+0x16>
     b58:	ca 30       	cpi	r28, 0x0A	; 10
     b5a:	59 f4       	brne	.+22     	; 0xb72 <lcd_putc+0x2a>
     b5c:	14 c0       	rjmp	.+40     	; 0xb86 <lcd_putc+0x3e>
     b5e:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <_lcd_y>
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <_lcd_y>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 85 05 	call	0xb0a	; 0xb0a <lcd_gotoxy>
     b6e:	ca 30       	cpi	r28, 0x0A	; 10
     b70:	91 f0       	breq	.+36     	; 0xb96 <lcd_putc+0x4e>
     b72:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_lcd_x>
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <_lcd_x>
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	8c 2f       	mov	r24, r28
     b80:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
     b84:	08 c0       	rjmp	.+16     	; 0xb96 <lcd_putc+0x4e>
     b86:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <_lcd_y>
     b8a:	6f 5f       	subi	r22, 0xFF	; 255
     b8c:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <_lcd_y>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 85 05 	call	0xb0a	; 0xb0a <lcd_gotoxy>
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <lcd_puts>:
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
     ba0:	88 81       	ld	r24, Y
     ba2:	88 23       	and	r24, r24
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <lcd_puts+0x18>
     ba6:	21 96       	adiw	r28, 0x01	; 1
     ba8:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_putc>
     bac:	89 91       	ld	r24, Y+
     bae:	81 11       	cpse	r24, r1
     bb0:	fb cf       	rjmp	.-10     	; 0xba8 <lcd_puts+0xe>
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <lcd_init+0xa>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <lcd_init+0xc>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <lcd_init+0xe>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     bcc:	80 e3       	ldi	r24, 0x30	; 48
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	94 e3       	ldi	r25, 0x34	; 52
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     bd6:	80 e2       	ldi	r24, 0x20	; 32
     bd8:	8c 83       	std	Y+4, r24	; 0x04
     bda:	94 e2       	ldi	r25, 0x24	; 36
     bdc:	9d 83       	std	Y+5, r25	; 0x05
     bde:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     be0:	80 e1       	ldi	r24, 0x10	; 16
     be2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     be6:	e1 e6       	ldi	r30, 0x61	; 97
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 5f       	subi	r24, 0xF0	; 240
     bee:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	80 5f       	subi	r24, 0xF0	; 240
     bf4:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     bf6:	bd 9a       	sbi	0x17, 5	; 23
     bf8:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
     bfa:	0e 94 bd 07 	call	0xf7a	; 0xf7a <i2c_init>
     bfe:	8b e4       	ldi	r24, 0x4B	; 75
     c00:	9d e1       	ldi	r25, 0x1D	; 29
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <lcd_init+0x4a>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <lcd_init+0x50>
     c08:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     c0a:	43 e0       	ldi	r20, 0x03	; 3
     c0c:	be 01       	movw	r22, r28
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	87 e2       	ldi	r24, 0x27	; 39
     c14:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_WRITESEQ>
     c18:	18 2f       	mov	r17, r24
     c1a:	81 ee       	ldi	r24, 0xE1	; 225
     c1c:	94 e0       	ldi	r25, 0x04	; 4
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <lcd_init+0x66>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <lcd_init+0x6c>
     c24:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     c26:	43 e0       	ldi	r20, 0x03	; 3
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	87 e2       	ldi	r24, 0x27	; 39
     c30:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_WRITESEQ>
     c34:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     c36:	43 e0       	ldi	r20, 0x03	; 3
     c38:	be 01       	movw	r22, r28
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	87 e2       	ldi	r24, 0x27	; 39
     c40:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_WRITESEQ>
     c44:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     c46:	43 e0       	ldi	r20, 0x03	; 3
     c48:	be 01       	movw	r22, r28
     c4a:	6c 5f       	subi	r22, 0xFC	; 252
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	87 e2       	ldi	r24, 0x27	; 39
     c50:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_WRITESEQ>
     c54:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	88 e2       	ldi	r24, 0x28	; 40
     c5a:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
     c5e:	81 2b       	or	r24, r17
     c60:	09 f0       	breq	.+2      	; 0xc64 <lcd_init+0xac>
     c62:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	8c e0       	ldi	r24, 0x0C	; 12
     c68:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	86 e0       	ldi	r24, 0x06	; 6
     c70:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	80 2f       	mov	r24, r16
     c80:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
}
     c84:	26 96       	adiw	r28, 0x06	; 6
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     c9a:	68 e0       	ldi	r22, 0x08	; 8
     c9c:	0e 94 3b 05 	call	0xa76	; 0xa76 <wr_lcd_mode>
     ca0:	08 95       	ret

00000ca2 <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
     ca2:	0e 94 b7 00 	call	0x16e	; 0x16e <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
     ca6:	81 e5       	ldi	r24, 0x51	; 81
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 49 02 	call	0x492	; 0x492 <Lcd_Init>
	Lcd_Init(LCDNOTICE);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 49 02 	call	0x492	; 0x492 <Lcd_Init>
	
	States_GotoState(IDLE);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
	Keypad_Init();
     cc0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
     cc4:	0e 94 1a 01 	call	0x234	; 0x234 <Keypad_KeyPressed>
     cc8:	88 23       	and	r24, r24
     cca:	e1 f3       	breq	.-8      	; 0xcc4 <main+0x22>
     ccc:	87 e8       	ldi	r24, 0x87	; 135
     cce:	93 e1       	ldi	r25, 0x13	; 19
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <main+0x2e>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <main+0x34>
     cd6:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
     cd8:	0e 94 1a 01 	call	0x234	; 0x234 <Keypad_KeyPressed>
     cdc:	88 23       	and	r24, r24
     cde:	91 f3       	breq	.-28     	; 0xcc4 <main+0x22>
			{
				int_fast8_t x = Keypad_GetKey();
     ce0:	0e 94 0b 02 	call	0x416	; 0x416 <Keypad_GetKey>
     ce4:	e7 e8       	ldi	r30, 0x87	; 135
     ce6:	f3 e1       	ldi	r31, 0x13	; 19
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <main+0x46>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <main+0x4c>
     cee:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
     cf0:	0e 94 2b 02 	call	0x456	; 0x456 <KeyProcessor_ProcessKey>
				Keypad_Init();
     cf4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
     cf8:	e5 cf       	rjmp	.-54     	; 0xcc4 <main+0x22>

00000cfa <EnteringAge_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringAge_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 77 02 	call	0x4ee	; 0x4ee <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Age:");
     d0e:	6d e5       	ldi	r22, 0x5D	; 93
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
	Keypad_InitNumpad();
     d18:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     d1c:	0e 94 00 01 	call	0x200	; 0x200 <Keypad_UpdateKeyMode>
     d20:	08 95       	ret

00000d22 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
	if(key == 31)
     d2a:	8f 31       	cpi	r24, 0x1F	; 31
     d2c:	31 f4       	brne	.+12     	; 0xd3a <EnteringAge_ProcessKey+0x18>
	{
		// nxt
		//records[serial].age = atoi(keyBuffer);
		// save age
		Keypad_ResetBuffer();
     d2e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
     d38:	32 c0       	rjmp	.+100    	; 0xd9e <EnteringAge_ProcessKey+0x7c>
	}
	else if(key == 30)
     d3a:	8e 31       	cpi	r24, 0x1E	; 30
     d3c:	31 f4       	brne	.+12     	; 0xd4a <EnteringAge_ProcessKey+0x28>
	{
		// prev
		
		Keypad_ResetBuffer();
     d3e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
     d48:	2a c0       	rjmp	.+84     	; 0xd9e <EnteringAge_ProcessKey+0x7c>
	}
	else 
	{
		Keypad_AddKey(key);
     d4a:	0e 94 91 01 	call	0x322	; 0x322 <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
		int sz = strlen(keyBuffer);
     d5c:	e0 ec       	ldi	r30, 0xC0	; 192
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	01 90       	ld	r0, Z+
     d62:	00 20       	and	r0, r0
     d64:	e9 f7       	brne	.-6      	; 0xd60 <EnteringAge_ProcessKey+0x3e>
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	8f 01       	movw	r16, r30
     d6a:	00 5c       	subi	r16, 0xC0	; 192
     d6c:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     d6e:	60 ec       	ldi	r22, 0xC0	; 192
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     d78:	cf e0       	ldi	r28, 0x0F	; 15
     d7a:	d0 e0       	ldi	r29, 0x00	; 0
     d7c:	c0 1b       	sub	r28, r16
     d7e:	d1 0b       	sbc	r29, r17
     d80:	00 31       	cpi	r16, 0x10	; 16
     d82:	11 05       	cpc	r17, r1
     d84:	31 f0       	breq	.+12     	; 0xd92 <EnteringAge_ProcessKey+0x70>
			Lcd_Printc(LCDKEYPAD,' ');
     d86:	60 e2       	ldi	r22, 0x20	; 32
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 ad 02 	call	0x55a	; 0x55a <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     d8e:	21 97       	sbiw	r28, 0x01	; 1
     d90:	d0 f7       	brcc	.-12     	; 0xd86 <EnteringAge_ProcessKey+0x64>
			Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     d92:	80 ec       	ldi	r24, 0xC0	; 192
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     d9a:	0e 94 00 01 	call	0x200	; 0x200 <Keypad_UpdateKeyMode>
	}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 77 02 	call	0x4ee	; 0x4ee <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
     dbc:	68 e6       	ldi	r22, 0x68	; 104
     dbe:	71 e0       	ldi	r23, 0x01	; 1
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
	Keypad_UpdateKeyMode();
     dc6:	0e 94 00 01 	call	0x200	; 0x200 <Keypad_UpdateKeyMode>
     dca:	08 95       	ret

00000dcc <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
	if(key == 31)
     dd4:	8f 31       	cpi	r24, 0x1F	; 31
     dd6:	31 f4       	brne	.+12     	; 0xde4 <EnteringName_ProcessKey+0x18>
	{
		// nxt
		// save name and procced
		//records[serial].name = keyBuffer;
		Keypad_ResetBuffer();
     dd8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
     de2:	32 c0       	rjmp	.+100    	; 0xe48 <EnteringName_ProcessKey+0x7c>
	}
	else if(key == 30)
     de4:	8e 31       	cpi	r24, 0x1E	; 30
     de6:	31 f4       	brne	.+12     	; 0xdf4 <EnteringName_ProcessKey+0x28>
	{
		//prev
		Keypad_ResetBuffer();
     de8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
     df2:	2a c0       	rjmp	.+84     	; 0xe48 <EnteringName_ProcessKey+0x7c>
	}
	else 
	{
		Keypad_AddKey(key);
     df4:	0e 94 91 01 	call	0x322	; 0x322 <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
		int sz = strlen(keyBuffer);
     e06:	e0 ec       	ldi	r30, 0xC0	; 192
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	01 90       	ld	r0, Z+
     e0c:	00 20       	and	r0, r0
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <EnteringName_ProcessKey+0x3e>
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	8f 01       	movw	r16, r30
     e14:	00 5c       	subi	r16, 0xC0	; 192
     e16:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     e18:	60 ec       	ldi	r22, 0xC0	; 192
     e1a:	71 e0       	ldi	r23, 0x01	; 1
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     e22:	cf e0       	ldi	r28, 0x0F	; 15
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	c0 1b       	sub	r28, r16
     e28:	d1 0b       	sbc	r29, r17
     e2a:	00 31       	cpi	r16, 0x10	; 16
     e2c:	11 05       	cpc	r17, r1
     e2e:	31 f0       	breq	.+12     	; 0xe3c <EnteringName_ProcessKey+0x70>
			Lcd_Printc(LCDKEYPAD,' ');
     e30:	60 e2       	ldi	r22, 0x20	; 32
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 ad 02 	call	0x55a	; 0x55a <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     e38:	21 97       	sbiw	r28, 0x01	; 1
     e3a:	d0 f7       	brcc	.-12     	; 0xe30 <EnteringName_ProcessKey+0x64>
			Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     e3c:	80 ec       	ldi	r24, 0xC0	; 192
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     e44:	0e 94 00 01 	call	0x200	; 0x200 <Keypad_UpdateKeyMode>
	}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	08 95       	ret

00000e52 <EnteringPhone_Init>:
//extern unsigned int serial;


void EnteringPhone_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0e 94 77 02 	call	0x4ee	; 0x4ee <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Phone no:");
     e66:	64 e7       	ldi	r22, 0x74	; 116
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
	Keypad_InitNumpad();
     e70:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     e74:	0e 94 00 01 	call	0x200	; 0x200 <Keypad_UpdateKeyMode>
     e78:	08 95       	ret

00000e7a <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
	if(key == 31)
     e82:	8f 31       	cpi	r24, 0x1F	; 31
     e84:	a1 f1       	breq	.+104    	; 0xeee <EnteringPhone_ProcessKey+0x74>
		// nxt
		//records[serial].phone = keyBuffer;
		// save phone information
		// print serial
	}
	else if(key == 30)
     e86:	8e 31       	cpi	r24, 0x1E	; 30
     e88:	31 f4       	brne	.+12     	; 0xe96 <EnteringPhone_ProcessKey+0x1c>
	{
		// prev
		Keypad_ResetBuffer();
     e8a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
     e94:	2c c0       	rjmp	.+88     	; 0xeee <EnteringPhone_ProcessKey+0x74>
	}
	else 
	{
		Keypad_AddKey(key);
     e96:	0e 94 91 01 	call	0x322	; 0x322 <Keypad_AddKey>
		Lcd_Position(LCDKEYPAD,1,0);
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
		int sz = strlen(keyBuffer);
     ea8:	e0 ec       	ldi	r30, 0xC0	; 192
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	01 90       	ld	r0, Z+
     eae:	00 20       	and	r0, r0
     eb0:	e9 f7       	brne	.-6      	; 0xeac <EnteringPhone_ProcessKey+0x32>
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	8f 01       	movw	r16, r30
     eb6:	00 5c       	subi	r16, 0xC0	; 192
     eb8:	11 40       	sbci	r17, 0x01	; 1
		Lcd_Prints(LCDKEYPAD , keyBuffer);
     eba:	60 ec       	ldi	r22, 0xC0	; 192
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
		sz  = 16-sz;
		while(sz--)
     ec4:	cf e0       	ldi	r28, 0x0F	; 15
     ec6:	d0 e0       	ldi	r29, 0x00	; 0
     ec8:	c0 1b       	sub	r28, r16
     eca:	d1 0b       	sbc	r29, r17
     ecc:	00 31       	cpi	r16, 0x10	; 16
     ece:	11 05       	cpc	r17, r1
     ed0:	31 f0       	breq	.+12     	; 0xede <EnteringPhone_ProcessKey+0x64>
			Lcd_Printc(LCDKEYPAD,' ');
     ed2:	60 e2       	ldi	r22, 0x20	; 32
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 ad 02 	call	0x55a	; 0x55a <Lcd_Printc>
		Keypad_AddKey(key);
		Lcd_Position(LCDKEYPAD,1,0);
		int sz = strlen(keyBuffer);
		Lcd_Prints(LCDKEYPAD , keyBuffer);
		sz  = 16-sz;
		while(sz--)
     eda:	21 97       	sbiw	r28, 0x01	; 1
     edc:	d0 f7       	brcc	.-12     	; 0xed2 <EnteringPhone_ProcessKey+0x58>
			Lcd_Printc(LCDKEYPAD,' ');
		HC05_SendString(keyBuffer);
     ede:	80 ec       	ldi	r24, 0xC0	; 192
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_InitNumpad();
     ee6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
     eea:	0e 94 00 01 	call	0x200	; 0x200 <Keypad_UpdateKeyMode>
	}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 9c 07 	call	0xf38	; 0xf38 <States_GotoState>
     efe:	08 95       	ret

00000f00 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 77 02 	call	0x4ee	; 0x4ee <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome to xyz");
     f14:	6e e7       	ldi	r22, 0x7E	; 126
     f16:	71 e0       	ldi	r23, 0x01	; 1
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Serial");
     f2c:	6d e8       	ldi	r22, 0x8D	; 141
     f2e:	71 e0       	ldi	r23, 0x01	; 1
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_Prints>
     f36:	08 95       	ret

00000f38 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
     f38:	cf 93       	push	r28
     f3a:	c8 2f       	mov	r28, r24
	switch(newState)
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	61 f0       	breq	.+24     	; 0xf58 <States_GotoState+0x20>
     f40:	1c f4       	brge	.+6      	; 0xf48 <States_GotoState+0x10>
     f42:	88 23       	and	r24, r24
     f44:	31 f0       	breq	.+12     	; 0xf52 <States_GotoState+0x1a>
     f46:	11 c0       	rjmp	.+34     	; 0xf6a <States_GotoState+0x32>
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	49 f0       	breq	.+18     	; 0xf5e <States_GotoState+0x26>
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	51 f0       	breq	.+20     	; 0xf64 <States_GotoState+0x2c>
     f50:	0c c0       	rjmp	.+24     	; 0xf6a <States_GotoState+0x32>
	{
		case IDLE:
			Idle_Init();
     f52:	0e 94 80 07 	call	0xf00	; 0xf00 <Idle_Init>
			break;
     f56:	0d c0       	rjmp	.+26     	; 0xf72 <States_GotoState+0x3a>
		case ENTERING_NAME:
			EnteringName_Init();
     f58:	0e 94 d4 06 	call	0xda8	; 0xda8 <EnteringName_Init>
			break;
     f5c:	0a c0       	rjmp	.+20     	; 0xf72 <States_GotoState+0x3a>
		case ENTERING_AGE:
			EnteringAge_Init();
     f5e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <EnteringAge_Init>
			break;
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <States_GotoState+0x3a>
		case ENTERING_PHONE:
			EnteringPhone_Init();
     f64:	0e 94 29 07 	call	0xe52	; 0xe52 <EnteringPhone_Init>
			break;
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <States_GotoState+0x3a>
			//break;
		//case STORE_RECORD:
			//Store_Init();
			//break;
		default:
			Error_Error("GotoState: newState not defined");
     f6a:	8b e9       	ldi	r24, 0x9B	; 155
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	}
	currentState = newState;
     f72:	c0 93 d4 01 	sts	0x01D4, r28	; 0x8001d4 <currentState>
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     f7a:	11 b8       	out	0x01, r1	; 1
     f7c:	8c e0       	ldi	r24, 0x0C	; 12
     f7e:	80 b9       	out	0x00, r24	; 0
     f80:	08 95       	ret

00000f82 <i2c_start>:
     f82:	94 ea       	ldi	r25, 0xA4	; 164
     f84:	96 bf       	out	0x36, r25	; 54
     f86:	06 b6       	in	r0, 0x36	; 54
     f88:	07 fe       	sbrs	r0, 7
     f8a:	fd cf       	rjmp	.-6      	; 0xf86 <i2c_start+0x4>
     f8c:	91 b1       	in	r25, 0x01	; 1
     f8e:	98 7f       	andi	r25, 0xF8	; 248
     f90:	98 30       	cpi	r25, 0x08	; 8
     f92:	11 f0       	breq	.+4      	; 0xf98 <i2c_start+0x16>
     f94:	90 31       	cpi	r25, 0x10	; 16
     f96:	79 f4       	brne	.+30     	; 0xfb6 <i2c_start+0x34>
     f98:	83 b9       	out	0x03, r24	; 3
     f9a:	84 e8       	ldi	r24, 0x84	; 132
     f9c:	86 bf       	out	0x36, r24	; 54
     f9e:	06 b6       	in	r0, 0x36	; 54
     fa0:	07 fe       	sbrs	r0, 7
     fa2:	fd cf       	rjmp	.-6      	; 0xf9e <i2c_start+0x1c>
     fa4:	91 b1       	in	r25, 0x01	; 1
     fa6:	98 7f       	andi	r25, 0xF8	; 248
     fa8:	98 31       	cpi	r25, 0x18	; 24
     faa:	39 f0       	breq	.+14     	; 0xfba <i2c_start+0x38>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 34       	cpi	r25, 0x40	; 64
     fb0:	29 f4       	brne	.+10     	; 0xfbc <i2c_start+0x3a>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	08 95       	ret
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     fbe:	84 e9       	ldi	r24, 0x94	; 148
     fc0:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     fc2:	06 b6       	in	r0, 0x36	; 54
     fc4:	04 fc       	sbrc	r0, 4
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <i2c_stop+0x4>

}/* i2c_stop */
     fc8:	08 95       	ret

00000fca <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     fca:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     fcc:	84 e8       	ldi	r24, 0x84	; 132
     fce:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     fd0:	06 b6       	in	r0, 0x36	; 54
     fd2:	07 fe       	sbrs	r0, 7
     fd4:	fd cf       	rjmp	.-6      	; 0xfd0 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     fd6:	91 b1       	in	r25, 0x01	; 1
     fd8:	98 7f       	andi	r25, 0xF8	; 248
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	98 32       	cpi	r25, 0x28	; 40
     fde:	09 f4       	brne	.+2      	; 0xfe2 <i2c_write+0x18>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     fe2:	08 95       	ret

00000fe4 <sprintf>:
     fe4:	ae e0       	ldi	r26, 0x0E	; 14
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 ef       	ldi	r30, 0xF8	; 248
     fea:	f7 e0       	ldi	r31, 0x07	; 7
     fec:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__prologue_saves__+0x1c>
     ff0:	0d 89       	ldd	r16, Y+21	; 0x15
     ff2:	1e 89       	ldd	r17, Y+22	; 0x16
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	1a 83       	std	Y+2, r17	; 0x02
     ffa:	09 83       	std	Y+1, r16	; 0x01
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f e7       	ldi	r25, 0x7F	; 127
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	ae 01       	movw	r20, r28
    1006:	47 5e       	subi	r20, 0xE7	; 231
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	6f 89       	ldd	r22, Y+23	; 0x17
    100c:	78 8d       	ldd	r23, Y+24	; 0x18
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	0e 94 14 08 	call	0x1028	; 0x1028 <vfprintf>
    1016:	ef 81       	ldd	r30, Y+7	; 0x07
    1018:	f8 85       	ldd	r31, Y+8	; 0x08
    101a:	e0 0f       	add	r30, r16
    101c:	f1 1f       	adc	r31, r17
    101e:	10 82       	st	Z, r1
    1020:	2e 96       	adiw	r28, 0x0e	; 14
    1022:	e4 e0       	ldi	r30, 0x04	; 4
    1024:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__epilogue_restores__+0x1c>

00001028 <vfprintf>:
    1028:	ab e0       	ldi	r26, 0x0B	; 11
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e1       	ldi	r30, 0x1A	; 26
    102e:	f8 e0       	ldi	r31, 0x08	; 8
    1030:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__prologue_saves__>
    1034:	6c 01       	movw	r12, r24
    1036:	7b 01       	movw	r14, r22
    1038:	8a 01       	movw	r16, r20
    103a:	fc 01       	movw	r30, r24
    103c:	17 82       	std	Z+7, r1	; 0x07
    103e:	16 82       	std	Z+6, r1	; 0x06
    1040:	83 81       	ldd	r24, Z+3	; 0x03
    1042:	81 ff       	sbrs	r24, 1
    1044:	cc c1       	rjmp	.+920    	; 0x13de <vfprintf+0x3b6>
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	3c 01       	movw	r6, r24
    104c:	f6 01       	movw	r30, r12
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	f7 01       	movw	r30, r14
    1052:	93 fd       	sbrc	r25, 3
    1054:	85 91       	lpm	r24, Z+
    1056:	93 ff       	sbrs	r25, 3
    1058:	81 91       	ld	r24, Z+
    105a:	7f 01       	movw	r14, r30
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <vfprintf+0x3a>
    1060:	ba c1       	rjmp	.+884    	; 0x13d6 <vfprintf+0x3ae>
    1062:	85 32       	cpi	r24, 0x25	; 37
    1064:	39 f4       	brne	.+14     	; 0x1074 <vfprintf+0x4c>
    1066:	93 fd       	sbrc	r25, 3
    1068:	85 91       	lpm	r24, Z+
    106a:	93 ff       	sbrs	r25, 3
    106c:	81 91       	ld	r24, Z+
    106e:	7f 01       	movw	r14, r30
    1070:	85 32       	cpi	r24, 0x25	; 37
    1072:	29 f4       	brne	.+10     	; 0x107e <vfprintf+0x56>
    1074:	b6 01       	movw	r22, r12
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    107c:	e7 cf       	rjmp	.-50     	; 0x104c <vfprintf+0x24>
    107e:	91 2c       	mov	r9, r1
    1080:	21 2c       	mov	r2, r1
    1082:	31 2c       	mov	r3, r1
    1084:	ff e1       	ldi	r31, 0x1F	; 31
    1086:	f3 15       	cp	r31, r3
    1088:	d8 f0       	brcs	.+54     	; 0x10c0 <vfprintf+0x98>
    108a:	8b 32       	cpi	r24, 0x2B	; 43
    108c:	79 f0       	breq	.+30     	; 0x10ac <vfprintf+0x84>
    108e:	38 f4       	brcc	.+14     	; 0x109e <vfprintf+0x76>
    1090:	80 32       	cpi	r24, 0x20	; 32
    1092:	79 f0       	breq	.+30     	; 0x10b2 <vfprintf+0x8a>
    1094:	83 32       	cpi	r24, 0x23	; 35
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <vfprintf+0x98>
    1098:	23 2d       	mov	r18, r3
    109a:	20 61       	ori	r18, 0x10	; 16
    109c:	1d c0       	rjmp	.+58     	; 0x10d8 <vfprintf+0xb0>
    109e:	8d 32       	cpi	r24, 0x2D	; 45
    10a0:	61 f0       	breq	.+24     	; 0x10ba <vfprintf+0x92>
    10a2:	80 33       	cpi	r24, 0x30	; 48
    10a4:	69 f4       	brne	.+26     	; 0x10c0 <vfprintf+0x98>
    10a6:	23 2d       	mov	r18, r3
    10a8:	21 60       	ori	r18, 0x01	; 1
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <vfprintf+0xb0>
    10ac:	83 2d       	mov	r24, r3
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	38 2e       	mov	r3, r24
    10b2:	e3 2d       	mov	r30, r3
    10b4:	e4 60       	ori	r30, 0x04	; 4
    10b6:	3e 2e       	mov	r3, r30
    10b8:	2a c0       	rjmp	.+84     	; 0x110e <vfprintf+0xe6>
    10ba:	f3 2d       	mov	r31, r3
    10bc:	f8 60       	ori	r31, 0x08	; 8
    10be:	1d c0       	rjmp	.+58     	; 0x10fa <vfprintf+0xd2>
    10c0:	37 fc       	sbrc	r3, 7
    10c2:	2d c0       	rjmp	.+90     	; 0x111e <vfprintf+0xf6>
    10c4:	20 ed       	ldi	r18, 0xD0	; 208
    10c6:	28 0f       	add	r18, r24
    10c8:	2a 30       	cpi	r18, 0x0A	; 10
    10ca:	40 f0       	brcs	.+16     	; 0x10dc <vfprintf+0xb4>
    10cc:	8e 32       	cpi	r24, 0x2E	; 46
    10ce:	b9 f4       	brne	.+46     	; 0x10fe <vfprintf+0xd6>
    10d0:	36 fc       	sbrc	r3, 6
    10d2:	81 c1       	rjmp	.+770    	; 0x13d6 <vfprintf+0x3ae>
    10d4:	23 2d       	mov	r18, r3
    10d6:	20 64       	ori	r18, 0x40	; 64
    10d8:	32 2e       	mov	r3, r18
    10da:	19 c0       	rjmp	.+50     	; 0x110e <vfprintf+0xe6>
    10dc:	36 fe       	sbrs	r3, 6
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0xc4>
    10e0:	8a e0       	ldi	r24, 0x0A	; 10
    10e2:	98 9e       	mul	r9, r24
    10e4:	20 0d       	add	r18, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	92 2e       	mov	r9, r18
    10ea:	11 c0       	rjmp	.+34     	; 0x110e <vfprintf+0xe6>
    10ec:	ea e0       	ldi	r30, 0x0A	; 10
    10ee:	2e 9e       	mul	r2, r30
    10f0:	20 0d       	add	r18, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	22 2e       	mov	r2, r18
    10f6:	f3 2d       	mov	r31, r3
    10f8:	f0 62       	ori	r31, 0x20	; 32
    10fa:	3f 2e       	mov	r3, r31
    10fc:	08 c0       	rjmp	.+16     	; 0x110e <vfprintf+0xe6>
    10fe:	8c 36       	cpi	r24, 0x6C	; 108
    1100:	21 f4       	brne	.+8      	; 0x110a <vfprintf+0xe2>
    1102:	83 2d       	mov	r24, r3
    1104:	80 68       	ori	r24, 0x80	; 128
    1106:	38 2e       	mov	r3, r24
    1108:	02 c0       	rjmp	.+4      	; 0x110e <vfprintf+0xe6>
    110a:	88 36       	cpi	r24, 0x68	; 104
    110c:	41 f4       	brne	.+16     	; 0x111e <vfprintf+0xf6>
    110e:	f7 01       	movw	r30, r14
    1110:	93 fd       	sbrc	r25, 3
    1112:	85 91       	lpm	r24, Z+
    1114:	93 ff       	sbrs	r25, 3
    1116:	81 91       	ld	r24, Z+
    1118:	7f 01       	movw	r14, r30
    111a:	81 11       	cpse	r24, r1
    111c:	b3 cf       	rjmp	.-154    	; 0x1084 <vfprintf+0x5c>
    111e:	98 2f       	mov	r25, r24
    1120:	9f 7d       	andi	r25, 0xDF	; 223
    1122:	95 54       	subi	r25, 0x45	; 69
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	28 f4       	brcc	.+10     	; 0x1132 <vfprintf+0x10a>
    1128:	0c 5f       	subi	r16, 0xFC	; 252
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	9f e3       	ldi	r25, 0x3F	; 63
    112e:	99 83       	std	Y+1, r25	; 0x01
    1130:	0d c0       	rjmp	.+26     	; 0x114c <vfprintf+0x124>
    1132:	83 36       	cpi	r24, 0x63	; 99
    1134:	31 f0       	breq	.+12     	; 0x1142 <vfprintf+0x11a>
    1136:	83 37       	cpi	r24, 0x73	; 115
    1138:	71 f0       	breq	.+28     	; 0x1156 <vfprintf+0x12e>
    113a:	83 35       	cpi	r24, 0x53	; 83
    113c:	09 f0       	breq	.+2      	; 0x1140 <vfprintf+0x118>
    113e:	59 c0       	rjmp	.+178    	; 0x11f2 <vfprintf+0x1ca>
    1140:	21 c0       	rjmp	.+66     	; 0x1184 <vfprintf+0x15c>
    1142:	f8 01       	movw	r30, r16
    1144:	80 81       	ld	r24, Z
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	0e 5f       	subi	r16, 0xFE	; 254
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	88 24       	eor	r8, r8
    114e:	83 94       	inc	r8
    1150:	91 2c       	mov	r9, r1
    1152:	53 01       	movw	r10, r6
    1154:	13 c0       	rjmp	.+38     	; 0x117c <vfprintf+0x154>
    1156:	28 01       	movw	r4, r16
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	4f 0e       	add	r4, r31
    115c:	51 1c       	adc	r5, r1
    115e:	f8 01       	movw	r30, r16
    1160:	a0 80       	ld	r10, Z
    1162:	b1 80       	ldd	r11, Z+1	; 0x01
    1164:	36 fe       	sbrs	r3, 6
    1166:	03 c0       	rjmp	.+6      	; 0x116e <vfprintf+0x146>
    1168:	69 2d       	mov	r22, r9
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <vfprintf+0x14a>
    116e:	6f ef       	ldi	r22, 0xFF	; 255
    1170:	7f ef       	ldi	r23, 0xFF	; 255
    1172:	c5 01       	movw	r24, r10
    1174:	0e 94 00 0a 	call	0x1400	; 0x1400 <strnlen>
    1178:	4c 01       	movw	r8, r24
    117a:	82 01       	movw	r16, r4
    117c:	f3 2d       	mov	r31, r3
    117e:	ff 77       	andi	r31, 0x7F	; 127
    1180:	3f 2e       	mov	r3, r31
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <vfprintf+0x188>
    1184:	28 01       	movw	r4, r16
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	42 0e       	add	r4, r18
    118a:	51 1c       	adc	r5, r1
    118c:	f8 01       	movw	r30, r16
    118e:	a0 80       	ld	r10, Z
    1190:	b1 80       	ldd	r11, Z+1	; 0x01
    1192:	36 fe       	sbrs	r3, 6
    1194:	03 c0       	rjmp	.+6      	; 0x119c <vfprintf+0x174>
    1196:	69 2d       	mov	r22, r9
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0x178>
    119c:	6f ef       	ldi	r22, 0xFF	; 255
    119e:	7f ef       	ldi	r23, 0xFF	; 255
    11a0:	c5 01       	movw	r24, r10
    11a2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <strnlen_P>
    11a6:	4c 01       	movw	r8, r24
    11a8:	f3 2d       	mov	r31, r3
    11aa:	f0 68       	ori	r31, 0x80	; 128
    11ac:	3f 2e       	mov	r3, r31
    11ae:	82 01       	movw	r16, r4
    11b0:	33 fc       	sbrc	r3, 3
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <vfprintf+0x1c2>
    11b4:	82 2d       	mov	r24, r2
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 16       	cp	r8, r24
    11ba:	99 06       	cpc	r9, r25
    11bc:	b0 f4       	brcc	.+44     	; 0x11ea <vfprintf+0x1c2>
    11be:	b6 01       	movw	r22, r12
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    11c8:	2a 94       	dec	r2
    11ca:	f4 cf       	rjmp	.-24     	; 0x11b4 <vfprintf+0x18c>
    11cc:	f5 01       	movw	r30, r10
    11ce:	37 fc       	sbrc	r3, 7
    11d0:	85 91       	lpm	r24, Z+
    11d2:	37 fe       	sbrs	r3, 7
    11d4:	81 91       	ld	r24, Z+
    11d6:	5f 01       	movw	r10, r30
    11d8:	b6 01       	movw	r22, r12
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    11e0:	21 10       	cpse	r2, r1
    11e2:	2a 94       	dec	r2
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	82 1a       	sub	r8, r18
    11e8:	91 08       	sbc	r9, r1
    11ea:	81 14       	cp	r8, r1
    11ec:	91 04       	cpc	r9, r1
    11ee:	71 f7       	brne	.-36     	; 0x11cc <vfprintf+0x1a4>
    11f0:	e8 c0       	rjmp	.+464    	; 0x13c2 <vfprintf+0x39a>
    11f2:	84 36       	cpi	r24, 0x64	; 100
    11f4:	11 f0       	breq	.+4      	; 0x11fa <vfprintf+0x1d2>
    11f6:	89 36       	cpi	r24, 0x69	; 105
    11f8:	41 f5       	brne	.+80     	; 0x124a <vfprintf+0x222>
    11fa:	f8 01       	movw	r30, r16
    11fc:	37 fe       	sbrs	r3, 7
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <vfprintf+0x1e6>
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	0c 5f       	subi	r16, 0xFC	; 252
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	08 c0       	rjmp	.+16     	; 0x121e <vfprintf+0x1f6>
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	07 2e       	mov	r0, r23
    1214:	00 0c       	add	r0, r0
    1216:	88 0b       	sbc	r24, r24
    1218:	99 0b       	sbc	r25, r25
    121a:	0e 5f       	subi	r16, 0xFE	; 254
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	f3 2d       	mov	r31, r3
    1220:	ff 76       	andi	r31, 0x6F	; 111
    1222:	3f 2e       	mov	r3, r31
    1224:	97 ff       	sbrs	r25, 7
    1226:	09 c0       	rjmp	.+18     	; 0x123a <vfprintf+0x212>
    1228:	90 95       	com	r25
    122a:	80 95       	com	r24
    122c:	70 95       	com	r23
    122e:	61 95       	neg	r22
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	f0 68       	ori	r31, 0x80	; 128
    1238:	3f 2e       	mov	r3, r31
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	a3 01       	movw	r20, r6
    1240:	0e 94 47 0a 	call	0x148e	; 0x148e <__ultoa_invert>
    1244:	88 2e       	mov	r8, r24
    1246:	86 18       	sub	r8, r6
    1248:	45 c0       	rjmp	.+138    	; 0x12d4 <vfprintf+0x2ac>
    124a:	85 37       	cpi	r24, 0x75	; 117
    124c:	31 f4       	brne	.+12     	; 0x125a <vfprintf+0x232>
    124e:	23 2d       	mov	r18, r3
    1250:	2f 7e       	andi	r18, 0xEF	; 239
    1252:	b2 2e       	mov	r11, r18
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	25 c0       	rjmp	.+74     	; 0x12a4 <vfprintf+0x27c>
    125a:	93 2d       	mov	r25, r3
    125c:	99 7f       	andi	r25, 0xF9	; 249
    125e:	b9 2e       	mov	r11, r25
    1260:	8f 36       	cpi	r24, 0x6F	; 111
    1262:	c1 f0       	breq	.+48     	; 0x1294 <vfprintf+0x26c>
    1264:	18 f4       	brcc	.+6      	; 0x126c <vfprintf+0x244>
    1266:	88 35       	cpi	r24, 0x58	; 88
    1268:	79 f0       	breq	.+30     	; 0x1288 <vfprintf+0x260>
    126a:	b5 c0       	rjmp	.+362    	; 0x13d6 <vfprintf+0x3ae>
    126c:	80 37       	cpi	r24, 0x70	; 112
    126e:	19 f0       	breq	.+6      	; 0x1276 <vfprintf+0x24e>
    1270:	88 37       	cpi	r24, 0x78	; 120
    1272:	21 f0       	breq	.+8      	; 0x127c <vfprintf+0x254>
    1274:	b0 c0       	rjmp	.+352    	; 0x13d6 <vfprintf+0x3ae>
    1276:	e9 2f       	mov	r30, r25
    1278:	e0 61       	ori	r30, 0x10	; 16
    127a:	be 2e       	mov	r11, r30
    127c:	b4 fe       	sbrs	r11, 4
    127e:	0d c0       	rjmp	.+26     	; 0x129a <vfprintf+0x272>
    1280:	fb 2d       	mov	r31, r11
    1282:	f4 60       	ori	r31, 0x04	; 4
    1284:	bf 2e       	mov	r11, r31
    1286:	09 c0       	rjmp	.+18     	; 0x129a <vfprintf+0x272>
    1288:	34 fe       	sbrs	r3, 4
    128a:	0a c0       	rjmp	.+20     	; 0x12a0 <vfprintf+0x278>
    128c:	29 2f       	mov	r18, r25
    128e:	26 60       	ori	r18, 0x06	; 6
    1290:	b2 2e       	mov	r11, r18
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <vfprintf+0x278>
    1294:	28 e0       	ldi	r18, 0x08	; 8
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <vfprintf+0x27c>
    129a:	20 e1       	ldi	r18, 0x10	; 16
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x27c>
    12a0:	20 e1       	ldi	r18, 0x10	; 16
    12a2:	32 e0       	ldi	r19, 0x02	; 2
    12a4:	f8 01       	movw	r30, r16
    12a6:	b7 fe       	sbrs	r11, 7
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <vfprintf+0x290>
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	0c 5f       	subi	r16, 0xFC	; 252
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <vfprintf+0x29c>
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 5f       	subi	r16, 0xFE	; 254
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	a3 01       	movw	r20, r6
    12c6:	0e 94 47 0a 	call	0x148e	; 0x148e <__ultoa_invert>
    12ca:	88 2e       	mov	r8, r24
    12cc:	86 18       	sub	r8, r6
    12ce:	fb 2d       	mov	r31, r11
    12d0:	ff 77       	andi	r31, 0x7F	; 127
    12d2:	3f 2e       	mov	r3, r31
    12d4:	36 fe       	sbrs	r3, 6
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <vfprintf+0x2ca>
    12d8:	23 2d       	mov	r18, r3
    12da:	2e 7f       	andi	r18, 0xFE	; 254
    12dc:	a2 2e       	mov	r10, r18
    12de:	89 14       	cp	r8, r9
    12e0:	58 f4       	brcc	.+22     	; 0x12f8 <vfprintf+0x2d0>
    12e2:	34 fe       	sbrs	r3, 4
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <vfprintf+0x2d4>
    12e6:	32 fc       	sbrc	r3, 2
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <vfprintf+0x2d4>
    12ea:	83 2d       	mov	r24, r3
    12ec:	8e 7e       	andi	r24, 0xEE	; 238
    12ee:	a8 2e       	mov	r10, r24
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <vfprintf+0x2d4>
    12f2:	b8 2c       	mov	r11, r8
    12f4:	a3 2c       	mov	r10, r3
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <vfprintf+0x2d6>
    12f8:	b8 2c       	mov	r11, r8
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <vfprintf+0x2d6>
    12fc:	b9 2c       	mov	r11, r9
    12fe:	a4 fe       	sbrs	r10, 4
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <vfprintf+0x2f8>
    1302:	fe 01       	movw	r30, r28
    1304:	e8 0d       	add	r30, r8
    1306:	f1 1d       	adc	r31, r1
    1308:	80 81       	ld	r24, Z
    130a:	80 33       	cpi	r24, 0x30	; 48
    130c:	21 f4       	brne	.+8      	; 0x1316 <vfprintf+0x2ee>
    130e:	9a 2d       	mov	r25, r10
    1310:	99 7e       	andi	r25, 0xE9	; 233
    1312:	a9 2e       	mov	r10, r25
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <vfprintf+0x300>
    1316:	a2 fe       	sbrs	r10, 2
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <vfprintf+0x2fe>
    131a:	b3 94       	inc	r11
    131c:	b3 94       	inc	r11
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <vfprintf+0x300>
    1320:	8a 2d       	mov	r24, r10
    1322:	86 78       	andi	r24, 0x86	; 134
    1324:	09 f0       	breq	.+2      	; 0x1328 <vfprintf+0x300>
    1326:	b3 94       	inc	r11
    1328:	a3 fc       	sbrc	r10, 3
    132a:	11 c0       	rjmp	.+34     	; 0x134e <vfprintf+0x326>
    132c:	a0 fe       	sbrs	r10, 0
    132e:	06 c0       	rjmp	.+12     	; 0x133c <vfprintf+0x314>
    1330:	b2 14       	cp	r11, r2
    1332:	88 f4       	brcc	.+34     	; 0x1356 <vfprintf+0x32e>
    1334:	28 0c       	add	r2, r8
    1336:	92 2c       	mov	r9, r2
    1338:	9b 18       	sub	r9, r11
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <vfprintf+0x330>
    133c:	b2 14       	cp	r11, r2
    133e:	60 f4       	brcc	.+24     	; 0x1358 <vfprintf+0x330>
    1340:	b6 01       	movw	r22, r12
    1342:	80 e2       	ldi	r24, 0x20	; 32
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    134a:	b3 94       	inc	r11
    134c:	f7 cf       	rjmp	.-18     	; 0x133c <vfprintf+0x314>
    134e:	b2 14       	cp	r11, r2
    1350:	18 f4       	brcc	.+6      	; 0x1358 <vfprintf+0x330>
    1352:	2b 18       	sub	r2, r11
    1354:	02 c0       	rjmp	.+4      	; 0x135a <vfprintf+0x332>
    1356:	98 2c       	mov	r9, r8
    1358:	21 2c       	mov	r2, r1
    135a:	a4 fe       	sbrs	r10, 4
    135c:	10 c0       	rjmp	.+32     	; 0x137e <vfprintf+0x356>
    135e:	b6 01       	movw	r22, r12
    1360:	80 e3       	ldi	r24, 0x30	; 48
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    1368:	a2 fe       	sbrs	r10, 2
    136a:	17 c0       	rjmp	.+46     	; 0x139a <vfprintf+0x372>
    136c:	a1 fc       	sbrc	r10, 1
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <vfprintf+0x34e>
    1370:	88 e7       	ldi	r24, 0x78	; 120
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <vfprintf+0x352>
    1376:	88 e5       	ldi	r24, 0x58	; 88
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	b6 01       	movw	r22, r12
    137c:	0c c0       	rjmp	.+24     	; 0x1396 <vfprintf+0x36e>
    137e:	8a 2d       	mov	r24, r10
    1380:	86 78       	andi	r24, 0x86	; 134
    1382:	59 f0       	breq	.+22     	; 0x139a <vfprintf+0x372>
    1384:	a1 fe       	sbrs	r10, 1
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x364>
    1388:	8b e2       	ldi	r24, 0x2B	; 43
    138a:	01 c0       	rjmp	.+2      	; 0x138e <vfprintf+0x366>
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	a7 fc       	sbrc	r10, 7
    1390:	8d e2       	ldi	r24, 0x2D	; 45
    1392:	b6 01       	movw	r22, r12
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    139a:	89 14       	cp	r8, r9
    139c:	38 f4       	brcc	.+14     	; 0x13ac <vfprintf+0x384>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    13a8:	9a 94       	dec	r9
    13aa:	f7 cf       	rjmp	.-18     	; 0x139a <vfprintf+0x372>
    13ac:	8a 94       	dec	r8
    13ae:	f3 01       	movw	r30, r6
    13b0:	e8 0d       	add	r30, r8
    13b2:	f1 1d       	adc	r31, r1
    13b4:	80 81       	ld	r24, Z
    13b6:	b6 01       	movw	r22, r12
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    13be:	81 10       	cpse	r8, r1
    13c0:	f5 cf       	rjmp	.-22     	; 0x13ac <vfprintf+0x384>
    13c2:	22 20       	and	r2, r2
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <vfprintf+0x3a0>
    13c6:	42 ce       	rjmp	.-892    	; 0x104c <vfprintf+0x24>
    13c8:	b6 01       	movw	r22, r12
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    13d2:	2a 94       	dec	r2
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <vfprintf+0x39a>
    13d6:	f6 01       	movw	r30, r12
    13d8:	86 81       	ldd	r24, Z+6	; 0x06
    13da:	97 81       	ldd	r25, Z+7	; 0x07
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <vfprintf+0x3ba>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	2b 96       	adiw	r28, 0x0b	; 11
    13e4:	e2 e1       	ldi	r30, 0x12	; 18
    13e6:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__epilogue_restores__>

000013ea <strnlen_P>:
    13ea:	fc 01       	movw	r30, r24
    13ec:	05 90       	lpm	r0, Z+
    13ee:	61 50       	subi	r22, 0x01	; 1
    13f0:	70 40       	sbci	r23, 0x00	; 0
    13f2:	01 10       	cpse	r0, r1
    13f4:	d8 f7       	brcc	.-10     	; 0x13ec <strnlen_P+0x2>
    13f6:	80 95       	com	r24
    13f8:	90 95       	com	r25
    13fa:	8e 0f       	add	r24, r30
    13fc:	9f 1f       	adc	r25, r31
    13fe:	08 95       	ret

00001400 <strnlen>:
    1400:	fc 01       	movw	r30, r24
    1402:	61 50       	subi	r22, 0x01	; 1
    1404:	70 40       	sbci	r23, 0x00	; 0
    1406:	01 90       	ld	r0, Z+
    1408:	01 10       	cpse	r0, r1
    140a:	d8 f7       	brcc	.-10     	; 0x1402 <strnlen+0x2>
    140c:	80 95       	com	r24
    140e:	90 95       	com	r25
    1410:	8e 0f       	add	r24, r30
    1412:	9f 1f       	adc	r25, r31
    1414:	08 95       	ret

00001416 <fputc>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	fb 01       	movw	r30, r22
    1420:	23 81       	ldd	r18, Z+3	; 0x03
    1422:	21 fd       	sbrc	r18, 1
    1424:	03 c0       	rjmp	.+6      	; 0x142c <fputc+0x16>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	2c c0       	rjmp	.+88     	; 0x1484 <fputc+0x6e>
    142c:	22 ff       	sbrs	r18, 2
    142e:	16 c0       	rjmp	.+44     	; 0x145c <fputc+0x46>
    1430:	46 81       	ldd	r20, Z+6	; 0x06
    1432:	57 81       	ldd	r21, Z+7	; 0x07
    1434:	24 81       	ldd	r18, Z+4	; 0x04
    1436:	35 81       	ldd	r19, Z+5	; 0x05
    1438:	42 17       	cp	r20, r18
    143a:	53 07       	cpc	r21, r19
    143c:	44 f4       	brge	.+16     	; 0x144e <fputc+0x38>
    143e:	a0 81       	ld	r26, Z
    1440:	b1 81       	ldd	r27, Z+1	; 0x01
    1442:	9d 01       	movw	r18, r26
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	31 83       	std	Z+1, r19	; 0x01
    144a:	20 83       	st	Z, r18
    144c:	8c 93       	st	X, r24
    144e:	26 81       	ldd	r18, Z+6	; 0x06
    1450:	37 81       	ldd	r19, Z+7	; 0x07
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	37 83       	std	Z+7, r19	; 0x07
    1458:	26 83       	std	Z+6, r18	; 0x06
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <fputc+0x6e>
    145c:	8b 01       	movw	r16, r22
    145e:	ec 01       	movw	r28, r24
    1460:	fb 01       	movw	r30, r22
    1462:	00 84       	ldd	r0, Z+8	; 0x08
    1464:	f1 85       	ldd	r31, Z+9	; 0x09
    1466:	e0 2d       	mov	r30, r0
    1468:	09 95       	icall
    146a:	89 2b       	or	r24, r25
    146c:	e1 f6       	brne	.-72     	; 0x1426 <fputc+0x10>
    146e:	d8 01       	movw	r26, r16
    1470:	16 96       	adiw	r26, 0x06	; 6
    1472:	8d 91       	ld	r24, X+
    1474:	9c 91       	ld	r25, X
    1476:	17 97       	sbiw	r26, 0x07	; 7
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	17 96       	adiw	r26, 0x07	; 7
    147c:	9c 93       	st	X, r25
    147e:	8e 93       	st	-X, r24
    1480:	16 97       	sbiw	r26, 0x06	; 6
    1482:	ce 01       	movw	r24, r28
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <__ultoa_invert>:
    148e:	fa 01       	movw	r30, r20
    1490:	aa 27       	eor	r26, r26
    1492:	28 30       	cpi	r18, 0x08	; 8
    1494:	51 f1       	breq	.+84     	; 0x14ea <__ultoa_invert+0x5c>
    1496:	20 31       	cpi	r18, 0x10	; 16
    1498:	81 f1       	breq	.+96     	; 0x14fa <__ultoa_invert+0x6c>
    149a:	e8 94       	clt
    149c:	6f 93       	push	r22
    149e:	6e 7f       	andi	r22, 0xFE	; 254
    14a0:	6e 5f       	subi	r22, 0xFE	; 254
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	8f 4f       	sbci	r24, 0xFF	; 255
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	af 4f       	sbci	r26, 0xFF	; 255
    14aa:	b1 e0       	ldi	r27, 0x01	; 1
    14ac:	3e d0       	rcall	.+124    	; 0x152a <__ultoa_invert+0x9c>
    14ae:	b4 e0       	ldi	r27, 0x04	; 4
    14b0:	3c d0       	rcall	.+120    	; 0x152a <__ultoa_invert+0x9c>
    14b2:	67 0f       	add	r22, r23
    14b4:	78 1f       	adc	r23, r24
    14b6:	89 1f       	adc	r24, r25
    14b8:	9a 1f       	adc	r25, r26
    14ba:	a1 1d       	adc	r26, r1
    14bc:	68 0f       	add	r22, r24
    14be:	79 1f       	adc	r23, r25
    14c0:	8a 1f       	adc	r24, r26
    14c2:	91 1d       	adc	r25, r1
    14c4:	a1 1d       	adc	r26, r1
    14c6:	6a 0f       	add	r22, r26
    14c8:	71 1d       	adc	r23, r1
    14ca:	81 1d       	adc	r24, r1
    14cc:	91 1d       	adc	r25, r1
    14ce:	a1 1d       	adc	r26, r1
    14d0:	20 d0       	rcall	.+64     	; 0x1512 <__ultoa_invert+0x84>
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <__ultoa_invert+0x48>
    14d4:	68 94       	set
    14d6:	3f 91       	pop	r19
    14d8:	2a e0       	ldi	r18, 0x0A	; 10
    14da:	26 9f       	mul	r18, r22
    14dc:	11 24       	eor	r1, r1
    14de:	30 19       	sub	r19, r0
    14e0:	30 5d       	subi	r19, 0xD0	; 208
    14e2:	31 93       	st	Z+, r19
    14e4:	de f6       	brtc	.-74     	; 0x149c <__ultoa_invert+0xe>
    14e6:	cf 01       	movw	r24, r30
    14e8:	08 95       	ret
    14ea:	46 2f       	mov	r20, r22
    14ec:	47 70       	andi	r20, 0x07	; 7
    14ee:	40 5d       	subi	r20, 0xD0	; 208
    14f0:	41 93       	st	Z+, r20
    14f2:	b3 e0       	ldi	r27, 0x03	; 3
    14f4:	0f d0       	rcall	.+30     	; 0x1514 <__ultoa_invert+0x86>
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <__ultoa_invert+0x5c>
    14f8:	f6 cf       	rjmp	.-20     	; 0x14e6 <__ultoa_invert+0x58>
    14fa:	46 2f       	mov	r20, r22
    14fc:	4f 70       	andi	r20, 0x0F	; 15
    14fe:	40 5d       	subi	r20, 0xD0	; 208
    1500:	4a 33       	cpi	r20, 0x3A	; 58
    1502:	18 f0       	brcs	.+6      	; 0x150a <__ultoa_invert+0x7c>
    1504:	49 5d       	subi	r20, 0xD9	; 217
    1506:	31 fd       	sbrc	r19, 1
    1508:	40 52       	subi	r20, 0x20	; 32
    150a:	41 93       	st	Z+, r20
    150c:	02 d0       	rcall	.+4      	; 0x1512 <__ultoa_invert+0x84>
    150e:	a9 f7       	brne	.-22     	; 0x14fa <__ultoa_invert+0x6c>
    1510:	ea cf       	rjmp	.-44     	; 0x14e6 <__ultoa_invert+0x58>
    1512:	b4 e0       	ldi	r27, 0x04	; 4
    1514:	a6 95       	lsr	r26
    1516:	97 95       	ror	r25
    1518:	87 95       	ror	r24
    151a:	77 95       	ror	r23
    151c:	67 95       	ror	r22
    151e:	ba 95       	dec	r27
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__ultoa_invert+0x86>
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	61 05       	cpc	r22, r1
    1526:	71 05       	cpc	r23, r1
    1528:	08 95       	ret
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	0a 2e       	mov	r0, r26
    1530:	06 94       	lsr	r0
    1532:	57 95       	ror	r21
    1534:	47 95       	ror	r20
    1536:	37 95       	ror	r19
    1538:	27 95       	ror	r18
    153a:	ba 95       	dec	r27
    153c:	c9 f7       	brne	.-14     	; 0x1530 <__ultoa_invert+0xa2>
    153e:	62 0f       	add	r22, r18
    1540:	73 1f       	adc	r23, r19
    1542:	84 1f       	adc	r24, r20
    1544:	95 1f       	adc	r25, r21
    1546:	a0 1d       	adc	r26, r0
    1548:	08 95       	ret

0000154a <__prologue_saves__>:
    154a:	2f 92       	push	r2
    154c:	3f 92       	push	r3
    154e:	4f 92       	push	r4
    1550:	5f 92       	push	r5
    1552:	6f 92       	push	r6
    1554:	7f 92       	push	r7
    1556:	8f 92       	push	r8
    1558:	9f 92       	push	r9
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	ca 1b       	sub	r28, r26
    1574:	db 0b       	sbc	r29, r27
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	09 94       	ijmp

00001582 <__epilogue_restores__>:
    1582:	2a 88       	ldd	r2, Y+18	; 0x12
    1584:	39 88       	ldd	r3, Y+17	; 0x11
    1586:	48 88       	ldd	r4, Y+16	; 0x10
    1588:	5f 84       	ldd	r5, Y+15	; 0x0f
    158a:	6e 84       	ldd	r6, Y+14	; 0x0e
    158c:	7d 84       	ldd	r7, Y+13	; 0x0d
    158e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1590:	9b 84       	ldd	r9, Y+11	; 0x0b
    1592:	aa 84       	ldd	r10, Y+10	; 0x0a
    1594:	b9 84       	ldd	r11, Y+9	; 0x09
    1596:	c8 84       	ldd	r12, Y+8	; 0x08
    1598:	df 80       	ldd	r13, Y+7	; 0x07
    159a:	ee 80       	ldd	r14, Y+6	; 0x06
    159c:	fd 80       	ldd	r15, Y+5	; 0x05
    159e:	0c 81       	ldd	r16, Y+4	; 0x04
    15a0:	1b 81       	ldd	r17, Y+3	; 0x03
    15a2:	aa 81       	ldd	r26, Y+2	; 0x02
    15a4:	b9 81       	ldd	r27, Y+1	; 0x01
    15a6:	ce 0f       	add	r28, r30
    15a8:	d1 1d       	adc	r29, r1
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	ed 01       	movw	r28, r26
    15b6:	08 95       	ret

000015b8 <_exit>:
    15b8:	f8 94       	cli

000015ba <__stop_program>:
    15ba:	ff cf       	rjmp	.-2      	; 0x15ba <__stop_program>
