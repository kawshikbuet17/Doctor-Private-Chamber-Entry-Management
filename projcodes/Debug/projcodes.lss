
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000166  00800060  00001644  000016d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008001c6  008001c6  0000183e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000343e  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001522  00000000  00000000  000050a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023ed  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  000089b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000960  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cb0  00000000  00000000  00009a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 06 	call	0xd6c	; 0xd6c <main>
      8a:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
      92:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
      96:	08 95       	ret

00000098 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
      98:	0f 93       	push	r16
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	2a 97       	sbiw	r28, 0x0a	; 10
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
      b0:	16 2f       	mov	r17, r22
      b2:	07 2f       	mov	r16, r23
	HC05_SendString(text);
      b4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	85 e6       	ldi	r24, 0x65	; 101
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	9f 93       	push	r25
      c2:	8f 93       	push	r24
      c4:	8e 01       	movw	r16, r28
      c6:	0f 5f       	subi	r16, 0xFF	; 255
      c8:	1f 4f       	sbci	r17, 0xFF	; 255
      ca:	1f 93       	push	r17
      cc:	0f 93       	push	r16
      ce:	0e 94 36 08 	call	0x106c	; 0x106c <sprintf>
	HC05_SendString(temp);
      d2:	c8 01       	movw	r24, r16
      d4:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
      d8:	8c e6       	ldi	r24, 0x6C	; 108
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	2a 96       	adiw	r28, 0x0a	; 10
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	08 95       	ret

00000102 <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	2a 97       	sbiw	r28, 0x0a	; 10
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     11c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     120:	fe 01       	movw	r30, r28
     122:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     128:	c8 01       	movw	r24, r16
     12a:	02 2e       	mov	r0, r18
     12c:	02 c0       	rjmp	.+4      	; 0x132 <Error_ErrorBin+0x30>
     12e:	95 95       	asr	r25
     130:	87 95       	ror	r24
     132:	0a 94       	dec	r0
     134:	e2 f7       	brpl	.-8      	; 0x12e <Error_ErrorBin+0x2c>
     136:	81 70       	andi	r24, 0x01	; 1
     138:	80 5d       	subi	r24, 0xD0	; 208
     13a:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     13c:	2f 5f       	subi	r18, 0xFF	; 255
     13e:	3f 4f       	sbci	r19, 0xFF	; 255
     140:	28 30       	cpi	r18, 0x08	; 8
     142:	31 05       	cpc	r19, r1
     144:	89 f7       	brne	.-30     	; 0x128 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     146:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     148:	ce 01       	movw	r24, r28
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	HC05_SendString("\r\n");
     150:	8c e6       	ldi	r24, 0x6C	; 108
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
     158:	2a 96       	adiw	r28, 0x0a	; 10
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	08 95       	ret

0000016e <HC05_Init_Data_Mode>:
}
char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	8b b9       	out	0x0b, r24	; 11
     172:	88 e1       	ldi	r24, 0x18	; 24
     174:	8a b9       	out	0x0a, r24	; 10
     176:	86 e8       	ldi	r24, 0x86	; 134
     178:	80 bd       	out	0x20, r24	; 32
     17a:	8c e0       	ldi	r24, 0x0C	; 12
     17c:	89 b9       	out	0x09, r24	; 9
     17e:	10 bc       	out	0x20, r1	; 32
     180:	08 95       	ret

00000182 <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     182:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     184:	5d 9b       	sbis	0x0b, 5	; 11
     186:	fe cf       	rjmp	.-4      	; 0x184 <HC05_SendChar+0x2>
}
     188:	08 95       	ret

0000018a <HC05_SendString>:
void HC05_SendString(char * s)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
	while(*s)
     190:	88 81       	ld	r24, Y
     192:	88 23       	and	r24, r24
     194:	31 f0       	breq	.+12     	; 0x1a2 <HC05_SendString+0x18>
     196:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     198:	0e 94 c1 00 	call	0x182	; 0x182 <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     19c:	89 91       	ld	r24, Y+
     19e:	81 11       	cpse	r24, r1
     1a0:	fb cf       	rjmp	.-10     	; 0x198 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     1a8:	8a b3       	in	r24, 0x1a	; 26
     1aa:	83 70       	andi	r24, 0x03	; 3
     1ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     1b2:	88 bb       	out	0x18, r24	; 24
     1b4:	08 95       	ret

000001b6 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     1b6:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <isNumber>
	isUpperCase = false;
     1ba:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <isUpperCase>
	position = 0;
     1be:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__data_end+0x1>
     1c2:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
	keyBuffer[position] = 0;
     1c6:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <keyBuffer>
     1ca:	08 95       	ret

000001cc <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	59 f4       	brne	.+22     	; 0x1e6 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     1d0:	8f e6       	ldi	r24, 0x6F	; 111
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
		position = 0;
     1d8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__data_end+0x1>
     1dc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
		keyBuffer[position]=0;
     1e0:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <keyBuffer>
     1e4:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     1e6:	fc 01       	movw	r30, r24
     1e8:	01 90       	ld	r0, Z+
     1ea:	00 20       	and	r0, r0
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <Keypad_WriteToBuffer+0x1c>
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	e8 1b       	sub	r30, r24
     1f2:	f9 0b       	sbc	r31, r25
     1f4:	e0 31       	cpi	r30, 0x10	; 16
     1f6:	f1 05       	cpc	r31, r1
     1f8:	28 f5       	brcc	.+74     	; 0x244 <Keypad_WriteToBuffer+0x78>
     1fa:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     1fc:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__data_end+0x1>
     200:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
     204:	1e 16       	cp	r1, r30
     206:	1f 06       	cpc	r1, r31
     208:	b4 f4       	brge	.+44     	; 0x236 <Keypad_WriteToBuffer+0x6a>
     20a:	fc 01       	movw	r30, r24
     20c:	aa ec       	ldi	r26, 0xCA	; 202
     20e:	b1 e0       	ldi	r27, 0x01	; 1
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     214:	81 91       	ld	r24, Z+
     216:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     218:	2f 5f       	subi	r18, 0xFF	; 255
     21a:	3f 4f       	sbci	r19, 0xFF	; 255
     21c:	30 93 c7 01 	sts	0x01C7, r19	; 0x8001c7 <__data_end+0x1>
     220:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <__data_end>
     224:	24 17       	cp	r18, r20
     226:	35 07       	cpc	r19, r21
     228:	ac f3       	brlt	.-22     	; 0x214 <Keypad_WriteToBuffer+0x48>
     22a:	14 16       	cp	r1, r20
     22c:	15 06       	cpc	r1, r21
     22e:	2c f0       	brlt	.+10     	; 0x23a <Keypad_WriteToBuffer+0x6e>
     230:	41 e0       	ldi	r20, 0x01	; 1
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <Keypad_WriteToBuffer+0x6e>
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     23a:	fa 01       	movw	r30, r20
     23c:	e6 53       	subi	r30, 0x36	; 54
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	10 82       	st	Z, r1
	}
}
     242:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     244:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__data_end+0x1>
     248:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     24c:	40 e1       	ldi	r20, 0x10	; 16
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	dc cf       	rjmp	.-72     	; 0x20a <Keypad_WriteToBuffer+0x3e>

00000252 <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <isNumber>
     258:	08 95       	ret

0000025a <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     25a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <isNumber>
     25e:	81 11       	cpse	r24, r1
     260:	07 c0       	rjmp	.+14     	; 0x270 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     262:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <isUpperCase>
     266:	81 11       	cpse	r24, r1
     268:	06 c0       	rjmp	.+12     	; 0x276 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     26a:	87 e8       	ldi	r24, 0x87	; 135
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     270:	8f e7       	ldi	r24, 0x7F	; 127
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     276:	83 e8       	ldi	r24, 0x83	; 131
     278:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     27a:	08 95       	ret

0000027c <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     280:	0e 94 2d 01 	call	0x25a	; 0x25a <Keypad_GetMode>
     284:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     286:	fc 01       	movw	r30, r24
     288:	01 90       	ld	r0, Z+
     28a:	00 20       	and	r0, r0
     28c:	e9 f7       	brne	.-6      	; 0x288 <Keypad_UpdateKeyMode+0xc>
     28e:	ac 01       	movw	r20, r24
     290:	4e 1b       	sub	r20, r30
     292:	5f 0b       	sbc	r21, r31
     294:	4f 5e       	subi	r20, 0xEF	; 239
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 ce 02 	call	0x59c	; 0x59c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     2a2:	be 01       	movw	r22, r28
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 bc 02 	call	0x578	; 0x578 <Lcd_Prints>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     2b0:	89 b3       	in	r24, 0x19	; 25
}
     2b2:	82 95       	swap	r24
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	08 95       	ret

000002b8 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
	int pin = PINA >> 4;
     2be:	c9 b3       	in	r28, 0x19	; 25
     2c0:	c2 95       	swap	r28
     2c2:	cf 70       	andi	r28, 0x0F	; 15
     2c4:	0c 2f       	mov	r16, r28
     2c6:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     2c8:	b8 01       	movw	r22, r16
     2ca:	8b e8       	ldi	r24, 0x8B	; 139
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     2d2:	c0 fd       	sbrc	r28, 0
     2d4:	0c c0       	rjmp	.+24     	; 0x2ee <Keypad_GetRow+0x36>
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	98 01       	movw	r18, r16
     2dc:	08 2e       	mov	r0, r24
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <Keypad_GetRow+0x2c>
     2e0:	35 95       	asr	r19
     2e2:	27 95       	ror	r18
     2e4:	0a 94       	dec	r0
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <Keypad_GetRow+0x28>
     2e8:	20 ff       	sbrs	r18, 0
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <Keypad_GetRow+0x3c>
     2ec:	0c c0       	rjmp	.+24     	; 0x306 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     2f2:	09 c0       	rjmp	.+18     	; 0x306 <Keypad_GetRow+0x4e>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	91 05       	cpc	r25, r1
     2fa:	79 f7       	brne	.-34     	; 0x2da <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     2fc:	84 e9       	ldi	r24, 0x94	; 148
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	return -1;
     304:	8f ef       	ldi	r24, 0xFF	; 255
}
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
	int i = 7;
     316:	c7 e0       	ldi	r28, 0x07	; 7
     318:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     31a:	01 e0       	ldi	r16, 0x01	; 1
     31c:	10 e0       	ldi	r17, 0x00	; 0
     31e:	28 b3       	in	r18, 0x18	; 24
     320:	c8 01       	movw	r24, r16
     322:	0c 2e       	mov	r0, r28
     324:	02 c0       	rjmp	.+4      	; 0x32a <Keypad_GetCol+0x1c>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	0a 94       	dec	r0
     32c:	e2 f7       	brpl	.-8      	; 0x326 <Keypad_GetCol+0x18>
     32e:	82 27       	eor	r24, r18
     330:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     332:	66 b3       	in	r22, 0x16	; 22
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	82 ea       	ldi	r24, 0xA2	; 162
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 81 00 	call	0x102	; 0x102 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     33e:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     340:	82 95       	swap	r24
     342:	8f 70       	andi	r24, 0x0F	; 15
     344:	11 f4       	brne	.+4      	; 0x34a <Keypad_GetCol+0x3c>
		{
			return i;
     346:	8c 2f       	mov	r24, r28
     348:	07 c0       	rjmp	.+14     	; 0x358 <Keypad_GetCol+0x4a>
		}
		i--;
     34a:	21 97       	sbiw	r28, 0x01	; 1
     34c:	40 f7       	brcc	.-48     	; 0x31e <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     34e:	88 ea       	ldi	r24, 0xA8	; 168
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	// report error
	return -1;
     356:	8f ef       	ldi	r24, 0xFF	; 255
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	08 95       	ret

00000362 <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     362:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <__data_end>
     366:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <__data_end+0x1>
     36a:	f9 01       	movw	r30, r18
     36c:	e6 53       	subi	r30, 0x36	; 54
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 83       	st	Z, r24
	if(position < 16)
     372:	20 31       	cpi	r18, 0x10	; 16
     374:	31 05       	cpc	r19, r1
     376:	34 f4       	brge	.+12     	; 0x384 <addChar+0x22>
		position = position +1;
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	30 93 c7 01 	sts	0x01C7, r19	; 0x8001c7 <__data_end+0x1>
     380:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <__data_end>
	keyBuffer[position] = 0;
     384:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__data_end>
     388:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <__data_end+0x1>
     38c:	e6 53       	subi	r30, 0x36	; 54
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	10 82       	st	Z, r1
     392:	08 95       	ret

00000394 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     394:	cf 93       	push	r28
     396:	c8 2f       	mov	r28, r24
	if(key >= 30)
     398:	8e 31       	cpi	r24, 0x1E	; 30
     39a:	24 f0       	brlt	.+8      	; 0x3a4 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     39c:	86 eb       	ldi	r24, 0xB6	; 182
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	if(key == 29) 
     3a4:	cd 31       	cpi	r28, 0x1D	; 29
     3a6:	99 f4       	brne	.+38     	; 0x3ce <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     3a8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
     3ac:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x1>
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	29 f0       	breq	.+10     	; 0x3be <Keypad_AddKey+0x2a>
			position--;
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <__data_end+0x1>
     3ba:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
		keyBuffer[position] = 0;
     3be:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__data_end>
     3c2:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <__data_end+0x1>
     3c6:	e6 53       	subi	r30, 0x36	; 54
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	10 82       	st	Z, r1
     3cc:	57 c0       	rjmp	.+174    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else if(key == 28)
     3ce:	cc 31       	cpi	r28, 0x1C	; 28
     3d0:	21 f4       	brne	.+8      	; 0x3da <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     3d2:	80 e2       	ldi	r24, 0x20	; 32
     3d4:	0e 94 b1 01 	call	0x362	; 0x362 <addChar>
     3d8:	51 c0       	rjmp	.+162    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else if(key == 27)
     3da:	cb 31       	cpi	r28, 0x1B	; 27
     3dc:	39 f4       	brne	.+14     	; 0x3ec <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     3de:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <isNumber>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	89 27       	eor	r24, r25
     3e6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <isNumber>
     3ea:	48 c0       	rjmp	.+144    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else if(isNumber) 
     3ec:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <isNumber>
     3f0:	88 23       	and	r24, r24
     3f2:	e9 f0       	breq	.+58     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     3f4:	9c 2f       	mov	r25, r28
     3f6:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     3f8:	93 30       	cpi	r25, 0x03	; 3
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <Keypad_AddKey+0x6a>
     3fc:	3f c0       	rjmp	.+126    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     3fe:	c5 95       	asr	r28
     400:	c5 95       	asr	r28
     402:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     404:	c3 30       	cpi	r28, 0x03	; 3
     406:	38 f4       	brcc	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			c = '1' + row * 3 + col;
     408:	8c 2f       	mov	r24, r28
     40a:	88 0f       	add	r24, r24
     40c:	c8 0f       	add	r28, r24
     40e:	81 e3       	ldi	r24, 0x31	; 49
     410:	89 0f       	add	r24, r25
     412:	8c 0f       	add	r24, r28
     414:	09 c0       	rjmp	.+18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if(col == 0) {
     416:	99 23       	and	r25, r25
     418:	21 f0       	breq	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			c = '*';
		}
		else if(col == 1) {
     41a:	91 30       	cpi	r25, 0x01	; 1
     41c:	21 f0       	breq	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			c = '0';
		}
		else  {
			c = '#';
     41e:	83 e2       	ldi	r24, 0x23	; 35
     420:	03 c0       	rjmp	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     422:	8a e2       	ldi	r24, 0x2A	; 42
     424:	01 c0       	rjmp	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if(col == 1) {
			c = '0';
     426:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     428:	0e 94 b1 01 	call	0x362	; 0x362 <addChar>
     42c:	27 c0       	rjmp	.+78     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		
	}
	else if(key == 26)
     42e:	ca 31       	cpi	r28, 0x1A	; 26
     430:	39 f4       	brne	.+14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	{
		// capslock
		isUpperCase = !isUpperCase;
     432:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <isUpperCase>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	89 27       	eor	r24, r25
     43a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <isUpperCase>
     43e:	1e c0       	rjmp	.+60     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	}
	else
	{
		// char
		char row = key >> 3;
     440:	9c 2f       	mov	r25, r28
     442:	95 95       	asr	r25
     444:	95 95       	asr	r25
     446:	95 95       	asr	r25
		char col = key & 0b00000111;
     448:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     44a:	93 30       	cpi	r25, 0x03	; 3
     44c:	68 f4       	brcc	.+26     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     44e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <isUpperCase>
     452:	81 11       	cpse	r24, r1
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	81 e6       	ldi	r24, 0x61	; 97
     458:	01 c0       	rjmp	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	81 e4       	ldi	r24, 0x41	; 65
     45c:	99 0f       	add	r25, r25
     45e:	99 0f       	add	r25, r25
     460:	99 0f       	add	r25, r25
     462:	c9 0f       	add	r28, r25
     464:	8c 0f       	add	r24, r28
     466:	08 c0       	rjmp	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     468:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <isUpperCase>
     46c:	81 11       	cpse	r24, r1
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     470:	89 e7       	ldi	r24, 0x79	; 121
     472:	01 c0       	rjmp	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     474:	89 e5       	ldi	r24, 0x59	; 89
     476:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     478:	0e 94 b1 01 	call	0x362	; 0x362 <addChar>
	}
	return ;
}
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     484:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Keypad_GetRow>
     488:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     48a:	0e 94 87 01 	call	0x30e	; 0x30e <Keypad_GetCol>
     48e:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     490:	6c 2f       	mov	r22, r28
     492:	0c 2e       	mov	r0, r28
     494:	00 0c       	add	r0, r0
     496:	77 0b       	sbc	r23, r23
     498:	8b ec       	ldi	r24, 0xCB	; 203
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     4a0:	6d 2f       	mov	r22, r29
     4a2:	0d 2e       	mov	r0, r29
     4a4:	00 0c       	add	r0, r0
     4a6:	77 0b       	sbc	r23, r23
     4a8:	8f ec       	ldi	r24, 0xCF	; 207
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 4c 00 	call	0x98	; 0x98 <Error_ErrorNum>
	return row * 8 + col;
     4b0:	8c 2f       	mov	r24, r28
     4b2:	88 0f       	add	r24, r24
     4b4:	88 0f       	add	r24, r24
     4b6:	88 0f       	add	r24, r24
     4b8:	8d 0f       	add	r24, r29
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     4c0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <currentState>
     4c4:	91 30       	cpi	r25, 0x01	; 1
     4c6:	61 f0       	breq	.+24     	; 0x4e0 <KeyProcessor_ProcessKey+0x20>
     4c8:	1c f4       	brge	.+6      	; 0x4d0 <KeyProcessor_ProcessKey+0x10>
     4ca:	99 23       	and	r25, r25
     4cc:	31 f0       	breq	.+12     	; 0x4da <KeyProcessor_ProcessKey+0x1a>
     4ce:	11 c0       	rjmp	.+34     	; 0x4f2 <KeyProcessor_ProcessKey+0x32>
     4d0:	92 30       	cpi	r25, 0x02	; 2
     4d2:	49 f0       	breq	.+18     	; 0x4e6 <KeyProcessor_ProcessKey+0x26>
     4d4:	93 30       	cpi	r25, 0x03	; 3
     4d6:	51 f0       	breq	.+20     	; 0x4ec <KeyProcessor_ProcessKey+0x2c>
     4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <KeyProcessor_ProcessKey+0x32>
	{
		case IDLE:
			Idle_ProcessKey(key);
     4da:	0e 94 b9 07 	call	0xf72	; 0xf72 <Idle_ProcessKey>
			break;
     4de:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     4e0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <EnteringName_ProcessKey>
			break;
     4e4:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     4e6:	0e 94 04 07 	call	0xe08	; 0xe08 <EnteringAge_ProcessKey>
			break;
     4ea:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     4ec:	0e 94 90 07 	call	0xf20	; 0xf20 <EnteringPhone_ProcessKey>
			break;
     4f0:	08 95       	ret
			//break;
		//case STORE_RECORD :
			//Store_ProcessKey(key);
			//break;
		default:
			Error_Error("ProcessKey: Undefined Current State");
     4f2:	83 ed       	ldi	r24, 0xD3	; 211
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     4fa:	08 95       	ret

000004fc <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     4fc:	88 23       	and	r24, r24
     4fe:	19 f0       	breq	.+6      	; 0x506 <Lcd_Init+0xa>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	39 f0       	breq	.+14     	; 0x512 <Lcd_Init+0x16>
     504:	24 c0       	rjmp	.+72     	; 0x54e <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     506:	81 b3       	in	r24, 0x11	; 17
     508:	8c 6f       	ori	r24, 0xFC	; 252
     50a:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     50c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Lcd4_Init>
			break;
     510:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	0e 94 41 06 	call	0xc82	; 0xc82 <lcd_init>
			lcd_backlight(0);
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     51e:	2f e9       	ldi	r18, 0x9F	; 159
     520:	86 e8       	ldi	r24, 0x86	; 134
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	21 50       	subi	r18, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <Lcd_Init+0x28>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <Lcd_Init+0x32>
     52e:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_backlight>
     536:	2f e9       	ldi	r18, 0x9F	; 159
     538:	86 e8       	ldi	r24, 0x86	; 134
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	21 50       	subi	r18, 0x01	; 1
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	90 40       	sbci	r25, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <Lcd_Init+0x40>
     544:	00 c0       	rjmp	.+0      	; 0x546 <Lcd_Init+0x4a>
     546:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     548:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     54c:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     54e:	87 ef       	ldi	r24, 0xF7	; 247
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     556:	08 95       	ret

00000558 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     558:	88 23       	and	r24, r24
     55a:	19 f0       	breq	.+6      	; 0x562 <Lcd_ClearScreen+0xa>
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	21 f0       	breq	.+8      	; 0x568 <Lcd_ClearScreen+0x10>
     560:	06 c0       	rjmp	.+12     	; 0x56e <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     562:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd4_Clear>
			break;
     566:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     568:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_clrscr>
			break;
     56c:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     56e:	86 e1       	ldi	r24, 0x16	; 22
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     576:	08 95       	ret

00000578 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     578:	88 23       	and	r24, r24
     57a:	19 f0       	breq	.+6      	; 0x582 <Lcd_Prints+0xa>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	29 f0       	breq	.+10     	; 0x58a <Lcd_Prints+0x12>
     580:	08 c0       	rjmp	.+16     	; 0x592 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     582:	cb 01       	movw	r24, r22
     584:	0e 94 65 05 	call	0xaca	; 0xaca <Lcd4_Write_String>
			break;
     588:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     58a:	cb 01       	movw	r24, r22
     58c:	0e 94 32 06 	call	0xc64	; 0xc64 <lcd_puts>
			break;
     590:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     592:	86 e1       	ldi	r24, 0x16	; 22
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     59a:	08 95       	ret

0000059c <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     59c:	96 2f       	mov	r25, r22
	switch(lcdType)
     59e:	88 23       	and	r24, r24
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <Lcd_Position+0xc>
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	31 f0       	breq	.+12     	; 0x5b2 <Lcd_Position+0x16>
     5a6:	09 c0       	rjmp	.+18     	; 0x5ba <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     5a8:	64 2f       	mov	r22, r20
     5aa:	89 2f       	mov	r24, r25
     5ac:	0e 94 cf 04 	call	0x99e	; 0x99e <Lcd4_Set_Cursor>
		break;
     5b0:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     5b2:	84 2f       	mov	r24, r20
     5b4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <lcd_gotoxy>
		break;
     5b8:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     5ba:	8d e3       	ldi	r24, 0x3D	; 61
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
     5c2:	08 95       	ret

000005c4 <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <Lcd_Printc+0x6>
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     5ce:	69 83       	std	Y+1, r22	; 0x01
     5d0:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     5d2:	be 01       	movw	r22, r28
     5d4:	6f 5f       	subi	r22, 0xFF	; 255
     5d6:	7f 4f       	sbci	r23, 0xFF	; 255
     5d8:	0e 94 bc 02 	call	0x578	; 0x578 <Lcd_Prints>
}
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	f8 2e       	mov	r15, r24
     5f2:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	0e 94 ce 02 	call	0x59c	; 0x59c <Lcd_Position>
	int i =0;
	while (str[i])
     5fc:	68 81       	ld	r22, Y
     5fe:	66 23       	and	r22, r22
     600:	91 f0       	breq	.+36     	; 0x626 <Lcd_PrintLine+0x40>
     602:	8e 01       	movw	r16, r28
     604:	0f 5f       	subi	r16, 0xFF	; 255
     606:	1f 4f       	sbci	r17, 0xFF	; 255
     608:	c0 e0       	ldi	r28, 0x00	; 0
     60a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     60c:	21 96       	adiw	r28, 0x01	; 1
     60e:	8f 2d       	mov	r24, r15
     610:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     614:	f8 01       	movw	r30, r16
     616:	61 91       	ld	r22, Z+
     618:	8f 01       	movw	r16, r30
     61a:	61 11       	cpse	r22, r1
     61c:	f7 cf       	rjmp	.-18     	; 0x60c <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     61e:	c0 31       	cpi	r28, 0x10	; 16
     620:	d1 05       	cpc	r29, r1
     622:	1c f0       	brlt	.+6      	; 0x62a <Lcd_PrintLine+0x44>
     624:	0a c0       	rjmp	.+20     	; 0x63a <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     626:	c0 e0       	ldi	r28, 0x00	; 0
     628:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     62a:	60 e2       	ldi	r22, 0x20	; 32
     62c:	8f 2d       	mov	r24, r15
     62e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Lcd_Printc>
     632:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     634:	c0 31       	cpi	r28, 0x10	; 16
     636:	d1 05       	cpc	r29, r1
     638:	c4 f3       	brlt	.-16     	; 0x62a <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	08 95       	ret

00000646 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     646:	67 2b       	or	r22, r23
     648:	09 f0       	breq	.+2      	; 0x64c <pinChange+0x6>
     64a:	9f c0       	rjmp	.+318    	; 0x78a <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	11 f4       	brne	.+4      	; 0x654 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     650:	d8 98       	cbi	0x1b, 0	; 27
     652:	08 95       	ret
		else if(a == eS_PORTA1)
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	91 05       	cpc	r25, r1
     658:	11 f4       	brne	.+4      	; 0x65e <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     65a:	d9 98       	cbi	0x1b, 1	; 27
     65c:	08 95       	ret
		else if(a == eS_PORTA2)
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	91 05       	cpc	r25, r1
     662:	11 f4       	brne	.+4      	; 0x668 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     664:	da 98       	cbi	0x1b, 2	; 27
     666:	08 95       	ret
		else if(a == eS_PORTA3)
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	91 05       	cpc	r25, r1
     66c:	11 f4       	brne	.+4      	; 0x672 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     66e:	db 98       	cbi	0x1b, 3	; 27
     670:	08 95       	ret
		else if(a == eS_PORTA4)
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	91 05       	cpc	r25, r1
     676:	11 f4       	brne	.+4      	; 0x67c <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     678:	dc 98       	cbi	0x1b, 4	; 27
     67a:	08 95       	ret
		else if(a == eS_PORTA5)
     67c:	85 30       	cpi	r24, 0x05	; 5
     67e:	91 05       	cpc	r25, r1
     680:	11 f4       	brne	.+4      	; 0x686 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     682:	dd 98       	cbi	0x1b, 5	; 27
     684:	08 95       	ret
		else if(a == eS_PORTA6)
     686:	86 30       	cpi	r24, 0x06	; 6
     688:	91 05       	cpc	r25, r1
     68a:	11 f4       	brne	.+4      	; 0x690 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     68c:	de 98       	cbi	0x1b, 6	; 27
     68e:	08 95       	ret
		else if(a == eS_PORTA7)
     690:	87 30       	cpi	r24, 0x07	; 7
     692:	91 05       	cpc	r25, r1
     694:	11 f4       	brne	.+4      	; 0x69a <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     696:	df 98       	cbi	0x1b, 7	; 27
     698:	08 95       	ret
		else if(a == eS_PORTB0)
     69a:	8a 30       	cpi	r24, 0x0A	; 10
     69c:	91 05       	cpc	r25, r1
     69e:	11 f4       	brne	.+4      	; 0x6a4 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     6a0:	c0 98       	cbi	0x18, 0	; 24
     6a2:	08 95       	ret
		else if(a == eS_PORTB1)
     6a4:	8b 30       	cpi	r24, 0x0B	; 11
     6a6:	91 05       	cpc	r25, r1
     6a8:	11 f4       	brne	.+4      	; 0x6ae <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     6aa:	c1 98       	cbi	0x18, 1	; 24
     6ac:	08 95       	ret
		else if(a == eS_PORTB2)
     6ae:	8c 30       	cpi	r24, 0x0C	; 12
     6b0:	91 05       	cpc	r25, r1
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     6b4:	c2 98       	cbi	0x18, 2	; 24
     6b6:	08 95       	ret
		else if(a == eS_PORTB3)
     6b8:	8d 30       	cpi	r24, 0x0D	; 13
     6ba:	91 05       	cpc	r25, r1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     6be:	c3 98       	cbi	0x18, 3	; 24
     6c0:	08 95       	ret
		else if(a == eS_PORTB4)
     6c2:	8e 30       	cpi	r24, 0x0E	; 14
     6c4:	91 05       	cpc	r25, r1
     6c6:	11 f4       	brne	.+4      	; 0x6cc <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     6c8:	c4 98       	cbi	0x18, 4	; 24
     6ca:	08 95       	ret
		else if(a == eS_PORTB5)
     6cc:	8f 30       	cpi	r24, 0x0F	; 15
     6ce:	91 05       	cpc	r25, r1
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     6d2:	c5 98       	cbi	0x18, 5	; 24
     6d4:	08 95       	ret
		else if(a == eS_PORTB6)
     6d6:	80 31       	cpi	r24, 0x10	; 16
     6d8:	91 05       	cpc	r25, r1
     6da:	11 f4       	brne	.+4      	; 0x6e0 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     6dc:	c6 98       	cbi	0x18, 6	; 24
     6de:	08 95       	ret
		else if(a == eS_PORTB7)
     6e0:	81 31       	cpi	r24, 0x11	; 17
     6e2:	91 05       	cpc	r25, r1
     6e4:	11 f4       	brne	.+4      	; 0x6ea <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     6e6:	c7 98       	cbi	0x18, 7	; 24
     6e8:	08 95       	ret
		else if(a == eS_PORTC0)
     6ea:	84 31       	cpi	r24, 0x14	; 20
     6ec:	91 05       	cpc	r25, r1
     6ee:	11 f4       	brne	.+4      	; 0x6f4 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     6f0:	a8 98       	cbi	0x15, 0	; 21
     6f2:	08 95       	ret
		else if(a == eS_PORTC1)
     6f4:	85 31       	cpi	r24, 0x15	; 21
     6f6:	91 05       	cpc	r25, r1
     6f8:	11 f4       	brne	.+4      	; 0x6fe <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     6fa:	a9 98       	cbi	0x15, 1	; 21
     6fc:	08 95       	ret
		else if(a == eS_PORTC2)
     6fe:	86 31       	cpi	r24, 0x16	; 22
     700:	91 05       	cpc	r25, r1
     702:	11 f4       	brne	.+4      	; 0x708 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     704:	aa 98       	cbi	0x15, 2	; 21
     706:	08 95       	ret
		else if(a == eS_PORTC3)
     708:	87 31       	cpi	r24, 0x17	; 23
     70a:	91 05       	cpc	r25, r1
     70c:	11 f4       	brne	.+4      	; 0x712 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     70e:	ab 98       	cbi	0x15, 3	; 21
     710:	08 95       	ret
		else if(a == eS_PORTC4)
     712:	88 31       	cpi	r24, 0x18	; 24
     714:	91 05       	cpc	r25, r1
     716:	11 f4       	brne	.+4      	; 0x71c <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     718:	ac 98       	cbi	0x15, 4	; 21
     71a:	08 95       	ret
		else if(a == eS_PORTC5)
     71c:	89 31       	cpi	r24, 0x19	; 25
     71e:	91 05       	cpc	r25, r1
     720:	11 f4       	brne	.+4      	; 0x726 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     722:	ad 98       	cbi	0x15, 5	; 21
     724:	08 95       	ret
		else if(a == eS_PORTC6)
     726:	8a 31       	cpi	r24, 0x1A	; 26
     728:	91 05       	cpc	r25, r1
     72a:	11 f4       	brne	.+4      	; 0x730 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     72c:	ae 98       	cbi	0x15, 6	; 21
     72e:	08 95       	ret
		else if(a == eS_PORTC7)
     730:	8b 31       	cpi	r24, 0x1B	; 27
     732:	91 05       	cpc	r25, r1
     734:	11 f4       	brne	.+4      	; 0x73a <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     736:	af 98       	cbi	0x15, 7	; 21
     738:	08 95       	ret
		else if(a == eS_PORTD0)
     73a:	8e 31       	cpi	r24, 0x1E	; 30
     73c:	91 05       	cpc	r25, r1
     73e:	11 f4       	brne	.+4      	; 0x744 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     740:	90 98       	cbi	0x12, 0	; 18
     742:	08 95       	ret
		else if(a == eS_PORTD1)
     744:	8f 31       	cpi	r24, 0x1F	; 31
     746:	91 05       	cpc	r25, r1
     748:	11 f4       	brne	.+4      	; 0x74e <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     74a:	91 98       	cbi	0x12, 1	; 18
     74c:	08 95       	ret
		else if(a == eS_PORTD2)
     74e:	80 32       	cpi	r24, 0x20	; 32
     750:	91 05       	cpc	r25, r1
     752:	11 f4       	brne	.+4      	; 0x758 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     754:	92 98       	cbi	0x12, 2	; 18
     756:	08 95       	ret
		else if(a == eS_PORTD3)
     758:	81 32       	cpi	r24, 0x21	; 33
     75a:	91 05       	cpc	r25, r1
     75c:	11 f4       	brne	.+4      	; 0x762 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     75e:	93 98       	cbi	0x12, 3	; 18
     760:	08 95       	ret
		else if(a == eS_PORTD4)
     762:	82 32       	cpi	r24, 0x22	; 34
     764:	91 05       	cpc	r25, r1
     766:	11 f4       	brne	.+4      	; 0x76c <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     768:	94 98       	cbi	0x12, 4	; 18
     76a:	08 95       	ret
		else if(a == eS_PORTD5)
     76c:	83 32       	cpi	r24, 0x23	; 35
     76e:	91 05       	cpc	r25, r1
     770:	11 f4       	brne	.+4      	; 0x776 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     772:	95 98       	cbi	0x12, 5	; 18
     774:	08 95       	ret
		else if(a == eS_PORTD6)
     776:	84 32       	cpi	r24, 0x24	; 36
     778:	91 05       	cpc	r25, r1
     77a:	11 f4       	brne	.+4      	; 0x780 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     77c:	96 98       	cbi	0x12, 6	; 18
     77e:	08 95       	ret
		else if(a == eS_PORTD7)
     780:	85 97       	sbiw	r24, 0x25	; 37
     782:	09 f0       	breq	.+2      	; 0x786 <pinChange+0x140>
     784:	9f c0       	rjmp	.+318    	; 0x8c4 <__stack+0x65>
		PORTD &= ~(1<<PD7);
     786:	97 98       	cbi	0x12, 7	; 18
     788:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	11 f4       	brne	.+4      	; 0x792 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     78e:	d8 9a       	sbi	0x1b, 0	; 27
     790:	08 95       	ret
		else if(a == eS_PORTA1)
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	91 05       	cpc	r25, r1
     796:	11 f4       	brne	.+4      	; 0x79c <pinChange+0x156>
		PORTA |= (1<<PA1);
     798:	d9 9a       	sbi	0x1b, 1	; 27
     79a:	08 95       	ret
		else if(a == eS_PORTA2)
     79c:	82 30       	cpi	r24, 0x02	; 2
     79e:	91 05       	cpc	r25, r1
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <pinChange+0x160>
		PORTA |= (1<<PA2);
     7a2:	da 9a       	sbi	0x1b, 2	; 27
     7a4:	08 95       	ret
		else if(a == eS_PORTA3)
     7a6:	83 30       	cpi	r24, 0x03	; 3
     7a8:	91 05       	cpc	r25, r1
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     7ac:	db 9a       	sbi	0x1b, 3	; 27
     7ae:	08 95       	ret
		else if(a == eS_PORTA4)
     7b0:	84 30       	cpi	r24, 0x04	; 4
     7b2:	91 05       	cpc	r25, r1
     7b4:	11 f4       	brne	.+4      	; 0x7ba <pinChange+0x174>
		PORTA |= (1<<PA4);
     7b6:	dc 9a       	sbi	0x1b, 4	; 27
     7b8:	08 95       	ret
		else if(a == eS_PORTA5)
     7ba:	85 30       	cpi	r24, 0x05	; 5
     7bc:	91 05       	cpc	r25, r1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     7c0:	dd 9a       	sbi	0x1b, 5	; 27
     7c2:	08 95       	ret
		else if(a == eS_PORTA6)
     7c4:	86 30       	cpi	r24, 0x06	; 6
     7c6:	91 05       	cpc	r25, r1
     7c8:	11 f4       	brne	.+4      	; 0x7ce <pinChange+0x188>
		PORTA |= (1<<PA6);
     7ca:	de 9a       	sbi	0x1b, 6	; 27
     7cc:	08 95       	ret
		else if(a == eS_PORTA7)
     7ce:	87 30       	cpi	r24, 0x07	; 7
     7d0:	91 05       	cpc	r25, r1
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <pinChange+0x192>
		PORTA |= (1<<PA7);
     7d4:	df 9a       	sbi	0x1b, 7	; 27
     7d6:	08 95       	ret
		else if(a == eS_PORTB0)
     7d8:	8a 30       	cpi	r24, 0x0A	; 10
     7da:	91 05       	cpc	r25, r1
     7dc:	11 f4       	brne	.+4      	; 0x7e2 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     7de:	c0 9a       	sbi	0x18, 0	; 24
     7e0:	08 95       	ret
		else if(a == eS_PORTB1)
     7e2:	8b 30       	cpi	r24, 0x0B	; 11
     7e4:	91 05       	cpc	r25, r1
     7e6:	11 f4       	brne	.+4      	; 0x7ec <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     7e8:	c1 9a       	sbi	0x18, 1	; 24
     7ea:	08 95       	ret
		else if(a == eS_PORTB2)
     7ec:	8c 30       	cpi	r24, 0x0C	; 12
     7ee:	91 05       	cpc	r25, r1
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     7f2:	c2 9a       	sbi	0x18, 2	; 24
     7f4:	08 95       	ret
		else if(a == eS_PORTB3)
     7f6:	8d 30       	cpi	r24, 0x0D	; 13
     7f8:	91 05       	cpc	r25, r1
     7fa:	11 f4       	brne	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
		PORTB |= (1<<PB3);
     7fc:	c3 9a       	sbi	0x18, 3	; 24
     7fe:	08 95       	ret
		else if(a == eS_PORTB4)
     800:	8e 30       	cpi	r24, 0x0E	; 14
     802:	91 05       	cpc	r25, r1
     804:	11 f4       	brne	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		PORTB |= (1<<PB4);
     806:	c4 9a       	sbi	0x18, 4	; 24
     808:	08 95       	ret
		else if(a == eS_PORTB5)
     80a:	8f 30       	cpi	r24, 0x0F	; 15
     80c:	91 05       	cpc	r25, r1
     80e:	11 f4       	brne	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		PORTB |= (1<<PB5);
     810:	c5 9a       	sbi	0x18, 5	; 24
     812:	08 95       	ret
		else if(a == eS_PORTB6)
     814:	80 31       	cpi	r24, 0x10	; 16
     816:	91 05       	cpc	r25, r1
     818:	11 f4       	brne	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		PORTB |= (1<<PB6);
     81a:	c6 9a       	sbi	0x18, 6	; 24
     81c:	08 95       	ret
		else if(a == eS_PORTB7)
     81e:	81 31       	cpi	r24, 0x11	; 17
     820:	91 05       	cpc	r25, r1
     822:	11 f4       	brne	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		PORTB |= (1<<PB7);
     824:	c7 9a       	sbi	0x18, 7	; 24
     826:	08 95       	ret
		else if(a == eS_PORTC0)
     828:	84 31       	cpi	r24, 0x14	; 20
     82a:	91 05       	cpc	r25, r1
     82c:	11 f4       	brne	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		PORTC |= (1<<PC0);
     82e:	a8 9a       	sbi	0x15, 0	; 21
     830:	08 95       	ret
		else if(a == eS_PORTC1)
     832:	85 31       	cpi	r24, 0x15	; 21
     834:	91 05       	cpc	r25, r1
     836:	11 f4       	brne	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		PORTC |= (1<<PC1);
     838:	a9 9a       	sbi	0x15, 1	; 21
     83a:	08 95       	ret
		else if(a == eS_PORTC2)
     83c:	86 31       	cpi	r24, 0x16	; 22
     83e:	91 05       	cpc	r25, r1
     840:	11 f4       	brne	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		PORTC |= (1<<PC2);
     842:	aa 9a       	sbi	0x15, 2	; 21
     844:	08 95       	ret
		else if(a == eS_PORTC3)
     846:	87 31       	cpi	r24, 0x17	; 23
     848:	91 05       	cpc	r25, r1
     84a:	11 f4       	brne	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		PORTC |= (1<<PC3);
     84c:	ab 9a       	sbi	0x15, 3	; 21
     84e:	08 95       	ret
		else if(a == eS_PORTC4)
     850:	88 31       	cpi	r24, 0x18	; 24
     852:	91 05       	cpc	r25, r1
     854:	11 f4       	brne	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		PORTC |= (1<<PC4);
     856:	ac 9a       	sbi	0x15, 4	; 21
     858:	08 95       	ret
		else if(a == eS_PORTC5)
     85a:	89 31       	cpi	r24, 0x19	; 25
     85c:	91 05       	cpc	r25, r1
     85e:	11 f4       	brne	.+4      	; 0x864 <__stack+0x5>
		PORTC |= (1<<PC5);
     860:	ad 9a       	sbi	0x15, 5	; 21
     862:	08 95       	ret
		else if(a == eS_PORTC6)
     864:	8a 31       	cpi	r24, 0x1A	; 26
     866:	91 05       	cpc	r25, r1
     868:	11 f4       	brne	.+4      	; 0x86e <__stack+0xf>
		PORTC |= (1<<PC6);
     86a:	ae 9a       	sbi	0x15, 6	; 21
     86c:	08 95       	ret
		else if(a == eS_PORTC7)
     86e:	8b 31       	cpi	r24, 0x1B	; 27
     870:	91 05       	cpc	r25, r1
     872:	11 f4       	brne	.+4      	; 0x878 <__stack+0x19>
		PORTC |= (1<<PC7);
     874:	af 9a       	sbi	0x15, 7	; 21
     876:	08 95       	ret
		else if(a == eS_PORTD0)
     878:	8e 31       	cpi	r24, 0x1E	; 30
     87a:	91 05       	cpc	r25, r1
     87c:	11 f4       	brne	.+4      	; 0x882 <__stack+0x23>
		PORTD |= (1<<PD0);
     87e:	90 9a       	sbi	0x12, 0	; 18
     880:	08 95       	ret
		else if(a == eS_PORTD1)
     882:	8f 31       	cpi	r24, 0x1F	; 31
     884:	91 05       	cpc	r25, r1
     886:	11 f4       	brne	.+4      	; 0x88c <__stack+0x2d>
		PORTD |= (1<<PD1);
     888:	91 9a       	sbi	0x12, 1	; 18
     88a:	08 95       	ret
		else if(a == eS_PORTD2)
     88c:	80 32       	cpi	r24, 0x20	; 32
     88e:	91 05       	cpc	r25, r1
     890:	11 f4       	brne	.+4      	; 0x896 <__stack+0x37>
		PORTD |= (1<<PD2);
     892:	92 9a       	sbi	0x12, 2	; 18
     894:	08 95       	ret
		else if(a == eS_PORTD3)
     896:	81 32       	cpi	r24, 0x21	; 33
     898:	91 05       	cpc	r25, r1
     89a:	11 f4       	brne	.+4      	; 0x8a0 <__stack+0x41>
		PORTD |= (1<<PD3);
     89c:	93 9a       	sbi	0x12, 3	; 18
     89e:	08 95       	ret
		else if(a == eS_PORTD4)
     8a0:	82 32       	cpi	r24, 0x22	; 34
     8a2:	91 05       	cpc	r25, r1
     8a4:	11 f4       	brne	.+4      	; 0x8aa <__stack+0x4b>
		PORTD |= (1<<PD4);
     8a6:	94 9a       	sbi	0x12, 4	; 18
     8a8:	08 95       	ret
		else if(a == eS_PORTD5)
     8aa:	83 32       	cpi	r24, 0x23	; 35
     8ac:	91 05       	cpc	r25, r1
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <__stack+0x55>
		PORTD |= (1<<PD5);
     8b0:	95 9a       	sbi	0x12, 5	; 18
     8b2:	08 95       	ret
		else if(a == eS_PORTD6)
     8b4:	84 32       	cpi	r24, 0x24	; 36
     8b6:	91 05       	cpc	r25, r1
     8b8:	11 f4       	brne	.+4      	; 0x8be <__stack+0x5f>
		PORTD |= (1<<PD6);
     8ba:	96 9a       	sbi	0x12, 6	; 18
     8bc:	08 95       	ret
		else if(a == eS_PORTD7)
     8be:	85 97       	sbiw	r24, 0x25	; 37
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
		PORTD |= (1<<PD7);
     8c2:	97 9a       	sbi	0x12, 7	; 18
     8c4:	08 95       	ret

000008c6 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     8c6:	cf 93       	push	r28
     8c8:	c8 2f       	mov	r28, r24
	if(a & 1)
     8ca:	80 ff       	sbrs	r24, 0
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <Lcd4_Port+0x16>
	pinChange(D4,1);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	83 e2       	ldi	r24, 0x23	; 35
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	83 e2       	ldi	r24, 0x23	; 35
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
	
	if(a & 2)
     8e8:	c1 ff       	sbrs	r28, 1
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <Lcd4_Port+0x34>
	pinChange(D5,1);
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	82 e2       	ldi	r24, 0x22	; 34
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     8f8:	06 c0       	rjmp	.+12     	; 0x906 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	82 e2       	ldi	r24, 0x22	; 34
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
	
	if(a & 4)
     906:	c2 ff       	sbrs	r28, 2
     908:	07 c0       	rjmp	.+14     	; 0x918 <Lcd4_Port+0x52>
	pinChange(D6,1);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	81 e2       	ldi	r24, 0x21	; 33
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     916:	06 c0       	rjmp	.+12     	; 0x924 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	81 e2       	ldi	r24, 0x21	; 33
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
	
	if(a & 8)
     924:	c3 ff       	sbrs	r28, 3
     926:	07 c0       	rjmp	.+14     	; 0x936 <Lcd4_Port+0x70>
	pinChange(D7,1);
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     934:	06 c0       	rjmp	.+12     	; 0x942 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
}
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     946:	cf 93       	push	r28
     948:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	85 e2       	ldi	r24, 0x25	; 37
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
	Lcd4_Port(a);
     956:	8c 2f       	mov	r24, r28
     958:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	84 e2       	ldi	r24, 0x24	; 36
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     968:	89 ef       	ldi	r24, 0xF9	; 249
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <Lcd4_Cmd+0x26>
     970:	00 c0       	rjmp	.+0      	; 0x972 <Lcd4_Cmd+0x2c>
     972:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	84 e2       	ldi	r24, 0x24	; 36
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     980:	89 ef       	ldi	r24, 0xF9	; 249
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <Lcd4_Cmd+0x3e>
     988:	00 c0       	rjmp	.+0      	; 0x98a <Lcd4_Cmd+0x44>
     98a:	00 00       	nop
	_delay_ms(1);
}
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
     99c:	08 95       	ret

0000099e <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     99e:	cf 93       	push	r28
     9a0:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     9a2:	81 11       	cpse	r24, r1
     9a4:	0b c0       	rjmp	.+22     	; 0x9bc <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	86 0f       	add	r24, r22
     9aa:	82 95       	swap	r24
     9ac:	8f 70       	andi	r24, 0x0F	; 15
     9ae:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     9b2:	8c 2f       	mov	r24, r28
     9b4:	8f 70       	andi	r24, 0x0F	; 15
     9b6:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	51 f4       	brne	.+20     	; 0x9d4 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     9c0:	80 ec       	ldi	r24, 0xC0	; 192
     9c2:	86 0f       	add	r24, r22
     9c4:	82 95       	swap	r24
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     9cc:	8c 2f       	mov	r24, r28
     9ce:	8f 70       	andi	r24, 0x0F	; 15
     9d0:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	}
}
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Lcd4_Port>
     9de:	87 e8       	ldi	r24, 0x87	; 135
     9e0:	93 e1       	ldi	r25, 0x13	; 19
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <Lcd4_Init+0xa>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <Lcd4_Init+0x10>
     9e8:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
     9f0:	81 ee       	ldi	r24, 0xE1	; 225
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <Lcd4_Init+0x1c>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <Lcd4_Init+0x22>
     9fa:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
     a02:	8d eb       	ldi	r24, 0xBD	; 189
     a04:	9a e0       	ldi	r25, 0x0A	; 10
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <Lcd4_Init+0x2e>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <Lcd4_Init+0x34>
     a0c:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     a20:	88 e0       	ldi	r24, 0x08	; 8
     a22:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     a2c:	8c e0       	ldi	r24, 0x0C	; 12
     a2e:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	0e 94 a3 04 	call	0x946	; 0x946 <Lcd4_Cmd>
	Lcd4_Clear();
     a3e:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd4_Clear>
     a42:	08 95       	ret

00000a44 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     a44:	cf 93       	push	r28
     a46:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	85 e2       	ldi	r24, 0x25	; 37
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     a54:	8c 2f       	mov	r24, r28
     a56:	82 95       	swap	r24
     a58:	8f 70       	andi	r24, 0x0F	; 15
     a5a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Lcd4_Port>
	pinChange(EN,1);
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	84 e2       	ldi	r24, 0x24	; 36
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     a6a:	89 ef       	ldi	r24, 0xF9	; 249
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <Lcd4_Write_Char+0x2a>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <Lcd4_Write_Char+0x30>
     a74:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	84 e2       	ldi	r24, 0x24	; 36
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     a82:	89 ef       	ldi	r24, 0xF9	; 249
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <Lcd4_Write_Char+0x42>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <Lcd4_Write_Char+0x48>
     a8c:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     a8e:	8c 2f       	mov	r24, r28
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Lcd4_Port>
	pinChange(EN,1);
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	84 e2       	ldi	r24, 0x24	; 36
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     aa2:	89 ef       	ldi	r24, 0xF9	; 249
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <Lcd4_Write_Char+0x62>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <Lcd4_Write_Char+0x68>
     aac:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	84 e2       	ldi	r24, 0x24	; 36
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 23 03 	call	0x646	; 0x646 <pinChange>
     aba:	89 ef       	ldi	r24, 0xF9	; 249
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <Lcd4_Write_Char+0x7a>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <Lcd4_Write_Char+0x80>
     ac4:	00 00       	nop
	_delay_ms(1);
}
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     ad0:	88 81       	ld	r24, Y
     ad2:	88 23       	and	r24, r24
     ad4:	31 f0       	breq	.+12     	; 0xae2 <Lcd4_Write_String+0x18>
     ad6:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     ad8:	0e 94 22 05 	call	0xa44	; 0xa44 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     adc:	89 91       	ld	r24, Y+
     ade:	81 11       	cpse	r24, r1
     ae0:	fb cf       	rjmp	.-10     	; 0xad8 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	7b 01       	movw	r14, r22
     af6:	14 2f       	mov	r17, r20
     af8:	88 0f       	add	r24, r24
     afa:	0e 94 fe 07 	call	0xffc	; 0xffc <i2c_start>
     afe:	81 11       	cpse	r24, r1
     b00:	12 c0       	rjmp	.+36     	; 0xb26 <I2C_WRITESEQ+0x3e>
     b02:	11 23       	and	r17, r17
     b04:	91 f0       	breq	.+36     	; 0xb2a <I2C_WRITESEQ+0x42>
     b06:	e7 01       	movw	r28, r14
     b08:	11 50       	subi	r17, 0x01	; 1
     b0a:	01 2f       	mov	r16, r17
     b0c:	10 e0       	ldi	r17, 0x00	; 0
     b0e:	0f 5f       	subi	r16, 0xFF	; 255
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	0e 0d       	add	r16, r14
     b14:	1f 1d       	adc	r17, r15
     b16:	89 91       	ld	r24, Y+
     b18:	0e 94 22 08 	call	0x1044	; 0x1044 <i2c_write>
     b1c:	c0 17       	cp	r28, r16
     b1e:	d1 07       	cpc	r29, r17
     b20:	d1 f7       	brne	.-12     	; 0xb16 <I2C_WRITESEQ+0x2e>
     b22:	c0 e0       	ldi	r28, 0x00	; 0
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <I2C_WRITESEQ+0x44>
     b26:	c1 e0       	ldi	r28, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <I2C_WRITESEQ+0x44>
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	0e 94 1c 08 	call	0x1038	; 0x1038 <i2c_stop>
     b30:	8c 2f       	mov	r24, r28
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <wr_lcd_mode>:
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	00 d0       	rcall	.+0      	; 0xb4a <wr_lcd_mode+0xa>
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <wr_lcd_mode+0xc>
     b4c:	1f 92       	push	r1
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	08 2f       	mov	r16, r24
     b54:	68 30       	cpi	r22, 0x08	; 8
     b56:	71 f4       	brne	.+28     	; 0xb74 <wr_lcd_mode+0x34>
     b58:	81 11       	cpse	r24, r1
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <wr_lcd_mode+0x20>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <wr_lcd_mode+0x22>
     b60:	88 e0       	ldi	r24, 0x08	; 8
     b62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	60 e6       	ldi	r22, 0x60	; 96
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	87 e2       	ldi	r24, 0x27	; 39
     b6e:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_WRITESEQ>
     b72:	26 c0       	rjmp	.+76     	; 0xbc0 <wr_lcd_mode+0x80>
     b74:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b78:	16 2f       	mov	r17, r22
     b7a:	18 2b       	or	r17, r24
     b7c:	19 83       	std	Y+1, r17	; 0x01
     b7e:	80 2f       	mov	r24, r16
     b80:	80 7f       	andi	r24, 0xF0	; 240
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	81 2b       	or	r24, r17
     b86:	8a 83       	std	Y+2, r24	; 0x02
     b88:	8b 7f       	andi	r24, 0xFB	; 251
     b8a:	8b 83       	std	Y+3, r24	; 0x03
     b8c:	20 e1       	ldi	r18, 0x10	; 16
     b8e:	02 9f       	mul	r16, r18
     b90:	c0 01       	movw	r24, r0
     b92:	11 24       	eor	r1, r1
     b94:	81 2b       	or	r24, r17
     b96:	84 60       	ori	r24, 0x04	; 4
     b98:	8c 83       	std	Y+4, r24	; 0x04
     b9a:	8b 7f       	andi	r24, 0xFB	; 251
     b9c:	8d 83       	std	Y+5, r24	; 0x05
     b9e:	45 e0       	ldi	r20, 0x05	; 5
     ba0:	be 01       	movw	r22, r28
     ba2:	6f 5f       	subi	r22, 0xFF	; 255
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	87 e2       	ldi	r24, 0x27	; 39
     ba8:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_WRITESEQ>
     bac:	10 fd       	sbrc	r17, 0
     bae:	08 c0       	rjmp	.+16     	; 0xbc0 <wr_lcd_mode+0x80>
     bb0:	03 30       	cpi	r16, 0x03	; 3
     bb2:	30 f4       	brcc	.+12     	; 0xbc0 <wr_lcd_mode+0x80>
     bb4:	e3 ef       	ldi	r30, 0xF3	; 243
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <wr_lcd_mode+0x78>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <wr_lcd_mode+0x7e>
     bbe:	00 00       	nop
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <lcd_gotoxy>:
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	d8 2f       	mov	r29, r24
     bda:	c6 2f       	mov	r28, r22
     bdc:	e6 2f       	mov	r30, r22
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ef 59       	subi	r30, 0x9F	; 159
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	98 2f       	mov	r25, r24
     be6:	90 68       	ori	r25, 0x80	; 128
     be8:	80 81       	ld	r24, Z
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	89 2b       	or	r24, r25
     bee:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
     bf2:	d0 93 dc 01 	sts	0x01DC, r29	; 0x8001dc <_lcd_x>
     bf6:	c0 93 dd 01 	sts	0x01DD, r28	; 0x8001dd <_lcd_y>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <lcd_clrscr>:
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
     c08:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <_lcd_y>
     c0c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <_lcd_x>
     c10:	08 95       	ret

00000c12 <lcd_putc>:
     c12:	cf 93       	push	r28
     c14:	c8 2f       	mov	r28, r24
     c16:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <_lcd_x>
     c1a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_lcd_maxx>
     c1e:	98 17       	cp	r25, r24
     c20:	18 f4       	brcc	.+6      	; 0xc28 <lcd_putc+0x16>
     c22:	ca 30       	cpi	r28, 0x0A	; 10
     c24:	59 f4       	brne	.+22     	; 0xc3c <lcd_putc+0x2a>
     c26:	14 c0       	rjmp	.+40     	; 0xc50 <lcd_putc+0x3e>
     c28:	60 91 dd 01 	lds	r22, 0x01DD	; 0x8001dd <_lcd_y>
     c2c:	6f 5f       	subi	r22, 0xFF	; 255
     c2e:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <_lcd_y>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <lcd_gotoxy>
     c38:	ca 30       	cpi	r28, 0x0A	; 10
     c3a:	91 f0       	breq	.+36     	; 0xc60 <lcd_putc+0x4e>
     c3c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_lcd_x>
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_lcd_x>
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	8c 2f       	mov	r24, r28
     c4a:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <lcd_putc+0x4e>
     c50:	60 91 dd 01 	lds	r22, 0x01DD	; 0x8001dd <_lcd_y>
     c54:	6f 5f       	subi	r22, 0xFF	; 255
     c56:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <_lcd_y>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <lcd_gotoxy>
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <lcd_puts>:
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	ec 01       	movw	r28, r24
     c6a:	88 81       	ld	r24, Y
     c6c:	88 23       	and	r24, r24
     c6e:	31 f0       	breq	.+12     	; 0xc7c <lcd_puts+0x18>
     c70:	21 96       	adiw	r28, 0x01	; 1
     c72:	0e 94 09 06 	call	0xc12	; 0xc12 <lcd_putc>
     c76:	89 91       	ld	r24, Y+
     c78:	81 11       	cpse	r24, r1
     c7a:	fb cf       	rjmp	.-10     	; 0xc72 <lcd_puts+0xe>
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <lcd_init+0xa>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <lcd_init+0xc>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <lcd_init+0xe>
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     c96:	80 e3       	ldi	r24, 0x30	; 48
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	94 e3       	ldi	r25, 0x34	; 52
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     ca0:	80 e2       	ldi	r24, 0x20	; 32
     ca2:	8c 83       	std	Y+4, r24	; 0x04
     ca4:	94 e2       	ldi	r25, 0x24	; 36
     ca6:	9d 83       	std	Y+5, r25	; 0x05
     ca8:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     cb0:	e1 e6       	ldi	r30, 0x61	; 97
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 5f       	subi	r24, 0xF0	; 240
     cb8:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     cba:	81 81       	ldd	r24, Z+1	; 0x01
     cbc:	80 5f       	subi	r24, 0xF0	; 240
     cbe:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     cc0:	bd 9a       	sbi	0x17, 5	; 23
     cc2:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
     cc4:	0e 94 fa 07 	call	0xff4	; 0xff4 <i2c_init>
     cc8:	8b e4       	ldi	r24, 0x4B	; 75
     cca:	9d e1       	ldi	r25, 0x1D	; 29
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <lcd_init+0x4a>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <lcd_init+0x50>
     cd2:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     cd4:	43 e0       	ldi	r20, 0x03	; 3
     cd6:	be 01       	movw	r22, r28
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	87 e2       	ldi	r24, 0x27	; 39
     cde:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_WRITESEQ>
     ce2:	18 2f       	mov	r17, r24
     ce4:	81 ee       	ldi	r24, 0xE1	; 225
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <lcd_init+0x66>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <lcd_init+0x6c>
     cee:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     cf0:	43 e0       	ldi	r20, 0x03	; 3
     cf2:	be 01       	movw	r22, r28
     cf4:	6f 5f       	subi	r22, 0xFF	; 255
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	87 e2       	ldi	r24, 0x27	; 39
     cfa:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_WRITESEQ>
     cfe:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     d00:	43 e0       	ldi	r20, 0x03	; 3
     d02:	be 01       	movw	r22, r28
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	87 e2       	ldi	r24, 0x27	; 39
     d0a:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_WRITESEQ>
     d0e:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     d10:	43 e0       	ldi	r20, 0x03	; 3
     d12:	be 01       	movw	r22, r28
     d14:	6c 5f       	subi	r22, 0xFC	; 252
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	87 e2       	ldi	r24, 0x27	; 39
     d1a:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_WRITESEQ>
     d1e:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	88 e2       	ldi	r24, 0x28	; 40
     d24:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
     d28:	81 2b       	or	r24, r17
     d2a:	09 f0       	breq	.+2      	; 0xd2e <lcd_init+0xac>
     d2c:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	86 e0       	ldi	r24, 0x06	; 6
     d3a:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	80 2f       	mov	r24, r16
     d4a:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
}
     d4e:	26 96       	adiw	r28, 0x06	; 6
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     d64:	68 e0       	ldi	r22, 0x08	; 8
     d66:	0e 94 a0 05 	call	0xb40	; 0xb40 <wr_lcd_mode>
     d6a:	08 95       	ret

00000d6c <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
     d6c:	0e 94 b7 00 	call	0x16e	; 0x16e <HC05_Init_Data_Mode>
	
	HC05_SendString("hello there");
     d70:	81 e6       	ldi	r24, 0x61	; 97
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <Lcd_Init>
	Lcd_Init(LCDNOTICE);
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 7e 02 	call	0x4fc	; 0x4fc <Lcd_Init>
	
	States_GotoState(IDLE);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
	Keypad_Init();
     d8a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
     d8e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_KeyPressed>
     d92:	88 23       	and	r24, r24
     d94:	e1 f3       	breq	.-8      	; 0xd8e <main+0x22>
     d96:	87 e8       	ldi	r24, 0x87	; 135
     d98:	93 e1       	ldi	r25, 0x13	; 19
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <main+0x2e>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <main+0x34>
     da0:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
     da2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Keypad_KeyPressed>
     da6:	88 23       	and	r24, r24
     da8:	91 f3       	breq	.-28     	; 0xd8e <main+0x22>
			{
				int_fast8_t x = Keypad_GetKey();
     daa:	0e 94 40 02 	call	0x480	; 0x480 <Keypad_GetKey>
     dae:	e7 e8       	ldi	r30, 0x87	; 135
     db0:	f3 e1       	ldi	r31, 0x13	; 19
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <main+0x46>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <main+0x4c>
     db8:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
     dba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <KeyProcessor_ProcessKey>
				Keypad_Init();
     dbe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_Init>
     dc2:	e5 cf       	rjmp	.-54     	; 0xd8e <main+0x22>

00000dc4 <Patient_UpdateName>:
struct Patient currentPatient ;


void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
     dc4:	0e 94 2f 08 	call	0x105e	; 0x105e <strcpy>
     dc8:	08 95       	ret

00000dca <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
     dca:	41 96       	adiw	r24, 0x11	; 17
     dcc:	0e 94 2f 08 	call	0x105e	; 0x105e <strcpy>
     dd0:	08 95       	ret

00000dd2 <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
     dd2:	82 96       	adiw	r24, 0x22	; 34
     dd4:	0e 94 2f 08 	call	0x105e	; 0x105e <strcpy>
     dd8:	08 95       	ret

00000dda <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
     dda:	4d e6       	ldi	r20, 0x6D	; 109
     ddc:	51 e0       	ldi	r21, 0x01	; 1
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
	Keypad_InitNumpad();
     de8:	0e 94 29 01 	call	0x252	; 0x252 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     dec:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
     df0:	8f ee       	ldi	r24, 0xEF	; 239
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     df8:	4a ec       	ldi	r20, 0xCA	; 202
     dfa:	51 e0       	ldi	r21, 0x01	; 1
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
     e06:	08 95       	ret

00000e08 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     e08:	8f 31       	cpi	r24, 0x1F	; 31
     e0a:	61 f4       	brne	.+24     	; 0xe24 <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
     e0c:	6a ec       	ldi	r22, 0xCA	; 202
     e0e:	71 e0       	ldi	r23, 0x01	; 1
     e10:	8e ed       	ldi	r24, 0xDE	; 222
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 e5 06 	call	0xdca	; 0xdca <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
     e18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
     e22:	08 95       	ret
	}
	else if(key == 30)
     e24:	8e 31       	cpi	r24, 0x1E	; 30
     e26:	61 f4       	brne	.+24     	; 0xe40 <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
     e28:	6a ec       	ldi	r22, 0xCA	; 202
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	8e ed       	ldi	r24, 0xDE	; 222
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 e5 06 	call	0xdca	; 0xdca <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
     e34:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
     e3e:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     e40:	0e 94 ca 01 	call	0x394	; 0x394 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     e44:	4a ec       	ldi	r20, 0xCA	; 202
     e46:	51 e0       	ldi	r21, 0x01	; 1
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
     e52:	8a ec       	ldi	r24, 0xCA	; 202
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     e5a:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
     e5e:	08 95       	ret

00000e60 <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 ac 02 	call	0x558	; 0x558 <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 ce 02 	call	0x59c	; 0x59c <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
     e74:	68 e7       	ldi	r22, 0x78	; 120
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 bc 02 	call	0x578	; 0x578 <Lcd_Prints>
	Keypad_UpdateKeyMode();
     e7e:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
     e82:	8e ed       	ldi	r24, 0xDE	; 222
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     e8a:	4a ec       	ldi	r20, 0xCA	; 202
     e8c:	51 e0       	ldi	r21, 0x01	; 1
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
     e98:	08 95       	ret

00000e9a <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     e9a:	8f 31       	cpi	r24, 0x1F	; 31
     e9c:	61 f4       	brne	.+24     	; 0xeb6 <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
     e9e:	6a ec       	ldi	r22, 0xCA	; 202
     ea0:	71 e0       	ldi	r23, 0x01	; 1
     ea2:	8e ed       	ldi	r24, 0xDE	; 222
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Patient_UpdateName>
		Keypad_ResetBuffer();
     eaa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
     eb4:	08 95       	ret
	}
	else if(key == 30)
     eb6:	8e 31       	cpi	r24, 0x1E	; 30
     eb8:	61 f4       	brne	.+24     	; 0xed2 <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
     eba:	6a ec       	ldi	r22, 0xCA	; 202
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	8e ed       	ldi	r24, 0xDE	; 222
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Patient_UpdateName>
		Keypad_ResetBuffer();
     ec6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
     ed0:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     ed2:	0e 94 ca 01 	call	0x394	; 0x394 <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     ed6:	4a ec       	ldi	r20, 0xCA	; 202
     ed8:	51 e0       	ldi	r21, 0x01	; 1
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
     ee4:	8a ec       	ldi	r24, 0xCA	; 202
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_UpdateKeyMode();
     eec:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
     ef0:	08 95       	ret

00000ef2 <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
     ef2:	44 e8       	ldi	r20, 0x84	; 132
     ef4:	51 e0       	ldi	r21, 0x01	; 1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
	
	Keypad_InitNumpad();
     f00:	0e 94 29 01 	call	0x252	; 0x252 <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
     f04:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f10:	4a ec       	ldi	r20, 0xCA	; 202
     f12:	51 e0       	ldi	r21, 0x01	; 1
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
     f1e:	08 95       	ret

00000f20 <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
     f20:	8f 31       	cpi	r24, 0x1F	; 31
     f22:	39 f4       	brne	.+14     	; 0xf32 <EnteringPhone_ProcessKey+0x12>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
     f24:	6a ec       	ldi	r22, 0xCA	; 202
     f26:	71 e0       	ldi	r23, 0x01	; 1
     f28:	8e ed       	ldi	r24, 0xDE	; 222
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Patient_UpdatePhone>
     f30:	08 95       	ret
		
		// print serial
	}
	else if(key == 30)
     f32:	8e 31       	cpi	r24, 0x1E	; 30
     f34:	61 f4       	brne	.+24     	; 0xf4e <EnteringPhone_ProcessKey+0x2e>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
     f36:	6a ec       	ldi	r22, 0xCA	; 202
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	8e ed       	ldi	r24, 0xDE	; 222
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
     f42:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
     f4c:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
     f4e:	0e 94 ca 01 	call	0x394	; 0x394 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
     f52:	4a ec       	ldi	r20, 0xCA	; 202
     f54:	51 e0       	ldi	r21, 0x01	; 1
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
     f60:	8a ec       	ldi	r24, 0xCA	; 202
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 c5 00 	call	0x18a	; 0x18a <HC05_SendString>
		
		Keypad_InitNumpad();
     f68:	0e 94 29 01 	call	0x252	; 0x252 <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
     f6c:	0e 94 3e 01 	call	0x27c	; 0x27c <Keypad_UpdateKeyMode>
     f70:	08 95       	ret

00000f72 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <States_GotoState>
     f78:	08 95       	ret

00000f7a <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	0e 94 ac 02 	call	0x558	; 0x558 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	0e 94 ce 02 	call	0x59c	; 0x59c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
     f8e:	6e e8       	ldi	r22, 0x8E	; 142
     f90:	71 e0       	ldi	r23, 0x01	; 1
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 bc 02 	call	0x578	; 0x578 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	0e 94 ce 02 	call	0x59c	; 0x59c <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Serial");
     fa6:	67 e9       	ldi	r22, 0x97	; 151
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	0e 94 bc 02 	call	0x578	; 0x578 <Lcd_Prints>
     fb0:	08 95       	ret

00000fb2 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
     fb2:	cf 93       	push	r28
     fb4:	c8 2f       	mov	r28, r24
	switch(newState)
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <States_GotoState+0x20>
     fba:	1c f4       	brge	.+6      	; 0xfc2 <States_GotoState+0x10>
     fbc:	88 23       	and	r24, r24
     fbe:	31 f0       	breq	.+12     	; 0xfcc <States_GotoState+0x1a>
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <States_GotoState+0x32>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	49 f0       	breq	.+18     	; 0xfd8 <States_GotoState+0x26>
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	51 f0       	breq	.+20     	; 0xfde <States_GotoState+0x2c>
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <States_GotoState+0x32>
	{
		case IDLE:
			Idle_Init();
     fcc:	0e 94 bd 07 	call	0xf7a	; 0xf7a <Idle_Init>
			break;
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <States_GotoState+0x3a>
		case ENTERING_NAME:
			EnteringName_Init();
     fd2:	0e 94 30 07 	call	0xe60	; 0xe60 <EnteringName_Init>
			break;
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <States_GotoState+0x3a>
		case ENTERING_AGE:
			EnteringAge_Init();
     fd8:	0e 94 ed 06 	call	0xdda	; 0xdda <EnteringAge_Init>
			break;
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <States_GotoState+0x3a>
		case ENTERING_PHONE:
			EnteringPhone_Init();
     fde:	0e 94 79 07 	call	0xef2	; 0xef2 <EnteringPhone_Init>
			break;
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <States_GotoState+0x3a>
			//break;
		//case STORE_RECORD:
			//Store_Init();
			//break;
		default:
			Error_Error("GotoState: newState not defined");
     fe4:	85 ea       	ldi	r24, 0xA5	; 165
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 49 00 	call	0x92	; 0x92 <Error_Error>
	}
	currentState = newState;
     fec:	c0 93 13 02 	sts	0x0213, r28	; 0x800213 <currentState>
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     ff4:	11 b8       	out	0x01, r1	; 1
     ff6:	8c e0       	ldi	r24, 0x0C	; 12
     ff8:	80 b9       	out	0x00, r24	; 0
     ffa:	08 95       	ret

00000ffc <i2c_start>:
     ffc:	94 ea       	ldi	r25, 0xA4	; 164
     ffe:	96 bf       	out	0x36, r25	; 54
    1000:	06 b6       	in	r0, 0x36	; 54
    1002:	07 fe       	sbrs	r0, 7
    1004:	fd cf       	rjmp	.-6      	; 0x1000 <i2c_start+0x4>
    1006:	91 b1       	in	r25, 0x01	; 1
    1008:	98 7f       	andi	r25, 0xF8	; 248
    100a:	98 30       	cpi	r25, 0x08	; 8
    100c:	11 f0       	breq	.+4      	; 0x1012 <i2c_start+0x16>
    100e:	90 31       	cpi	r25, 0x10	; 16
    1010:	79 f4       	brne	.+30     	; 0x1030 <i2c_start+0x34>
    1012:	83 b9       	out	0x03, r24	; 3
    1014:	84 e8       	ldi	r24, 0x84	; 132
    1016:	86 bf       	out	0x36, r24	; 54
    1018:	06 b6       	in	r0, 0x36	; 54
    101a:	07 fe       	sbrs	r0, 7
    101c:	fd cf       	rjmp	.-6      	; 0x1018 <i2c_start+0x1c>
    101e:	91 b1       	in	r25, 0x01	; 1
    1020:	98 7f       	andi	r25, 0xF8	; 248
    1022:	98 31       	cpi	r25, 0x18	; 24
    1024:	39 f0       	breq	.+14     	; 0x1034 <i2c_start+0x38>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 34       	cpi	r25, 0x40	; 64
    102a:	29 f4       	brne	.+10     	; 0x1036 <i2c_start+0x3a>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	08 95       	ret
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	08 95       	ret

00001038 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1038:	84 e9       	ldi	r24, 0x94	; 148
    103a:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    103c:	06 b6       	in	r0, 0x36	; 54
    103e:	04 fc       	sbrc	r0, 4
    1040:	fd cf       	rjmp	.-6      	; 0x103c <i2c_stop+0x4>

}/* i2c_stop */
    1042:	08 95       	ret

00001044 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1044:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1046:	84 e8       	ldi	r24, 0x84	; 132
    1048:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    104a:	06 b6       	in	r0, 0x36	; 54
    104c:	07 fe       	sbrs	r0, 7
    104e:	fd cf       	rjmp	.-6      	; 0x104a <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1050:	91 b1       	in	r25, 0x01	; 1
    1052:	98 7f       	andi	r25, 0xF8	; 248
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	98 32       	cpi	r25, 0x28	; 40
    1058:	09 f4       	brne	.+2      	; 0x105c <i2c_write+0x18>
    105a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    105c:	08 95       	ret

0000105e <strcpy>:
    105e:	fb 01       	movw	r30, r22
    1060:	dc 01       	movw	r26, r24
    1062:	01 90       	ld	r0, Z+
    1064:	0d 92       	st	X+, r0
    1066:	00 20       	and	r0, r0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <strcpy+0x4>
    106a:	08 95       	ret

0000106c <sprintf>:
    106c:	ae e0       	ldi	r26, 0x0E	; 14
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ec e3       	ldi	r30, 0x3C	; 60
    1072:	f8 e0       	ldi	r31, 0x08	; 8
    1074:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__prologue_saves__+0x1c>
    1078:	0d 89       	ldd	r16, Y+21	; 0x15
    107a:	1e 89       	ldd	r17, Y+22	; 0x16
    107c:	86 e0       	ldi	r24, 0x06	; 6
    107e:	8c 83       	std	Y+4, r24	; 0x04
    1080:	1a 83       	std	Y+2, r17	; 0x02
    1082:	09 83       	std	Y+1, r16	; 0x01
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f e7       	ldi	r25, 0x7F	; 127
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	ae 01       	movw	r20, r28
    108e:	47 5e       	subi	r20, 0xE7	; 231
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	6f 89       	ldd	r22, Y+23	; 0x17
    1094:	78 8d       	ldd	r23, Y+24	; 0x18
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <vfprintf>
    109e:	ef 81       	ldd	r30, Y+7	; 0x07
    10a0:	f8 85       	ldd	r31, Y+8	; 0x08
    10a2:	e0 0f       	add	r30, r16
    10a4:	f1 1f       	adc	r31, r17
    10a6:	10 82       	st	Z, r1
    10a8:	2e 96       	adiw	r28, 0x0e	; 14
    10aa:	e4 e0       	ldi	r30, 0x04	; 4
    10ac:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__epilogue_restores__+0x1c>

000010b0 <vfprintf>:
    10b0:	ab e0       	ldi	r26, 0x0B	; 11
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ee e5       	ldi	r30, 0x5E	; 94
    10b6:	f8 e0       	ldi	r31, 0x08	; 8
    10b8:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__prologue_saves__>
    10bc:	6c 01       	movw	r12, r24
    10be:	7b 01       	movw	r14, r22
    10c0:	8a 01       	movw	r16, r20
    10c2:	fc 01       	movw	r30, r24
    10c4:	17 82       	std	Z+7, r1	; 0x07
    10c6:	16 82       	std	Z+6, r1	; 0x06
    10c8:	83 81       	ldd	r24, Z+3	; 0x03
    10ca:	81 ff       	sbrs	r24, 1
    10cc:	cc c1       	rjmp	.+920    	; 0x1466 <vfprintf+0x3b6>
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	3c 01       	movw	r6, r24
    10d4:	f6 01       	movw	r30, r12
    10d6:	93 81       	ldd	r25, Z+3	; 0x03
    10d8:	f7 01       	movw	r30, r14
    10da:	93 fd       	sbrc	r25, 3
    10dc:	85 91       	lpm	r24, Z+
    10de:	93 ff       	sbrs	r25, 3
    10e0:	81 91       	ld	r24, Z+
    10e2:	7f 01       	movw	r14, r30
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <vfprintf+0x3a>
    10e8:	ba c1       	rjmp	.+884    	; 0x145e <vfprintf+0x3ae>
    10ea:	85 32       	cpi	r24, 0x25	; 37
    10ec:	39 f4       	brne	.+14     	; 0x10fc <vfprintf+0x4c>
    10ee:	93 fd       	sbrc	r25, 3
    10f0:	85 91       	lpm	r24, Z+
    10f2:	93 ff       	sbrs	r25, 3
    10f4:	81 91       	ld	r24, Z+
    10f6:	7f 01       	movw	r14, r30
    10f8:	85 32       	cpi	r24, 0x25	; 37
    10fa:	29 f4       	brne	.+10     	; 0x1106 <vfprintf+0x56>
    10fc:	b6 01       	movw	r22, r12
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1104:	e7 cf       	rjmp	.-50     	; 0x10d4 <vfprintf+0x24>
    1106:	91 2c       	mov	r9, r1
    1108:	21 2c       	mov	r2, r1
    110a:	31 2c       	mov	r3, r1
    110c:	ff e1       	ldi	r31, 0x1F	; 31
    110e:	f3 15       	cp	r31, r3
    1110:	d8 f0       	brcs	.+54     	; 0x1148 <vfprintf+0x98>
    1112:	8b 32       	cpi	r24, 0x2B	; 43
    1114:	79 f0       	breq	.+30     	; 0x1134 <vfprintf+0x84>
    1116:	38 f4       	brcc	.+14     	; 0x1126 <vfprintf+0x76>
    1118:	80 32       	cpi	r24, 0x20	; 32
    111a:	79 f0       	breq	.+30     	; 0x113a <vfprintf+0x8a>
    111c:	83 32       	cpi	r24, 0x23	; 35
    111e:	a1 f4       	brne	.+40     	; 0x1148 <vfprintf+0x98>
    1120:	23 2d       	mov	r18, r3
    1122:	20 61       	ori	r18, 0x10	; 16
    1124:	1d c0       	rjmp	.+58     	; 0x1160 <vfprintf+0xb0>
    1126:	8d 32       	cpi	r24, 0x2D	; 45
    1128:	61 f0       	breq	.+24     	; 0x1142 <vfprintf+0x92>
    112a:	80 33       	cpi	r24, 0x30	; 48
    112c:	69 f4       	brne	.+26     	; 0x1148 <vfprintf+0x98>
    112e:	23 2d       	mov	r18, r3
    1130:	21 60       	ori	r18, 0x01	; 1
    1132:	16 c0       	rjmp	.+44     	; 0x1160 <vfprintf+0xb0>
    1134:	83 2d       	mov	r24, r3
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	38 2e       	mov	r3, r24
    113a:	e3 2d       	mov	r30, r3
    113c:	e4 60       	ori	r30, 0x04	; 4
    113e:	3e 2e       	mov	r3, r30
    1140:	2a c0       	rjmp	.+84     	; 0x1196 <vfprintf+0xe6>
    1142:	f3 2d       	mov	r31, r3
    1144:	f8 60       	ori	r31, 0x08	; 8
    1146:	1d c0       	rjmp	.+58     	; 0x1182 <vfprintf+0xd2>
    1148:	37 fc       	sbrc	r3, 7
    114a:	2d c0       	rjmp	.+90     	; 0x11a6 <vfprintf+0xf6>
    114c:	20 ed       	ldi	r18, 0xD0	; 208
    114e:	28 0f       	add	r18, r24
    1150:	2a 30       	cpi	r18, 0x0A	; 10
    1152:	40 f0       	brcs	.+16     	; 0x1164 <vfprintf+0xb4>
    1154:	8e 32       	cpi	r24, 0x2E	; 46
    1156:	b9 f4       	brne	.+46     	; 0x1186 <vfprintf+0xd6>
    1158:	36 fc       	sbrc	r3, 6
    115a:	81 c1       	rjmp	.+770    	; 0x145e <vfprintf+0x3ae>
    115c:	23 2d       	mov	r18, r3
    115e:	20 64       	ori	r18, 0x40	; 64
    1160:	32 2e       	mov	r3, r18
    1162:	19 c0       	rjmp	.+50     	; 0x1196 <vfprintf+0xe6>
    1164:	36 fe       	sbrs	r3, 6
    1166:	06 c0       	rjmp	.+12     	; 0x1174 <vfprintf+0xc4>
    1168:	8a e0       	ldi	r24, 0x0A	; 10
    116a:	98 9e       	mul	r9, r24
    116c:	20 0d       	add	r18, r0
    116e:	11 24       	eor	r1, r1
    1170:	92 2e       	mov	r9, r18
    1172:	11 c0       	rjmp	.+34     	; 0x1196 <vfprintf+0xe6>
    1174:	ea e0       	ldi	r30, 0x0A	; 10
    1176:	2e 9e       	mul	r2, r30
    1178:	20 0d       	add	r18, r0
    117a:	11 24       	eor	r1, r1
    117c:	22 2e       	mov	r2, r18
    117e:	f3 2d       	mov	r31, r3
    1180:	f0 62       	ori	r31, 0x20	; 32
    1182:	3f 2e       	mov	r3, r31
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <vfprintf+0xe6>
    1186:	8c 36       	cpi	r24, 0x6C	; 108
    1188:	21 f4       	brne	.+8      	; 0x1192 <vfprintf+0xe2>
    118a:	83 2d       	mov	r24, r3
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	38 2e       	mov	r3, r24
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <vfprintf+0xe6>
    1192:	88 36       	cpi	r24, 0x68	; 104
    1194:	41 f4       	brne	.+16     	; 0x11a6 <vfprintf+0xf6>
    1196:	f7 01       	movw	r30, r14
    1198:	93 fd       	sbrc	r25, 3
    119a:	85 91       	lpm	r24, Z+
    119c:	93 ff       	sbrs	r25, 3
    119e:	81 91       	ld	r24, Z+
    11a0:	7f 01       	movw	r14, r30
    11a2:	81 11       	cpse	r24, r1
    11a4:	b3 cf       	rjmp	.-154    	; 0x110c <vfprintf+0x5c>
    11a6:	98 2f       	mov	r25, r24
    11a8:	9f 7d       	andi	r25, 0xDF	; 223
    11aa:	95 54       	subi	r25, 0x45	; 69
    11ac:	93 30       	cpi	r25, 0x03	; 3
    11ae:	28 f4       	brcc	.+10     	; 0x11ba <vfprintf+0x10a>
    11b0:	0c 5f       	subi	r16, 0xFC	; 252
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	9f e3       	ldi	r25, 0x3F	; 63
    11b6:	99 83       	std	Y+1, r25	; 0x01
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <vfprintf+0x124>
    11ba:	83 36       	cpi	r24, 0x63	; 99
    11bc:	31 f0       	breq	.+12     	; 0x11ca <vfprintf+0x11a>
    11be:	83 37       	cpi	r24, 0x73	; 115
    11c0:	71 f0       	breq	.+28     	; 0x11de <vfprintf+0x12e>
    11c2:	83 35       	cpi	r24, 0x53	; 83
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <vfprintf+0x118>
    11c6:	59 c0       	rjmp	.+178    	; 0x127a <vfprintf+0x1ca>
    11c8:	21 c0       	rjmp	.+66     	; 0x120c <vfprintf+0x15c>
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 81       	ld	r24, Z
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	0e 5f       	subi	r16, 0xFE	; 254
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	88 24       	eor	r8, r8
    11d6:	83 94       	inc	r8
    11d8:	91 2c       	mov	r9, r1
    11da:	53 01       	movw	r10, r6
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <vfprintf+0x154>
    11de:	28 01       	movw	r4, r16
    11e0:	f2 e0       	ldi	r31, 0x02	; 2
    11e2:	4f 0e       	add	r4, r31
    11e4:	51 1c       	adc	r5, r1
    11e6:	f8 01       	movw	r30, r16
    11e8:	a0 80       	ld	r10, Z
    11ea:	b1 80       	ldd	r11, Z+1	; 0x01
    11ec:	36 fe       	sbrs	r3, 6
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <vfprintf+0x146>
    11f0:	69 2d       	mov	r22, r9
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0x14a>
    11f6:	6f ef       	ldi	r22, 0xFF	; 255
    11f8:	7f ef       	ldi	r23, 0xFF	; 255
    11fa:	c5 01       	movw	r24, r10
    11fc:	0e 94 44 0a 	call	0x1488	; 0x1488 <strnlen>
    1200:	4c 01       	movw	r8, r24
    1202:	82 01       	movw	r16, r4
    1204:	f3 2d       	mov	r31, r3
    1206:	ff 77       	andi	r31, 0x7F	; 127
    1208:	3f 2e       	mov	r3, r31
    120a:	16 c0       	rjmp	.+44     	; 0x1238 <vfprintf+0x188>
    120c:	28 01       	movw	r4, r16
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	42 0e       	add	r4, r18
    1212:	51 1c       	adc	r5, r1
    1214:	f8 01       	movw	r30, r16
    1216:	a0 80       	ld	r10, Z
    1218:	b1 80       	ldd	r11, Z+1	; 0x01
    121a:	36 fe       	sbrs	r3, 6
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <vfprintf+0x174>
    121e:	69 2d       	mov	r22, r9
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <vfprintf+0x178>
    1224:	6f ef       	ldi	r22, 0xFF	; 255
    1226:	7f ef       	ldi	r23, 0xFF	; 255
    1228:	c5 01       	movw	r24, r10
    122a:	0e 94 39 0a 	call	0x1472	; 0x1472 <strnlen_P>
    122e:	4c 01       	movw	r8, r24
    1230:	f3 2d       	mov	r31, r3
    1232:	f0 68       	ori	r31, 0x80	; 128
    1234:	3f 2e       	mov	r3, r31
    1236:	82 01       	movw	r16, r4
    1238:	33 fc       	sbrc	r3, 3
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <vfprintf+0x1c2>
    123c:	82 2d       	mov	r24, r2
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	88 16       	cp	r8, r24
    1242:	99 06       	cpc	r9, r25
    1244:	b0 f4       	brcc	.+44     	; 0x1272 <vfprintf+0x1c2>
    1246:	b6 01       	movw	r22, r12
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1250:	2a 94       	dec	r2
    1252:	f4 cf       	rjmp	.-24     	; 0x123c <vfprintf+0x18c>
    1254:	f5 01       	movw	r30, r10
    1256:	37 fc       	sbrc	r3, 7
    1258:	85 91       	lpm	r24, Z+
    125a:	37 fe       	sbrs	r3, 7
    125c:	81 91       	ld	r24, Z+
    125e:	5f 01       	movw	r10, r30
    1260:	b6 01       	movw	r22, r12
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1268:	21 10       	cpse	r2, r1
    126a:	2a 94       	dec	r2
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	82 1a       	sub	r8, r18
    1270:	91 08       	sbc	r9, r1
    1272:	81 14       	cp	r8, r1
    1274:	91 04       	cpc	r9, r1
    1276:	71 f7       	brne	.-36     	; 0x1254 <vfprintf+0x1a4>
    1278:	e8 c0       	rjmp	.+464    	; 0x144a <vfprintf+0x39a>
    127a:	84 36       	cpi	r24, 0x64	; 100
    127c:	11 f0       	breq	.+4      	; 0x1282 <vfprintf+0x1d2>
    127e:	89 36       	cpi	r24, 0x69	; 105
    1280:	41 f5       	brne	.+80     	; 0x12d2 <vfprintf+0x222>
    1282:	f8 01       	movw	r30, r16
    1284:	37 fe       	sbrs	r3, 7
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <vfprintf+0x1e6>
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	0c 5f       	subi	r16, 0xFC	; 252
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <vfprintf+0x1f6>
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	07 2e       	mov	r0, r23
    129c:	00 0c       	add	r0, r0
    129e:	88 0b       	sbc	r24, r24
    12a0:	99 0b       	sbc	r25, r25
    12a2:	0e 5f       	subi	r16, 0xFE	; 254
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	f3 2d       	mov	r31, r3
    12a8:	ff 76       	andi	r31, 0x6F	; 111
    12aa:	3f 2e       	mov	r3, r31
    12ac:	97 ff       	sbrs	r25, 7
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <vfprintf+0x212>
    12b0:	90 95       	com	r25
    12b2:	80 95       	com	r24
    12b4:	70 95       	com	r23
    12b6:	61 95       	neg	r22
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	f0 68       	ori	r31, 0x80	; 128
    12c0:	3f 2e       	mov	r3, r31
    12c2:	2a e0       	ldi	r18, 0x0A	; 10
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	a3 01       	movw	r20, r6
    12c8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
    12cc:	88 2e       	mov	r8, r24
    12ce:	86 18       	sub	r8, r6
    12d0:	45 c0       	rjmp	.+138    	; 0x135c <vfprintf+0x2ac>
    12d2:	85 37       	cpi	r24, 0x75	; 117
    12d4:	31 f4       	brne	.+12     	; 0x12e2 <vfprintf+0x232>
    12d6:	23 2d       	mov	r18, r3
    12d8:	2f 7e       	andi	r18, 0xEF	; 239
    12da:	b2 2e       	mov	r11, r18
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	25 c0       	rjmp	.+74     	; 0x132c <vfprintf+0x27c>
    12e2:	93 2d       	mov	r25, r3
    12e4:	99 7f       	andi	r25, 0xF9	; 249
    12e6:	b9 2e       	mov	r11, r25
    12e8:	8f 36       	cpi	r24, 0x6F	; 111
    12ea:	c1 f0       	breq	.+48     	; 0x131c <vfprintf+0x26c>
    12ec:	18 f4       	brcc	.+6      	; 0x12f4 <vfprintf+0x244>
    12ee:	88 35       	cpi	r24, 0x58	; 88
    12f0:	79 f0       	breq	.+30     	; 0x1310 <vfprintf+0x260>
    12f2:	b5 c0       	rjmp	.+362    	; 0x145e <vfprintf+0x3ae>
    12f4:	80 37       	cpi	r24, 0x70	; 112
    12f6:	19 f0       	breq	.+6      	; 0x12fe <vfprintf+0x24e>
    12f8:	88 37       	cpi	r24, 0x78	; 120
    12fa:	21 f0       	breq	.+8      	; 0x1304 <vfprintf+0x254>
    12fc:	b0 c0       	rjmp	.+352    	; 0x145e <vfprintf+0x3ae>
    12fe:	e9 2f       	mov	r30, r25
    1300:	e0 61       	ori	r30, 0x10	; 16
    1302:	be 2e       	mov	r11, r30
    1304:	b4 fe       	sbrs	r11, 4
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <vfprintf+0x272>
    1308:	fb 2d       	mov	r31, r11
    130a:	f4 60       	ori	r31, 0x04	; 4
    130c:	bf 2e       	mov	r11, r31
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <vfprintf+0x272>
    1310:	34 fe       	sbrs	r3, 4
    1312:	0a c0       	rjmp	.+20     	; 0x1328 <vfprintf+0x278>
    1314:	29 2f       	mov	r18, r25
    1316:	26 60       	ori	r18, 0x06	; 6
    1318:	b2 2e       	mov	r11, r18
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <vfprintf+0x278>
    131c:	28 e0       	ldi	r18, 0x08	; 8
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	05 c0       	rjmp	.+10     	; 0x132c <vfprintf+0x27c>
    1322:	20 e1       	ldi	r18, 0x10	; 16
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x27c>
    1328:	20 e1       	ldi	r18, 0x10	; 16
    132a:	32 e0       	ldi	r19, 0x02	; 2
    132c:	f8 01       	movw	r30, r16
    132e:	b7 fe       	sbrs	r11, 7
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <vfprintf+0x290>
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	0c 5f       	subi	r16, 0xFC	; 252
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	06 c0       	rjmp	.+12     	; 0x134c <vfprintf+0x29c>
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 5f       	subi	r16, 0xFE	; 254
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	a3 01       	movw	r20, r6
    134e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
    1352:	88 2e       	mov	r8, r24
    1354:	86 18       	sub	r8, r6
    1356:	fb 2d       	mov	r31, r11
    1358:	ff 77       	andi	r31, 0x7F	; 127
    135a:	3f 2e       	mov	r3, r31
    135c:	36 fe       	sbrs	r3, 6
    135e:	0d c0       	rjmp	.+26     	; 0x137a <vfprintf+0x2ca>
    1360:	23 2d       	mov	r18, r3
    1362:	2e 7f       	andi	r18, 0xFE	; 254
    1364:	a2 2e       	mov	r10, r18
    1366:	89 14       	cp	r8, r9
    1368:	58 f4       	brcc	.+22     	; 0x1380 <vfprintf+0x2d0>
    136a:	34 fe       	sbrs	r3, 4
    136c:	0b c0       	rjmp	.+22     	; 0x1384 <vfprintf+0x2d4>
    136e:	32 fc       	sbrc	r3, 2
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <vfprintf+0x2d4>
    1372:	83 2d       	mov	r24, r3
    1374:	8e 7e       	andi	r24, 0xEE	; 238
    1376:	a8 2e       	mov	r10, r24
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <vfprintf+0x2d4>
    137a:	b8 2c       	mov	r11, r8
    137c:	a3 2c       	mov	r10, r3
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <vfprintf+0x2d6>
    1380:	b8 2c       	mov	r11, r8
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <vfprintf+0x2d6>
    1384:	b9 2c       	mov	r11, r9
    1386:	a4 fe       	sbrs	r10, 4
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <vfprintf+0x2f8>
    138a:	fe 01       	movw	r30, r28
    138c:	e8 0d       	add	r30, r8
    138e:	f1 1d       	adc	r31, r1
    1390:	80 81       	ld	r24, Z
    1392:	80 33       	cpi	r24, 0x30	; 48
    1394:	21 f4       	brne	.+8      	; 0x139e <vfprintf+0x2ee>
    1396:	9a 2d       	mov	r25, r10
    1398:	99 7e       	andi	r25, 0xE9	; 233
    139a:	a9 2e       	mov	r10, r25
    139c:	09 c0       	rjmp	.+18     	; 0x13b0 <vfprintf+0x300>
    139e:	a2 fe       	sbrs	r10, 2
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <vfprintf+0x2fe>
    13a2:	b3 94       	inc	r11
    13a4:	b3 94       	inc	r11
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <vfprintf+0x300>
    13a8:	8a 2d       	mov	r24, r10
    13aa:	86 78       	andi	r24, 0x86	; 134
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <vfprintf+0x300>
    13ae:	b3 94       	inc	r11
    13b0:	a3 fc       	sbrc	r10, 3
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <vfprintf+0x326>
    13b4:	a0 fe       	sbrs	r10, 0
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <vfprintf+0x314>
    13b8:	b2 14       	cp	r11, r2
    13ba:	88 f4       	brcc	.+34     	; 0x13de <vfprintf+0x32e>
    13bc:	28 0c       	add	r2, r8
    13be:	92 2c       	mov	r9, r2
    13c0:	9b 18       	sub	r9, r11
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <vfprintf+0x330>
    13c4:	b2 14       	cp	r11, r2
    13c6:	60 f4       	brcc	.+24     	; 0x13e0 <vfprintf+0x330>
    13c8:	b6 01       	movw	r22, r12
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    13d2:	b3 94       	inc	r11
    13d4:	f7 cf       	rjmp	.-18     	; 0x13c4 <vfprintf+0x314>
    13d6:	b2 14       	cp	r11, r2
    13d8:	18 f4       	brcc	.+6      	; 0x13e0 <vfprintf+0x330>
    13da:	2b 18       	sub	r2, r11
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <vfprintf+0x332>
    13de:	98 2c       	mov	r9, r8
    13e0:	21 2c       	mov	r2, r1
    13e2:	a4 fe       	sbrs	r10, 4
    13e4:	10 c0       	rjmp	.+32     	; 0x1406 <vfprintf+0x356>
    13e6:	b6 01       	movw	r22, r12
    13e8:	80 e3       	ldi	r24, 0x30	; 48
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    13f0:	a2 fe       	sbrs	r10, 2
    13f2:	17 c0       	rjmp	.+46     	; 0x1422 <vfprintf+0x372>
    13f4:	a1 fc       	sbrc	r10, 1
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vfprintf+0x34e>
    13f8:	88 e7       	ldi	r24, 0x78	; 120
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x352>
    13fe:	88 e5       	ldi	r24, 0x58	; 88
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	b6 01       	movw	r22, r12
    1404:	0c c0       	rjmp	.+24     	; 0x141e <vfprintf+0x36e>
    1406:	8a 2d       	mov	r24, r10
    1408:	86 78       	andi	r24, 0x86	; 134
    140a:	59 f0       	breq	.+22     	; 0x1422 <vfprintf+0x372>
    140c:	a1 fe       	sbrs	r10, 1
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x364>
    1410:	8b e2       	ldi	r24, 0x2B	; 43
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <vfprintf+0x366>
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	a7 fc       	sbrc	r10, 7
    1418:	8d e2       	ldi	r24, 0x2D	; 45
    141a:	b6 01       	movw	r22, r12
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1422:	89 14       	cp	r8, r9
    1424:	38 f4       	brcc	.+14     	; 0x1434 <vfprintf+0x384>
    1426:	b6 01       	movw	r22, r12
    1428:	80 e3       	ldi	r24, 0x30	; 48
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1430:	9a 94       	dec	r9
    1432:	f7 cf       	rjmp	.-18     	; 0x1422 <vfprintf+0x372>
    1434:	8a 94       	dec	r8
    1436:	f3 01       	movw	r30, r6
    1438:	e8 0d       	add	r30, r8
    143a:	f1 1d       	adc	r31, r1
    143c:	80 81       	ld	r24, Z
    143e:	b6 01       	movw	r22, r12
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1446:	81 10       	cpse	r8, r1
    1448:	f5 cf       	rjmp	.-22     	; 0x1434 <vfprintf+0x384>
    144a:	22 20       	and	r2, r2
    144c:	09 f4       	brne	.+2      	; 0x1450 <vfprintf+0x3a0>
    144e:	42 ce       	rjmp	.-892    	; 0x10d4 <vfprintf+0x24>
    1450:	b6 01       	movw	r22, r12
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    145a:	2a 94       	dec	r2
    145c:	f6 cf       	rjmp	.-20     	; 0x144a <vfprintf+0x39a>
    145e:	f6 01       	movw	r30, r12
    1460:	86 81       	ldd	r24, Z+6	; 0x06
    1462:	97 81       	ldd	r25, Z+7	; 0x07
    1464:	02 c0       	rjmp	.+4      	; 0x146a <vfprintf+0x3ba>
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
    146a:	2b 96       	adiw	r28, 0x0b	; 11
    146c:	e2 e1       	ldi	r30, 0x12	; 18
    146e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__epilogue_restores__>

00001472 <strnlen_P>:
    1472:	fc 01       	movw	r30, r24
    1474:	05 90       	lpm	r0, Z+
    1476:	61 50       	subi	r22, 0x01	; 1
    1478:	70 40       	sbci	r23, 0x00	; 0
    147a:	01 10       	cpse	r0, r1
    147c:	d8 f7       	brcc	.-10     	; 0x1474 <strnlen_P+0x2>
    147e:	80 95       	com	r24
    1480:	90 95       	com	r25
    1482:	8e 0f       	add	r24, r30
    1484:	9f 1f       	adc	r25, r31
    1486:	08 95       	ret

00001488 <strnlen>:
    1488:	fc 01       	movw	r30, r24
    148a:	61 50       	subi	r22, 0x01	; 1
    148c:	70 40       	sbci	r23, 0x00	; 0
    148e:	01 90       	ld	r0, Z+
    1490:	01 10       	cpse	r0, r1
    1492:	d8 f7       	brcc	.-10     	; 0x148a <strnlen+0x2>
    1494:	80 95       	com	r24
    1496:	90 95       	com	r25
    1498:	8e 0f       	add	r24, r30
    149a:	9f 1f       	adc	r25, r31
    149c:	08 95       	ret

0000149e <fputc>:
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	fb 01       	movw	r30, r22
    14a8:	23 81       	ldd	r18, Z+3	; 0x03
    14aa:	21 fd       	sbrc	r18, 1
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <fputc+0x16>
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	2c c0       	rjmp	.+88     	; 0x150c <fputc+0x6e>
    14b4:	22 ff       	sbrs	r18, 2
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <fputc+0x46>
    14b8:	46 81       	ldd	r20, Z+6	; 0x06
    14ba:	57 81       	ldd	r21, Z+7	; 0x07
    14bc:	24 81       	ldd	r18, Z+4	; 0x04
    14be:	35 81       	ldd	r19, Z+5	; 0x05
    14c0:	42 17       	cp	r20, r18
    14c2:	53 07       	cpc	r21, r19
    14c4:	44 f4       	brge	.+16     	; 0x14d6 <fputc+0x38>
    14c6:	a0 81       	ld	r26, Z
    14c8:	b1 81       	ldd	r27, Z+1	; 0x01
    14ca:	9d 01       	movw	r18, r26
    14cc:	2f 5f       	subi	r18, 0xFF	; 255
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	31 83       	std	Z+1, r19	; 0x01
    14d2:	20 83       	st	Z, r18
    14d4:	8c 93       	st	X, r24
    14d6:	26 81       	ldd	r18, Z+6	; 0x06
    14d8:	37 81       	ldd	r19, Z+7	; 0x07
    14da:	2f 5f       	subi	r18, 0xFF	; 255
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	37 83       	std	Z+7, r19	; 0x07
    14e0:	26 83       	std	Z+6, r18	; 0x06
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <fputc+0x6e>
    14e4:	8b 01       	movw	r16, r22
    14e6:	ec 01       	movw	r28, r24
    14e8:	fb 01       	movw	r30, r22
    14ea:	00 84       	ldd	r0, Z+8	; 0x08
    14ec:	f1 85       	ldd	r31, Z+9	; 0x09
    14ee:	e0 2d       	mov	r30, r0
    14f0:	09 95       	icall
    14f2:	89 2b       	or	r24, r25
    14f4:	e1 f6       	brne	.-72     	; 0x14ae <fputc+0x10>
    14f6:	d8 01       	movw	r26, r16
    14f8:	16 96       	adiw	r26, 0x06	; 6
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	17 97       	sbiw	r26, 0x07	; 7
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	17 96       	adiw	r26, 0x07	; 7
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
    1508:	16 97       	sbiw	r26, 0x06	; 6
    150a:	ce 01       	movw	r24, r28
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <__ultoa_invert>:
    1516:	fa 01       	movw	r30, r20
    1518:	aa 27       	eor	r26, r26
    151a:	28 30       	cpi	r18, 0x08	; 8
    151c:	51 f1       	breq	.+84     	; 0x1572 <__ultoa_invert+0x5c>
    151e:	20 31       	cpi	r18, 0x10	; 16
    1520:	81 f1       	breq	.+96     	; 0x1582 <__ultoa_invert+0x6c>
    1522:	e8 94       	clt
    1524:	6f 93       	push	r22
    1526:	6e 7f       	andi	r22, 0xFE	; 254
    1528:	6e 5f       	subi	r22, 0xFE	; 254
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	af 4f       	sbci	r26, 0xFF	; 255
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	3e d0       	rcall	.+124    	; 0x15b2 <__ultoa_invert+0x9c>
    1536:	b4 e0       	ldi	r27, 0x04	; 4
    1538:	3c d0       	rcall	.+120    	; 0x15b2 <__ultoa_invert+0x9c>
    153a:	67 0f       	add	r22, r23
    153c:	78 1f       	adc	r23, r24
    153e:	89 1f       	adc	r24, r25
    1540:	9a 1f       	adc	r25, r26
    1542:	a1 1d       	adc	r26, r1
    1544:	68 0f       	add	r22, r24
    1546:	79 1f       	adc	r23, r25
    1548:	8a 1f       	adc	r24, r26
    154a:	91 1d       	adc	r25, r1
    154c:	a1 1d       	adc	r26, r1
    154e:	6a 0f       	add	r22, r26
    1550:	71 1d       	adc	r23, r1
    1552:	81 1d       	adc	r24, r1
    1554:	91 1d       	adc	r25, r1
    1556:	a1 1d       	adc	r26, r1
    1558:	20 d0       	rcall	.+64     	; 0x159a <__ultoa_invert+0x84>
    155a:	09 f4       	brne	.+2      	; 0x155e <__ultoa_invert+0x48>
    155c:	68 94       	set
    155e:	3f 91       	pop	r19
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	26 9f       	mul	r18, r22
    1564:	11 24       	eor	r1, r1
    1566:	30 19       	sub	r19, r0
    1568:	30 5d       	subi	r19, 0xD0	; 208
    156a:	31 93       	st	Z+, r19
    156c:	de f6       	brtc	.-74     	; 0x1524 <__ultoa_invert+0xe>
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret
    1572:	46 2f       	mov	r20, r22
    1574:	47 70       	andi	r20, 0x07	; 7
    1576:	40 5d       	subi	r20, 0xD0	; 208
    1578:	41 93       	st	Z+, r20
    157a:	b3 e0       	ldi	r27, 0x03	; 3
    157c:	0f d0       	rcall	.+30     	; 0x159c <__ultoa_invert+0x86>
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x5c>
    1580:	f6 cf       	rjmp	.-20     	; 0x156e <__ultoa_invert+0x58>
    1582:	46 2f       	mov	r20, r22
    1584:	4f 70       	andi	r20, 0x0F	; 15
    1586:	40 5d       	subi	r20, 0xD0	; 208
    1588:	4a 33       	cpi	r20, 0x3A	; 58
    158a:	18 f0       	brcs	.+6      	; 0x1592 <__ultoa_invert+0x7c>
    158c:	49 5d       	subi	r20, 0xD9	; 217
    158e:	31 fd       	sbrc	r19, 1
    1590:	40 52       	subi	r20, 0x20	; 32
    1592:	41 93       	st	Z+, r20
    1594:	02 d0       	rcall	.+4      	; 0x159a <__ultoa_invert+0x84>
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__ultoa_invert+0x6c>
    1598:	ea cf       	rjmp	.-44     	; 0x156e <__ultoa_invert+0x58>
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	a6 95       	lsr	r26
    159e:	97 95       	ror	r25
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0x86>
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 05       	cpc	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	08 95       	ret
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	0a 2e       	mov	r0, r26
    15b8:	06 94       	lsr	r0
    15ba:	57 95       	ror	r21
    15bc:	47 95       	ror	r20
    15be:	37 95       	ror	r19
    15c0:	27 95       	ror	r18
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0xa2>
    15c6:	62 0f       	add	r22, r18
    15c8:	73 1f       	adc	r23, r19
    15ca:	84 1f       	adc	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	a0 1d       	adc	r26, r0
    15d0:	08 95       	ret

000015d2 <__prologue_saves__>:
    15d2:	2f 92       	push	r2
    15d4:	3f 92       	push	r3
    15d6:	4f 92       	push	r4
    15d8:	5f 92       	push	r5
    15da:	6f 92       	push	r6
    15dc:	7f 92       	push	r7
    15de:	8f 92       	push	r8
    15e0:	9f 92       	push	r9
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	ca 1b       	sub	r28, r26
    15fc:	db 0b       	sbc	r29, r27
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	09 94       	ijmp

0000160a <__epilogue_restores__>:
    160a:	2a 88       	ldd	r2, Y+18	; 0x12
    160c:	39 88       	ldd	r3, Y+17	; 0x11
    160e:	48 88       	ldd	r4, Y+16	; 0x10
    1610:	5f 84       	ldd	r5, Y+15	; 0x0f
    1612:	6e 84       	ldd	r6, Y+14	; 0x0e
    1614:	7d 84       	ldd	r7, Y+13	; 0x0d
    1616:	8c 84       	ldd	r8, Y+12	; 0x0c
    1618:	9b 84       	ldd	r9, Y+11	; 0x0b
    161a:	aa 84       	ldd	r10, Y+10	; 0x0a
    161c:	b9 84       	ldd	r11, Y+9	; 0x09
    161e:	c8 84       	ldd	r12, Y+8	; 0x08
    1620:	df 80       	ldd	r13, Y+7	; 0x07
    1622:	ee 80       	ldd	r14, Y+6	; 0x06
    1624:	fd 80       	ldd	r15, Y+5	; 0x05
    1626:	0c 81       	ldd	r16, Y+4	; 0x04
    1628:	1b 81       	ldd	r17, Y+3	; 0x03
    162a:	aa 81       	ldd	r26, Y+2	; 0x02
    162c:	b9 81       	ldd	r27, Y+1	; 0x01
    162e:	ce 0f       	add	r28, r30
    1630:	d1 1d       	adc	r29, r1
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	ed 01       	movw	r28, r26
    163e:	08 95       	ret

00001640 <_exit>:
    1640:	f8 94       	cli

00001642 <__stop_program>:
    1642:	ff cf       	rjmp	.-2      	; 0x1642 <__stop_program>
