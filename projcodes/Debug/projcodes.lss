
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f4  00800060  00002b04  00002b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00800254  00800254  00002d8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c52  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e31  00000000  00000000  00007f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003162  00000000  00000000  00009d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  0000ced4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c8b  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029a5  00000000  00000000  0000e57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	25 05       	cpc	r18, r5
      56:	28 05       	cpc	r18, r8
      58:	2b 05       	cpc	r18, r11
      5a:	2e 05       	cpc	r18, r14
      5c:	31 05       	cpc	r19, r1
      5e:	34 05       	cpc	r19, r4
      60:	37 05       	cpc	r19, r7
      62:	73 0c       	add	r7, r3
      64:	76 0c       	add	r7, r6
      66:	79 0c       	add	r7, r9
      68:	7c 0c       	add	r7, r12
      6a:	7f 0c       	add	r7, r15
      6c:	82 0c       	add	r8, r2
      6e:	85 0c       	add	r8, r5

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <Keypad_AddKey+0xca>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <Error_ErrorBin+0x46>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <regression+0x13e>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <sumit+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e4 e0       	ldi	r30, 0x04	; 4
     17e:	fb e2       	ldi	r31, 0x2B	; 43
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a4 35       	cpi	r26, 0x54	; 84
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a4 e5       	ldi	r26, 0x54	; 84
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3c       	cpi	r26, 0xC8	; 200
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 a5 09 	call	0x134a	; 0x134a <main>
     1a0:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <sumit>:
char disp[16] = "00000000000001";
char result[8] = "000001"; 

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=data_points[i];
     1bc:	16 16       	cp	r1, r22
     1be:	17 06       	cpc	r1, r23
     1c0:	04 f5       	brge	.+64     	; 0x202 <sumit+0x5a>
     1c2:	7b 01       	movw	r14, r22
     1c4:	8c 01       	movw	r16, r24
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	c1 e0       	ldi	r28, 0x01	; 1
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	f8 01       	movw	r30, r16
     1d6:	61 91       	ld	r22, Z+
     1d8:	71 91       	ld	r23, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	07 2e       	mov	r0, r23
     1de:	00 0c       	add	r0, r0
     1e0:	88 0b       	sbc	r24, r24
     1e2:	99 0b       	sbc	r25, r25
     1e4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	ec 16       	cp	r14, r28
     1fc:	fd 06       	cpc	r15, r29
     1fe:	54 f7       	brge	.-44     	; 0x1d4 <sumit+0x2c>
     200:	03 c0       	rjmp	.+6      	; 0x208 <sumit+0x60>

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	 int i;
	 double sum=0;
     202:	81 2c       	mov	r8, r1
     204:	91 2c       	mov	r9, r1
     206:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=data_points[i];

	 return sum;
}
     208:	c5 01       	movw	r24, r10
     20a:	b4 01       	movw	r22, r8
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <xysum>:

double xysum(int data_points[],int length){
     222:	8f 92       	push	r8
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     236:	16 16       	cp	r1, r22
     238:	17 06       	cpc	r1, r23
     23a:	3c f5       	brge	.+78     	; 0x28a <xysum+0x68>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	c1 e0       	ldi	r28, 0x01	; 1
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	54 01       	movw	r10, r8
     24e:	f8 01       	movw	r30, r16
     250:	81 91       	ld	r24, Z+
     252:	91 91       	ld	r25, Z+
     254:	8f 01       	movw	r16, r30
     256:	8c 9f       	mul	r24, r28
     258:	b0 01       	movw	r22, r0
     25a:	8d 9f       	mul	r24, r29
     25c:	70 0d       	add	r23, r0
     25e:	9c 9f       	mul	r25, r28
     260:	70 0d       	add	r23, r0
     262:	11 24       	eor	r1, r1
     264:	07 2e       	mov	r0, r23
     266:	00 0c       	add	r0, r0
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__floatsisf>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ec 16       	cp	r14, r28
     284:	fd 06       	cpc	r15, r29
     286:	1c f7       	brge	.-58     	; 0x24e <xysum+0x2c>
     288:	03 c0       	rjmp	.+6      	; 0x290 <xysum+0x6e>
	 return sum;
}

double xysum(int data_points[],int length){
	 int i;
	 double sum=0;
     28a:	81 2c       	mov	r8, r1
     28c:	91 2c       	mov	r9, r1
     28e:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];

	 return sum;
}
     290:	c5 01       	movw	r24, r10
     292:	b4 01       	movw	r22, r8
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret

000002aa <regression>:

void regression(int data_points[],double n){
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	60 97       	sbiw	r28, 0x10	; 16
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	3c 01       	movw	r6, r24
     2d8:	6a 01       	movw	r12, r20
     2da:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
     2ec:	6d 83       	std	Y+5, r22	; 0x05
     2ee:	7e 83       	std	Y+6, r23	; 0x06
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
	double xbar = (n+1)/2.0;
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__fixsfsi>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	c3 01       	movw	r24, r6
     316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sumit>
     31a:	a7 01       	movw	r20, r14
     31c:	96 01       	movw	r18, r12
     31e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divsf3>
     322:	69 87       	std	Y+9, r22	; 0x09
     324:	7a 87       	std	Y+10, r23	; 0x0a
     326:	8b 87       	std	Y+11, r24	; 0x0b
     328:	9c 87       	std	Y+12, r25	; 0x0c

	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     32a:	b4 01       	movw	r22, r8
     32c:	c3 01       	movw	r24, r6
     32e:	0e 94 11 01 	call	0x222	; 0x222 <xysum>
     332:	4b 01       	movw	r8, r22
     334:	5c 01       	movw	r10, r24
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     346:	2b 01       	movw	r4, r22
     348:	3c 01       	movw	r6, r24
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	69 85       	ldd	r22, Y+9	; 0x09
     350:	7a 85       	ldd	r23, Y+10	; 0x0a
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__subsf3>
     366:	4b 01       	movw	r8, r22
     368:	5c 01       	movw	r10, r24
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
     382:	6d 87       	std	Y+13, r22	; 0x0d
     384:	7e 87       	std	Y+14, r23	; 0x0e
     386:	8f 87       	std	Y+15, r24	; 0x0f
     388:	98 8b       	std	Y+16, r25	; 0x10
     38a:	2d 81       	ldd	r18, Y+5	; 0x05
     38c:	3e 81       	ldd	r19, Y+6	; 0x06
     38e:	4f 81       	ldd	r20, Y+7	; 0x07
     390:	58 85       	ldd	r21, Y+8	; 0x08
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a4:	98 89       	ldd	r25, Y+16	; 0x10
     3a6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 ec       	ldi	r20, 0xC0	; 192
     3b0:	50 e4       	ldi	r21, 0x40	; 64
     3b2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a3 01       	movw	r20, r6
     3bc:	92 01       	movw	r18, r4
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__subsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divsf3>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <m>
     3ea:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <m+0x1>
     3ee:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <m+0x2>
     3f2:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <m+0x3>
	c=ybar-m*xbar;
     3f6:	69 81       	ldd	r22, Y+1	; 0x01
     3f8:	7a 81       	ldd	r23, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	69 85       	ldd	r22, Y+9	; 0x09
     408:	7a 85       	ldd	r23, Y+10	; 0x0a
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__subsf3>
     412:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <__data_end>
     416:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <__data_end+0x1>
     41a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end+0x2>
     41e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x3>
}
     422:	60 96       	adiw	r28, 0x10	; 16
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	08 95       	ret

0000044c <Bp_Read>:

int Bp_Read(char channel)
{
    int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
     44c:	97 b1       	in	r25, 0x07	; 7
     44e:	8f 70       	andi	r24, 0x0F	; 15
     450:	98 2b       	or	r25, r24
     452:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
     454:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADIF)==0);	/* Monitor end of conversion interrupt */
     456:	86 b1       	in	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	8a e1       	ldi	r24, 0x1A	; 26
     45a:	8a 95       	dec	r24
     45c:	f1 f7       	brne	.-4      	; 0x45a <Bp_Read+0xe>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <Bp_Read+0x14>
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
     460:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
     462:	85 b1       	in	r24, 0x05	; 5
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	98 2f       	mov	r25, r24
     468:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
     46a:	82 0f       	add	r24, r18
     46c:	91 1d       	adc	r25, r1
     46e:	08 95       	ret

00000470 <Bp_Init>:

void Bp_Init()
{
	DDRA &= ~2;
     470:	d1 98       	cbi	0x1a, 1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
     472:	87 e8       	ldi	r24, 0x87	; 135
     474:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
     476:	80 e4       	ldi	r24, 0x40	; 64
     478:	87 b9       	out	0x07, r24	; 7
    Lcd_ClearScreen(LCDKEYPAD);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 6d 05 	call	0xada	; 0xada <Lcd_ClearScreen>
     480:	08 95       	ret

00000482 <Bp_PrintBp>:
}

void Bp_PrintBp()
{
     482:	4f 92       	push	r4
     484:	5f 92       	push	r5
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	cc 56       	subi	r28, 0x6C	; 108
     4a8:	d1 09       	sbc	r29, r1
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
    double sampling_rate = 0.100 ;	   	// actually this is the _delay_ms val
    int time_limit = 10 ;  				 //in seconds
    int se=time_limit/(sampling_rate*2);
    int data_points[se+1];

	data_points[0]=0;
     4b4:	18 86       	std	Y+8, r1	; 0x08
     4b6:	1f 82       	std	Y+7, r1	; 0x07
     4b8:	7e 01       	movw	r14, r28
     4ba:	29 e0       	ldi	r18, 0x09	; 9
     4bc:	e2 0e       	add	r14, r18
     4be:	f1 1c       	adc	r15, r1
     4c0:	67 01       	movw	r12, r14
     4c2:	00 e0       	ldi	r16, 0x00	; 0
     4c4:	10 e0       	ldi	r17, 0x00	; 0
	int l=1023;
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<time_limit/(sampling_rate*2);i++){	
		data_points[i+1]=Bp_Read(0);
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 26 02 	call	0x44c	; 0x44c <Bp_Read>
     4d0:	f6 01       	movw	r30, r12
     4d2:	81 93       	st	Z+, r24
     4d4:	91 93       	st	Z+, r25
     4d6:	6f 01       	movw	r12, r30
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4d8:	4a e0       	ldi	r20, 0x0A	; 10
     4da:	be 01       	movw	r22, r28
     4dc:	6f 5f       	subi	r22, 0xFF	; 255
     4de:	7f 4f       	sbci	r23, 0xFF	; 255
     4e0:	0e 94 2f 10 	call	0x205e	; 0x205e <__itoa_ncheck>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e4:	ff ef       	ldi	r31, 0xFF	; 255
     4e6:	20 e7       	ldi	r18, 0x70	; 112
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	f1 50       	subi	r31, 0x01	; 1
     4ec:	20 40       	sbci	r18, 0x00	; 0
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <Bp_PrintBp+0x68>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Bp_PrintBp+0x72>
     4f4:	00 00       	nop
	int h=0;
	int l=1023;
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<time_limit/(sampling_rate*2);i++){	
     4f6:	02 33       	cpi	r16, 0x32	; 50
     4f8:	11 05       	cpc	r17, r1
     4fa:	29 f7       	brne	.-54     	; 0x4c6 <Bp_PrintBp+0x44>

		_delay_ms(sampling_rate*1000);
	
	}

	regression(data_points,se);
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	68 e4       	ldi	r22, 0x48	; 72
     502:	72 e4       	ldi	r23, 0x42	; 66
     504:	ce 01       	movw	r24, r28
     506:	07 96       	adiw	r24, 0x07	; 7
     508:	0e 94 55 01 	call	0x2aa	; 0x2aa <regression>

	//recorded wave form
	for(i=0;i<time_limit/(sampling_rate*2);i++){	
		thresh=(i+2)*m+c;
     50c:	40 90 58 02 	lds	r4, 0x0258	; 0x800258 <m>
     510:	50 90 59 02 	lds	r5, 0x0259	; 0x800259 <m+0x1>
     514:	60 90 5a 02 	lds	r6, 0x025A	; 0x80025a <m+0x2>
     518:	70 90 5b 02 	lds	r7, 0x025B	; 0x80025b <m+0x3>
     51c:	80 90 54 02 	lds	r8, 0x0254	; 0x800254 <__data_end>
     520:	90 90 55 02 	lds	r9, 0x0255	; 0x800255 <__data_end+0x1>
     524:	a0 90 56 02 	lds	r10, 0x0256	; 0x800256 <__data_end+0x2>
     528:	b0 90 57 02 	lds	r11, 0x0257	; 0x800257 <__data_end+0x3>
void Bp_PrintBp()
{
	int i;
	int thresh=300;
	int count=0;
	int count2=0; //modified peak counting algo
     52c:	c1 2c       	mov	r12, r1
     52e:	d1 2c       	mov	r13, r1
	}

	regression(data_points,se);

	//recorded wave form
	for(i=0;i<time_limit/(sampling_rate*2);i++){	
     530:	00 e0       	ldi	r16, 0x00	; 0
     532:	10 e0       	ldi	r17, 0x00	; 0
		thresh=(i+2)*m+c;
     534:	b8 01       	movw	r22, r16
     536:	6e 5f       	subi	r22, 0xFE	; 254
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	07 2e       	mov	r0, r23
     53c:	00 0c       	add	r0, r0
     53e:	88 0b       	sbc	r24, r24
     540:	99 0b       	sbc	r25, r25
     542:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__floatsisf>
     546:	a3 01       	movw	r20, r6
     548:	92 01       	movw	r18, r4
     54a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     54e:	a5 01       	movw	r20, r10
     550:	94 01       	movw	r18, r8
     552:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
     556:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__fixsfsi>

		int a=data_points[i+1];//current value
     55a:	0f 5f       	subi	r16, 0xFF	; 255
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	f7 01       	movw	r30, r14
     560:	41 91       	ld	r20, Z+
     562:	51 91       	ld	r21, Z+
     564:	7f 01       	movw	r14, r30
		char ccount[3];

		if(a>h)h=a; //max peak
		if(a<l)l=a; //min peak
		
		if(a>thresh){
     566:	64 17       	cp	r22, r20
     568:	75 07       	cpc	r23, r21
     56a:	7c f4       	brge	.+30     	; 0x58a <Bp_PrintBp+0x108>
			count+=1; //peak counting]
			if(a>data_points[i] && a>data_points[i+2]){
     56c:	34 97       	sbiw	r30, 0x04	; 4
     56e:	20 81       	ld	r18, Z
     570:	31 81       	ldd	r19, Z+1	; 0x01
     572:	24 17       	cp	r18, r20
     574:	35 07       	cpc	r19, r21
     576:	4c f4       	brge	.+18     	; 0x58a <Bp_PrintBp+0x108>
     578:	f7 01       	movw	r30, r14
     57a:	20 81       	ld	r18, Z
     57c:	31 81       	ldd	r19, Z+1	; 0x01
     57e:	24 17       	cp	r18, r20
     580:	35 07       	cpc	r19, r21
     582:	1c f4       	brge	.+6      	; 0x58a <Bp_PrintBp+0x108>
				count2+=1;
     584:	ff ef       	ldi	r31, 0xFF	; 255
     586:	cf 1a       	sub	r12, r31
     588:	df 0a       	sbc	r13, r31
	}

	regression(data_points,se);

	//recorded wave form
	for(i=0;i<time_limit/(sampling_rate*2);i++){	
     58a:	02 33       	cpi	r16, 0x32	; 50
     58c:	11 05       	cpc	r17, r1
     58e:	91 f6       	brne	.-92     	; 0x534 <Bp_PrintBp+0xb2>
     590:	c6 01       	movw	r24, r12
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	8c 0d       	add	r24, r12
     598:	9d 1d       	adc	r25, r13
     59a:	4a e0       	ldi	r20, 0x0A	; 10
     59c:	8e 01       	movw	r16, r28
     59e:	0f 5f       	subi	r16, 0xFF	; 255
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	b8 01       	movw	r22, r16
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	0e 94 2f 10 	call	0x205e	; 0x205e <__itoa_ncheck>
		}
	}

    itoa(count2*(60/time_limit),val,10);

	strcat(val," bpm");
     5ac:	d8 01       	movw	r26, r16
     5ae:	0d 90       	ld	r0, X+
     5b0:	00 20       	and	r0, r0
     5b2:	e9 f7       	brne	.-6      	; 0x5ae <Bp_PrintBp+0x12c>
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	eb e6       	ldi	r30, 0x6B	; 107
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	8a 95       	dec	r24
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <Bp_PrintBp+0x13a>
	Lcd_PrintLine(LCDKEYPAD, 1, val);
     5c4:	a8 01       	movw	r20, r16
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
}
     5d0:	c4 59       	subi	r28, 0x94	; 148
     5d2:	df 4f       	sbci	r29, 0xFF	; 255
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	bf 90       	pop	r11
     5f0:	af 90       	pop	r10
     5f2:	9f 90       	pop	r9
     5f4:	8f 90       	pop	r8
     5f6:	7f 90       	pop	r7
     5f8:	6f 90       	pop	r6
     5fa:	5f 90       	pop	r5
     5fc:	4f 90       	pop	r4
     5fe:	08 95       	ret

00000600 <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
     600:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
     604:	08 95       	ret

00000606 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	2a 97       	sbiw	r28, 0x0a	; 10
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	16 2f       	mov	r17, r22
     620:	07 2f       	mov	r16, r23
	HC05_SendString(text);
     622:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	80 e7       	ldi	r24, 0x70	; 112
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	8e 01       	movw	r16, r28
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	1f 93       	push	r17
     63a:	0f 93       	push	r16
     63c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <sprintf>
	HC05_SendString(temp);
     640:	c8 01       	movw	r24, r16
     642:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
	HC05_SendString("\r\n");
     646:	87 e7       	ldi	r24, 0x77	; 119
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
}
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	2a 96       	adiw	r28, 0x0a	; 10
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	2a 97       	sbiw	r28, 0x0a	; 10
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     68a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
     68e:	fe 01       	movw	r30, r28
     690:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     696:	c8 01       	movw	r24, r16
     698:	02 2e       	mov	r0, r18
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <Error_ErrorBin+0x30>
     69c:	95 95       	asr	r25
     69e:	87 95       	ror	r24
     6a0:	0a 94       	dec	r0
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <Error_ErrorBin+0x2c>
     6a4:	81 70       	andi	r24, 0x01	; 1
     6a6:	80 5d       	subi	r24, 0xD0	; 208
     6a8:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	28 30       	cpi	r18, 0x08	; 8
     6b0:	31 05       	cpc	r19, r1
     6b2:	89 f7       	brne	.-30     	; 0x696 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     6b4:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     6b6:	ce 01       	movw	r24, r28
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
	HC05_SendString("\r\n");
     6be:	87 e7       	ldi	r24, 0x77	; 119
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
     6c6:	2a 96       	adiw	r28, 0x0a	; 10
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <HC05_Init_Data_Mode>:

char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     6dc:	1b b8       	out	0x0b, r1	; 11
     6de:	88 e1       	ldi	r24, 0x18	; 24
     6e0:	8a b9       	out	0x0a, r24	; 10
     6e2:	86 e8       	ldi	r24, 0x86	; 134
     6e4:	80 bd       	out	0x20, r24	; 32
     6e6:	83 e3       	ldi	r24, 0x33	; 51
     6e8:	89 b9       	out	0x09, r24	; 9
     6ea:	10 bc       	out	0x20, r1	; 32
     6ec:	08 95       	ret

000006ee <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     6ee:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     6f0:	5d 9b       	sbis	0x0b, 5	; 11
     6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <HC05_SendChar+0x2>
}
     6f4:	08 95       	ret

000006f6 <HC05_SendString>:
void HC05_SendString(char * s)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
	while(*s)
     6fc:	88 81       	ld	r24, Y
     6fe:	88 23       	and	r24, r24
     700:	31 f0       	breq	.+12     	; 0x70e <HC05_SendString+0x18>
     702:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     704:	0e 94 77 03 	call	0x6ee	; 0x6ee <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     708:	89 91       	ld	r24, Y+
     70a:	81 11       	cpse	r24, r1
     70c:	fb cf       	rjmp	.-10     	; 0x704 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     714:	8a b3       	in	r24, 0x1a	; 26
     716:	83 70       	andi	r24, 0x03	; 3
     718:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     71e:	88 bb       	out	0x18, r24	; 24
     720:	08 95       	ret

00000722 <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     722:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <isNumber>
	isUpperCase = false;
     726:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <isUpperCase>
	position = 0;
     72a:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <position+0x1>
     72e:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <position>
	keyBuffer[position] = 0;
     732:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <keyBuffer>
     736:	08 95       	ret

00000738 <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	59 f4       	brne	.+22     	; 0x752 <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     73c:	8a e7       	ldi	r24, 0x7A	; 122
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
		position = 0;
     744:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <position+0x1>
     748:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <position>
		keyBuffer[position]=0;
     74c:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <keyBuffer>
     750:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     752:	fc 01       	movw	r30, r24
     754:	01 90       	ld	r0, Z+
     756:	00 20       	and	r0, r0
     758:	e9 f7       	brne	.-6      	; 0x754 <Keypad_WriteToBuffer+0x1c>
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	e8 1b       	sub	r30, r24
     75e:	f9 0b       	sbc	r31, r25
     760:	e0 31       	cpi	r30, 0x10	; 16
     762:	f1 05       	cpc	r31, r1
     764:	28 f5       	brcc	.+74     	; 0x7b0 <Keypad_WriteToBuffer+0x78>
     766:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     768:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <position+0x1>
     76c:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <position>
     770:	1e 16       	cp	r1, r30
     772:	1f 06       	cpc	r1, r31
     774:	b4 f4       	brge	.+44     	; 0x7a2 <Keypad_WriteToBuffer+0x6a>
     776:	fc 01       	movw	r30, r24
     778:	a2 e6       	ldi	r26, 0x62	; 98
     77a:	b2 e0       	ldi	r27, 0x02	; 2
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     780:	81 91       	ld	r24, Z+
     782:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <position+0x1>
     78c:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <position>
     790:	24 17       	cp	r18, r20
     792:	35 07       	cpc	r19, r21
     794:	ac f3       	brlt	.-22     	; 0x780 <Keypad_WriteToBuffer+0x48>
     796:	14 16       	cp	r1, r20
     798:	15 06       	cpc	r1, r21
     79a:	2c f0       	brlt	.+10     	; 0x7a6 <Keypad_WriteToBuffer+0x6e>
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <Keypad_WriteToBuffer+0x6e>
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     7a6:	fa 01       	movw	r30, r20
     7a8:	ee 59       	subi	r30, 0x9E	; 158
     7aa:	fd 4f       	sbci	r31, 0xFD	; 253
     7ac:	10 82       	st	Z, r1
	}
}
     7ae:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     7b0:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <position+0x1>
     7b4:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <position>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     7b8:	40 e1       	ldi	r20, 0x10	; 16
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	dc cf       	rjmp	.-72     	; 0x776 <Keypad_WriteToBuffer+0x3e>

000007be <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <isNumber>
     7c4:	08 95       	ret

000007c6 <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     7c6:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <isNumber>
     7ca:	81 11       	cpse	r24, r1
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     7ce:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <isUpperCase>
     7d2:	81 11       	cpse	r24, r1
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     7d6:	82 e9       	ldi	r24, 0x92	; 146
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     7dc:	8a e8       	ldi	r24, 0x8A	; 138
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     7e2:	8e e8       	ldi	r24, 0x8E	; 142
     7e4:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     7e6:	08 95       	ret

000007e8 <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     7ec:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Keypad_GetMode>
     7f0:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     7f2:	fc 01       	movw	r30, r24
     7f4:	01 90       	ld	r0, Z+
     7f6:	00 20       	and	r0, r0
     7f8:	e9 f7       	brne	.-6      	; 0x7f4 <Keypad_UpdateKeyMode+0xc>
     7fa:	ac 01       	movw	r20, r24
     7fc:	4e 1b       	sub	r20, r30
     7fe:	5f 0b       	sbc	r21, r31
     800:	4f 5e       	subi	r20, 0xEF	; 239
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     80e:	be 01       	movw	r22, r28
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     81c:	89 b3       	in	r24, 0x19	; 25
}
     81e:	82 95       	swap	r24
     820:	8f 70       	andi	r24, 0x0F	; 15
     822:	08 95       	ret

00000824 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
	int pin = PINA >> 4;
     82a:	c9 b3       	in	r28, 0x19	; 25
     82c:	c2 95       	swap	r28
     82e:	cf 70       	andi	r28, 0x0F	; 15
     830:	0c 2f       	mov	r16, r28
     832:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     834:	b8 01       	movw	r22, r16
     836:	86 e9       	ldi	r24, 0x96	; 150
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 38 03 	call	0x670	; 0x670 <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     83e:	c0 fd       	sbrc	r28, 0
     840:	0c c0       	rjmp	.+24     	; 0x85a <Keypad_GetRow+0x36>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	98 01       	movw	r18, r16
     848:	08 2e       	mov	r0, r24
     84a:	02 c0       	rjmp	.+4      	; 0x850 <Keypad_GetRow+0x2c>
     84c:	35 95       	asr	r19
     84e:	27 95       	ror	r18
     850:	0a 94       	dec	r0
     852:	e2 f7       	brpl	.-8      	; 0x84c <Keypad_GetRow+0x28>
     854:	20 ff       	sbrs	r18, 0
     856:	04 c0       	rjmp	.+8      	; 0x860 <__stack+0x1>
     858:	0c c0       	rjmp	.+24     	; 0x872 <__stack+0x13>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     85e:	09 c0       	rjmp	.+18     	; 0x872 <__stack+0x13>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	84 30       	cpi	r24, 0x04	; 4
     864:	91 05       	cpc	r25, r1
     866:	79 f7       	brne	.-34     	; 0x846 <Keypad_GetRow+0x22>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     868:	8f e9       	ldi	r24, 0x9F	; 159
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
	return -1;
     870:	8f ef       	ldi	r24, 0xFF	; 255
}
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
	int i = 7;
     882:	c7 e0       	ldi	r28, 0x07	; 7
     884:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     886:	01 e0       	ldi	r16, 0x01	; 1
     888:	10 e0       	ldi	r17, 0x00	; 0
     88a:	28 b3       	in	r18, 0x18	; 24
     88c:	c8 01       	movw	r24, r16
     88e:	0c 2e       	mov	r0, r28
     890:	02 c0       	rjmp	.+4      	; 0x896 <Keypad_GetCol+0x1c>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <Keypad_GetCol+0x18>
     89a:	82 27       	eor	r24, r18
     89c:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     89e:	66 b3       	in	r22, 0x16	; 22
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	8d ea       	ldi	r24, 0xAD	; 173
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 38 03 	call	0x670	; 0x670 <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     8aa:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     8ac:	82 95       	swap	r24
     8ae:	8f 70       	andi	r24, 0x0F	; 15
     8b0:	11 f4       	brne	.+4      	; 0x8b6 <Keypad_GetCol+0x3c>
		{
			return i;
     8b2:	8c 2f       	mov	r24, r28
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <Keypad_GetCol+0x4a>
		}
		i--;
     8b6:	21 97       	sbiw	r28, 0x01	; 1
     8b8:	40 f7       	brcc	.-48     	; 0x88a <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     8ba:	83 eb       	ldi	r24, 0xB3	; 179
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
	// report error
	return -1;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     8ce:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <position>
     8d2:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <position+0x1>
     8d6:	f9 01       	movw	r30, r18
     8d8:	ee 59       	subi	r30, 0x9E	; 158
     8da:	fd 4f       	sbci	r31, 0xFD	; 253
     8dc:	80 83       	st	Z, r24
	if(position < 16)
     8de:	20 31       	cpi	r18, 0x10	; 16
     8e0:	31 05       	cpc	r19, r1
     8e2:	34 f4       	brge	.+12     	; 0x8f0 <addChar+0x22>
		position = position +1;
     8e4:	2f 5f       	subi	r18, 0xFF	; 255
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <position+0x1>
     8ec:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <position>
	keyBuffer[position] = 0;
     8f0:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <position>
     8f4:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <position+0x1>
     8f8:	ee 59       	subi	r30, 0x9E	; 158
     8fa:	fd 4f       	sbci	r31, 0xFD	; 253
     8fc:	10 82       	st	Z, r1
     8fe:	08 95       	ret

00000900 <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     900:	cf 93       	push	r28
     902:	c8 2f       	mov	r28, r24
	if(key >= 30)
     904:	8e 31       	cpi	r24, 0x1E	; 30
     906:	24 f0       	brlt	.+8      	; 0x910 <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     908:	81 ec       	ldi	r24, 0xC1	; 193
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
	if(key == 29) 
     910:	cd 31       	cpi	r28, 0x1D	; 29
     912:	99 f4       	brne	.+38     	; 0x93a <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     914:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <position>
     918:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <position+0x1>
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	29 f0       	breq	.+10     	; 0x92a <Keypad_AddKey+0x2a>
			position--;
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <position+0x1>
     926:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <position>
		keyBuffer[position] = 0;
     92a:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <position>
     92e:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <position+0x1>
     932:	ee 59       	subi	r30, 0x9E	; 158
     934:	fd 4f       	sbci	r31, 0xFD	; 253
     936:	10 82       	st	Z, r1
     938:	57 c0       	rjmp	.+174    	; 0x9e8 <Keypad_AddKey+0xe8>
	}
	else if(key == 28)
     93a:	cc 31       	cpi	r28, 0x1C	; 28
     93c:	21 f4       	brne	.+8      	; 0x946 <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     93e:	80 e2       	ldi	r24, 0x20	; 32
     940:	0e 94 67 04 	call	0x8ce	; 0x8ce <addChar>
     944:	51 c0       	rjmp	.+162    	; 0x9e8 <Keypad_AddKey+0xe8>
	}
	else if(key == 27)
     946:	cb 31       	cpi	r28, 0x1B	; 27
     948:	39 f4       	brne	.+14     	; 0x958 <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     94a:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <isNumber>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	89 27       	eor	r24, r25
     952:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <isNumber>
     956:	48 c0       	rjmp	.+144    	; 0x9e8 <Keypad_AddKey+0xe8>
	}
	else if(isNumber) 
     958:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <isNumber>
     95c:	88 23       	and	r24, r24
     95e:	e9 f0       	breq	.+58     	; 0x99a <Keypad_AddKey+0x9a>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     960:	9c 2f       	mov	r25, r28
     962:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     964:	93 30       	cpi	r25, 0x03	; 3
     966:	08 f0       	brcs	.+2      	; 0x96a <Keypad_AddKey+0x6a>
     968:	3f c0       	rjmp	.+126    	; 0x9e8 <Keypad_AddKey+0xe8>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     96a:	c5 95       	asr	r28
     96c:	c5 95       	asr	r28
     96e:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     970:	c3 30       	cpi	r28, 0x03	; 3
     972:	38 f4       	brcc	.+14     	; 0x982 <Keypad_AddKey+0x82>
			c = '1' + row * 3 + col;
     974:	8c 2f       	mov	r24, r28
     976:	88 0f       	add	r24, r24
     978:	c8 0f       	add	r28, r24
     97a:	81 e3       	ldi	r24, 0x31	; 49
     97c:	89 0f       	add	r24, r25
     97e:	8c 0f       	add	r24, r28
     980:	09 c0       	rjmp	.+18     	; 0x994 <Keypad_AddKey+0x94>
		}
		else if(col == 0) {
     982:	99 23       	and	r25, r25
     984:	21 f0       	breq	.+8      	; 0x98e <Keypad_AddKey+0x8e>
			c = '*';
		}
		else if(col == 1) {
     986:	91 30       	cpi	r25, 0x01	; 1
     988:	21 f0       	breq	.+8      	; 0x992 <Keypad_AddKey+0x92>
			c = '0';
		}
		else  {
			c = '#';
     98a:	83 e2       	ldi	r24, 0x23	; 35
     98c:	03 c0       	rjmp	.+6      	; 0x994 <Keypad_AddKey+0x94>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     98e:	8a e2       	ldi	r24, 0x2A	; 42
     990:	01 c0       	rjmp	.+2      	; 0x994 <Keypad_AddKey+0x94>
		}
		else if(col == 1) {
			c = '0';
     992:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     994:	0e 94 67 04 	call	0x8ce	; 0x8ce <addChar>
     998:	27 c0       	rjmp	.+78     	; 0x9e8 <Keypad_AddKey+0xe8>
		
	}
	else if(key == 26)
     99a:	ca 31       	cpi	r28, 0x1A	; 26
     99c:	39 f4       	brne	.+14     	; 0x9ac <Keypad_AddKey+0xac>
	{
		// capslock
		isUpperCase = !isUpperCase;
     99e:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <isUpperCase>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	89 27       	eor	r24, r25
     9a6:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <isUpperCase>
     9aa:	1e c0       	rjmp	.+60     	; 0x9e8 <Keypad_AddKey+0xe8>
	}
	else
	{
		// char
		char row = key >> 3;
     9ac:	9c 2f       	mov	r25, r28
     9ae:	95 95       	asr	r25
     9b0:	95 95       	asr	r25
     9b2:	95 95       	asr	r25
		char col = key & 0b00000111;
     9b4:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     9b6:	93 30       	cpi	r25, 0x03	; 3
     9b8:	68 f4       	brcc	.+26     	; 0x9d4 <Keypad_AddKey+0xd4>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     9ba:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <isUpperCase>
     9be:	81 11       	cpse	r24, r1
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <Keypad_AddKey+0xc6>
     9c2:	81 e6       	ldi	r24, 0x61	; 97
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <Keypad_AddKey+0xc8>
     9c6:	81 e4       	ldi	r24, 0x41	; 65
     9c8:	99 0f       	add	r25, r25
     9ca:	99 0f       	add	r25, r25
     9cc:	99 0f       	add	r25, r25
     9ce:	c9 0f       	add	r28, r25
     9d0:	8c 0f       	add	r24, r28
     9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <Keypad_AddKey+0xe4>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     9d4:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <isUpperCase>
     9d8:	81 11       	cpse	r24, r1
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <Keypad_AddKey+0xe0>
     9dc:	89 e7       	ldi	r24, 0x79	; 121
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <Keypad_AddKey+0xe2>
     9e0:	89 e5       	ldi	r24, 0x59	; 89
     9e2:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     9e4:	0e 94 67 04 	call	0x8ce	; 0x8ce <addChar>
	}
	return ;
}
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     9f0:	0e 94 12 04 	call	0x824	; 0x824 <Keypad_GetRow>
     9f4:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     9f6:	0e 94 3d 04 	call	0x87a	; 0x87a <Keypad_GetCol>
     9fa:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     9fc:	6c 2f       	mov	r22, r28
     9fe:	0c 2e       	mov	r0, r28
     a00:	00 0c       	add	r0, r0
     a02:	77 0b       	sbc	r23, r23
     a04:	86 ed       	ldi	r24, 0xD6	; 214
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 03 03 	call	0x606	; 0x606 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     a0c:	6d 2f       	mov	r22, r29
     a0e:	0d 2e       	mov	r0, r29
     a10:	00 0c       	add	r0, r0
     a12:	77 0b       	sbc	r23, r23
     a14:	8a ed       	ldi	r24, 0xDA	; 218
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 03 03 	call	0x606	; 0x606 <Error_ErrorNum>
	return row * 8 + col;
     a1c:	8c 2f       	mov	r24, r28
     a1e:	88 0f       	add	r24, r24
     a20:	88 0f       	add	r24, r24
     a22:	88 0f       	add	r24, r24
     a24:	8d 0f       	add	r24, r29
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     a2c:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <currentState>
     a30:	4e 2f       	mov	r20, r30
     a32:	ee 0f       	add	r30, r30
     a34:	55 0b       	sbc	r21, r21
     a36:	66 0b       	sbc	r22, r22
     a38:	77 0b       	sbc	r23, r23
     a3a:	47 30       	cpi	r20, 0x07	; 7
     a3c:	51 05       	cpc	r21, r1
     a3e:	d0 f4       	brcc	.+52     	; 0xa74 <KeyProcessor_ProcessKey+0x48>
     a40:	fa 01       	movw	r30, r20
     a42:	e6 5d       	subi	r30, 0xD6	; 214
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__tablejump2__>
	{
		case IDLE:
			Idle_ProcessKey(key);
     a4a:	0e 94 44 0c 	call	0x1888	; 0x1888 <Idle_ProcessKey>
			break;
     a4e:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     a50:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EnteringName_ProcessKey>
			break;
     a54:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     a56:	0e 94 20 0a 	call	0x1440	; 0x1440 <EnteringAge_ProcessKey>
			break;
     a5a:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     a5c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EnteringPhone_ProcessKey>
			break;
     a60:	08 95       	ret
		case ENTERING_TEMP :
			EnteringTemp_ProcessKey(key);
     a62:	0e 94 4a 0b 	call	0x1694	; 0x1694 <EnteringTemp_ProcessKey>
			break;
     a66:	08 95       	ret
		case ENTERING_BP :
			EnteringBp_ProcessKey(key);
     a68:	0e 94 4c 0a 	call	0x1498	; 0x1498 <EnteringBp_ProcessKey>
			break;
     a6c:	08 95       	ret
		case GENERATE_SERIAL :
			GenerateSerial_ProcessKey(key);
     a6e:	0e 94 15 0c 	call	0x182a	; 0x182a <GenerateSerial_ProcessKey>
			break;
     a72:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     a74:	8e ed       	ldi	r24, 0xDE	; 222
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
     a7c:	08 95       	ret

00000a7e <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     a7e:	88 23       	and	r24, r24
     a80:	19 f0       	breq	.+6      	; 0xa88 <Lcd_Init+0xa>
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	39 f0       	breq	.+14     	; 0xa94 <Lcd_Init+0x16>
     a86:	24 c0       	rjmp	.+72     	; 0xad0 <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     a88:	81 b3       	in	r24, 0x11	; 17
     a8a:	8c 6f       	ori	r24, 0xFC	; 252
     a8c:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     a8e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Lcd4_Init>
			break;
     a92:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0e 94 02 09 	call	0x1204	; 0x1204 <lcd_init>
			lcd_backlight(0);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_backlight>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	84 e3       	ldi	r24, 0x34	; 52
     aa4:	9c e0       	ldi	r25, 0x0C	; 12
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	80 40       	sbci	r24, 0x00	; 0
     aaa:	90 40       	sbci	r25, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <Lcd_Init+0x28>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <Lcd_Init+0x32>
     ab0:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_backlight>
     ab8:	2f ef       	ldi	r18, 0xFF	; 255
     aba:	84 e3       	ldi	r24, 0x34	; 52
     abc:	9c e0       	ldi	r25, 0x0C	; 12
     abe:	21 50       	subi	r18, 0x01	; 1
     ac0:	80 40       	sbci	r24, 0x00	; 0
     ac2:	90 40       	sbci	r25, 0x00	; 0
     ac4:	e1 f7       	brne	.-8      	; 0xabe <Lcd_Init+0x40>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <Lcd_Init+0x4a>
     ac8:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     aca:	0e 94 c1 08 	call	0x1182	; 0x1182 <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     ace:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
     ad8:	08 95       	ret

00000ada <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     ada:	88 23       	and	r24, r24
     adc:	19 f0       	breq	.+6      	; 0xae4 <Lcd_ClearScreen+0xa>
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	21 f0       	breq	.+8      	; 0xaea <Lcd_ClearScreen+0x10>
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     ae4:	0e 94 89 07 	call	0xf12	; 0xf12 <Lcd4_Clear>
			break;
     ae8:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     aea:	0e 94 c1 08 	call	0x1182	; 0x1182 <lcd_clrscr>
			break;
     aee:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     af0:	81 e2       	ldi	r24, 0x21	; 33
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
     af8:	08 95       	ret

00000afa <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     afa:	88 23       	and	r24, r24
     afc:	19 f0       	breq	.+6      	; 0xb04 <Lcd_Prints+0xa>
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	29 f0       	breq	.+10     	; 0xb0c <Lcd_Prints+0x12>
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     b04:	cb 01       	movw	r24, r22
     b06:	0e 94 26 08 	call	0x104c	; 0x104c <Lcd4_Write_String>
			break;
     b0a:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     b0c:	cb 01       	movw	r24, r22
     b0e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <lcd_puts>
			break;
     b12:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     b14:	81 e2       	ldi	r24, 0x21	; 33
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
     b1c:	08 95       	ret

00000b1e <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     b1e:	96 2f       	mov	r25, r22
	switch(lcdType)
     b20:	88 23       	and	r24, r24
     b22:	19 f0       	breq	.+6      	; 0xb2a <Lcd_Position+0xc>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	31 f0       	breq	.+12     	; 0xb34 <Lcd_Position+0x16>
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     b2a:	64 2f       	mov	r22, r20
     b2c:	89 2f       	mov	r24, r25
     b2e:	0e 94 90 07 	call	0xf20	; 0xf20 <Lcd4_Set_Cursor>
		break;
     b32:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     b34:	84 2f       	mov	r24, r20
     b36:	0e 94 ab 08 	call	0x1156	; 0x1156 <lcd_gotoxy>
		break;
     b3a:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     b3c:	88 e4       	ldi	r24, 0x48	; 72
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
     b44:	08 95       	ret

00000b46 <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Lcd_Printc+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     b50:	69 83       	std	Y+1, r22	; 0x01
     b52:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     b54:	be 01       	movw	r22, r28
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	f8 2e       	mov	r15, r24
     b74:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	int i =0;
	while (str[i])
     b7e:	68 81       	ld	r22, Y
     b80:	66 23       	and	r22, r22
     b82:	91 f0       	breq	.+36     	; 0xba8 <Lcd_PrintLine+0x40>
     b84:	8e 01       	movw	r16, r28
     b86:	0f 5f       	subi	r16, 0xFF	; 255
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	c0 e0       	ldi	r28, 0x00	; 0
     b8c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     b8e:	21 96       	adiw	r28, 0x01	; 1
     b90:	8f 2d       	mov	r24, r15
     b92:	0e 94 a3 05 	call	0xb46	; 0xb46 <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     b96:	f8 01       	movw	r30, r16
     b98:	61 91       	ld	r22, Z+
     b9a:	8f 01       	movw	r16, r30
     b9c:	61 11       	cpse	r22, r1
     b9e:	f7 cf       	rjmp	.-18     	; 0xb8e <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     ba0:	c0 31       	cpi	r28, 0x10	; 16
     ba2:	d1 05       	cpc	r29, r1
     ba4:	1c f0       	brlt	.+6      	; 0xbac <Lcd_PrintLine+0x44>
     ba6:	0a c0       	rjmp	.+20     	; 0xbbc <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     ba8:	c0 e0       	ldi	r28, 0x00	; 0
     baa:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     bac:	60 e2       	ldi	r22, 0x20	; 32
     bae:	8f 2d       	mov	r24, r15
     bb0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Lcd_Printc>
     bb4:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     bb6:	c0 31       	cpi	r28, 0x10	; 16
     bb8:	d1 05       	cpc	r29, r1
     bba:	c4 f3       	brlt	.-16     	; 0xbac <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	08 95       	ret

00000bc8 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     bc8:	67 2b       	or	r22, r23
     bca:	09 f0       	breq	.+2      	; 0xbce <pinChange+0x6>
     bcc:	9f c0       	rjmp	.+318    	; 0xd0c <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     bd2:	d8 98       	cbi	0x1b, 0	; 27
     bd4:	08 95       	ret
		else if(a == eS_PORTA1)
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	11 f4       	brne	.+4      	; 0xbe0 <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     bdc:	d9 98       	cbi	0x1b, 1	; 27
     bde:	08 95       	ret
		else if(a == eS_PORTA2)
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	91 05       	cpc	r25, r1
     be4:	11 f4       	brne	.+4      	; 0xbea <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     be6:	da 98       	cbi	0x1b, 2	; 27
     be8:	08 95       	ret
		else if(a == eS_PORTA3)
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	91 05       	cpc	r25, r1
     bee:	11 f4       	brne	.+4      	; 0xbf4 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     bf0:	db 98       	cbi	0x1b, 3	; 27
     bf2:	08 95       	ret
		else if(a == eS_PORTA4)
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	91 05       	cpc	r25, r1
     bf8:	11 f4       	brne	.+4      	; 0xbfe <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     bfa:	dc 98       	cbi	0x1b, 4	; 27
     bfc:	08 95       	ret
		else if(a == eS_PORTA5)
     bfe:	85 30       	cpi	r24, 0x05	; 5
     c00:	91 05       	cpc	r25, r1
     c02:	11 f4       	brne	.+4      	; 0xc08 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     c04:	dd 98       	cbi	0x1b, 5	; 27
     c06:	08 95       	ret
		else if(a == eS_PORTA6)
     c08:	86 30       	cpi	r24, 0x06	; 6
     c0a:	91 05       	cpc	r25, r1
     c0c:	11 f4       	brne	.+4      	; 0xc12 <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     c0e:	de 98       	cbi	0x1b, 6	; 27
     c10:	08 95       	ret
		else if(a == eS_PORTA7)
     c12:	87 30       	cpi	r24, 0x07	; 7
     c14:	91 05       	cpc	r25, r1
     c16:	11 f4       	brne	.+4      	; 0xc1c <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     c18:	df 98       	cbi	0x1b, 7	; 27
     c1a:	08 95       	ret
		else if(a == eS_PORTB0)
     c1c:	8a 30       	cpi	r24, 0x0A	; 10
     c1e:	91 05       	cpc	r25, r1
     c20:	11 f4       	brne	.+4      	; 0xc26 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     c22:	c0 98       	cbi	0x18, 0	; 24
     c24:	08 95       	ret
		else if(a == eS_PORTB1)
     c26:	8b 30       	cpi	r24, 0x0B	; 11
     c28:	91 05       	cpc	r25, r1
     c2a:	11 f4       	brne	.+4      	; 0xc30 <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     c2c:	c1 98       	cbi	0x18, 1	; 24
     c2e:	08 95       	ret
		else if(a == eS_PORTB2)
     c30:	8c 30       	cpi	r24, 0x0C	; 12
     c32:	91 05       	cpc	r25, r1
     c34:	11 f4       	brne	.+4      	; 0xc3a <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     c36:	c2 98       	cbi	0x18, 2	; 24
     c38:	08 95       	ret
		else if(a == eS_PORTB3)
     c3a:	8d 30       	cpi	r24, 0x0D	; 13
     c3c:	91 05       	cpc	r25, r1
     c3e:	11 f4       	brne	.+4      	; 0xc44 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     c40:	c3 98       	cbi	0x18, 3	; 24
     c42:	08 95       	ret
		else if(a == eS_PORTB4)
     c44:	8e 30       	cpi	r24, 0x0E	; 14
     c46:	91 05       	cpc	r25, r1
     c48:	11 f4       	brne	.+4      	; 0xc4e <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     c4a:	c4 98       	cbi	0x18, 4	; 24
     c4c:	08 95       	ret
		else if(a == eS_PORTB5)
     c4e:	8f 30       	cpi	r24, 0x0F	; 15
     c50:	91 05       	cpc	r25, r1
     c52:	11 f4       	brne	.+4      	; 0xc58 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     c54:	c5 98       	cbi	0x18, 5	; 24
     c56:	08 95       	ret
		else if(a == eS_PORTB6)
     c58:	80 31       	cpi	r24, 0x10	; 16
     c5a:	91 05       	cpc	r25, r1
     c5c:	11 f4       	brne	.+4      	; 0xc62 <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     c5e:	c6 98       	cbi	0x18, 6	; 24
     c60:	08 95       	ret
		else if(a == eS_PORTB7)
     c62:	81 31       	cpi	r24, 0x11	; 17
     c64:	91 05       	cpc	r25, r1
     c66:	11 f4       	brne	.+4      	; 0xc6c <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     c68:	c7 98       	cbi	0x18, 7	; 24
     c6a:	08 95       	ret
		else if(a == eS_PORTC0)
     c6c:	84 31       	cpi	r24, 0x14	; 20
     c6e:	91 05       	cpc	r25, r1
     c70:	11 f4       	brne	.+4      	; 0xc76 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     c72:	a8 98       	cbi	0x15, 0	; 21
     c74:	08 95       	ret
		else if(a == eS_PORTC1)
     c76:	85 31       	cpi	r24, 0x15	; 21
     c78:	91 05       	cpc	r25, r1
     c7a:	11 f4       	brne	.+4      	; 0xc80 <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     c7c:	a9 98       	cbi	0x15, 1	; 21
     c7e:	08 95       	ret
		else if(a == eS_PORTC2)
     c80:	86 31       	cpi	r24, 0x16	; 22
     c82:	91 05       	cpc	r25, r1
     c84:	11 f4       	brne	.+4      	; 0xc8a <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     c86:	aa 98       	cbi	0x15, 2	; 21
     c88:	08 95       	ret
		else if(a == eS_PORTC3)
     c8a:	87 31       	cpi	r24, 0x17	; 23
     c8c:	91 05       	cpc	r25, r1
     c8e:	11 f4       	brne	.+4      	; 0xc94 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     c90:	ab 98       	cbi	0x15, 3	; 21
     c92:	08 95       	ret
		else if(a == eS_PORTC4)
     c94:	88 31       	cpi	r24, 0x18	; 24
     c96:	91 05       	cpc	r25, r1
     c98:	11 f4       	brne	.+4      	; 0xc9e <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     c9a:	ac 98       	cbi	0x15, 4	; 21
     c9c:	08 95       	ret
		else if(a == eS_PORTC5)
     c9e:	89 31       	cpi	r24, 0x19	; 25
     ca0:	91 05       	cpc	r25, r1
     ca2:	11 f4       	brne	.+4      	; 0xca8 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     ca4:	ad 98       	cbi	0x15, 5	; 21
     ca6:	08 95       	ret
		else if(a == eS_PORTC6)
     ca8:	8a 31       	cpi	r24, 0x1A	; 26
     caa:	91 05       	cpc	r25, r1
     cac:	11 f4       	brne	.+4      	; 0xcb2 <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     cae:	ae 98       	cbi	0x15, 6	; 21
     cb0:	08 95       	ret
		else if(a == eS_PORTC7)
     cb2:	8b 31       	cpi	r24, 0x1B	; 27
     cb4:	91 05       	cpc	r25, r1
     cb6:	11 f4       	brne	.+4      	; 0xcbc <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     cb8:	af 98       	cbi	0x15, 7	; 21
     cba:	08 95       	ret
		else if(a == eS_PORTD0)
     cbc:	8e 31       	cpi	r24, 0x1E	; 30
     cbe:	91 05       	cpc	r25, r1
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     cc2:	90 98       	cbi	0x12, 0	; 18
     cc4:	08 95       	ret
		else if(a == eS_PORTD1)
     cc6:	8f 31       	cpi	r24, 0x1F	; 31
     cc8:	91 05       	cpc	r25, r1
     cca:	11 f4       	brne	.+4      	; 0xcd0 <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     ccc:	91 98       	cbi	0x12, 1	; 18
     cce:	08 95       	ret
		else if(a == eS_PORTD2)
     cd0:	80 32       	cpi	r24, 0x20	; 32
     cd2:	91 05       	cpc	r25, r1
     cd4:	11 f4       	brne	.+4      	; 0xcda <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     cd6:	92 98       	cbi	0x12, 2	; 18
     cd8:	08 95       	ret
		else if(a == eS_PORTD3)
     cda:	81 32       	cpi	r24, 0x21	; 33
     cdc:	91 05       	cpc	r25, r1
     cde:	11 f4       	brne	.+4      	; 0xce4 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     ce0:	93 98       	cbi	0x12, 3	; 18
     ce2:	08 95       	ret
		else if(a == eS_PORTD4)
     ce4:	82 32       	cpi	r24, 0x22	; 34
     ce6:	91 05       	cpc	r25, r1
     ce8:	11 f4       	brne	.+4      	; 0xcee <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     cea:	94 98       	cbi	0x12, 4	; 18
     cec:	08 95       	ret
		else if(a == eS_PORTD5)
     cee:	83 32       	cpi	r24, 0x23	; 35
     cf0:	91 05       	cpc	r25, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     cf4:	95 98       	cbi	0x12, 5	; 18
     cf6:	08 95       	ret
		else if(a == eS_PORTD6)
     cf8:	84 32       	cpi	r24, 0x24	; 36
     cfa:	91 05       	cpc	r25, r1
     cfc:	11 f4       	brne	.+4      	; 0xd02 <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     cfe:	96 98       	cbi	0x12, 6	; 18
     d00:	08 95       	ret
		else if(a == eS_PORTD7)
     d02:	85 97       	sbiw	r24, 0x25	; 37
     d04:	09 f0       	breq	.+2      	; 0xd08 <pinChange+0x140>
     d06:	9f c0       	rjmp	.+318    	; 0xe46 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     d08:	97 98       	cbi	0x12, 7	; 18
     d0a:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	11 f4       	brne	.+4      	; 0xd14 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     d10:	d8 9a       	sbi	0x1b, 0	; 27
     d12:	08 95       	ret
		else if(a == eS_PORTA1)
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	11 f4       	brne	.+4      	; 0xd1e <pinChange+0x156>
		PORTA |= (1<<PA1);
     d1a:	d9 9a       	sbi	0x1b, 1	; 27
     d1c:	08 95       	ret
		else if(a == eS_PORTA2)
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	91 05       	cpc	r25, r1
     d22:	11 f4       	brne	.+4      	; 0xd28 <pinChange+0x160>
		PORTA |= (1<<PA2);
     d24:	da 9a       	sbi	0x1b, 2	; 27
     d26:	08 95       	ret
		else if(a == eS_PORTA3)
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	91 05       	cpc	r25, r1
     d2c:	11 f4       	brne	.+4      	; 0xd32 <pinChange+0x16a>
		PORTA |= (1<<PA3);
     d2e:	db 9a       	sbi	0x1b, 3	; 27
     d30:	08 95       	ret
		else if(a == eS_PORTA4)
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	91 05       	cpc	r25, r1
     d36:	11 f4       	brne	.+4      	; 0xd3c <pinChange+0x174>
		PORTA |= (1<<PA4);
     d38:	dc 9a       	sbi	0x1b, 4	; 27
     d3a:	08 95       	ret
		else if(a == eS_PORTA5)
     d3c:	85 30       	cpi	r24, 0x05	; 5
     d3e:	91 05       	cpc	r25, r1
     d40:	11 f4       	brne	.+4      	; 0xd46 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     d42:	dd 9a       	sbi	0x1b, 5	; 27
     d44:	08 95       	ret
		else if(a == eS_PORTA6)
     d46:	86 30       	cpi	r24, 0x06	; 6
     d48:	91 05       	cpc	r25, r1
     d4a:	11 f4       	brne	.+4      	; 0xd50 <pinChange+0x188>
		PORTA |= (1<<PA6);
     d4c:	de 9a       	sbi	0x1b, 6	; 27
     d4e:	08 95       	ret
		else if(a == eS_PORTA7)
     d50:	87 30       	cpi	r24, 0x07	; 7
     d52:	91 05       	cpc	r25, r1
     d54:	11 f4       	brne	.+4      	; 0xd5a <pinChange+0x192>
		PORTA |= (1<<PA7);
     d56:	df 9a       	sbi	0x1b, 7	; 27
     d58:	08 95       	ret
		else if(a == eS_PORTB0)
     d5a:	8a 30       	cpi	r24, 0x0A	; 10
     d5c:	91 05       	cpc	r25, r1
     d5e:	11 f4       	brne	.+4      	; 0xd64 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     d60:	c0 9a       	sbi	0x18, 0	; 24
     d62:	08 95       	ret
		else if(a == eS_PORTB1)
     d64:	8b 30       	cpi	r24, 0x0B	; 11
     d66:	91 05       	cpc	r25, r1
     d68:	11 f4       	brne	.+4      	; 0xd6e <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     d6a:	c1 9a       	sbi	0x18, 1	; 24
     d6c:	08 95       	ret
		else if(a == eS_PORTB2)
     d6e:	8c 30       	cpi	r24, 0x0C	; 12
     d70:	91 05       	cpc	r25, r1
     d72:	11 f4       	brne	.+4      	; 0xd78 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     d74:	c2 9a       	sbi	0x18, 2	; 24
     d76:	08 95       	ret
		else if(a == eS_PORTB3)
     d78:	8d 30       	cpi	r24, 0x0D	; 13
     d7a:	91 05       	cpc	r25, r1
     d7c:	11 f4       	brne	.+4      	; 0xd82 <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     d7e:	c3 9a       	sbi	0x18, 3	; 24
     d80:	08 95       	ret
		else if(a == eS_PORTB4)
     d82:	8e 30       	cpi	r24, 0x0E	; 14
     d84:	91 05       	cpc	r25, r1
     d86:	11 f4       	brne	.+4      	; 0xd8c <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     d88:	c4 9a       	sbi	0x18, 4	; 24
     d8a:	08 95       	ret
		else if(a == eS_PORTB5)
     d8c:	8f 30       	cpi	r24, 0x0F	; 15
     d8e:	91 05       	cpc	r25, r1
     d90:	11 f4       	brne	.+4      	; 0xd96 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     d92:	c5 9a       	sbi	0x18, 5	; 24
     d94:	08 95       	ret
		else if(a == eS_PORTB6)
     d96:	80 31       	cpi	r24, 0x10	; 16
     d98:	91 05       	cpc	r25, r1
     d9a:	11 f4       	brne	.+4      	; 0xda0 <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     d9c:	c6 9a       	sbi	0x18, 6	; 24
     d9e:	08 95       	ret
		else if(a == eS_PORTB7)
     da0:	81 31       	cpi	r24, 0x11	; 17
     da2:	91 05       	cpc	r25, r1
     da4:	11 f4       	brne	.+4      	; 0xdaa <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     da6:	c7 9a       	sbi	0x18, 7	; 24
     da8:	08 95       	ret
		else if(a == eS_PORTC0)
     daa:	84 31       	cpi	r24, 0x14	; 20
     dac:	91 05       	cpc	r25, r1
     dae:	11 f4       	brne	.+4      	; 0xdb4 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     db0:	a8 9a       	sbi	0x15, 0	; 21
     db2:	08 95       	ret
		else if(a == eS_PORTC1)
     db4:	85 31       	cpi	r24, 0x15	; 21
     db6:	91 05       	cpc	r25, r1
     db8:	11 f4       	brne	.+4      	; 0xdbe <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     dba:	a9 9a       	sbi	0x15, 1	; 21
     dbc:	08 95       	ret
		else if(a == eS_PORTC2)
     dbe:	86 31       	cpi	r24, 0x16	; 22
     dc0:	91 05       	cpc	r25, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <pinChange+0x200>
		PORTC |= (1<<PC2);
     dc4:	aa 9a       	sbi	0x15, 2	; 21
     dc6:	08 95       	ret
		else if(a == eS_PORTC3)
     dc8:	87 31       	cpi	r24, 0x17	; 23
     dca:	91 05       	cpc	r25, r1
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <pinChange+0x20a>
		PORTC |= (1<<PC3);
     dce:	ab 9a       	sbi	0x15, 3	; 21
     dd0:	08 95       	ret
		else if(a == eS_PORTC4)
     dd2:	88 31       	cpi	r24, 0x18	; 24
     dd4:	91 05       	cpc	r25, r1
     dd6:	11 f4       	brne	.+4      	; 0xddc <pinChange+0x214>
		PORTC |= (1<<PC4);
     dd8:	ac 9a       	sbi	0x15, 4	; 21
     dda:	08 95       	ret
		else if(a == eS_PORTC5)
     ddc:	89 31       	cpi	r24, 0x19	; 25
     dde:	91 05       	cpc	r25, r1
     de0:	11 f4       	brne	.+4      	; 0xde6 <pinChange+0x21e>
		PORTC |= (1<<PC5);
     de2:	ad 9a       	sbi	0x15, 5	; 21
     de4:	08 95       	ret
		else if(a == eS_PORTC6)
     de6:	8a 31       	cpi	r24, 0x1A	; 26
     de8:	91 05       	cpc	r25, r1
     dea:	11 f4       	brne	.+4      	; 0xdf0 <pinChange+0x228>
		PORTC |= (1<<PC6);
     dec:	ae 9a       	sbi	0x15, 6	; 21
     dee:	08 95       	ret
		else if(a == eS_PORTC7)
     df0:	8b 31       	cpi	r24, 0x1B	; 27
     df2:	91 05       	cpc	r25, r1
     df4:	11 f4       	brne	.+4      	; 0xdfa <pinChange+0x232>
		PORTC |= (1<<PC7);
     df6:	af 9a       	sbi	0x15, 7	; 21
     df8:	08 95       	ret
		else if(a == eS_PORTD0)
     dfa:	8e 31       	cpi	r24, 0x1E	; 30
     dfc:	91 05       	cpc	r25, r1
     dfe:	11 f4       	brne	.+4      	; 0xe04 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     e00:	90 9a       	sbi	0x12, 0	; 18
     e02:	08 95       	ret
		else if(a == eS_PORTD1)
     e04:	8f 31       	cpi	r24, 0x1F	; 31
     e06:	91 05       	cpc	r25, r1
     e08:	11 f4       	brne	.+4      	; 0xe0e <pinChange+0x246>
		PORTD |= (1<<PD1);
     e0a:	91 9a       	sbi	0x12, 1	; 18
     e0c:	08 95       	ret
		else if(a == eS_PORTD2)
     e0e:	80 32       	cpi	r24, 0x20	; 32
     e10:	91 05       	cpc	r25, r1
     e12:	11 f4       	brne	.+4      	; 0xe18 <pinChange+0x250>
		PORTD |= (1<<PD2);
     e14:	92 9a       	sbi	0x12, 2	; 18
     e16:	08 95       	ret
		else if(a == eS_PORTD3)
     e18:	81 32       	cpi	r24, 0x21	; 33
     e1a:	91 05       	cpc	r25, r1
     e1c:	11 f4       	brne	.+4      	; 0xe22 <pinChange+0x25a>
		PORTD |= (1<<PD3);
     e1e:	93 9a       	sbi	0x12, 3	; 18
     e20:	08 95       	ret
		else if(a == eS_PORTD4)
     e22:	82 32       	cpi	r24, 0x22	; 34
     e24:	91 05       	cpc	r25, r1
     e26:	11 f4       	brne	.+4      	; 0xe2c <pinChange+0x264>
		PORTD |= (1<<PD4);
     e28:	94 9a       	sbi	0x12, 4	; 18
     e2a:	08 95       	ret
		else if(a == eS_PORTD5)
     e2c:	83 32       	cpi	r24, 0x23	; 35
     e2e:	91 05       	cpc	r25, r1
     e30:	11 f4       	brne	.+4      	; 0xe36 <pinChange+0x26e>
		PORTD |= (1<<PD5);
     e32:	95 9a       	sbi	0x12, 5	; 18
     e34:	08 95       	ret
		else if(a == eS_PORTD6)
     e36:	84 32       	cpi	r24, 0x24	; 36
     e38:	91 05       	cpc	r25, r1
     e3a:	11 f4       	brne	.+4      	; 0xe40 <pinChange+0x278>
		PORTD |= (1<<PD6);
     e3c:	96 9a       	sbi	0x12, 6	; 18
     e3e:	08 95       	ret
		else if(a == eS_PORTD7)
     e40:	85 97       	sbiw	r24, 0x25	; 37
     e42:	09 f4       	brne	.+2      	; 0xe46 <pinChange+0x27e>
		PORTD |= (1<<PD7);
     e44:	97 9a       	sbi	0x12, 7	; 18
     e46:	08 95       	ret

00000e48 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     e48:	cf 93       	push	r28
     e4a:	c8 2f       	mov	r28, r24
	if(a & 1)
     e4c:	80 ff       	sbrs	r24, 0
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <Lcd4_Port+0x16>
	pinChange(D4,1);
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	83 e2       	ldi	r24, 0x23	; 35
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	83 e2       	ldi	r24, 0x23	; 35
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
	
	if(a & 2)
     e6a:	c1 ff       	sbrs	r28, 1
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <Lcd4_Port+0x34>
	pinChange(D5,1);
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	82 e2       	ldi	r24, 0x22	; 34
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	82 e2       	ldi	r24, 0x22	; 34
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
	
	if(a & 4)
     e88:	c2 ff       	sbrs	r28, 2
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <Lcd4_Port+0x52>
	pinChange(D6,1);
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	81 e2       	ldi	r24, 0x21	; 33
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	81 e2       	ldi	r24, 0x21	; 33
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
	
	if(a & 8)
     ea6:	c3 ff       	sbrs	r28, 3
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <Lcd4_Port+0x70>
	pinChange(D7,1);
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
}
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     ec8:	cf 93       	push	r28
     eca:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	85 e2       	ldi	r24, 0x25	; 37
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
	Lcd4_Port(a);
     ed8:	8c 2f       	mov	r24, r28
     eda:	0e 94 24 07 	call	0xe48	; 0xe48 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	84 e2       	ldi	r24, 0x24	; 36
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     eea:	8f ec       	ldi	r24, 0xCF	; 207
     eec:	97 e0       	ldi	r25, 0x07	; 7
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <Lcd4_Cmd+0x26>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <Lcd4_Cmd+0x2c>
     ef4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	84 e2       	ldi	r24, 0x24	; 36
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     f02:	8f ec       	ldi	r24, 0xCF	; 207
     f04:	97 e0       	ldi	r25, 0x07	; 7
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <Lcd4_Cmd+0x3e>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <Lcd4_Cmd+0x44>
     f0c:	00 00       	nop
	_delay_ms(1);
}
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
     f1e:	08 95       	ret

00000f20 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     f20:	cf 93       	push	r28
     f22:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     f24:	81 11       	cpse	r24, r1
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     f28:	80 e8       	ldi	r24, 0x80	; 128
     f2a:	86 0f       	add	r24, r22
     f2c:	82 95       	swap	r24
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f34:	8c 2f       	mov	r24, r28
     f36:	8f 70       	andi	r24, 0x0F	; 15
     f38:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	51 f4       	brne	.+20     	; 0xf56 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     f42:	80 ec       	ldi	r24, 0xC0	; 192
     f44:	86 0f       	add	r24, r22
     f46:	82 95       	swap	r24
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f4e:	8c 2f       	mov	r24, r28
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	}
}
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 24 07 	call	0xe48	; 0xe48 <Lcd4_Port>
     f60:	8f e3       	ldi	r24, 0x3F	; 63
     f62:	9c e9       	ldi	r25, 0x9C	; 156
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <Lcd4_Init+0xa>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <Lcd4_Init+0x10>
     f6a:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
     f72:	8f e0       	ldi	r24, 0x0F	; 15
     f74:	97 e2       	ldi	r25, 0x27	; 39
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <Lcd4_Init+0x1c>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <Lcd4_Init+0x22>
     f7c:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
     f84:	8f ee       	ldi	r24, 0xEF	; 239
     f86:	95 e5       	ldi	r25, 0x55	; 85
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <Lcd4_Init+0x2e>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <Lcd4_Init+0x34>
     f8e:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     fa2:	88 e0       	ldi	r24, 0x08	; 8
     fa4:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     fae:	8c e0       	ldi	r24, 0x0C	; 12
     fb0:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	0e 94 64 07 	call	0xec8	; 0xec8 <Lcd4_Cmd>
	Lcd4_Clear();
     fc0:	0e 94 89 07 	call	0xf12	; 0xf12 <Lcd4_Clear>
     fc4:	08 95       	ret

00000fc6 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     fc6:	cf 93       	push	r28
     fc8:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	85 e2       	ldi	r24, 0x25	; 37
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     fd6:	8c 2f       	mov	r24, r28
     fd8:	82 95       	swap	r24
     fda:	8f 70       	andi	r24, 0x0F	; 15
     fdc:	0e 94 24 07 	call	0xe48	; 0xe48 <Lcd4_Port>
	pinChange(EN,1);
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	84 e2       	ldi	r24, 0x24	; 36
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
     fec:	8f ec       	ldi	r24, 0xCF	; 207
     fee:	97 e0       	ldi	r25, 0x07	; 7
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <Lcd4_Write_Char+0x2a>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <Lcd4_Write_Char+0x30>
     ff6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	84 e2       	ldi	r24, 0x24	; 36
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
    1004:	8f ec       	ldi	r24, 0xCF	; 207
    1006:	97 e0       	ldi	r25, 0x07	; 7
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <Lcd4_Write_Char+0x42>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <Lcd4_Write_Char+0x48>
    100e:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
    1010:	8c 2f       	mov	r24, r28
    1012:	8f 70       	andi	r24, 0x0F	; 15
    1014:	0e 94 24 07 	call	0xe48	; 0xe48 <Lcd4_Port>
	pinChange(EN,1);
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	84 e2       	ldi	r24, 0x24	; 36
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
    1024:	8f ec       	ldi	r24, 0xCF	; 207
    1026:	97 e0       	ldi	r25, 0x07	; 7
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <Lcd4_Write_Char+0x62>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <Lcd4_Write_Char+0x68>
    102e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	84 e2       	ldi	r24, 0x24	; 36
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pinChange>
    103c:	8f ec       	ldi	r24, 0xCF	; 207
    103e:	97 e0       	ldi	r25, 0x07	; 7
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <Lcd4_Write_Char+0x7a>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <Lcd4_Write_Char+0x80>
    1046:	00 00       	nop
	_delay_ms(1);
}
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    1052:	88 81       	ld	r24, Y
    1054:	88 23       	and	r24, r24
    1056:	31 f0       	breq	.+12     	; 0x1064 <Lcd4_Write_String+0x18>
    1058:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
    105a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    105e:	89 91       	ld	r24, Y+
    1060:	81 11       	cpse	r24, r1
    1062:	fb cf       	rjmp	.-10     	; 0x105a <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	7b 01       	movw	r14, r22
    1078:	14 2f       	mov	r17, r20
    107a:	88 0f       	add	r24, r24
    107c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2c_start>
    1080:	81 11       	cpse	r24, r1
    1082:	12 c0       	rjmp	.+36     	; 0x10a8 <I2C_WRITESEQ+0x3e>
    1084:	11 23       	and	r17, r17
    1086:	91 f0       	breq	.+36     	; 0x10ac <I2C_WRITESEQ+0x42>
    1088:	e7 01       	movw	r28, r14
    108a:	11 50       	subi	r17, 0x01	; 1
    108c:	01 2f       	mov	r16, r17
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	0f 5f       	subi	r16, 0xFF	; 255
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	0e 0d       	add	r16, r14
    1096:	1f 1d       	adc	r17, r15
    1098:	89 91       	ld	r24, Y+
    109a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <i2c_write>
    109e:	c0 17       	cp	r28, r16
    10a0:	d1 07       	cpc	r29, r17
    10a2:	d1 f7       	brne	.-12     	; 0x1098 <I2C_WRITESEQ+0x2e>
    10a4:	c0 e0       	ldi	r28, 0x00	; 0
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <I2C_WRITESEQ+0x44>
    10a8:	c1 e0       	ldi	r28, 0x01	; 1
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <I2C_WRITESEQ+0x44>
    10ac:	c0 e0       	ldi	r28, 0x00	; 0
    10ae:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_stop>
    10b2:	8c 2f       	mov	r24, r28
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	08 95       	ret

000010c2 <wr_lcd_mode>:
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <wr_lcd_mode+0xa>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <wr_lcd_mode+0xc>
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	08 2f       	mov	r16, r24
    10d6:	68 30       	cpi	r22, 0x08	; 8
    10d8:	71 f4       	brne	.+28     	; 0x10f6 <wr_lcd_mode+0x34>
    10da:	81 11       	cpse	r24, r1
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <wr_lcd_mode+0x20>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <wr_lcd_mode+0x22>
    10e2:	88 e0       	ldi	r24, 0x08	; 8
    10e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <backlight.1943>
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	66 e6       	ldi	r22, 0x66	; 102
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	87 e2       	ldi	r24, 0x27	; 39
    10f0:	0e 94 35 08 	call	0x106a	; 0x106a <I2C_WRITESEQ>
    10f4:	26 c0       	rjmp	.+76     	; 0x1142 <wr_lcd_mode+0x80>
    10f6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <backlight.1943>
    10fa:	16 2f       	mov	r17, r22
    10fc:	18 2b       	or	r17, r24
    10fe:	19 83       	std	Y+1, r17	; 0x01
    1100:	80 2f       	mov	r24, r16
    1102:	80 7f       	andi	r24, 0xF0	; 240
    1104:	84 60       	ori	r24, 0x04	; 4
    1106:	81 2b       	or	r24, r17
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	8b 7f       	andi	r24, 0xFB	; 251
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	20 e1       	ldi	r18, 0x10	; 16
    1110:	02 9f       	mul	r16, r18
    1112:	c0 01       	movw	r24, r0
    1114:	11 24       	eor	r1, r1
    1116:	81 2b       	or	r24, r17
    1118:	84 60       	ori	r24, 0x04	; 4
    111a:	8c 83       	std	Y+4, r24	; 0x04
    111c:	8b 7f       	andi	r24, 0xFB	; 251
    111e:	8d 83       	std	Y+5, r24	; 0x05
    1120:	45 e0       	ldi	r20, 0x05	; 5
    1122:	be 01       	movw	r22, r28
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	87 e2       	ldi	r24, 0x27	; 39
    112a:	0e 94 35 08 	call	0x106a	; 0x106a <I2C_WRITESEQ>
    112e:	10 fd       	sbrc	r17, 0
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <wr_lcd_mode+0x80>
    1132:	03 30       	cpi	r16, 0x03	; 3
    1134:	30 f4       	brcc	.+12     	; 0x1142 <wr_lcd_mode+0x80>
    1136:	e3 ef       	ldi	r30, 0xF3	; 243
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	31 97       	sbiw	r30, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <wr_lcd_mode+0x78>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <wr_lcd_mode+0x7e>
    1140:	00 00       	nop
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <lcd_gotoxy>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	d8 2f       	mov	r29, r24
    115c:	c6 2f       	mov	r28, r22
    115e:	e6 2f       	mov	r30, r22
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	e9 59       	subi	r30, 0x99	; 153
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	98 2f       	mov	r25, r24
    1168:	90 68       	ori	r25, 0x80	; 128
    116a:	80 81       	ld	r24, Z
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	89 2b       	or	r24, r25
    1170:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    1174:	d0 93 74 02 	sts	0x0274, r29	; 0x800274 <_lcd_x>
    1178:	c0 93 75 02 	sts	0x0275, r28	; 0x800275 <_lcd_y>
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <lcd_clrscr>:
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    118a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_lcd_y>
    118e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_lcd_x>
    1192:	08 95       	ret

00001194 <lcd_putc>:
    1194:	cf 93       	push	r28
    1196:	c8 2f       	mov	r28, r24
    1198:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_lcd_x>
    119c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <_lcd_maxx>
    11a0:	98 17       	cp	r25, r24
    11a2:	18 f4       	brcc	.+6      	; 0x11aa <lcd_putc+0x16>
    11a4:	ca 30       	cpi	r28, 0x0A	; 10
    11a6:	59 f4       	brne	.+22     	; 0x11be <lcd_putc+0x2a>
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <lcd_putc+0x3e>
    11aa:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <_lcd_y>
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <_lcd_y>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 ab 08 	call	0x1156	; 0x1156 <lcd_gotoxy>
    11ba:	ca 30       	cpi	r28, 0x0A	; 10
    11bc:	91 f0       	breq	.+36     	; 0x11e2 <lcd_putc+0x4e>
    11be:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_lcd_x>
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_lcd_x>
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	8c 2f       	mov	r24, r28
    11cc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <lcd_putc+0x4e>
    11d2:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <_lcd_y>
    11d6:	6f 5f       	subi	r22, 0xFF	; 255
    11d8:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <_lcd_y>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 ab 08 	call	0x1156	; 0x1156 <lcd_gotoxy>
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <lcd_puts>:
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	88 81       	ld	r24, Y
    11ee:	88 23       	and	r24, r24
    11f0:	31 f0       	breq	.+12     	; 0x11fe <lcd_puts+0x18>
    11f2:	21 96       	adiw	r28, 0x01	; 1
    11f4:	0e 94 ca 08 	call	0x1194	; 0x1194 <lcd_putc>
    11f8:	89 91       	ld	r24, Y+
    11fa:	81 11       	cpse	r24, r1
    11fc:	fb cf       	rjmp	.-10     	; 0x11f4 <lcd_puts+0xe>
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <lcd_init+0xa>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <lcd_init+0xc>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <lcd_init+0xe>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
    1218:	80 e3       	ldi	r24, 0x30	; 48
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	94 e3       	ldi	r25, 0x34	; 52
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	8c 83       	std	Y+4, r24	; 0x04
    1226:	94 e2       	ldi	r25, 0x24	; 36
    1228:	9d 83       	std	Y+5, r25	; 0x05
    122a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
    122c:	80 e1       	ldi	r24, 0x10	; 16
    122e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
    1232:	e7 e6       	ldi	r30, 0x67	; 103
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 5f       	subi	r24, 0xF0	; 240
    123a:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
    123c:	81 81       	ldd	r24, Z+1	; 0x01
    123e:	80 5f       	subi	r24, 0xF0	; 240
    1240:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
    1242:	bd 9a       	sbi	0x17, 5	; 23
    1244:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
    1246:	0e 94 9c 0c 	call	0x1938	; 0x1938 <i2c_init>
    124a:	8b e4       	ldi	r24, 0x4B	; 75
    124c:	9d e1       	ldi	r25, 0x1D	; 29
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <lcd_init+0x4a>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <lcd_init+0x50>
    1254:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
    1256:	43 e0       	ldi	r20, 0x03	; 3
    1258:	be 01       	movw	r22, r28
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	87 e2       	ldi	r24, 0x27	; 39
    1260:	0e 94 35 08 	call	0x106a	; 0x106a <I2C_WRITESEQ>
    1264:	18 2f       	mov	r17, r24
    1266:	81 ee       	ldi	r24, 0xE1	; 225
    1268:	94 e0       	ldi	r25, 0x04	; 4
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <lcd_init+0x66>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <lcd_init+0x6c>
    1270:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    1272:	43 e0       	ldi	r20, 0x03	; 3
    1274:	be 01       	movw	r22, r28
    1276:	6f 5f       	subi	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	87 e2       	ldi	r24, 0x27	; 39
    127c:	0e 94 35 08 	call	0x106a	; 0x106a <I2C_WRITESEQ>
    1280:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    1282:	43 e0       	ldi	r20, 0x03	; 3
    1284:	be 01       	movw	r22, r28
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	87 e2       	ldi	r24, 0x27	; 39
    128c:	0e 94 35 08 	call	0x106a	; 0x106a <I2C_WRITESEQ>
    1290:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
    1292:	43 e0       	ldi	r20, 0x03	; 3
    1294:	be 01       	movw	r22, r28
    1296:	6c 5f       	subi	r22, 0xFC	; 252
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	87 e2       	ldi	r24, 0x27	; 39
    129c:	0e 94 35 08 	call	0x106a	; 0x106a <I2C_WRITESEQ>
    12a0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	88 e2       	ldi	r24, 0x28	; 40
    12a6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
    12aa:	81 2b       	or	r24, r17
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <lcd_init+0xac>
    12ae:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	8c e0       	ldi	r24, 0x0C	; 12
    12b4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	86 e0       	ldi	r24, 0x06	; 6
    12bc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	80 2f       	mov	r24, r16
    12cc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
}
    12d0:	26 96       	adiw	r28, 0x06	; 6
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
    12e6:	68 e0       	ldi	r22, 0x08	; 8
    12e8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <wr_lcd_mode>
    12ec:	08 95       	ret

000012ee <Lm35_Init>:
#include "../all.h"

void Lm35_Init()
{
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
    12ee:	80 ec       	ldi	r24, 0xC0	; 192
    12f0:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
    12f2:	80 e8       	ldi	r24, 0x80	; 128
    12f4:	86 b9       	out	0x06, r24	; 6
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
	DDRA &= ~1;
    12f6:	d0 98       	cbi	0x1a, 0	; 26
    12f8:	08 95       	ret

000012fa <Lm35_GetTemp>:

float Lm35_GetTemp()
{
	float tempC, tempF, vref = 2.56;

	ADCSRA |= (1<<ADSC);
    12fa:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    12fc:	36 99       	sbic	0x06, 6	; 6
    12fe:	fe cf       	rjmp	.-4      	; 0x12fc <Lm35_GetTemp+0x2>

	unsigned int i = ADC;
    1300:	64 b1       	in	r22, 0x04	; 4
    1302:	75 b1       	in	r23, 0x05	; 5
	tempC = (i * vref * 1000.0) / (10.0 * 1024);
	tempF = tempC * (9.0 / 5)  + 32.0;

	return tempF;
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__floatunsisf>
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	37 ed       	ldi	r19, 0xD7	; 215
    1310:	43 e2       	ldi	r20, 0x23	; 35
    1312:	50 e4       	ldi	r21, 0x40	; 64
    1314:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a e7       	ldi	r20, 0x7A	; 122
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	56 e4       	ldi	r21, 0x46	; 70
    132c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divsf3>
    1330:	26 e6       	ldi	r18, 0x66	; 102
    1332:	36 e6       	ldi	r19, 0x66	; 102
    1334:	46 ee       	ldi	r20, 0xE6	; 230
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	52 e4       	ldi	r21, 0x42	; 66
    1344:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__addsf3>
    1348:	08 95       	ret

0000134a <main>:
#include "all.h"

int main(void)
{
		
	HC05_Init_Data_Mode();
    134a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <HC05_Init_Data_Mode>
	//HC05_Init_ATCommand_Mode();
	
	HC05_SendString("hello there");
    134e:	8c e6       	ldi	r24, 0x6C	; 108
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Lcd_Init>
	Lcd_Init(LCDNOTICE);
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Lcd_Init>
	
	Lcd_Position(LCDNOTICE , 0,0);
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    1370:	68 e7       	ldi	r22, 0x78	; 120
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	Lcd_Position(LCDNOTICE , 0,0);
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    1388:	68 e7       	ldi	r22, 0x78	; 120
    138a:	71 e0       	ldi	r23, 0x01	; 1
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    1392:	68 e7       	ldi	r22, 0x78	; 120
    1394:	71 e0       	ldi	r23, 0x01	; 1
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	
	States_GotoState(IDLE);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
	Keypad_Init();
    13a2:	0e 94 8a 03 	call	0x714	; 0x714 <Keypad_Init>
	
	while (1)
	{
		if(Keypad_KeyPressed())
    13a6:	0e 94 0e 04 	call	0x81c	; 0x81c <Keypad_KeyPressed>
    13aa:	88 23       	and	r24, r24
    13ac:	b1 f0       	breq	.+44     	; 0x13da <main+0x90>
    13ae:	8f e3       	ldi	r24, 0x3F	; 63
    13b0:	9c e9       	ldi	r25, 0x9C	; 156
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x68>
    13b6:	00 c0       	rjmp	.+0      	; 0x13b8 <main+0x6e>
    13b8:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
    13ba:	0e 94 0e 04 	call	0x81c	; 0x81c <Keypad_KeyPressed>
    13be:	88 23       	and	r24, r24
    13c0:	61 f0       	breq	.+24     	; 0x13da <main+0x90>
			{
				int_fast8_t x = Keypad_GetKey();
    13c2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Keypad_GetKey>
    13c6:	ef e3       	ldi	r30, 0x3F	; 63
    13c8:	fc e9       	ldi	r31, 0x9C	; 156
    13ca:	31 97       	sbiw	r30, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <main+0x80>
    13ce:	00 c0       	rjmp	.+0      	; 0x13d0 <main+0x86>
    13d0:	00 00       	nop
				_delay_ms(20);
				KeyProcessor_ProcessKey(x);
    13d2:	0e 94 16 05 	call	0xa2c	; 0xa2c <KeyProcessor_ProcessKey>
				Keypad_Init();
    13d6:	0e 94 8a 03 	call	0x714	; 0x714 <Keypad_Init>
			}
		}
		States_Refresh();
    13da:	0e 94 90 0c 	call	0x1920	; 0x1920 <States_Refresh>
	}
    13de:	e3 cf       	rjmp	.-58     	; 0x13a6 <main+0x5c>

000013e0 <Patient_UpdateName>:
struct PatientsList patientsList;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
    13e0:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
    13e4:	08 95       	ret

000013e6 <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
    13e6:	41 96       	adiw	r24, 0x11	; 17
    13e8:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
    13ec:	08 95       	ret

000013ee <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
    13ee:	82 96       	adiw	r24, 0x22	; 34
    13f0:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
    13f4:	08 95       	ret

000013f6 <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
    13f6:	89 5b       	subi	r24, 0xB9	; 185
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	fc 01       	movw	r30, r24
    13fc:	71 83       	std	Z+1, r23	; 0x01
    13fe:	60 83       	st	Z, r22
    1400:	08 95       	ret

00001402 <Patient_UpdateTemperature>:
}
void Patient_UpdateTemperature(struct Patient *p, char *newTemp)
{
	strcpy(p->temperature , newTemp);
    1402:	c3 96       	adiw	r24, 0x33	; 51
    1404:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
    1408:	08 95       	ret

0000140a <Patient_UpdateBp>:
}
void Patient_UpdateBp(struct Patient *p, char *newBp)
{
	strcpy(p->bp, newBp);
    140a:	cd 96       	adiw	r24, 0x3d	; 61
    140c:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
    1410:	08 95       	ret

00001412 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
    1412:	43 e9       	ldi	r20, 0x93	; 147
    1414:	51 e0       	ldi	r21, 0x01	; 1
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
	Keypad_InitNumpad();
    1420:	0e 94 df 03 	call	0x7be	; 0x7be <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1424:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
    1428:	89 e8       	ldi	r24, 0x89	; 137
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	0e 94 9c 03 	call	0x738	; 0x738 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1430:	42 e6       	ldi	r20, 0x62	; 98
    1432:	52 e0       	ldi	r21, 0x02	; 2
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
    143e:	08 95       	ret

00001440 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1440:	8f 31       	cpi	r24, 0x1F	; 31
    1442:	61 f4       	brne	.+24     	; 0x145c <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    1444:	62 e6       	ldi	r22, 0x62	; 98
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	88 e7       	ldi	r24, 0x78	; 120
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    1450:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    145a:	08 95       	ret
	}
	else if(key == 30)
    145c:	8e 31       	cpi	r24, 0x1E	; 30
    145e:	61 f4       	brne	.+24     	; 0x1478 <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    1460:	62 e6       	ldi	r22, 0x62	; 98
    1462:	72 e0       	ldi	r23, 0x02	; 2
    1464:	88 e7       	ldi	r24, 0x78	; 120
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    146c:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    1476:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1478:	0e 94 80 04 	call	0x900	; 0x900 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    147c:	42 e6       	ldi	r20, 0x62	; 98
    147e:	52 e0       	ldi	r21, 0x02	; 2
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    148a:	82 e6       	ldi	r24, 0x62	; 98
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1492:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Keypad_UpdateKeyMode>
    1496:	08 95       	ret

00001498 <EnteringBp_ProcessKey>:
	Keypad_Init();
}

void EnteringBp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1498:	8f 31       	cpi	r24, 0x1F	; 31
    149a:	61 f4       	brne	.+24     	; 0x14b4 <EnteringBp_ProcessKey+0x1c>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    149c:	62 e6       	ldi	r22, 0x62	; 98
    149e:	72 e0       	ldi	r23, 0x02	; 2
    14a0:	88 e7       	ldi	r24, 0x78	; 120
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	0e 94 05 0a 	call	0x140a	; 0x140a <Patient_UpdateBp>
		Keypad_ResetBuffer();
    14a8:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(GENERATE_SERIAL);
    14ac:	86 e0       	ldi	r24, 0x06	; 6
    14ae:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    14b2:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    14b4:	8e 31       	cpi	r24, 0x1E	; 30
    14b6:	59 f4       	brne	.+22     	; 0x14ce <EnteringBp_ProcessKey+0x36>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    14b8:	62 e6       	ldi	r22, 0x62	; 98
    14ba:	72 e0       	ldi	r23, 0x02	; 2
    14bc:	88 e7       	ldi	r24, 0x78	; 120
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 05 0a 	call	0x140a	; 0x140a <Patient_UpdateBp>
		Keypad_ResetBuffer();
    14c4:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    14c8:	84 e0       	ldi	r24, 0x04	; 4
    14ca:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    14ce:	08 95       	ret

000014d0 <EnteringBp_getBp>:

void EnteringBp_getBp()
{
	int_fast8_t x = 0;
	while(1) {
		Bp_PrintBp();
    14d0:	0e 94 41 02 	call	0x482	; 0x482 <Bp_PrintBp>
		if(Keypad_KeyPressed()) {
    14d4:	0e 94 0e 04 	call	0x81c	; 0x81c <Keypad_KeyPressed>
    14d8:	88 23       	and	r24, r24
    14da:	d1 f3       	breq	.-12     	; 0x14d0 <EnteringBp_getBp>
			x = Keypad_GetKey();
    14dc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Keypad_GetKey>
    14e0:	ef e3       	ldi	r30, 0x3F	; 63
    14e2:	fc e9       	ldi	r31, 0x9C	; 156
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <EnteringBp_getBp+0x14>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <EnteringBp_getBp+0x1a>
    14ea:	00 00       	nop
			break;
		}
	}
	_delay_ms(20);
	EnteringBp_ProcessKey(x);
    14ec:	0e 94 4c 0a 	call	0x1498	; 0x1498 <EnteringBp_ProcessKey>
	Keypad_Init();
    14f0:	0e 94 8a 03 	call	0x714	; 0x714 <Keypad_Init>
    14f4:	08 95       	ret

000014f6 <EnteringBp_Init>:
#include "../../all.h"

void EnteringBp_Init()
{
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Bp: ");
    14f6:	4e e9       	ldi	r20, 0x9E	; 158
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
	
	Bp_Init();
    1504:	0e 94 38 02 	call	0x470	; 0x470 <Bp_Init>
	EnteringBp_getBp();
    1508:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <EnteringBp_getBp>
    150c:	08 95       	ret

0000150e <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 6d 05 	call	0xada	; 0xada <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
    1522:	69 ea       	ldi	r22, 0xA9	; 169
    1524:	71 e0       	ldi	r23, 0x01	; 1
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	Keypad_UpdateKeyMode();
    152c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
    1530:	88 e7       	ldi	r24, 0x78	; 120
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 9c 03 	call	0x738	; 0x738 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1538:	42 e6       	ldi	r20, 0x62	; 98
    153a:	52 e0       	ldi	r21, 0x02	; 2
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
    1546:	08 95       	ret

00001548 <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1548:	8f 31       	cpi	r24, 0x1F	; 31
    154a:	61 f4       	brne	.+24     	; 0x1564 <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    154c:	62 e6       	ldi	r22, 0x62	; 98
    154e:	72 e0       	ldi	r23, 0x02	; 2
    1550:	88 e7       	ldi	r24, 0x78	; 120
    1552:	92 e0       	ldi	r25, 0x02	; 2
    1554:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Patient_UpdateName>
		Keypad_ResetBuffer();
    1558:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    1562:	08 95       	ret
	}
	else if(key == 30)
    1564:	8e 31       	cpi	r24, 0x1E	; 30
    1566:	61 f4       	brne	.+24     	; 0x1580 <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    1568:	62 e6       	ldi	r22, 0x62	; 98
    156a:	72 e0       	ldi	r23, 0x02	; 2
    156c:	88 e7       	ldi	r24, 0x78	; 120
    156e:	92 e0       	ldi	r25, 0x02	; 2
    1570:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Patient_UpdateName>
		Keypad_ResetBuffer();
    1574:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(IDLE);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    157e:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1580:	0e 94 80 04 	call	0x900	; 0x900 <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1584:	42 e6       	ldi	r20, 0x62	; 98
    1586:	52 e0       	ldi	r21, 0x02	; 2
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1592:	82 e6       	ldi	r24, 0x62	; 98
    1594:	92 e0       	ldi	r25, 0x02	; 2
    1596:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    159a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Keypad_UpdateKeyMode>
    159e:	08 95       	ret

000015a0 <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
    15a0:	45 eb       	ldi	r20, 0xB5	; 181
    15a2:	51 e0       	ldi	r21, 0x01	; 1
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    15ae:	0e 94 df 03 	call	0x7be	; 0x7be <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    15b2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    15b6:	8a e9       	ldi	r24, 0x9A	; 154
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	0e 94 9c 03 	call	0x738	; 0x738 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    15be:	42 e6       	ldi	r20, 0x62	; 98
    15c0:	52 e0       	ldi	r21, 0x02	; 2
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
    15cc:	08 95       	ret

000015ce <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    15ce:	8f 31       	cpi	r24, 0x1F	; 31
    15d0:	61 f4       	brne	.+24     	; 0x15ea <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    15d2:	62 e6       	ldi	r22, 0x62	; 98
    15d4:	72 e0       	ldi	r23, 0x02	; 2
    15d6:	88 e7       	ldi	r24, 0x78	; 120
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    15de:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    15e8:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    15ea:	8e 31       	cpi	r24, 0x1E	; 30
    15ec:	61 f4       	brne	.+24     	; 0x1606 <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    15ee:	62 e6       	ldi	r22, 0x62	; 98
    15f0:	72 e0       	ldi	r23, 0x02	; 2
    15f2:	88 e7       	ldi	r24, 0x78	; 120
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    15fa:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    1604:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1606:	0e 94 80 04 	call	0x900	; 0x900 <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    160a:	42 e6       	ldi	r20, 0x62	; 98
    160c:	52 e0       	ldi	r21, 0x02	; 2
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    1618:	82 e6       	ldi	r24, 0x62	; 98
    161a:	92 e0       	ldi	r25, 0x02	; 2
    161c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HC05_SendString>
		
		Keypad_InitNumpad();
    1620:	0e 94 df 03 	call	0x7be	; 0x7be <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    1624:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Keypad_UpdateKeyMode>
    1628:	08 95       	ret

0000162a <EnteringTemp_Init>:
#include "../../all.h"

void EnteringTemp_Init()
{
	Lcd_PrintLine(LCDKEYPAD, 0, "Temperature:");
    162a:	4f eb       	ldi	r20, 0xBF	; 191
    162c:	51 e0       	ldi	r21, 0x01	; 1
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
    Lm35_Init();
    1638:	0e 94 77 09 	call	0x12ee	; 0x12ee <Lm35_Init>
    163c:	08 95       	ret

0000163e <EnteringTemp_Refresh>:
}

void EnteringTemp_Refresh()
{
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	64 97       	sbiw	r28, 0x14	; 20
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
	float tempF = Lm35_GetTemp();
    1656:	0e 94 7d 09 	call	0x12fa	; 0x12fa <Lm35_GetTemp>
	char tempF_txt[20];
	dtostrf(tempF, 5, 2, tempF_txt);
    165a:	8e 01       	movw	r16, r28
    165c:	0f 5f       	subi	r16, 0xFF	; 255
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	22 e0       	ldi	r18, 0x02	; 2
    1662:	45 e0       	ldi	r20, 0x05	; 5
    1664:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <dtostrf>
	Lcd_PrintLine(LCDKEYPAD, 1, tempF_txt);
    1668:	a8 01       	movw	r20, r16
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	0e 94 b4 05 	call	0xb68	; 0xb68 <Lcd_PrintLine>
	strcpy(keyBuffer, tempF_txt);
    1674:	b8 01       	movw	r22, r16
    1676:	82 e6       	ldi	r24, 0x62	; 98
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
}
    167e:	64 96       	adiw	r28, 0x14	; 20
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret

00001694 <EnteringTemp_ProcessKey>:

void EnteringTemp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1694:	8f 31       	cpi	r24, 0x1F	; 31
    1696:	61 f4       	brne	.+24     	; 0x16b0 <EnteringTemp_ProcessKey+0x1c>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    1698:	62 e6       	ldi	r22, 0x62	; 98
    169a:	72 e0       	ldi	r23, 0x02	; 2
    169c:	88 e7       	ldi	r24, 0x78	; 120
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	0e 94 01 0a 	call	0x1402	; 0x1402 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    16a4:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_BP);
    16a8:	85 e0       	ldi	r24, 0x05	; 5
    16aa:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    16ae:	08 95       	ret
	}
	else if(key == 30)
    16b0:	8e 31       	cpi	r24, 0x1E	; 30
    16b2:	59 f4       	brne	.+22     	; 0x16ca <EnteringTemp_ProcessKey+0x36>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    16b4:	62 e6       	ldi	r22, 0x62	; 98
    16b6:	72 e0       	ldi	r23, 0x02	; 2
    16b8:	88 e7       	ldi	r24, 0x78	; 120
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	0e 94 01 0a 	call	0x1402	; 0x1402 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    16c0:	0e 94 91 03 	call	0x722	; 0x722 <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    16ca:	08 95       	ret

000016cc <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount);
	Update_PatientsList();
}

void Update_PatientsList()
{
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));	//didn't wanna change your code, so created a new pointer
    16d0:	8b e4       	ldi	r24, 0x4B	; 75
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <malloc>
    16d8:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    16da:	68 e7       	ldi	r22, 0x78	; 120
    16dc:	72 e0       	ldi	r23, 0x02	; 2
    16de:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
	strcpy(cp->age, currentPatient.age);
    16e2:	69 e8       	ldi	r22, 0x89	; 137
    16e4:	72 e0       	ldi	r23, 0x02	; 2
    16e6:	ce 01       	movw	r24, r28
    16e8:	41 96       	adiw	r24, 0x11	; 17
    16ea:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    16ee:	6a e9       	ldi	r22, 0x9A	; 154
    16f0:	72 e0       	ldi	r23, 0x02	; 2
    16f2:	ce 01       	movw	r24, r28
    16f4:	82 96       	adiw	r24, 0x22	; 34
    16f6:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
	cp->serial = currentPatient.serial;
    16fa:	fe 01       	movw	r30, r28
    16fc:	e9 5b       	subi	r30, 0xB9	; 185
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <currentPatient+0x47>
    1704:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <currentPatient+0x48>
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
	cp->nextPatient = NULL;
    170c:	32 96       	adiw	r30, 0x02	; 2
    170e:	11 82       	std	Z+1, r1	; 0x01
    1710:	10 82       	st	Z, r1
	strcpy(cp->temperature, currentPatient.temperature);
    1712:	6b ea       	ldi	r22, 0xAB	; 171
    1714:	72 e0       	ldi	r23, 0x02	; 2
    1716:	ce 01       	movw	r24, r28
    1718:	c3 96       	adiw	r24, 0x33	; 51
    171a:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
	strcpy(cp->bp, currentPatient.bp);
    171e:	65 eb       	ldi	r22, 0xB5	; 181
    1720:	72 e0       	ldi	r23, 0x02	; 2
    1722:	ce 01       	movw	r24, r28
    1724:	cd 96       	adiw	r24, 0x3d	; 61
    1726:	0e 94 28 10 	call	0x2050	; 0x2050 <strcpy>
	if(!patientsList.root) {
    172a:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <patientsList>
    172e:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <patientsList+0x1>
    1732:	21 15       	cp	r18, r1
    1734:	31 05       	cpc	r19, r1
    1736:	31 f4       	brne	.+12     	; 0x1744 <Update_PatientsList+0x78>
		patientsList.root = cp;
    1738:	d0 93 77 02 	sts	0x0277, r29	; 0x800277 <patientsList+0x1>
    173c:	c0 93 76 02 	sts	0x0276, r28	; 0x800276 <patientsList>
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <Update_PatientsList+0x8a>
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
			p = p->nextPatient;
    1742:	9c 01       	movw	r18, r24
	if(!patientsList.root) {
		patientsList.root = cp;
	}
	else {
		struct Patient* p = patientsList.root;
		while(p->nextPatient) {
    1744:	f9 01       	movw	r30, r18
    1746:	e7 5b       	subi	r30, 0xB7	; 183
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	c1 f7       	brne	.-16     	; 0x1742 <Update_PatientsList+0x76>
			p = p->nextPatient;
		}
		p->nextPatient = cp;
    1752:	d1 83       	std	Z+1, r29	; 0x01
    1754:	c0 83       	st	Z, r28
	}
	
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <Update_Serial>:
		
	}
}

void Update_Serial()
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	c4 56       	subi	r28, 0x64	; 100
    176a:	d1 09       	sbc	r29, r1
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    1776:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <patientsCount>
    177a:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <patientsCount+0x1>
    177e:	6f 5f       	subi	r22, 0xFF	; 255
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	07 2e       	mov	r0, r23
    1784:	00 0c       	add	r0, r0
    1786:	88 0b       	sbc	r24, r24
    1788:	99 0b       	sbc	r25, r25
    178a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__floatsisf>
    178e:	8e 01       	movw	r16, r28
    1790:	0f 5f       	subi	r16, 0xFF	; 255
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	43 e0       	ldi	r20, 0x03	; 3
    1798:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    179c:	4d e0       	ldi	r20, 0x0D	; 13
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    17aa:	b8 01       	movw	r22, r16
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount);
    17b2:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <patientsCount>
    17b6:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <patientsCount+0x1>
    17ba:	88 e7       	ldi	r24, 0x78	; 120
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <Patient_UpdateSerial>
	Update_PatientsList();
    17c2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <Update_PatientsList>
}
    17c6:	cc 59       	subi	r28, 0x9C	; 156
    17c8:	df 4f       	sbci	r29, 0xFF	; 255
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <GenerateSerial_Init>:
#include "../../all.h"


void GenerateSerial_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	0e 94 6d 05 	call	0xada	; 0xada <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD,0,0);
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"Your Serial: ");
    17f2:	6c ec       	ldi	r22, 0xCC	; 204
    17f4:	71 e0       	ldi	r23, 0x01	; 1
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	Update_Serial();
    17fc:	0e 94 ae 0b 	call	0x175c	; 0x175c <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
    180e:	6a ed       	ldi	r22, 0xDA	; 218
    1810:	71 e0       	ldi	r23, 0x01	; 1
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
    1818:	08 95       	ret

0000181a <Clear_CurrentPatient_Data>:
	}
	
}

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    181a:	e8 e7       	ldi	r30, 0x78	; 120
    181c:	f2 e0       	ldi	r31, 0x02	; 2
    181e:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    1820:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    1822:	12 a2       	std	Z+34, r1	; 0x22
	strcpy(currentPatient.temperature, "");
    1824:	13 aa       	std	Z+51, r1	; 0x33
	strcpy(currentPatient.bp, "");
    1826:	15 ae       	std	Z+61, r1	; 0x3d
    1828:	08 95       	ret

0000182a <GenerateSerial_ProcessKey>:
	Lcd_Prints(LCDKEYPAD,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    182a:	8f 31       	cpi	r24, 0x1F	; 31
    182c:	39 f5       	brne	.+78     	; 0x187c <GenerateSerial_ProcessKey+0x52>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	0e 94 6d 05 	call	0xada	; 0xada <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    1834:	43 e0       	ldi	r20, 0x03	; 3
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
		patientsCount++;
    1842:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <patientsCount>
    1846:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <patientsCount+0x1>
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <patientsCount+0x1>
    1850:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <patientsCount>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    1854:	6b ee       	ldi	r22, 0xEB	; 235
    1856:	71 e0       	ldi	r23, 0x01	; 1
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
    185e:	2f ef       	ldi	r18, 0xFF	; 255
    1860:	83 ed       	ldi	r24, 0xD3	; 211
    1862:	90 e3       	ldi	r25, 0x30	; 48
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	80 40       	sbci	r24, 0x00	; 0
    1868:	90 40       	sbci	r25, 0x00	; 0
    186a:	e1 f7       	brne	.-8      	; 0x1864 <GenerateSerial_ProcessKey+0x3a>
    186c:	00 c0       	rjmp	.+0      	; 0x186e <GenerateSerial_ProcessKey+0x44>
    186e:	00 00       	nop
		_delay_ms(2000);

		/* Here, can first prompt for providing temperature through lm and then go to the idle state for next entry */
		
		States_GotoState(IDLE);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
		Clear_CurrentPatient_Data();
    1876:	0e 94 0d 0c 	call	0x181a	; 0x181a <Clear_CurrentPatient_Data>
    187a:	08 95       	ret
	}
	else if(key == 30)
    187c:	8e 31       	cpi	r24, 0x1E	; 30
    187e:	19 f4       	brne	.+6      	; 0x1886 <GenerateSerial_ProcessKey+0x5c>
	{
		States_GotoState(ENTERING_PHONE);	// if re-editing is permitted
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    1886:	08 95       	ret

00001888 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <States_GotoState>
    188e:	08 95       	ret

00001890 <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	0e 94 6d 05 	call	0xada	; 0xada <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    18a4:	65 ef       	ldi	r22, 0xF5	; 245
    18a6:	71 e0       	ldi	r23, 0x01	; 1
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    18bc:	6e ef       	ldi	r22, 0xFE	; 254
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	0e 94 7d 05 	call	0xafa	; 0xafa <Lcd_Prints>
    18c6:	08 95       	ret

000018c8 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    18c8:	cf 93       	push	r28
    18ca:	c8 2f       	mov	r28, r24
	switch(newState)
    18cc:	08 2e       	mov	r0, r24
    18ce:	00 0c       	add	r0, r0
    18d0:	99 0b       	sbc	r25, r25
    18d2:	aa 0b       	sbc	r26, r26
    18d4:	bb 0b       	sbc	r27, r27
    18d6:	87 30       	cpi	r24, 0x07	; 7
    18d8:	91 05       	cpc	r25, r1
    18da:	d0 f4       	brcc	.+52     	; 0x1910 <States_GotoState+0x48>
    18dc:	fc 01       	movw	r30, r24
    18de:	ef 5c       	subi	r30, 0xCF	; 207
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__tablejump2__>
	{
		case IDLE:
			Idle_Init();
    18e6:	0e 94 48 0c 	call	0x1890	; 0x1890 <Idle_Init>
			break;
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <States_GotoState+0x50>
		case ENTERING_NAME:
			EnteringName_Init();
    18ec:	0e 94 87 0a 	call	0x150e	; 0x150e <EnteringName_Init>
			break;
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <States_GotoState+0x50>
		case ENTERING_AGE:
			EnteringAge_Init();
    18f2:	0e 94 09 0a 	call	0x1412	; 0x1412 <EnteringAge_Init>
			break;
    18f6:	10 c0       	rjmp	.+32     	; 0x1918 <States_GotoState+0x50>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    18f8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <EnteringPhone_Init>
			break;
    18fc:	0d c0       	rjmp	.+26     	; 0x1918 <States_GotoState+0x50>
		case ENTERING_TEMP:
			EnteringTemp_Init();
    18fe:	0e 94 15 0b 	call	0x162a	; 0x162a <EnteringTemp_Init>
			break;
    1902:	0a c0       	rjmp	.+20     	; 0x1918 <States_GotoState+0x50>
		case ENTERING_BP:
			EnteringBp_Init();
    1904:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <EnteringBp_Init>
			break;
    1908:	07 c0       	rjmp	.+14     	; 0x1918 <States_GotoState+0x50>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    190a:	0e 94 ef 0b 	call	0x17de	; 0x17de <GenerateSerial_Init>
			break;
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <States_GotoState+0x50>
		default:
			Error_Error("GotoState: newState not defined");
    1910:	8b e0       	ldi	r24, 0x0B	; 11
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
	}
	currentState = newState;
    1918:	c0 93 c3 02 	sts	0x02C3, r28	; 0x8002c3 <currentState>
}
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <States_Refresh>:
void States_Refresh()
{
	switch(currentState)
    1920:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <currentState>
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	19 f4       	brne	.+6      	; 0x192e <States_Refresh+0xe>
	{
		case ENTERING_TEMP:
		EnteringTemp_Refresh();
    1928:	0e 94 1f 0b 	call	0x163e	; 0x163e <EnteringTemp_Refresh>
		break;
    192c:	08 95       	ret
		default:
		Error_Error("States_Refresh: currentstate not defined");
    192e:	8b e2       	ldi	r24, 0x2B	; 43
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0e 94 00 03 	call	0x600	; 0x600 <Error_Error>
    1936:	08 95       	ret

00001938 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1938:	11 b8       	out	0x01, r1	; 1
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	80 b9       	out	0x00, r24	; 0
    193e:	08 95       	ret

00001940 <i2c_start>:
    1940:	94 ea       	ldi	r25, 0xA4	; 164
    1942:	96 bf       	out	0x36, r25	; 54
    1944:	06 b6       	in	r0, 0x36	; 54
    1946:	07 fe       	sbrs	r0, 7
    1948:	fd cf       	rjmp	.-6      	; 0x1944 <i2c_start+0x4>
    194a:	91 b1       	in	r25, 0x01	; 1
    194c:	98 7f       	andi	r25, 0xF8	; 248
    194e:	98 30       	cpi	r25, 0x08	; 8
    1950:	11 f0       	breq	.+4      	; 0x1956 <i2c_start+0x16>
    1952:	90 31       	cpi	r25, 0x10	; 16
    1954:	79 f4       	brne	.+30     	; 0x1974 <i2c_start+0x34>
    1956:	83 b9       	out	0x03, r24	; 3
    1958:	84 e8       	ldi	r24, 0x84	; 132
    195a:	86 bf       	out	0x36, r24	; 54
    195c:	06 b6       	in	r0, 0x36	; 54
    195e:	07 fe       	sbrs	r0, 7
    1960:	fd cf       	rjmp	.-6      	; 0x195c <i2c_start+0x1c>
    1962:	91 b1       	in	r25, 0x01	; 1
    1964:	98 7f       	andi	r25, 0xF8	; 248
    1966:	98 31       	cpi	r25, 0x18	; 24
    1968:	39 f0       	breq	.+14     	; 0x1978 <i2c_start+0x38>
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 34       	cpi	r25, 0x40	; 64
    196e:	29 f4       	brne	.+10     	; 0x197a <i2c_start+0x3a>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	08 95       	ret
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	08 95       	ret

0000197c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    197c:	84 e9       	ldi	r24, 0x94	; 148
    197e:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1980:	06 b6       	in	r0, 0x36	; 54
    1982:	04 fc       	sbrc	r0, 4
    1984:	fd cf       	rjmp	.-6      	; 0x1980 <i2c_stop+0x4>

}/* i2c_stop */
    1986:	08 95       	ret

00001988 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1988:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    198a:	84 e8       	ldi	r24, 0x84	; 132
    198c:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    198e:	06 b6       	in	r0, 0x36	; 54
    1990:	07 fe       	sbrs	r0, 7
    1992:	fd cf       	rjmp	.-6      	; 0x198e <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1994:	91 b1       	in	r25, 0x01	; 1
    1996:	98 7f       	andi	r25, 0xF8	; 248
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	98 32       	cpi	r25, 0x28	; 40
    199c:	09 f4       	brne	.+2      	; 0x19a0 <i2c_write+0x18>
    199e:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    19a0:	08 95       	ret

000019a2 <__subsf3>:
    19a2:	50 58       	subi	r21, 0x80	; 128

000019a4 <__addsf3>:
    19a4:	bb 27       	eor	r27, r27
    19a6:	aa 27       	eor	r26, r26
    19a8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__addsf3x>
    19ac:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_round>
    19b0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_pscA>
    19b4:	38 f0       	brcs	.+14     	; 0x19c4 <__addsf3+0x20>
    19b6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fp_pscB>
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__addsf3+0x20>
    19bc:	39 f4       	brne	.+14     	; 0x19cc <__addsf3+0x28>
    19be:	9f 3f       	cpi	r25, 0xFF	; 255
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <__addsf3+0x24>
    19c2:	26 f4       	brtc	.+8      	; 0x19cc <__addsf3+0x28>
    19c4:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_nan>
    19c8:	0e f4       	brtc	.+2      	; 0x19cc <__addsf3+0x28>
    19ca:	e0 95       	com	r30
    19cc:	e7 fb       	bst	r30, 7
    19ce:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__fp_inf>

000019d2 <__addsf3x>:
    19d2:	e9 2f       	mov	r30, r25
    19d4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__fp_split3>
    19d8:	58 f3       	brcs	.-42     	; 0x19b0 <__addsf3+0xc>
    19da:	ba 17       	cp	r27, r26
    19dc:	62 07       	cpc	r22, r18
    19de:	73 07       	cpc	r23, r19
    19e0:	84 07       	cpc	r24, r20
    19e2:	95 07       	cpc	r25, r21
    19e4:	20 f0       	brcs	.+8      	; 0x19ee <__addsf3x+0x1c>
    19e6:	79 f4       	brne	.+30     	; 0x1a06 <__addsf3x+0x34>
    19e8:	a6 f5       	brtc	.+104    	; 0x1a52 <__addsf3x+0x80>
    19ea:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_zero>
    19ee:	0e f4       	brtc	.+2      	; 0x19f2 <__addsf3x+0x20>
    19f0:	e0 95       	com	r30
    19f2:	0b 2e       	mov	r0, r27
    19f4:	ba 2f       	mov	r27, r26
    19f6:	a0 2d       	mov	r26, r0
    19f8:	0b 01       	movw	r0, r22
    19fa:	b9 01       	movw	r22, r18
    19fc:	90 01       	movw	r18, r0
    19fe:	0c 01       	movw	r0, r24
    1a00:	ca 01       	movw	r24, r20
    1a02:	a0 01       	movw	r20, r0
    1a04:	11 24       	eor	r1, r1
    1a06:	ff 27       	eor	r31, r31
    1a08:	59 1b       	sub	r21, r25
    1a0a:	99 f0       	breq	.+38     	; 0x1a32 <__addsf3x+0x60>
    1a0c:	59 3f       	cpi	r21, 0xF9	; 249
    1a0e:	50 f4       	brcc	.+20     	; 0x1a24 <__addsf3x+0x52>
    1a10:	50 3e       	cpi	r21, 0xE0	; 224
    1a12:	68 f1       	brcs	.+90     	; 0x1a6e <__addsf3x+0x9c>
    1a14:	1a 16       	cp	r1, r26
    1a16:	f0 40       	sbci	r31, 0x00	; 0
    1a18:	a2 2f       	mov	r26, r18
    1a1a:	23 2f       	mov	r18, r19
    1a1c:	34 2f       	mov	r19, r20
    1a1e:	44 27       	eor	r20, r20
    1a20:	58 5f       	subi	r21, 0xF8	; 248
    1a22:	f3 cf       	rjmp	.-26     	; 0x1a0a <__addsf3x+0x38>
    1a24:	46 95       	lsr	r20
    1a26:	37 95       	ror	r19
    1a28:	27 95       	ror	r18
    1a2a:	a7 95       	ror	r26
    1a2c:	f0 40       	sbci	r31, 0x00	; 0
    1a2e:	53 95       	inc	r21
    1a30:	c9 f7       	brne	.-14     	; 0x1a24 <__addsf3x+0x52>
    1a32:	7e f4       	brtc	.+30     	; 0x1a52 <__addsf3x+0x80>
    1a34:	1f 16       	cp	r1, r31
    1a36:	ba 0b       	sbc	r27, r26
    1a38:	62 0b       	sbc	r22, r18
    1a3a:	73 0b       	sbc	r23, r19
    1a3c:	84 0b       	sbc	r24, r20
    1a3e:	ba f0       	brmi	.+46     	; 0x1a6e <__addsf3x+0x9c>
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	a1 f0       	breq	.+40     	; 0x1a6c <__addsf3x+0x9a>
    1a44:	ff 0f       	add	r31, r31
    1a46:	bb 1f       	adc	r27, r27
    1a48:	66 1f       	adc	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	c2 f7       	brpl	.-16     	; 0x1a40 <__addsf3x+0x6e>
    1a50:	0e c0       	rjmp	.+28     	; 0x1a6e <__addsf3x+0x9c>
    1a52:	ba 0f       	add	r27, r26
    1a54:	62 1f       	adc	r22, r18
    1a56:	73 1f       	adc	r23, r19
    1a58:	84 1f       	adc	r24, r20
    1a5a:	48 f4       	brcc	.+18     	; 0x1a6e <__addsf3x+0x9c>
    1a5c:	87 95       	ror	r24
    1a5e:	77 95       	ror	r23
    1a60:	67 95       	ror	r22
    1a62:	b7 95       	ror	r27
    1a64:	f7 95       	ror	r31
    1a66:	9e 3f       	cpi	r25, 0xFE	; 254
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <__addsf3x+0x9a>
    1a6a:	b0 cf       	rjmp	.-160    	; 0x19cc <__addsf3+0x28>
    1a6c:	93 95       	inc	r25
    1a6e:	88 0f       	add	r24, r24
    1a70:	08 f0       	brcs	.+2      	; 0x1a74 <__addsf3x+0xa2>
    1a72:	99 27       	eor	r25, r25
    1a74:	ee 0f       	add	r30, r30
    1a76:	97 95       	ror	r25
    1a78:	87 95       	ror	r24
    1a7a:	08 95       	ret

00001a7c <__divsf3>:
    1a7c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divsf3x>
    1a80:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_round>
    1a84:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fp_pscB>
    1a88:	58 f0       	brcs	.+22     	; 0x1aa0 <__divsf3+0x24>
    1a8a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_pscA>
    1a8e:	40 f0       	brcs	.+16     	; 0x1aa0 <__divsf3+0x24>
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <__divsf3+0x20>
    1a92:	5f 3f       	cpi	r21, 0xFF	; 255
    1a94:	29 f0       	breq	.+10     	; 0x1aa0 <__divsf3+0x24>
    1a96:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__fp_inf>
    1a9a:	51 11       	cpse	r21, r1
    1a9c:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_szero>
    1aa0:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_nan>

00001aa4 <__divsf3x>:
    1aa4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__fp_split3>
    1aa8:	68 f3       	brcs	.-38     	; 0x1a84 <__divsf3+0x8>

00001aaa <__divsf3_pse>:
    1aaa:	99 23       	and	r25, r25
    1aac:	b1 f3       	breq	.-20     	; 0x1a9a <__divsf3+0x1e>
    1aae:	55 23       	and	r21, r21
    1ab0:	91 f3       	breq	.-28     	; 0x1a96 <__divsf3+0x1a>
    1ab2:	95 1b       	sub	r25, r21
    1ab4:	55 0b       	sbc	r21, r21
    1ab6:	bb 27       	eor	r27, r27
    1ab8:	aa 27       	eor	r26, r26
    1aba:	62 17       	cp	r22, r18
    1abc:	73 07       	cpc	r23, r19
    1abe:	84 07       	cpc	r24, r20
    1ac0:	38 f0       	brcs	.+14     	; 0x1ad0 <__divsf3_pse+0x26>
    1ac2:	9f 5f       	subi	r25, 0xFF	; 255
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	44 1f       	adc	r20, r20
    1acc:	aa 1f       	adc	r26, r26
    1ace:	a9 f3       	breq	.-22     	; 0x1aba <__divsf3_pse+0x10>
    1ad0:	35 d0       	rcall	.+106    	; 0x1b3c <__divsf3_pse+0x92>
    1ad2:	0e 2e       	mov	r0, r30
    1ad4:	3a f0       	brmi	.+14     	; 0x1ae4 <__divsf3_pse+0x3a>
    1ad6:	e0 e8       	ldi	r30, 0x80	; 128
    1ad8:	32 d0       	rcall	.+100    	; 0x1b3e <__divsf3_pse+0x94>
    1ada:	91 50       	subi	r25, 0x01	; 1
    1adc:	50 40       	sbci	r21, 0x00	; 0
    1ade:	e6 95       	lsr	r30
    1ae0:	00 1c       	adc	r0, r0
    1ae2:	ca f7       	brpl	.-14     	; 0x1ad6 <__divsf3_pse+0x2c>
    1ae4:	2b d0       	rcall	.+86     	; 0x1b3c <__divsf3_pse+0x92>
    1ae6:	fe 2f       	mov	r31, r30
    1ae8:	29 d0       	rcall	.+82     	; 0x1b3c <__divsf3_pse+0x92>
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	bb 1f       	adc	r27, r27
    1af2:	26 17       	cp	r18, r22
    1af4:	37 07       	cpc	r19, r23
    1af6:	48 07       	cpc	r20, r24
    1af8:	ab 07       	cpc	r26, r27
    1afa:	b0 e8       	ldi	r27, 0x80	; 128
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__divsf3_pse+0x56>
    1afe:	bb 0b       	sbc	r27, r27
    1b00:	80 2d       	mov	r24, r0
    1b02:	bf 01       	movw	r22, r30
    1b04:	ff 27       	eor	r31, r31
    1b06:	93 58       	subi	r25, 0x83	; 131
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	3a f0       	brmi	.+14     	; 0x1b1a <__divsf3_pse+0x70>
    1b0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0e:	51 05       	cpc	r21, r1
    1b10:	78 f0       	brcs	.+30     	; 0x1b30 <__divsf3_pse+0x86>
    1b12:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__fp_inf>
    1b16:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_szero>
    1b1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1c:	e4 f3       	brlt	.-8      	; 0x1b16 <__divsf3_pse+0x6c>
    1b1e:	98 3e       	cpi	r25, 0xE8	; 232
    1b20:	d4 f3       	brlt	.-12     	; 0x1b16 <__divsf3_pse+0x6c>
    1b22:	86 95       	lsr	r24
    1b24:	77 95       	ror	r23
    1b26:	67 95       	ror	r22
    1b28:	b7 95       	ror	r27
    1b2a:	f7 95       	ror	r31
    1b2c:	9f 5f       	subi	r25, 0xFF	; 255
    1b2e:	c9 f7       	brne	.-14     	; 0x1b22 <__divsf3_pse+0x78>
    1b30:	88 0f       	add	r24, r24
    1b32:	91 1d       	adc	r25, r1
    1b34:	96 95       	lsr	r25
    1b36:	87 95       	ror	r24
    1b38:	97 f9       	bld	r25, 7
    1b3a:	08 95       	ret
    1b3c:	e1 e0       	ldi	r30, 0x01	; 1
    1b3e:	66 0f       	add	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	bb 1f       	adc	r27, r27
    1b46:	62 17       	cp	r22, r18
    1b48:	73 07       	cpc	r23, r19
    1b4a:	84 07       	cpc	r24, r20
    1b4c:	ba 07       	cpc	r27, r26
    1b4e:	20 f0       	brcs	.+8      	; 0x1b58 <__divsf3_pse+0xae>
    1b50:	62 1b       	sub	r22, r18
    1b52:	73 0b       	sbc	r23, r19
    1b54:	84 0b       	sbc	r24, r20
    1b56:	ba 0b       	sbc	r27, r26
    1b58:	ee 1f       	adc	r30, r30
    1b5a:	88 f7       	brcc	.-30     	; 0x1b3e <__divsf3_pse+0x94>
    1b5c:	e0 95       	com	r30
    1b5e:	08 95       	ret

00001b60 <__fixsfsi>:
    1b60:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fixunssfsi>
    1b64:	68 94       	set
    1b66:	b1 11       	cpse	r27, r1
    1b68:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_szero>
    1b6c:	08 95       	ret

00001b6e <__fixunssfsi>:
    1b6e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fp_splitA>
    1b72:	88 f0       	brcs	.+34     	; 0x1b96 <__fixunssfsi+0x28>
    1b74:	9f 57       	subi	r25, 0x7F	; 127
    1b76:	98 f0       	brcs	.+38     	; 0x1b9e <__fixunssfsi+0x30>
    1b78:	b9 2f       	mov	r27, r25
    1b7a:	99 27       	eor	r25, r25
    1b7c:	b7 51       	subi	r27, 0x17	; 23
    1b7e:	b0 f0       	brcs	.+44     	; 0x1bac <__fixunssfsi+0x3e>
    1b80:	e1 f0       	breq	.+56     	; 0x1bba <__fixunssfsi+0x4c>
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	1a f0       	brmi	.+6      	; 0x1b92 <__fixunssfsi+0x24>
    1b8c:	ba 95       	dec	r27
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <__fixunssfsi+0x14>
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <__fixunssfsi+0x4c>
    1b92:	b1 30       	cpi	r27, 0x01	; 1
    1b94:	91 f0       	breq	.+36     	; 0x1bba <__fixunssfsi+0x4c>
    1b96:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__fp_zero>
    1b9a:	b1 e0       	ldi	r27, 0x01	; 1
    1b9c:	08 95       	ret
    1b9e:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_zero>
    1ba2:	67 2f       	mov	r22, r23
    1ba4:	78 2f       	mov	r23, r24
    1ba6:	88 27       	eor	r24, r24
    1ba8:	b8 5f       	subi	r27, 0xF8	; 248
    1baa:	39 f0       	breq	.+14     	; 0x1bba <__fixunssfsi+0x4c>
    1bac:	b9 3f       	cpi	r27, 0xF9	; 249
    1bae:	cc f3       	brlt	.-14     	; 0x1ba2 <__fixunssfsi+0x34>
    1bb0:	86 95       	lsr	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	b3 95       	inc	r27
    1bb8:	d9 f7       	brne	.-10     	; 0x1bb0 <__fixunssfsi+0x42>
    1bba:	3e f4       	brtc	.+14     	; 0x1bca <__fixunssfsi+0x5c>
    1bbc:	90 95       	com	r25
    1bbe:	80 95       	com	r24
    1bc0:	70 95       	com	r23
    1bc2:	61 95       	neg	r22
    1bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	08 95       	ret

00001bcc <__floatunsisf>:
    1bcc:	e8 94       	clt
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <__floatsisf+0x12>

00001bd0 <__floatsisf>:
    1bd0:	97 fb       	bst	r25, 7
    1bd2:	3e f4       	brtc	.+14     	; 0x1be2 <__floatsisf+0x12>
    1bd4:	90 95       	com	r25
    1bd6:	80 95       	com	r24
    1bd8:	70 95       	com	r23
    1bda:	61 95       	neg	r22
    1bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bde:	8f 4f       	sbci	r24, 0xFF	; 255
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	99 23       	and	r25, r25
    1be4:	a9 f0       	breq	.+42     	; 0x1c10 <__floatsisf+0x40>
    1be6:	f9 2f       	mov	r31, r25
    1be8:	96 e9       	ldi	r25, 0x96	; 150
    1bea:	bb 27       	eor	r27, r27
    1bec:	93 95       	inc	r25
    1bee:	f6 95       	lsr	r31
    1bf0:	87 95       	ror	r24
    1bf2:	77 95       	ror	r23
    1bf4:	67 95       	ror	r22
    1bf6:	b7 95       	ror	r27
    1bf8:	f1 11       	cpse	r31, r1
    1bfa:	f8 cf       	rjmp	.-16     	; 0x1bec <__floatsisf+0x1c>
    1bfc:	fa f4       	brpl	.+62     	; 0x1c3c <__floatsisf+0x6c>
    1bfe:	bb 0f       	add	r27, r27
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <__floatsisf+0x36>
    1c02:	60 ff       	sbrs	r22, 0
    1c04:	1b c0       	rjmp	.+54     	; 0x1c3c <__floatsisf+0x6c>
    1c06:	6f 5f       	subi	r22, 0xFF	; 255
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <__floatsisf+0x6c>
    1c10:	88 23       	and	r24, r24
    1c12:	11 f0       	breq	.+4      	; 0x1c18 <__floatsisf+0x48>
    1c14:	96 e9       	ldi	r25, 0x96	; 150
    1c16:	11 c0       	rjmp	.+34     	; 0x1c3a <__floatsisf+0x6a>
    1c18:	77 23       	and	r23, r23
    1c1a:	21 f0       	breq	.+8      	; 0x1c24 <__floatsisf+0x54>
    1c1c:	9e e8       	ldi	r25, 0x8E	; 142
    1c1e:	87 2f       	mov	r24, r23
    1c20:	76 2f       	mov	r23, r22
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <__floatsisf+0x5e>
    1c24:	66 23       	and	r22, r22
    1c26:	71 f0       	breq	.+28     	; 0x1c44 <__floatsisf+0x74>
    1c28:	96 e8       	ldi	r25, 0x86	; 134
    1c2a:	86 2f       	mov	r24, r22
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	2a f0       	brmi	.+10     	; 0x1c3c <__floatsisf+0x6c>
    1c32:	9a 95       	dec	r25
    1c34:	66 0f       	add	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	88 1f       	adc	r24, r24
    1c3a:	da f7       	brpl	.-10     	; 0x1c32 <__floatsisf+0x62>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	96 95       	lsr	r25
    1c40:	87 95       	ror	r24
    1c42:	97 f9       	bld	r25, 7
    1c44:	08 95       	ret

00001c46 <__fp_inf>:
    1c46:	97 f9       	bld	r25, 7
    1c48:	9f 67       	ori	r25, 0x7F	; 127
    1c4a:	80 e8       	ldi	r24, 0x80	; 128
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	08 95       	ret

00001c52 <__fp_nan>:
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
    1c54:	80 ec       	ldi	r24, 0xC0	; 192
    1c56:	08 95       	ret

00001c58 <__fp_pscA>:
    1c58:	00 24       	eor	r0, r0
    1c5a:	0a 94       	dec	r0
    1c5c:	16 16       	cp	r1, r22
    1c5e:	17 06       	cpc	r1, r23
    1c60:	18 06       	cpc	r1, r24
    1c62:	09 06       	cpc	r0, r25
    1c64:	08 95       	ret

00001c66 <__fp_pscB>:
    1c66:	00 24       	eor	r0, r0
    1c68:	0a 94       	dec	r0
    1c6a:	12 16       	cp	r1, r18
    1c6c:	13 06       	cpc	r1, r19
    1c6e:	14 06       	cpc	r1, r20
    1c70:	05 06       	cpc	r0, r21
    1c72:	08 95       	ret

00001c74 <__fp_round>:
    1c74:	09 2e       	mov	r0, r25
    1c76:	03 94       	inc	r0
    1c78:	00 0c       	add	r0, r0
    1c7a:	11 f4       	brne	.+4      	; 0x1c80 <__fp_round+0xc>
    1c7c:	88 23       	and	r24, r24
    1c7e:	52 f0       	brmi	.+20     	; 0x1c94 <__fp_round+0x20>
    1c80:	bb 0f       	add	r27, r27
    1c82:	40 f4       	brcc	.+16     	; 0x1c94 <__fp_round+0x20>
    1c84:	bf 2b       	or	r27, r31
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <__fp_round+0x18>
    1c88:	60 ff       	sbrs	r22, 0
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <__fp_round+0x20>
    1c8c:	6f 5f       	subi	r22, 0xFF	; 255
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	08 95       	ret

00001c96 <__fp_split3>:
    1c96:	57 fd       	sbrc	r21, 7
    1c98:	90 58       	subi	r25, 0x80	; 128
    1c9a:	44 0f       	add	r20, r20
    1c9c:	55 1f       	adc	r21, r21
    1c9e:	59 f0       	breq	.+22     	; 0x1cb6 <__fp_splitA+0x10>
    1ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca2:	71 f0       	breq	.+28     	; 0x1cc0 <__fp_splitA+0x1a>
    1ca4:	47 95       	ror	r20

00001ca6 <__fp_splitA>:
    1ca6:	88 0f       	add	r24, r24
    1ca8:	97 fb       	bst	r25, 7
    1caa:	99 1f       	adc	r25, r25
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <__fp_splitA+0x20>
    1cae:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb0:	79 f0       	breq	.+30     	; 0x1cd0 <__fp_splitA+0x2a>
    1cb2:	87 95       	ror	r24
    1cb4:	08 95       	ret
    1cb6:	12 16       	cp	r1, r18
    1cb8:	13 06       	cpc	r1, r19
    1cba:	14 06       	cpc	r1, r20
    1cbc:	55 1f       	adc	r21, r21
    1cbe:	f2 cf       	rjmp	.-28     	; 0x1ca4 <__fp_split3+0xe>
    1cc0:	46 95       	lsr	r20
    1cc2:	f1 df       	rcall	.-30     	; 0x1ca6 <__fp_splitA>
    1cc4:	08 c0       	rjmp	.+16     	; 0x1cd6 <__fp_splitA+0x30>
    1cc6:	16 16       	cp	r1, r22
    1cc8:	17 06       	cpc	r1, r23
    1cca:	18 06       	cpc	r1, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	f1 cf       	rjmp	.-30     	; 0x1cb2 <__fp_splitA+0xc>
    1cd0:	86 95       	lsr	r24
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	61 05       	cpc	r22, r1
    1cd6:	08 94       	sec
    1cd8:	08 95       	ret

00001cda <__fp_zero>:
    1cda:	e8 94       	clt

00001cdc <__fp_szero>:
    1cdc:	bb 27       	eor	r27, r27
    1cde:	66 27       	eor	r22, r22
    1ce0:	77 27       	eor	r23, r23
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	97 f9       	bld	r25, 7
    1ce6:	08 95       	ret

00001ce8 <__mulsf3>:
    1ce8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__mulsf3x>
    1cec:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_round>
    1cf0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__fp_pscA>
    1cf4:	38 f0       	brcs	.+14     	; 0x1d04 <__mulsf3+0x1c>
    1cf6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fp_pscB>
    1cfa:	20 f0       	brcs	.+8      	; 0x1d04 <__mulsf3+0x1c>
    1cfc:	95 23       	and	r25, r21
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <__mulsf3+0x1c>
    1d00:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__fp_inf>
    1d04:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_nan>
    1d08:	11 24       	eor	r1, r1
    1d0a:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_szero>

00001d0e <__mulsf3x>:
    1d0e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__fp_split3>
    1d12:	70 f3       	brcs	.-36     	; 0x1cf0 <__mulsf3+0x8>

00001d14 <__mulsf3_pse>:
    1d14:	95 9f       	mul	r25, r21
    1d16:	c1 f3       	breq	.-16     	; 0x1d08 <__mulsf3+0x20>
    1d18:	95 0f       	add	r25, r21
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	62 9f       	mul	r22, r18
    1d20:	f0 01       	movw	r30, r0
    1d22:	72 9f       	mul	r23, r18
    1d24:	bb 27       	eor	r27, r27
    1d26:	f0 0d       	add	r31, r0
    1d28:	b1 1d       	adc	r27, r1
    1d2a:	63 9f       	mul	r22, r19
    1d2c:	aa 27       	eor	r26, r26
    1d2e:	f0 0d       	add	r31, r0
    1d30:	b1 1d       	adc	r27, r1
    1d32:	aa 1f       	adc	r26, r26
    1d34:	64 9f       	mul	r22, r20
    1d36:	66 27       	eor	r22, r22
    1d38:	b0 0d       	add	r27, r0
    1d3a:	a1 1d       	adc	r26, r1
    1d3c:	66 1f       	adc	r22, r22
    1d3e:	82 9f       	mul	r24, r18
    1d40:	22 27       	eor	r18, r18
    1d42:	b0 0d       	add	r27, r0
    1d44:	a1 1d       	adc	r26, r1
    1d46:	62 1f       	adc	r22, r18
    1d48:	73 9f       	mul	r23, r19
    1d4a:	b0 0d       	add	r27, r0
    1d4c:	a1 1d       	adc	r26, r1
    1d4e:	62 1f       	adc	r22, r18
    1d50:	83 9f       	mul	r24, r19
    1d52:	a0 0d       	add	r26, r0
    1d54:	61 1d       	adc	r22, r1
    1d56:	22 1f       	adc	r18, r18
    1d58:	74 9f       	mul	r23, r20
    1d5a:	33 27       	eor	r19, r19
    1d5c:	a0 0d       	add	r26, r0
    1d5e:	61 1d       	adc	r22, r1
    1d60:	23 1f       	adc	r18, r19
    1d62:	84 9f       	mul	r24, r20
    1d64:	60 0d       	add	r22, r0
    1d66:	21 1d       	adc	r18, r1
    1d68:	82 2f       	mov	r24, r18
    1d6a:	76 2f       	mov	r23, r22
    1d6c:	6a 2f       	mov	r22, r26
    1d6e:	11 24       	eor	r1, r1
    1d70:	9f 57       	subi	r25, 0x7F	; 127
    1d72:	50 40       	sbci	r21, 0x00	; 0
    1d74:	9a f0       	brmi	.+38     	; 0x1d9c <__mulsf3_pse+0x88>
    1d76:	f1 f0       	breq	.+60     	; 0x1db4 <__mulsf3_pse+0xa0>
    1d78:	88 23       	and	r24, r24
    1d7a:	4a f0       	brmi	.+18     	; 0x1d8e <__mulsf3_pse+0x7a>
    1d7c:	ee 0f       	add	r30, r30
    1d7e:	ff 1f       	adc	r31, r31
    1d80:	bb 1f       	adc	r27, r27
    1d82:	66 1f       	adc	r22, r22
    1d84:	77 1f       	adc	r23, r23
    1d86:	88 1f       	adc	r24, r24
    1d88:	91 50       	subi	r25, 0x01	; 1
    1d8a:	50 40       	sbci	r21, 0x00	; 0
    1d8c:	a9 f7       	brne	.-22     	; 0x1d78 <__mulsf3_pse+0x64>
    1d8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d90:	51 05       	cpc	r21, r1
    1d92:	80 f0       	brcs	.+32     	; 0x1db4 <__mulsf3_pse+0xa0>
    1d94:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__fp_inf>
    1d98:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_szero>
    1d9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9e:	e4 f3       	brlt	.-8      	; 0x1d98 <__mulsf3_pse+0x84>
    1da0:	98 3e       	cpi	r25, 0xE8	; 232
    1da2:	d4 f3       	brlt	.-12     	; 0x1d98 <__mulsf3_pse+0x84>
    1da4:	86 95       	lsr	r24
    1da6:	77 95       	ror	r23
    1da8:	67 95       	ror	r22
    1daa:	b7 95       	ror	r27
    1dac:	f7 95       	ror	r31
    1dae:	e7 95       	ror	r30
    1db0:	9f 5f       	subi	r25, 0xFF	; 255
    1db2:	c1 f7       	brne	.-16     	; 0x1da4 <__mulsf3_pse+0x90>
    1db4:	fe 2b       	or	r31, r30
    1db6:	88 0f       	add	r24, r24
    1db8:	91 1d       	adc	r25, r1
    1dba:	96 95       	lsr	r25
    1dbc:	87 95       	ror	r24
    1dbe:	97 f9       	bld	r25, 7
    1dc0:	08 95       	ret

00001dc2 <__tablejump2__>:
    1dc2:	ee 0f       	add	r30, r30
    1dc4:	ff 1f       	adc	r31, r31
    1dc6:	05 90       	lpm	r0, Z+
    1dc8:	f4 91       	lpm	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	09 94       	ijmp

00001dce <dtostrf>:
    1dce:	ef 92       	push	r14
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	e8 01       	movw	r28, r16
    1dda:	47 fd       	sbrc	r20, 7
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <dtostrf+0x14>
    1dde:	34 e0       	ldi	r19, 0x04	; 4
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <dtostrf+0x16>
    1de2:	34 e1       	ldi	r19, 0x14	; 20
    1de4:	04 2e       	mov	r0, r20
    1de6:	00 0c       	add	r0, r0
    1de8:	55 0b       	sbc	r21, r21
    1dea:	57 ff       	sbrs	r21, 7
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <dtostrf+0x26>
    1dee:	51 95       	neg	r21
    1df0:	41 95       	neg	r20
    1df2:	51 09       	sbc	r21, r1
    1df4:	e3 2e       	mov	r14, r19
    1df6:	02 2f       	mov	r16, r18
    1df8:	24 2f       	mov	r18, r20
    1dfa:	ae 01       	movw	r20, r28
    1dfc:	0e 94 57 12 	call	0x24ae	; 0x24ae <dtoa_prf>
    1e00:	ce 01       	movw	r24, r28
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ef 90       	pop	r14
    1e0c:	08 95       	ret

00001e0e <malloc>:
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	91 05       	cpc	r25, r1
    1e1a:	10 f4       	brcc	.+4      	; 0x1e20 <malloc+0x12>
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <__flp>
    1e24:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <__flp+0x1>
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	a0 e0       	ldi	r26, 0x00	; 0
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	30 97       	sbiw	r30, 0x00	; 0
    1e32:	19 f1       	breq	.+70     	; 0x1e7a <malloc+0x6c>
    1e34:	40 81       	ld	r20, Z
    1e36:	51 81       	ldd	r21, Z+1	; 0x01
    1e38:	02 81       	ldd	r16, Z+2	; 0x02
    1e3a:	13 81       	ldd	r17, Z+3	; 0x03
    1e3c:	48 17       	cp	r20, r24
    1e3e:	59 07       	cpc	r21, r25
    1e40:	c8 f0       	brcs	.+50     	; 0x1e74 <malloc+0x66>
    1e42:	84 17       	cp	r24, r20
    1e44:	95 07       	cpc	r25, r21
    1e46:	69 f4       	brne	.+26     	; 0x1e62 <malloc+0x54>
    1e48:	10 97       	sbiw	r26, 0x00	; 0
    1e4a:	31 f0       	breq	.+12     	; 0x1e58 <malloc+0x4a>
    1e4c:	12 96       	adiw	r26, 0x02	; 2
    1e4e:	0c 93       	st	X, r16
    1e50:	12 97       	sbiw	r26, 0x02	; 2
    1e52:	13 96       	adiw	r26, 0x03	; 3
    1e54:	1c 93       	st	X, r17
    1e56:	27 c0       	rjmp	.+78     	; 0x1ea6 <malloc+0x98>
    1e58:	00 93 c6 02 	sts	0x02C6, r16	; 0x8002c6 <__flp>
    1e5c:	10 93 c7 02 	sts	0x02C7, r17	; 0x8002c7 <__flp+0x1>
    1e60:	22 c0       	rjmp	.+68     	; 0x1ea6 <malloc+0x98>
    1e62:	21 15       	cp	r18, r1
    1e64:	31 05       	cpc	r19, r1
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <malloc+0x60>
    1e68:	42 17       	cp	r20, r18
    1e6a:	53 07       	cpc	r21, r19
    1e6c:	18 f4       	brcc	.+6      	; 0x1e74 <malloc+0x66>
    1e6e:	9a 01       	movw	r18, r20
    1e70:	bd 01       	movw	r22, r26
    1e72:	ef 01       	movw	r28, r30
    1e74:	df 01       	movw	r26, r30
    1e76:	f8 01       	movw	r30, r16
    1e78:	db cf       	rjmp	.-74     	; 0x1e30 <malloc+0x22>
    1e7a:	21 15       	cp	r18, r1
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	f9 f0       	breq	.+62     	; 0x1ebe <malloc+0xb0>
    1e80:	28 1b       	sub	r18, r24
    1e82:	39 0b       	sbc	r19, r25
    1e84:	24 30       	cpi	r18, 0x04	; 4
    1e86:	31 05       	cpc	r19, r1
    1e88:	80 f4       	brcc	.+32     	; 0x1eaa <malloc+0x9c>
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	61 15       	cp	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	21 f0       	breq	.+8      	; 0x1e9c <malloc+0x8e>
    1e94:	fb 01       	movw	r30, r22
    1e96:	93 83       	std	Z+3, r25	; 0x03
    1e98:	82 83       	std	Z+2, r24	; 0x02
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <malloc+0x96>
    1e9c:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <__flp+0x1>
    1ea0:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__flp>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	32 96       	adiw	r30, 0x02	; 2
    1ea8:	44 c0       	rjmp	.+136    	; 0x1f32 <malloc+0x124>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	81 93       	st	Z+, r24
    1eb2:	91 93       	st	Z+, r25
    1eb4:	22 50       	subi	r18, 0x02	; 2
    1eb6:	31 09       	sbc	r19, r1
    1eb8:	39 83       	std	Y+1, r19	; 0x01
    1eba:	28 83       	st	Y, r18
    1ebc:	3a c0       	rjmp	.+116    	; 0x1f32 <malloc+0x124>
    1ebe:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <__brkval>
    1ec2:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <__brkval+0x1>
    1ec6:	23 2b       	or	r18, r19
    1ec8:	41 f4       	brne	.+16     	; 0x1eda <malloc+0xcc>
    1eca:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1ece:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1ed2:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <__brkval+0x1>
    1ed6:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <__brkval>
    1eda:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1ede:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1ee2:	21 15       	cp	r18, r1
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	41 f4       	brne	.+16     	; 0x1ef8 <malloc+0xea>
    1ee8:	2d b7       	in	r18, 0x3d	; 61
    1eea:	3e b7       	in	r19, 0x3e	; 62
    1eec:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1ef0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1ef4:	24 1b       	sub	r18, r20
    1ef6:	35 0b       	sbc	r19, r21
    1ef8:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <__brkval>
    1efc:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <__brkval+0x1>
    1f00:	e2 17       	cp	r30, r18
    1f02:	f3 07       	cpc	r31, r19
    1f04:	a0 f4       	brcc	.+40     	; 0x1f2e <malloc+0x120>
    1f06:	2e 1b       	sub	r18, r30
    1f08:	3f 0b       	sbc	r19, r31
    1f0a:	28 17       	cp	r18, r24
    1f0c:	39 07       	cpc	r19, r25
    1f0e:	78 f0       	brcs	.+30     	; 0x1f2e <malloc+0x120>
    1f10:	ac 01       	movw	r20, r24
    1f12:	4e 5f       	subi	r20, 0xFE	; 254
    1f14:	5f 4f       	sbci	r21, 0xFF	; 255
    1f16:	24 17       	cp	r18, r20
    1f18:	35 07       	cpc	r19, r21
    1f1a:	48 f0       	brcs	.+18     	; 0x1f2e <malloc+0x120>
    1f1c:	4e 0f       	add	r20, r30
    1f1e:	5f 1f       	adc	r21, r31
    1f20:	50 93 c5 02 	sts	0x02C5, r21	; 0x8002c5 <__brkval+0x1>
    1f24:	40 93 c4 02 	sts	0x02C4, r20	; 0x8002c4 <__brkval>
    1f28:	81 93       	st	Z+, r24
    1f2a:	91 93       	st	Z+, r25
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <malloc+0x124>
    1f2e:	e0 e0       	ldi	r30, 0x00	; 0
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	cf 01       	movw	r24, r30
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <free>:
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <free+0xa>
    1f46:	81 c0       	rjmp	.+258    	; 0x204a <free+0x10c>
    1f48:	fc 01       	movw	r30, r24
    1f4a:	32 97       	sbiw	r30, 0x02	; 2
    1f4c:	13 82       	std	Z+3, r1	; 0x03
    1f4e:	12 82       	std	Z+2, r1	; 0x02
    1f50:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <__flp>
    1f54:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <__flp+0x1>
    1f58:	10 97       	sbiw	r26, 0x00	; 0
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <free+0x3e>
    1f5c:	20 81       	ld	r18, Z
    1f5e:	31 81       	ldd	r19, Z+1	; 0x01
    1f60:	82 0f       	add	r24, r18
    1f62:	93 1f       	adc	r25, r19
    1f64:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <__brkval>
    1f68:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <__brkval+0x1>
    1f6c:	28 17       	cp	r18, r24
    1f6e:	39 07       	cpc	r19, r25
    1f70:	51 f5       	brne	.+84     	; 0x1fc6 <free+0x88>
    1f72:	f0 93 c5 02 	sts	0x02C5, r31	; 0x8002c5 <__brkval+0x1>
    1f76:	e0 93 c4 02 	sts	0x02C4, r30	; 0x8002c4 <__brkval>
    1f7a:	67 c0       	rjmp	.+206    	; 0x204a <free+0x10c>
    1f7c:	ed 01       	movw	r28, r26
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	ce 17       	cp	r28, r30
    1f84:	df 07       	cpc	r29, r31
    1f86:	40 f4       	brcc	.+16     	; 0x1f98 <free+0x5a>
    1f88:	4a 81       	ldd	r20, Y+2	; 0x02
    1f8a:	5b 81       	ldd	r21, Y+3	; 0x03
    1f8c:	9e 01       	movw	r18, r28
    1f8e:	41 15       	cp	r20, r1
    1f90:	51 05       	cpc	r21, r1
    1f92:	f1 f0       	breq	.+60     	; 0x1fd0 <free+0x92>
    1f94:	ea 01       	movw	r28, r20
    1f96:	f5 cf       	rjmp	.-22     	; 0x1f82 <free+0x44>
    1f98:	d3 83       	std	Z+3, r29	; 0x03
    1f9a:	c2 83       	std	Z+2, r28	; 0x02
    1f9c:	40 81       	ld	r20, Z
    1f9e:	51 81       	ldd	r21, Z+1	; 0x01
    1fa0:	84 0f       	add	r24, r20
    1fa2:	95 1f       	adc	r25, r21
    1fa4:	c8 17       	cp	r28, r24
    1fa6:	d9 07       	cpc	r29, r25
    1fa8:	59 f4       	brne	.+22     	; 0x1fc0 <free+0x82>
    1faa:	88 81       	ld	r24, Y
    1fac:	99 81       	ldd	r25, Y+1	; 0x01
    1fae:	84 0f       	add	r24, r20
    1fb0:	95 1f       	adc	r25, r21
    1fb2:	02 96       	adiw	r24, 0x02	; 2
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	93 83       	std	Z+3, r25	; 0x03
    1fbe:	82 83       	std	Z+2, r24	; 0x02
    1fc0:	21 15       	cp	r18, r1
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	29 f4       	brne	.+10     	; 0x1fd0 <free+0x92>
    1fc6:	f0 93 c7 02 	sts	0x02C7, r31	; 0x8002c7 <__flp+0x1>
    1fca:	e0 93 c6 02 	sts	0x02C6, r30	; 0x8002c6 <__flp>
    1fce:	3d c0       	rjmp	.+122    	; 0x204a <free+0x10c>
    1fd0:	e9 01       	movw	r28, r18
    1fd2:	fb 83       	std	Y+3, r31	; 0x03
    1fd4:	ea 83       	std	Y+2, r30	; 0x02
    1fd6:	49 91       	ld	r20, Y+
    1fd8:	59 91       	ld	r21, Y+
    1fda:	c4 0f       	add	r28, r20
    1fdc:	d5 1f       	adc	r29, r21
    1fde:	ec 17       	cp	r30, r28
    1fe0:	fd 07       	cpc	r31, r29
    1fe2:	61 f4       	brne	.+24     	; 0x1ffc <free+0xbe>
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	84 0f       	add	r24, r20
    1fea:	95 1f       	adc	r25, r21
    1fec:	02 96       	adiw	r24, 0x02	; 2
    1fee:	e9 01       	movw	r28, r18
    1ff0:	99 83       	std	Y+1, r25	; 0x01
    1ff2:	88 83       	st	Y, r24
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	9b 83       	std	Y+3, r25	; 0x03
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
    1ffc:	e0 e0       	ldi	r30, 0x00	; 0
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	12 96       	adiw	r26, 0x02	; 2
    2002:	8d 91       	ld	r24, X+
    2004:	9c 91       	ld	r25, X
    2006:	13 97       	sbiw	r26, 0x03	; 3
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	19 f0       	breq	.+6      	; 0x2012 <free+0xd4>
    200c:	fd 01       	movw	r30, r26
    200e:	dc 01       	movw	r26, r24
    2010:	f7 cf       	rjmp	.-18     	; 0x2000 <free+0xc2>
    2012:	8d 91       	ld	r24, X+
    2014:	9c 91       	ld	r25, X
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	9d 01       	movw	r18, r26
    201a:	2e 5f       	subi	r18, 0xFE	; 254
    201c:	3f 4f       	sbci	r19, 0xFF	; 255
    201e:	82 0f       	add	r24, r18
    2020:	93 1f       	adc	r25, r19
    2022:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <__brkval>
    2026:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <__brkval+0x1>
    202a:	28 17       	cp	r18, r24
    202c:	39 07       	cpc	r19, r25
    202e:	69 f4       	brne	.+26     	; 0x204a <free+0x10c>
    2030:	30 97       	sbiw	r30, 0x00	; 0
    2032:	29 f4       	brne	.+10     	; 0x203e <free+0x100>
    2034:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <__flp+0x1>
    2038:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <__flp>
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <free+0x104>
    203e:	13 82       	std	Z+3, r1	; 0x03
    2040:	12 82       	std	Z+2, r1	; 0x02
    2042:	b0 93 c5 02 	sts	0x02C5, r27	; 0x8002c5 <__brkval+0x1>
    2046:	a0 93 c4 02 	sts	0x02C4, r26	; 0x8002c4 <__brkval>
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	08 95       	ret

00002050 <strcpy>:
    2050:	fb 01       	movw	r30, r22
    2052:	dc 01       	movw	r26, r24
    2054:	01 90       	ld	r0, Z+
    2056:	0d 92       	st	X+, r0
    2058:	00 20       	and	r0, r0
    205a:	e1 f7       	brne	.-8      	; 0x2054 <strcpy+0x4>
    205c:	08 95       	ret

0000205e <__itoa_ncheck>:
    205e:	bb 27       	eor	r27, r27
    2060:	4a 30       	cpi	r20, 0x0A	; 10
    2062:	31 f4       	brne	.+12     	; 0x2070 <__itoa_ncheck+0x12>
    2064:	99 23       	and	r25, r25
    2066:	22 f4       	brpl	.+8      	; 0x2070 <__itoa_ncheck+0x12>
    2068:	bd e2       	ldi	r27, 0x2D	; 45
    206a:	90 95       	com	r25
    206c:	81 95       	neg	r24
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__utoa_common>

00002074 <__utoa_ncheck>:
    2074:	bb 27       	eor	r27, r27

00002076 <__utoa_common>:
    2076:	fb 01       	movw	r30, r22
    2078:	55 27       	eor	r21, r21
    207a:	aa 27       	eor	r26, r26
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	aa 1f       	adc	r26, r26
    2082:	a4 17       	cp	r26, r20
    2084:	10 f0       	brcs	.+4      	; 0x208a <__utoa_common+0x14>
    2086:	a4 1b       	sub	r26, r20
    2088:	83 95       	inc	r24
    208a:	50 51       	subi	r21, 0x10	; 16
    208c:	b9 f7       	brne	.-18     	; 0x207c <__utoa_common+0x6>
    208e:	a0 5d       	subi	r26, 0xD0	; 208
    2090:	aa 33       	cpi	r26, 0x3A	; 58
    2092:	08 f0       	brcs	.+2      	; 0x2096 <__utoa_common+0x20>
    2094:	a9 5d       	subi	r26, 0xD9	; 217
    2096:	a1 93       	st	Z+, r26
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	79 f7       	brne	.-34     	; 0x207a <__utoa_common+0x4>
    209c:	b1 11       	cpse	r27, r1
    209e:	b1 93       	st	Z+, r27
    20a0:	11 92       	st	Z+, r1
    20a2:	cb 01       	movw	r24, r22
    20a4:	0c 94 9f 14 	jmp	0x293e	; 0x293e <strrev>

000020a8 <sprintf>:
    20a8:	ae e0       	ldi	r26, 0x0E	; 14
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ea e5       	ldi	r30, 0x5A	; 90
    20ae:	f0 e1       	ldi	r31, 0x10	; 16
    20b0:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__prologue_saves__+0x1c>
    20b4:	0d 89       	ldd	r16, Y+21	; 0x15
    20b6:	1e 89       	ldd	r17, Y+22	; 0x16
    20b8:	86 e0       	ldi	r24, 0x06	; 6
    20ba:	8c 83       	std	Y+4, r24	; 0x04
    20bc:	1a 83       	std	Y+2, r17	; 0x02
    20be:	09 83       	std	Y+1, r16	; 0x01
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
    20c2:	9f e7       	ldi	r25, 0x7F	; 127
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	ae 01       	movw	r20, r28
    20ca:	47 5e       	subi	r20, 0xE7	; 231
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 89       	ldd	r22, Y+23	; 0x17
    20d0:	78 8d       	ldd	r23, Y+24	; 0x18
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	0e 94 76 10 	call	0x20ec	; 0x20ec <vfprintf>
    20da:	ef 81       	ldd	r30, Y+7	; 0x07
    20dc:	f8 85       	ldd	r31, Y+8	; 0x08
    20de:	e0 0f       	add	r30, r16
    20e0:	f1 1f       	adc	r31, r17
    20e2:	10 82       	st	Z, r1
    20e4:	2e 96       	adiw	r28, 0x0e	; 14
    20e6:	e4 e0       	ldi	r30, 0x04	; 4
    20e8:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__epilogue_restores__+0x1c>

000020ec <vfprintf>:
    20ec:	ab e0       	ldi	r26, 0x0B	; 11
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ec e7       	ldi	r30, 0x7C	; 124
    20f2:	f0 e1       	ldi	r31, 0x10	; 16
    20f4:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__>
    20f8:	6c 01       	movw	r12, r24
    20fa:	7b 01       	movw	r14, r22
    20fc:	8a 01       	movw	r16, r20
    20fe:	fc 01       	movw	r30, r24
    2100:	17 82       	std	Z+7, r1	; 0x07
    2102:	16 82       	std	Z+6, r1	; 0x06
    2104:	83 81       	ldd	r24, Z+3	; 0x03
    2106:	81 ff       	sbrs	r24, 1
    2108:	cc c1       	rjmp	.+920    	; 0x24a2 <vfprintf+0x3b6>
    210a:	ce 01       	movw	r24, r28
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	3c 01       	movw	r6, r24
    2110:	f6 01       	movw	r30, r12
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	f7 01       	movw	r30, r14
    2116:	93 fd       	sbrc	r25, 3
    2118:	85 91       	lpm	r24, Z+
    211a:	93 ff       	sbrs	r25, 3
    211c:	81 91       	ld	r24, Z+
    211e:	7f 01       	movw	r14, r30
    2120:	88 23       	and	r24, r24
    2122:	09 f4       	brne	.+2      	; 0x2126 <vfprintf+0x3a>
    2124:	ba c1       	rjmp	.+884    	; 0x249a <vfprintf+0x3ae>
    2126:	85 32       	cpi	r24, 0x25	; 37
    2128:	39 f4       	brne	.+14     	; 0x2138 <vfprintf+0x4c>
    212a:	93 fd       	sbrc	r25, 3
    212c:	85 91       	lpm	r24, Z+
    212e:	93 ff       	sbrs	r25, 3
    2130:	81 91       	ld	r24, Z+
    2132:	7f 01       	movw	r14, r30
    2134:	85 32       	cpi	r24, 0x25	; 37
    2136:	29 f4       	brne	.+10     	; 0x2142 <vfprintf+0x56>
    2138:	b6 01       	movw	r22, r12
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    2140:	e7 cf       	rjmp	.-50     	; 0x2110 <vfprintf+0x24>
    2142:	91 2c       	mov	r9, r1
    2144:	21 2c       	mov	r2, r1
    2146:	31 2c       	mov	r3, r1
    2148:	ff e1       	ldi	r31, 0x1F	; 31
    214a:	f3 15       	cp	r31, r3
    214c:	d8 f0       	brcs	.+54     	; 0x2184 <vfprintf+0x98>
    214e:	8b 32       	cpi	r24, 0x2B	; 43
    2150:	79 f0       	breq	.+30     	; 0x2170 <vfprintf+0x84>
    2152:	38 f4       	brcc	.+14     	; 0x2162 <vfprintf+0x76>
    2154:	80 32       	cpi	r24, 0x20	; 32
    2156:	79 f0       	breq	.+30     	; 0x2176 <vfprintf+0x8a>
    2158:	83 32       	cpi	r24, 0x23	; 35
    215a:	a1 f4       	brne	.+40     	; 0x2184 <vfprintf+0x98>
    215c:	23 2d       	mov	r18, r3
    215e:	20 61       	ori	r18, 0x10	; 16
    2160:	1d c0       	rjmp	.+58     	; 0x219c <vfprintf+0xb0>
    2162:	8d 32       	cpi	r24, 0x2D	; 45
    2164:	61 f0       	breq	.+24     	; 0x217e <vfprintf+0x92>
    2166:	80 33       	cpi	r24, 0x30	; 48
    2168:	69 f4       	brne	.+26     	; 0x2184 <vfprintf+0x98>
    216a:	23 2d       	mov	r18, r3
    216c:	21 60       	ori	r18, 0x01	; 1
    216e:	16 c0       	rjmp	.+44     	; 0x219c <vfprintf+0xb0>
    2170:	83 2d       	mov	r24, r3
    2172:	82 60       	ori	r24, 0x02	; 2
    2174:	38 2e       	mov	r3, r24
    2176:	e3 2d       	mov	r30, r3
    2178:	e4 60       	ori	r30, 0x04	; 4
    217a:	3e 2e       	mov	r3, r30
    217c:	2a c0       	rjmp	.+84     	; 0x21d2 <vfprintf+0xe6>
    217e:	f3 2d       	mov	r31, r3
    2180:	f8 60       	ori	r31, 0x08	; 8
    2182:	1d c0       	rjmp	.+58     	; 0x21be <vfprintf+0xd2>
    2184:	37 fc       	sbrc	r3, 7
    2186:	2d c0       	rjmp	.+90     	; 0x21e2 <vfprintf+0xf6>
    2188:	20 ed       	ldi	r18, 0xD0	; 208
    218a:	28 0f       	add	r18, r24
    218c:	2a 30       	cpi	r18, 0x0A	; 10
    218e:	40 f0       	brcs	.+16     	; 0x21a0 <vfprintf+0xb4>
    2190:	8e 32       	cpi	r24, 0x2E	; 46
    2192:	b9 f4       	brne	.+46     	; 0x21c2 <vfprintf+0xd6>
    2194:	36 fc       	sbrc	r3, 6
    2196:	81 c1       	rjmp	.+770    	; 0x249a <vfprintf+0x3ae>
    2198:	23 2d       	mov	r18, r3
    219a:	20 64       	ori	r18, 0x40	; 64
    219c:	32 2e       	mov	r3, r18
    219e:	19 c0       	rjmp	.+50     	; 0x21d2 <vfprintf+0xe6>
    21a0:	36 fe       	sbrs	r3, 6
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <vfprintf+0xc4>
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	98 9e       	mul	r9, r24
    21a8:	20 0d       	add	r18, r0
    21aa:	11 24       	eor	r1, r1
    21ac:	92 2e       	mov	r9, r18
    21ae:	11 c0       	rjmp	.+34     	; 0x21d2 <vfprintf+0xe6>
    21b0:	ea e0       	ldi	r30, 0x0A	; 10
    21b2:	2e 9e       	mul	r2, r30
    21b4:	20 0d       	add	r18, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	22 2e       	mov	r2, r18
    21ba:	f3 2d       	mov	r31, r3
    21bc:	f0 62       	ori	r31, 0x20	; 32
    21be:	3f 2e       	mov	r3, r31
    21c0:	08 c0       	rjmp	.+16     	; 0x21d2 <vfprintf+0xe6>
    21c2:	8c 36       	cpi	r24, 0x6C	; 108
    21c4:	21 f4       	brne	.+8      	; 0x21ce <vfprintf+0xe2>
    21c6:	83 2d       	mov	r24, r3
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	38 2e       	mov	r3, r24
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <vfprintf+0xe6>
    21ce:	88 36       	cpi	r24, 0x68	; 104
    21d0:	41 f4       	brne	.+16     	; 0x21e2 <vfprintf+0xf6>
    21d2:	f7 01       	movw	r30, r14
    21d4:	93 fd       	sbrc	r25, 3
    21d6:	85 91       	lpm	r24, Z+
    21d8:	93 ff       	sbrs	r25, 3
    21da:	81 91       	ld	r24, Z+
    21dc:	7f 01       	movw	r14, r30
    21de:	81 11       	cpse	r24, r1
    21e0:	b3 cf       	rjmp	.-154    	; 0x2148 <vfprintf+0x5c>
    21e2:	98 2f       	mov	r25, r24
    21e4:	9f 7d       	andi	r25, 0xDF	; 223
    21e6:	95 54       	subi	r25, 0x45	; 69
    21e8:	93 30       	cpi	r25, 0x03	; 3
    21ea:	28 f4       	brcc	.+10     	; 0x21f6 <vfprintf+0x10a>
    21ec:	0c 5f       	subi	r16, 0xFC	; 252
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	9f e3       	ldi	r25, 0x3F	; 63
    21f2:	99 83       	std	Y+1, r25	; 0x01
    21f4:	0d c0       	rjmp	.+26     	; 0x2210 <vfprintf+0x124>
    21f6:	83 36       	cpi	r24, 0x63	; 99
    21f8:	31 f0       	breq	.+12     	; 0x2206 <vfprintf+0x11a>
    21fa:	83 37       	cpi	r24, 0x73	; 115
    21fc:	71 f0       	breq	.+28     	; 0x221a <vfprintf+0x12e>
    21fe:	83 35       	cpi	r24, 0x53	; 83
    2200:	09 f0       	breq	.+2      	; 0x2204 <vfprintf+0x118>
    2202:	59 c0       	rjmp	.+178    	; 0x22b6 <vfprintf+0x1ca>
    2204:	21 c0       	rjmp	.+66     	; 0x2248 <vfprintf+0x15c>
    2206:	f8 01       	movw	r30, r16
    2208:	80 81       	ld	r24, Z
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	0e 5f       	subi	r16, 0xFE	; 254
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	88 24       	eor	r8, r8
    2212:	83 94       	inc	r8
    2214:	91 2c       	mov	r9, r1
    2216:	53 01       	movw	r10, r6
    2218:	13 c0       	rjmp	.+38     	; 0x2240 <vfprintf+0x154>
    221a:	28 01       	movw	r4, r16
    221c:	f2 e0       	ldi	r31, 0x02	; 2
    221e:	4f 0e       	add	r4, r31
    2220:	51 1c       	adc	r5, r1
    2222:	f8 01       	movw	r30, r16
    2224:	a0 80       	ld	r10, Z
    2226:	b1 80       	ldd	r11, Z+1	; 0x01
    2228:	36 fe       	sbrs	r3, 6
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <vfprintf+0x146>
    222c:	69 2d       	mov	r22, r9
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <vfprintf+0x14a>
    2232:	6f ef       	ldi	r22, 0xFF	; 255
    2234:	7f ef       	ldi	r23, 0xFF	; 255
    2236:	c5 01       	movw	r24, r10
    2238:	0e 94 94 14 	call	0x2928	; 0x2928 <strnlen>
    223c:	4c 01       	movw	r8, r24
    223e:	82 01       	movw	r16, r4
    2240:	f3 2d       	mov	r31, r3
    2242:	ff 77       	andi	r31, 0x7F	; 127
    2244:	3f 2e       	mov	r3, r31
    2246:	16 c0       	rjmp	.+44     	; 0x2274 <vfprintf+0x188>
    2248:	28 01       	movw	r4, r16
    224a:	22 e0       	ldi	r18, 0x02	; 2
    224c:	42 0e       	add	r4, r18
    224e:	51 1c       	adc	r5, r1
    2250:	f8 01       	movw	r30, r16
    2252:	a0 80       	ld	r10, Z
    2254:	b1 80       	ldd	r11, Z+1	; 0x01
    2256:	36 fe       	sbrs	r3, 6
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <vfprintf+0x174>
    225a:	69 2d       	mov	r22, r9
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x178>
    2260:	6f ef       	ldi	r22, 0xFF	; 255
    2262:	7f ef       	ldi	r23, 0xFF	; 255
    2264:	c5 01       	movw	r24, r10
    2266:	0e 94 89 14 	call	0x2912	; 0x2912 <strnlen_P>
    226a:	4c 01       	movw	r8, r24
    226c:	f3 2d       	mov	r31, r3
    226e:	f0 68       	ori	r31, 0x80	; 128
    2270:	3f 2e       	mov	r3, r31
    2272:	82 01       	movw	r16, r4
    2274:	33 fc       	sbrc	r3, 3
    2276:	1b c0       	rjmp	.+54     	; 0x22ae <vfprintf+0x1c2>
    2278:	82 2d       	mov	r24, r2
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	88 16       	cp	r8, r24
    227e:	99 06       	cpc	r9, r25
    2280:	b0 f4       	brcc	.+44     	; 0x22ae <vfprintf+0x1c2>
    2282:	b6 01       	movw	r22, r12
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    228c:	2a 94       	dec	r2
    228e:	f4 cf       	rjmp	.-24     	; 0x2278 <vfprintf+0x18c>
    2290:	f5 01       	movw	r30, r10
    2292:	37 fc       	sbrc	r3, 7
    2294:	85 91       	lpm	r24, Z+
    2296:	37 fe       	sbrs	r3, 7
    2298:	81 91       	ld	r24, Z+
    229a:	5f 01       	movw	r10, r30
    229c:	b6 01       	movw	r22, r12
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    22a4:	21 10       	cpse	r2, r1
    22a6:	2a 94       	dec	r2
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	82 1a       	sub	r8, r18
    22ac:	91 08       	sbc	r9, r1
    22ae:	81 14       	cp	r8, r1
    22b0:	91 04       	cpc	r9, r1
    22b2:	71 f7       	brne	.-36     	; 0x2290 <vfprintf+0x1a4>
    22b4:	e8 c0       	rjmp	.+464    	; 0x2486 <vfprintf+0x39a>
    22b6:	84 36       	cpi	r24, 0x64	; 100
    22b8:	11 f0       	breq	.+4      	; 0x22be <vfprintf+0x1d2>
    22ba:	89 36       	cpi	r24, 0x69	; 105
    22bc:	41 f5       	brne	.+80     	; 0x230e <vfprintf+0x222>
    22be:	f8 01       	movw	r30, r16
    22c0:	37 fe       	sbrs	r3, 7
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <vfprintf+0x1e6>
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	93 81       	ldd	r25, Z+3	; 0x03
    22cc:	0c 5f       	subi	r16, 0xFC	; 252
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	08 c0       	rjmp	.+16     	; 0x22e2 <vfprintf+0x1f6>
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	07 2e       	mov	r0, r23
    22d8:	00 0c       	add	r0, r0
    22da:	88 0b       	sbc	r24, r24
    22dc:	99 0b       	sbc	r25, r25
    22de:	0e 5f       	subi	r16, 0xFE	; 254
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	f3 2d       	mov	r31, r3
    22e4:	ff 76       	andi	r31, 0x6F	; 111
    22e6:	3f 2e       	mov	r3, r31
    22e8:	97 ff       	sbrs	r25, 7
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <vfprintf+0x212>
    22ec:	90 95       	com	r25
    22ee:	80 95       	com	r24
    22f0:	70 95       	com	r23
    22f2:	61 95       	neg	r22
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	8f 4f       	sbci	r24, 0xFF	; 255
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	f0 68       	ori	r31, 0x80	; 128
    22fc:	3f 2e       	mov	r3, r31
    22fe:	2a e0       	ldi	r18, 0x0A	; 10
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	a3 01       	movw	r20, r6
    2304:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__ultoa_invert>
    2308:	88 2e       	mov	r8, r24
    230a:	86 18       	sub	r8, r6
    230c:	45 c0       	rjmp	.+138    	; 0x2398 <vfprintf+0x2ac>
    230e:	85 37       	cpi	r24, 0x75	; 117
    2310:	31 f4       	brne	.+12     	; 0x231e <vfprintf+0x232>
    2312:	23 2d       	mov	r18, r3
    2314:	2f 7e       	andi	r18, 0xEF	; 239
    2316:	b2 2e       	mov	r11, r18
    2318:	2a e0       	ldi	r18, 0x0A	; 10
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	25 c0       	rjmp	.+74     	; 0x2368 <vfprintf+0x27c>
    231e:	93 2d       	mov	r25, r3
    2320:	99 7f       	andi	r25, 0xF9	; 249
    2322:	b9 2e       	mov	r11, r25
    2324:	8f 36       	cpi	r24, 0x6F	; 111
    2326:	c1 f0       	breq	.+48     	; 0x2358 <vfprintf+0x26c>
    2328:	18 f4       	brcc	.+6      	; 0x2330 <vfprintf+0x244>
    232a:	88 35       	cpi	r24, 0x58	; 88
    232c:	79 f0       	breq	.+30     	; 0x234c <vfprintf+0x260>
    232e:	b5 c0       	rjmp	.+362    	; 0x249a <vfprintf+0x3ae>
    2330:	80 37       	cpi	r24, 0x70	; 112
    2332:	19 f0       	breq	.+6      	; 0x233a <vfprintf+0x24e>
    2334:	88 37       	cpi	r24, 0x78	; 120
    2336:	21 f0       	breq	.+8      	; 0x2340 <vfprintf+0x254>
    2338:	b0 c0       	rjmp	.+352    	; 0x249a <vfprintf+0x3ae>
    233a:	e9 2f       	mov	r30, r25
    233c:	e0 61       	ori	r30, 0x10	; 16
    233e:	be 2e       	mov	r11, r30
    2340:	b4 fe       	sbrs	r11, 4
    2342:	0d c0       	rjmp	.+26     	; 0x235e <vfprintf+0x272>
    2344:	fb 2d       	mov	r31, r11
    2346:	f4 60       	ori	r31, 0x04	; 4
    2348:	bf 2e       	mov	r11, r31
    234a:	09 c0       	rjmp	.+18     	; 0x235e <vfprintf+0x272>
    234c:	34 fe       	sbrs	r3, 4
    234e:	0a c0       	rjmp	.+20     	; 0x2364 <vfprintf+0x278>
    2350:	29 2f       	mov	r18, r25
    2352:	26 60       	ori	r18, 0x06	; 6
    2354:	b2 2e       	mov	r11, r18
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <vfprintf+0x278>
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <vfprintf+0x27c>
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <vfprintf+0x27c>
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	32 e0       	ldi	r19, 0x02	; 2
    2368:	f8 01       	movw	r30, r16
    236a:	b7 fe       	sbrs	r11, 7
    236c:	07 c0       	rjmp	.+14     	; 0x237c <vfprintf+0x290>
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0c 5f       	subi	r16, 0xFC	; 252
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <vfprintf+0x29c>
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 5f       	subi	r16, 0xFE	; 254
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	a3 01       	movw	r20, r6
    238a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__ultoa_invert>
    238e:	88 2e       	mov	r8, r24
    2390:	86 18       	sub	r8, r6
    2392:	fb 2d       	mov	r31, r11
    2394:	ff 77       	andi	r31, 0x7F	; 127
    2396:	3f 2e       	mov	r3, r31
    2398:	36 fe       	sbrs	r3, 6
    239a:	0d c0       	rjmp	.+26     	; 0x23b6 <vfprintf+0x2ca>
    239c:	23 2d       	mov	r18, r3
    239e:	2e 7f       	andi	r18, 0xFE	; 254
    23a0:	a2 2e       	mov	r10, r18
    23a2:	89 14       	cp	r8, r9
    23a4:	58 f4       	brcc	.+22     	; 0x23bc <vfprintf+0x2d0>
    23a6:	34 fe       	sbrs	r3, 4
    23a8:	0b c0       	rjmp	.+22     	; 0x23c0 <vfprintf+0x2d4>
    23aa:	32 fc       	sbrc	r3, 2
    23ac:	09 c0       	rjmp	.+18     	; 0x23c0 <vfprintf+0x2d4>
    23ae:	83 2d       	mov	r24, r3
    23b0:	8e 7e       	andi	r24, 0xEE	; 238
    23b2:	a8 2e       	mov	r10, r24
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <vfprintf+0x2d4>
    23b6:	b8 2c       	mov	r11, r8
    23b8:	a3 2c       	mov	r10, r3
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <vfprintf+0x2d6>
    23bc:	b8 2c       	mov	r11, r8
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <vfprintf+0x2d6>
    23c0:	b9 2c       	mov	r11, r9
    23c2:	a4 fe       	sbrs	r10, 4
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <vfprintf+0x2f8>
    23c6:	fe 01       	movw	r30, r28
    23c8:	e8 0d       	add	r30, r8
    23ca:	f1 1d       	adc	r31, r1
    23cc:	80 81       	ld	r24, Z
    23ce:	80 33       	cpi	r24, 0x30	; 48
    23d0:	21 f4       	brne	.+8      	; 0x23da <vfprintf+0x2ee>
    23d2:	9a 2d       	mov	r25, r10
    23d4:	99 7e       	andi	r25, 0xE9	; 233
    23d6:	a9 2e       	mov	r10, r25
    23d8:	09 c0       	rjmp	.+18     	; 0x23ec <vfprintf+0x300>
    23da:	a2 fe       	sbrs	r10, 2
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <vfprintf+0x2fe>
    23de:	b3 94       	inc	r11
    23e0:	b3 94       	inc	r11
    23e2:	04 c0       	rjmp	.+8      	; 0x23ec <vfprintf+0x300>
    23e4:	8a 2d       	mov	r24, r10
    23e6:	86 78       	andi	r24, 0x86	; 134
    23e8:	09 f0       	breq	.+2      	; 0x23ec <vfprintf+0x300>
    23ea:	b3 94       	inc	r11
    23ec:	a3 fc       	sbrc	r10, 3
    23ee:	11 c0       	rjmp	.+34     	; 0x2412 <vfprintf+0x326>
    23f0:	a0 fe       	sbrs	r10, 0
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <vfprintf+0x314>
    23f4:	b2 14       	cp	r11, r2
    23f6:	88 f4       	brcc	.+34     	; 0x241a <vfprintf+0x32e>
    23f8:	28 0c       	add	r2, r8
    23fa:	92 2c       	mov	r9, r2
    23fc:	9b 18       	sub	r9, r11
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <vfprintf+0x330>
    2400:	b2 14       	cp	r11, r2
    2402:	60 f4       	brcc	.+24     	; 0x241c <vfprintf+0x330>
    2404:	b6 01       	movw	r22, r12
    2406:	80 e2       	ldi	r24, 0x20	; 32
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    240e:	b3 94       	inc	r11
    2410:	f7 cf       	rjmp	.-18     	; 0x2400 <vfprintf+0x314>
    2412:	b2 14       	cp	r11, r2
    2414:	18 f4       	brcc	.+6      	; 0x241c <vfprintf+0x330>
    2416:	2b 18       	sub	r2, r11
    2418:	02 c0       	rjmp	.+4      	; 0x241e <vfprintf+0x332>
    241a:	98 2c       	mov	r9, r8
    241c:	21 2c       	mov	r2, r1
    241e:	a4 fe       	sbrs	r10, 4
    2420:	10 c0       	rjmp	.+32     	; 0x2442 <vfprintf+0x356>
    2422:	b6 01       	movw	r22, r12
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    242c:	a2 fe       	sbrs	r10, 2
    242e:	17 c0       	rjmp	.+46     	; 0x245e <vfprintf+0x372>
    2430:	a1 fc       	sbrc	r10, 1
    2432:	03 c0       	rjmp	.+6      	; 0x243a <vfprintf+0x34e>
    2434:	88 e7       	ldi	r24, 0x78	; 120
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 c0       	rjmp	.+4      	; 0x243e <vfprintf+0x352>
    243a:	88 e5       	ldi	r24, 0x58	; 88
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	b6 01       	movw	r22, r12
    2440:	0c c0       	rjmp	.+24     	; 0x245a <vfprintf+0x36e>
    2442:	8a 2d       	mov	r24, r10
    2444:	86 78       	andi	r24, 0x86	; 134
    2446:	59 f0       	breq	.+22     	; 0x245e <vfprintf+0x372>
    2448:	a1 fe       	sbrs	r10, 1
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <vfprintf+0x364>
    244c:	8b e2       	ldi	r24, 0x2B	; 43
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <vfprintf+0x366>
    2450:	80 e2       	ldi	r24, 0x20	; 32
    2452:	a7 fc       	sbrc	r10, 7
    2454:	8d e2       	ldi	r24, 0x2D	; 45
    2456:	b6 01       	movw	r22, r12
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    245e:	89 14       	cp	r8, r9
    2460:	38 f4       	brcc	.+14     	; 0x2470 <vfprintf+0x384>
    2462:	b6 01       	movw	r22, r12
    2464:	80 e3       	ldi	r24, 0x30	; 48
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    246c:	9a 94       	dec	r9
    246e:	f7 cf       	rjmp	.-18     	; 0x245e <vfprintf+0x372>
    2470:	8a 94       	dec	r8
    2472:	f3 01       	movw	r30, r6
    2474:	e8 0d       	add	r30, r8
    2476:	f1 1d       	adc	r31, r1
    2478:	80 81       	ld	r24, Z
    247a:	b6 01       	movw	r22, r12
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    2482:	81 10       	cpse	r8, r1
    2484:	f5 cf       	rjmp	.-22     	; 0x2470 <vfprintf+0x384>
    2486:	22 20       	and	r2, r2
    2488:	09 f4       	brne	.+2      	; 0x248c <vfprintf+0x3a0>
    248a:	42 ce       	rjmp	.-892    	; 0x2110 <vfprintf+0x24>
    248c:	b6 01       	movw	r22, r12
    248e:	80 e2       	ldi	r24, 0x20	; 32
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 af 14 	call	0x295e	; 0x295e <fputc>
    2496:	2a 94       	dec	r2
    2498:	f6 cf       	rjmp	.-20     	; 0x2486 <vfprintf+0x39a>
    249a:	f6 01       	movw	r30, r12
    249c:	86 81       	ldd	r24, Z+6	; 0x06
    249e:	97 81       	ldd	r25, Z+7	; 0x07
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <vfprintf+0x3ba>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	9f ef       	ldi	r25, 0xFF	; 255
    24a6:	2b 96       	adiw	r28, 0x0b	; 11
    24a8:	e2 e1       	ldi	r30, 0x12	; 18
    24aa:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__>

000024ae <dtoa_prf>:
    24ae:	a9 e0       	ldi	r26, 0x09	; 9
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0xc>
    24ba:	6a 01       	movw	r12, r20
    24bc:	12 2f       	mov	r17, r18
    24be:	b0 2e       	mov	r11, r16
    24c0:	2b e3       	ldi	r18, 0x3B	; 59
    24c2:	20 17       	cp	r18, r16
    24c4:	20 f0       	brcs	.+8      	; 0x24ce <dtoa_prf+0x20>
    24c6:	ff 24       	eor	r15, r15
    24c8:	f3 94       	inc	r15
    24ca:	f0 0e       	add	r15, r16
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <dtoa_prf+0x24>
    24ce:	2c e3       	ldi	r18, 0x3C	; 60
    24d0:	f2 2e       	mov	r15, r18
    24d2:	0f 2d       	mov	r16, r15
    24d4:	27 e0       	ldi	r18, 0x07	; 7
    24d6:	ae 01       	movw	r20, r28
    24d8:	4f 5f       	subi	r20, 0xFF	; 255
    24da:	5f 4f       	sbci	r21, 0xFF	; 255
    24dc:	0e 94 b1 13 	call	0x2762	; 0x2762 <__ftoa_engine>
    24e0:	bc 01       	movw	r22, r24
    24e2:	49 81       	ldd	r20, Y+1	; 0x01
    24e4:	84 2f       	mov	r24, r20
    24e6:	89 70       	andi	r24, 0x09	; 9
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	31 f0       	breq	.+12     	; 0x24f8 <dtoa_prf+0x4a>
    24ec:	e1 fc       	sbrc	r14, 1
    24ee:	06 c0       	rjmp	.+12     	; 0x24fc <dtoa_prf+0x4e>
    24f0:	e0 fe       	sbrs	r14, 0
    24f2:	06 c0       	rjmp	.+12     	; 0x2500 <dtoa_prf+0x52>
    24f4:	90 e2       	ldi	r25, 0x20	; 32
    24f6:	05 c0       	rjmp	.+10     	; 0x2502 <dtoa_prf+0x54>
    24f8:	9d e2       	ldi	r25, 0x2D	; 45
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <dtoa_prf+0x54>
    24fc:	9b e2       	ldi	r25, 0x2B	; 43
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <dtoa_prf+0x54>
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	5e 2d       	mov	r21, r14
    2504:	50 71       	andi	r21, 0x10	; 16
    2506:	43 ff       	sbrs	r20, 3
    2508:	3c c0       	rjmp	.+120    	; 0x2582 <dtoa_prf+0xd4>
    250a:	91 11       	cpse	r25, r1
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <dtoa_prf+0x64>
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <dtoa_prf+0x66>
    2512:	84 e0       	ldi	r24, 0x04	; 4
    2514:	81 17       	cp	r24, r17
    2516:	18 f4       	brcc	.+6      	; 0x251e <dtoa_prf+0x70>
    2518:	21 2f       	mov	r18, r17
    251a:	28 1b       	sub	r18, r24
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <dtoa_prf+0x72>
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	51 11       	cpse	r21, r1
    2522:	0b c0       	rjmp	.+22     	; 0x253a <dtoa_prf+0x8c>
    2524:	f6 01       	movw	r30, r12
    2526:	82 2f       	mov	r24, r18
    2528:	30 e2       	ldi	r19, 0x20	; 32
    252a:	88 23       	and	r24, r24
    252c:	19 f0       	breq	.+6      	; 0x2534 <dtoa_prf+0x86>
    252e:	31 93       	st	Z+, r19
    2530:	81 50       	subi	r24, 0x01	; 1
    2532:	fb cf       	rjmp	.-10     	; 0x252a <dtoa_prf+0x7c>
    2534:	c2 0e       	add	r12, r18
    2536:	d1 1c       	adc	r13, r1
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	99 23       	and	r25, r25
    253c:	29 f0       	breq	.+10     	; 0x2548 <dtoa_prf+0x9a>
    253e:	d6 01       	movw	r26, r12
    2540:	9c 93       	st	X, r25
    2542:	f6 01       	movw	r30, r12
    2544:	31 96       	adiw	r30, 0x01	; 1
    2546:	6f 01       	movw	r12, r30
    2548:	c6 01       	movw	r24, r12
    254a:	03 96       	adiw	r24, 0x03	; 3
    254c:	e2 fe       	sbrs	r14, 2
    254e:	0a c0       	rjmp	.+20     	; 0x2564 <dtoa_prf+0xb6>
    2550:	3e e4       	ldi	r19, 0x4E	; 78
    2552:	d6 01       	movw	r26, r12
    2554:	3c 93       	st	X, r19
    2556:	41 e4       	ldi	r20, 0x41	; 65
    2558:	11 96       	adiw	r26, 0x01	; 1
    255a:	4c 93       	st	X, r20
    255c:	11 97       	sbiw	r26, 0x01	; 1
    255e:	12 96       	adiw	r26, 0x02	; 2
    2560:	3c 93       	st	X, r19
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <dtoa_prf+0xc2>
    2564:	3e e6       	ldi	r19, 0x6E	; 110
    2566:	f6 01       	movw	r30, r12
    2568:	30 83       	st	Z, r19
    256a:	41 e6       	ldi	r20, 0x61	; 97
    256c:	41 83       	std	Z+1, r20	; 0x01
    256e:	32 83       	std	Z+2, r19	; 0x02
    2570:	fc 01       	movw	r30, r24
    2572:	32 2f       	mov	r19, r18
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	33 23       	and	r19, r19
    2578:	09 f4       	brne	.+2      	; 0x257c <dtoa_prf+0xce>
    257a:	42 c0       	rjmp	.+132    	; 0x2600 <dtoa_prf+0x152>
    257c:	41 93       	st	Z+, r20
    257e:	31 50       	subi	r19, 0x01	; 1
    2580:	fa cf       	rjmp	.-12     	; 0x2576 <dtoa_prf+0xc8>
    2582:	42 ff       	sbrs	r20, 2
    2584:	44 c0       	rjmp	.+136    	; 0x260e <dtoa_prf+0x160>
    2586:	91 11       	cpse	r25, r1
    2588:	02 c0       	rjmp	.+4      	; 0x258e <dtoa_prf+0xe0>
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <dtoa_prf+0xe2>
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	81 17       	cp	r24, r17
    2592:	18 f4       	brcc	.+6      	; 0x259a <dtoa_prf+0xec>
    2594:	21 2f       	mov	r18, r17
    2596:	28 1b       	sub	r18, r24
    2598:	01 c0       	rjmp	.+2      	; 0x259c <dtoa_prf+0xee>
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	51 11       	cpse	r21, r1
    259e:	0b c0       	rjmp	.+22     	; 0x25b6 <dtoa_prf+0x108>
    25a0:	f6 01       	movw	r30, r12
    25a2:	82 2f       	mov	r24, r18
    25a4:	30 e2       	ldi	r19, 0x20	; 32
    25a6:	88 23       	and	r24, r24
    25a8:	19 f0       	breq	.+6      	; 0x25b0 <dtoa_prf+0x102>
    25aa:	31 93       	st	Z+, r19
    25ac:	81 50       	subi	r24, 0x01	; 1
    25ae:	fb cf       	rjmp	.-10     	; 0x25a6 <dtoa_prf+0xf8>
    25b0:	c2 0e       	add	r12, r18
    25b2:	d1 1c       	adc	r13, r1
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	99 23       	and	r25, r25
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <dtoa_prf+0x116>
    25ba:	d6 01       	movw	r26, r12
    25bc:	9c 93       	st	X, r25
    25be:	f6 01       	movw	r30, r12
    25c0:	31 96       	adiw	r30, 0x01	; 1
    25c2:	6f 01       	movw	r12, r30
    25c4:	c6 01       	movw	r24, r12
    25c6:	03 96       	adiw	r24, 0x03	; 3
    25c8:	e2 fe       	sbrs	r14, 2
    25ca:	0b c0       	rjmp	.+22     	; 0x25e2 <dtoa_prf+0x134>
    25cc:	39 e4       	ldi	r19, 0x49	; 73
    25ce:	d6 01       	movw	r26, r12
    25d0:	3c 93       	st	X, r19
    25d2:	3e e4       	ldi	r19, 0x4E	; 78
    25d4:	11 96       	adiw	r26, 0x01	; 1
    25d6:	3c 93       	st	X, r19
    25d8:	11 97       	sbiw	r26, 0x01	; 1
    25da:	36 e4       	ldi	r19, 0x46	; 70
    25dc:	12 96       	adiw	r26, 0x02	; 2
    25de:	3c 93       	st	X, r19
    25e0:	07 c0       	rjmp	.+14     	; 0x25f0 <dtoa_prf+0x142>
    25e2:	39 e6       	ldi	r19, 0x69	; 105
    25e4:	f6 01       	movw	r30, r12
    25e6:	30 83       	st	Z, r19
    25e8:	3e e6       	ldi	r19, 0x6E	; 110
    25ea:	31 83       	std	Z+1, r19	; 0x01
    25ec:	36 e6       	ldi	r19, 0x66	; 102
    25ee:	32 83       	std	Z+2, r19	; 0x02
    25f0:	fc 01       	movw	r30, r24
    25f2:	32 2f       	mov	r19, r18
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	33 23       	and	r19, r19
    25f8:	19 f0       	breq	.+6      	; 0x2600 <dtoa_prf+0x152>
    25fa:	41 93       	st	Z+, r20
    25fc:	31 50       	subi	r19, 0x01	; 1
    25fe:	fb cf       	rjmp	.-10     	; 0x25f6 <dtoa_prf+0x148>
    2600:	fc 01       	movw	r30, r24
    2602:	e2 0f       	add	r30, r18
    2604:	f1 1d       	adc	r31, r1
    2606:	10 82       	st	Z, r1
    2608:	8e ef       	ldi	r24, 0xFE	; 254
    260a:	9f ef       	ldi	r25, 0xFF	; 255
    260c:	a6 c0       	rjmp	.+332    	; 0x275a <dtoa_prf+0x2ac>
    260e:	21 e0       	ldi	r18, 0x01	; 1
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	91 11       	cpse	r25, r1
    2614:	02 c0       	rjmp	.+4      	; 0x261a <dtoa_prf+0x16c>
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	16 16       	cp	r1, r22
    261c:	17 06       	cpc	r1, r23
    261e:	1c f4       	brge	.+6      	; 0x2626 <dtoa_prf+0x178>
    2620:	fb 01       	movw	r30, r22
    2622:	31 96       	adiw	r30, 0x01	; 1
    2624:	02 c0       	rjmp	.+4      	; 0x262a <dtoa_prf+0x17c>
    2626:	e1 e0       	ldi	r30, 0x01	; 1
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	2e 0f       	add	r18, r30
    262c:	3f 1f       	adc	r19, r31
    262e:	bb 20       	and	r11, r11
    2630:	21 f0       	breq	.+8      	; 0x263a <dtoa_prf+0x18c>
    2632:	eb 2d       	mov	r30, r11
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	31 96       	adiw	r30, 0x01	; 1
    2638:	02 c0       	rjmp	.+4      	; 0x263e <dtoa_prf+0x190>
    263a:	e0 e0       	ldi	r30, 0x00	; 0
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	2e 0f       	add	r18, r30
    2640:	3f 1f       	adc	r19, r31
    2642:	e1 2f       	mov	r30, r17
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	2e 17       	cp	r18, r30
    2648:	3f 07       	cpc	r19, r31
    264a:	1c f4       	brge	.+6      	; 0x2652 <dtoa_prf+0x1a4>
    264c:	12 1b       	sub	r17, r18
    264e:	21 2f       	mov	r18, r17
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <dtoa_prf+0x1a6>
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	8e 2d       	mov	r24, r14
    2656:	88 71       	andi	r24, 0x18	; 24
    2658:	59 f4       	brne	.+22     	; 0x2670 <dtoa_prf+0x1c2>
    265a:	f6 01       	movw	r30, r12
    265c:	82 2f       	mov	r24, r18
    265e:	30 e2       	ldi	r19, 0x20	; 32
    2660:	88 23       	and	r24, r24
    2662:	19 f0       	breq	.+6      	; 0x266a <dtoa_prf+0x1bc>
    2664:	31 93       	st	Z+, r19
    2666:	81 50       	subi	r24, 0x01	; 1
    2668:	fb cf       	rjmp	.-10     	; 0x2660 <dtoa_prf+0x1b2>
    266a:	c2 0e       	add	r12, r18
    266c:	d1 1c       	adc	r13, r1
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	99 23       	and	r25, r25
    2672:	29 f0       	breq	.+10     	; 0x267e <dtoa_prf+0x1d0>
    2674:	d6 01       	movw	r26, r12
    2676:	9c 93       	st	X, r25
    2678:	f6 01       	movw	r30, r12
    267a:	31 96       	adiw	r30, 0x01	; 1
    267c:	6f 01       	movw	r12, r30
    267e:	51 11       	cpse	r21, r1
    2680:	0b c0       	rjmp	.+22     	; 0x2698 <dtoa_prf+0x1ea>
    2682:	f6 01       	movw	r30, r12
    2684:	82 2f       	mov	r24, r18
    2686:	90 e3       	ldi	r25, 0x30	; 48
    2688:	88 23       	and	r24, r24
    268a:	19 f0       	breq	.+6      	; 0x2692 <dtoa_prf+0x1e4>
    268c:	91 93       	st	Z+, r25
    268e:	81 50       	subi	r24, 0x01	; 1
    2690:	fb cf       	rjmp	.-10     	; 0x2688 <dtoa_prf+0x1da>
    2692:	c2 0e       	add	r12, r18
    2694:	d1 1c       	adc	r13, r1
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	0f 2d       	mov	r16, r15
    269a:	06 0f       	add	r16, r22
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	34 2f       	mov	r19, r20
    26a0:	30 71       	andi	r19, 0x10	; 16
    26a2:	44 ff       	sbrs	r20, 4
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <dtoa_prf+0x1fe>
    26a6:	91 33       	cpi	r25, 0x31	; 49
    26a8:	09 f4       	brne	.+2      	; 0x26ac <dtoa_prf+0x1fe>
    26aa:	01 50       	subi	r16, 0x01	; 1
    26ac:	10 16       	cp	r1, r16
    26ae:	24 f4       	brge	.+8      	; 0x26b8 <dtoa_prf+0x20a>
    26b0:	09 30       	cpi	r16, 0x09	; 9
    26b2:	18 f0       	brcs	.+6      	; 0x26ba <dtoa_prf+0x20c>
    26b4:	08 e0       	ldi	r16, 0x08	; 8
    26b6:	01 c0       	rjmp	.+2      	; 0x26ba <dtoa_prf+0x20c>
    26b8:	01 e0       	ldi	r16, 0x01	; 1
    26ba:	ab 01       	movw	r20, r22
    26bc:	77 ff       	sbrs	r23, 7
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <dtoa_prf+0x216>
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	fb 01       	movw	r30, r22
    26c6:	e4 1b       	sub	r30, r20
    26c8:	f5 0b       	sbc	r31, r21
    26ca:	a1 e0       	ldi	r26, 0x01	; 1
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ac 0f       	add	r26, r28
    26d0:	bd 1f       	adc	r27, r29
    26d2:	ea 0f       	add	r30, r26
    26d4:	fb 1f       	adc	r31, r27
    26d6:	8e e2       	ldi	r24, 0x2E	; 46
    26d8:	a8 2e       	mov	r10, r24
    26da:	4b 01       	movw	r8, r22
    26dc:	80 1a       	sub	r8, r16
    26de:	91 08       	sbc	r9, r1
    26e0:	0b 2d       	mov	r16, r11
    26e2:	10 e0       	ldi	r17, 0x00	; 0
    26e4:	11 95       	neg	r17
    26e6:	01 95       	neg	r16
    26e8:	11 09       	sbc	r17, r1
    26ea:	4f 3f       	cpi	r20, 0xFF	; 255
    26ec:	bf ef       	ldi	r27, 0xFF	; 255
    26ee:	5b 07       	cpc	r21, r27
    26f0:	21 f4       	brne	.+8      	; 0x26fa <dtoa_prf+0x24c>
    26f2:	d6 01       	movw	r26, r12
    26f4:	ac 92       	st	X, r10
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	6d 01       	movw	r12, r26
    26fa:	64 17       	cp	r22, r20
    26fc:	75 07       	cpc	r23, r21
    26fe:	2c f0       	brlt	.+10     	; 0x270a <dtoa_prf+0x25c>
    2700:	84 16       	cp	r8, r20
    2702:	95 06       	cpc	r9, r21
    2704:	14 f4       	brge	.+4      	; 0x270a <dtoa_prf+0x25c>
    2706:	81 81       	ldd	r24, Z+1	; 0x01
    2708:	01 c0       	rjmp	.+2      	; 0x270c <dtoa_prf+0x25e>
    270a:	80 e3       	ldi	r24, 0x30	; 48
    270c:	41 50       	subi	r20, 0x01	; 1
    270e:	51 09       	sbc	r21, r1
    2710:	31 96       	adiw	r30, 0x01	; 1
    2712:	d6 01       	movw	r26, r12
    2714:	11 96       	adiw	r26, 0x01	; 1
    2716:	7d 01       	movw	r14, r26
    2718:	40 17       	cp	r20, r16
    271a:	51 07       	cpc	r21, r17
    271c:	24 f0       	brlt	.+8      	; 0x2726 <dtoa_prf+0x278>
    271e:	d6 01       	movw	r26, r12
    2720:	8c 93       	st	X, r24
    2722:	67 01       	movw	r12, r14
    2724:	e2 cf       	rjmp	.-60     	; 0x26ea <dtoa_prf+0x23c>
    2726:	64 17       	cp	r22, r20
    2728:	75 07       	cpc	r23, r21
    272a:	39 f4       	brne	.+14     	; 0x273a <dtoa_prf+0x28c>
    272c:	96 33       	cpi	r25, 0x36	; 54
    272e:	20 f4       	brcc	.+8      	; 0x2738 <dtoa_prf+0x28a>
    2730:	95 33       	cpi	r25, 0x35	; 53
    2732:	19 f4       	brne	.+6      	; 0x273a <dtoa_prf+0x28c>
    2734:	31 11       	cpse	r19, r1
    2736:	01 c0       	rjmp	.+2      	; 0x273a <dtoa_prf+0x28c>
    2738:	81 e3       	ldi	r24, 0x31	; 49
    273a:	f6 01       	movw	r30, r12
    273c:	80 83       	st	Z, r24
    273e:	f7 01       	movw	r30, r14
    2740:	82 2f       	mov	r24, r18
    2742:	90 e2       	ldi	r25, 0x20	; 32
    2744:	88 23       	and	r24, r24
    2746:	19 f0       	breq	.+6      	; 0x274e <dtoa_prf+0x2a0>
    2748:	91 93       	st	Z+, r25
    274a:	81 50       	subi	r24, 0x01	; 1
    274c:	fb cf       	rjmp	.-10     	; 0x2744 <dtoa_prf+0x296>
    274e:	f7 01       	movw	r30, r14
    2750:	e2 0f       	add	r30, r18
    2752:	f1 1d       	adc	r31, r1
    2754:	10 82       	st	Z, r1
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	29 96       	adiw	r28, 0x09	; 9
    275c:	ec e0       	ldi	r30, 0x0C	; 12
    275e:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0xc>

00002762 <__ftoa_engine>:
    2762:	28 30       	cpi	r18, 0x08	; 8
    2764:	08 f0       	brcs	.+2      	; 0x2768 <__ftoa_engine+0x6>
    2766:	27 e0       	ldi	r18, 0x07	; 7
    2768:	33 27       	eor	r19, r19
    276a:	da 01       	movw	r26, r20
    276c:	99 0f       	add	r25, r25
    276e:	31 1d       	adc	r19, r1
    2770:	87 fd       	sbrc	r24, 7
    2772:	91 60       	ori	r25, 0x01	; 1
    2774:	00 96       	adiw	r24, 0x00	; 0
    2776:	61 05       	cpc	r22, r1
    2778:	71 05       	cpc	r23, r1
    277a:	39 f4       	brne	.+14     	; 0x278a <__ftoa_engine+0x28>
    277c:	32 60       	ori	r19, 0x02	; 2
    277e:	2e 5f       	subi	r18, 0xFE	; 254
    2780:	3d 93       	st	X+, r19
    2782:	30 e3       	ldi	r19, 0x30	; 48
    2784:	2a 95       	dec	r18
    2786:	e1 f7       	brne	.-8      	; 0x2780 <__ftoa_engine+0x1e>
    2788:	08 95       	ret
    278a:	9f 3f       	cpi	r25, 0xFF	; 255
    278c:	30 f0       	brcs	.+12     	; 0x279a <__ftoa_engine+0x38>
    278e:	80 38       	cpi	r24, 0x80	; 128
    2790:	71 05       	cpc	r23, r1
    2792:	61 05       	cpc	r22, r1
    2794:	09 f0       	breq	.+2      	; 0x2798 <__ftoa_engine+0x36>
    2796:	3c 5f       	subi	r19, 0xFC	; 252
    2798:	3c 5f       	subi	r19, 0xFC	; 252
    279a:	3d 93       	st	X+, r19
    279c:	91 30       	cpi	r25, 0x01	; 1
    279e:	08 f0       	brcs	.+2      	; 0x27a2 <__ftoa_engine+0x40>
    27a0:	80 68       	ori	r24, 0x80	; 128
    27a2:	91 1d       	adc	r25, r1
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	1f 93       	push	r17
    27aa:	0f 93       	push	r16
    27ac:	ff 92       	push	r15
    27ae:	ef 92       	push	r14
    27b0:	19 2f       	mov	r17, r25
    27b2:	98 7f       	andi	r25, 0xF8	; 248
    27b4:	96 95       	lsr	r25
    27b6:	e9 2f       	mov	r30, r25
    27b8:	96 95       	lsr	r25
    27ba:	96 95       	lsr	r25
    27bc:	e9 0f       	add	r30, r25
    27be:	ff 27       	eor	r31, r31
    27c0:	e6 53       	subi	r30, 0x36	; 54
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	99 27       	eor	r25, r25
    27c6:	33 27       	eor	r19, r19
    27c8:	ee 24       	eor	r14, r14
    27ca:	ff 24       	eor	r15, r15
    27cc:	a7 01       	movw	r20, r14
    27ce:	e7 01       	movw	r28, r14
    27d0:	05 90       	lpm	r0, Z+
    27d2:	08 94       	sec
    27d4:	07 94       	ror	r0
    27d6:	28 f4       	brcc	.+10     	; 0x27e2 <__ftoa_engine+0x80>
    27d8:	36 0f       	add	r19, r22
    27da:	e7 1e       	adc	r14, r23
    27dc:	f8 1e       	adc	r15, r24
    27de:	49 1f       	adc	r20, r25
    27e0:	51 1d       	adc	r21, r1
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	06 94       	lsr	r0
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <__ftoa_engine+0x74>
    27ee:	05 90       	lpm	r0, Z+
    27f0:	07 94       	ror	r0
    27f2:	28 f4       	brcc	.+10     	; 0x27fe <__ftoa_engine+0x9c>
    27f4:	e7 0e       	add	r14, r23
    27f6:	f8 1e       	adc	r15, r24
    27f8:	49 1f       	adc	r20, r25
    27fa:	56 1f       	adc	r21, r22
    27fc:	c1 1d       	adc	r28, r1
    27fe:	77 0f       	add	r23, r23
    2800:	88 1f       	adc	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	66 1f       	adc	r22, r22
    2806:	06 94       	lsr	r0
    2808:	a1 f7       	brne	.-24     	; 0x27f2 <__ftoa_engine+0x90>
    280a:	05 90       	lpm	r0, Z+
    280c:	07 94       	ror	r0
    280e:	28 f4       	brcc	.+10     	; 0x281a <__ftoa_engine+0xb8>
    2810:	f8 0e       	add	r15, r24
    2812:	49 1f       	adc	r20, r25
    2814:	56 1f       	adc	r21, r22
    2816:	c7 1f       	adc	r28, r23
    2818:	d1 1d       	adc	r29, r1
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	66 1f       	adc	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	06 94       	lsr	r0
    2824:	a1 f7       	brne	.-24     	; 0x280e <__ftoa_engine+0xac>
    2826:	05 90       	lpm	r0, Z+
    2828:	07 94       	ror	r0
    282a:	20 f4       	brcc	.+8      	; 0x2834 <__ftoa_engine+0xd2>
    282c:	49 0f       	add	r20, r25
    282e:	56 1f       	adc	r21, r22
    2830:	c7 1f       	adc	r28, r23
    2832:	d8 1f       	adc	r29, r24
    2834:	99 0f       	add	r25, r25
    2836:	66 1f       	adc	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	88 1f       	adc	r24, r24
    283c:	06 94       	lsr	r0
    283e:	a9 f7       	brne	.-22     	; 0x282a <__ftoa_engine+0xc8>
    2840:	84 91       	lpm	r24, Z
    2842:	10 95       	com	r17
    2844:	17 70       	andi	r17, 0x07	; 7
    2846:	41 f0       	breq	.+16     	; 0x2858 <__ftoa_engine+0xf6>
    2848:	d6 95       	lsr	r29
    284a:	c7 95       	ror	r28
    284c:	57 95       	ror	r21
    284e:	47 95       	ror	r20
    2850:	f7 94       	ror	r15
    2852:	e7 94       	ror	r14
    2854:	1a 95       	dec	r17
    2856:	c1 f7       	brne	.-16     	; 0x2848 <__ftoa_engine+0xe6>
    2858:	e0 e7       	ldi	r30, 0x70	; 112
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	68 94       	set
    285e:	15 90       	lpm	r1, Z+
    2860:	15 91       	lpm	r17, Z+
    2862:	35 91       	lpm	r19, Z+
    2864:	65 91       	lpm	r22, Z+
    2866:	95 91       	lpm	r25, Z+
    2868:	05 90       	lpm	r0, Z+
    286a:	7f e2       	ldi	r23, 0x2F	; 47
    286c:	73 95       	inc	r23
    286e:	e1 18       	sub	r14, r1
    2870:	f1 0a       	sbc	r15, r17
    2872:	43 0b       	sbc	r20, r19
    2874:	56 0b       	sbc	r21, r22
    2876:	c9 0b       	sbc	r28, r25
    2878:	d0 09       	sbc	r29, r0
    287a:	c0 f7       	brcc	.-16     	; 0x286c <__ftoa_engine+0x10a>
    287c:	e1 0c       	add	r14, r1
    287e:	f1 1e       	adc	r15, r17
    2880:	43 1f       	adc	r20, r19
    2882:	56 1f       	adc	r21, r22
    2884:	c9 1f       	adc	r28, r25
    2886:	d0 1d       	adc	r29, r0
    2888:	7e f4       	brtc	.+30     	; 0x28a8 <__ftoa_engine+0x146>
    288a:	70 33       	cpi	r23, 0x30	; 48
    288c:	11 f4       	brne	.+4      	; 0x2892 <__ftoa_engine+0x130>
    288e:	8a 95       	dec	r24
    2890:	e6 cf       	rjmp	.-52     	; 0x285e <__ftoa_engine+0xfc>
    2892:	e8 94       	clt
    2894:	01 50       	subi	r16, 0x01	; 1
    2896:	30 f0       	brcs	.+12     	; 0x28a4 <__ftoa_engine+0x142>
    2898:	08 0f       	add	r16, r24
    289a:	0a f4       	brpl	.+2      	; 0x289e <__ftoa_engine+0x13c>
    289c:	00 27       	eor	r16, r16
    289e:	02 17       	cp	r16, r18
    28a0:	08 f4       	brcc	.+2      	; 0x28a4 <__ftoa_engine+0x142>
    28a2:	20 2f       	mov	r18, r16
    28a4:	23 95       	inc	r18
    28a6:	02 2f       	mov	r16, r18
    28a8:	7a 33       	cpi	r23, 0x3A	; 58
    28aa:	28 f0       	brcs	.+10     	; 0x28b6 <__ftoa_engine+0x154>
    28ac:	79 e3       	ldi	r23, 0x39	; 57
    28ae:	7d 93       	st	X+, r23
    28b0:	2a 95       	dec	r18
    28b2:	e9 f7       	brne	.-6      	; 0x28ae <__ftoa_engine+0x14c>
    28b4:	10 c0       	rjmp	.+32     	; 0x28d6 <__ftoa_engine+0x174>
    28b6:	7d 93       	st	X+, r23
    28b8:	2a 95       	dec	r18
    28ba:	89 f6       	brne	.-94     	; 0x285e <__ftoa_engine+0xfc>
    28bc:	06 94       	lsr	r0
    28be:	97 95       	ror	r25
    28c0:	67 95       	ror	r22
    28c2:	37 95       	ror	r19
    28c4:	17 95       	ror	r17
    28c6:	17 94       	ror	r1
    28c8:	e1 18       	sub	r14, r1
    28ca:	f1 0a       	sbc	r15, r17
    28cc:	43 0b       	sbc	r20, r19
    28ce:	56 0b       	sbc	r21, r22
    28d0:	c9 0b       	sbc	r28, r25
    28d2:	d0 09       	sbc	r29, r0
    28d4:	98 f0       	brcs	.+38     	; 0x28fc <__ftoa_engine+0x19a>
    28d6:	23 95       	inc	r18
    28d8:	7e 91       	ld	r23, -X
    28da:	73 95       	inc	r23
    28dc:	7a 33       	cpi	r23, 0x3A	; 58
    28de:	08 f0       	brcs	.+2      	; 0x28e2 <__ftoa_engine+0x180>
    28e0:	70 e3       	ldi	r23, 0x30	; 48
    28e2:	7c 93       	st	X, r23
    28e4:	20 13       	cpse	r18, r16
    28e6:	b8 f7       	brcc	.-18     	; 0x28d6 <__ftoa_engine+0x174>
    28e8:	7e 91       	ld	r23, -X
    28ea:	70 61       	ori	r23, 0x10	; 16
    28ec:	7d 93       	st	X+, r23
    28ee:	30 f0       	brcs	.+12     	; 0x28fc <__ftoa_engine+0x19a>
    28f0:	83 95       	inc	r24
    28f2:	71 e3       	ldi	r23, 0x31	; 49
    28f4:	7d 93       	st	X+, r23
    28f6:	70 e3       	ldi	r23, 0x30	; 48
    28f8:	2a 95       	dec	r18
    28fa:	e1 f7       	brne	.-8      	; 0x28f4 <__ftoa_engine+0x192>
    28fc:	11 24       	eor	r1, r1
    28fe:	ef 90       	pop	r14
    2900:	ff 90       	pop	r15
    2902:	0f 91       	pop	r16
    2904:	1f 91       	pop	r17
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	99 27       	eor	r25, r25
    290c:	87 fd       	sbrc	r24, 7
    290e:	90 95       	com	r25
    2910:	08 95       	ret

00002912 <strnlen_P>:
    2912:	fc 01       	movw	r30, r24
    2914:	05 90       	lpm	r0, Z+
    2916:	61 50       	subi	r22, 0x01	; 1
    2918:	70 40       	sbci	r23, 0x00	; 0
    291a:	01 10       	cpse	r0, r1
    291c:	d8 f7       	brcc	.-10     	; 0x2914 <strnlen_P+0x2>
    291e:	80 95       	com	r24
    2920:	90 95       	com	r25
    2922:	8e 0f       	add	r24, r30
    2924:	9f 1f       	adc	r25, r31
    2926:	08 95       	ret

00002928 <strnlen>:
    2928:	fc 01       	movw	r30, r24
    292a:	61 50       	subi	r22, 0x01	; 1
    292c:	70 40       	sbci	r23, 0x00	; 0
    292e:	01 90       	ld	r0, Z+
    2930:	01 10       	cpse	r0, r1
    2932:	d8 f7       	brcc	.-10     	; 0x292a <strnlen+0x2>
    2934:	80 95       	com	r24
    2936:	90 95       	com	r25
    2938:	8e 0f       	add	r24, r30
    293a:	9f 1f       	adc	r25, r31
    293c:	08 95       	ret

0000293e <strrev>:
    293e:	dc 01       	movw	r26, r24
    2940:	fc 01       	movw	r30, r24
    2942:	67 2f       	mov	r22, r23
    2944:	71 91       	ld	r23, Z+
    2946:	77 23       	and	r23, r23
    2948:	e1 f7       	brne	.-8      	; 0x2942 <strrev+0x4>
    294a:	32 97       	sbiw	r30, 0x02	; 2
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <strrev+0x18>
    294e:	7c 91       	ld	r23, X
    2950:	6d 93       	st	X+, r22
    2952:	70 83       	st	Z, r23
    2954:	62 91       	ld	r22, -Z
    2956:	ae 17       	cp	r26, r30
    2958:	bf 07       	cpc	r27, r31
    295a:	c8 f3       	brcs	.-14     	; 0x294e <strrev+0x10>
    295c:	08 95       	ret

0000295e <fputc>:
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	fb 01       	movw	r30, r22
    2968:	23 81       	ldd	r18, Z+3	; 0x03
    296a:	21 fd       	sbrc	r18, 1
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <fputc+0x16>
    296e:	8f ef       	ldi	r24, 0xFF	; 255
    2970:	9f ef       	ldi	r25, 0xFF	; 255
    2972:	2c c0       	rjmp	.+88     	; 0x29cc <fputc+0x6e>
    2974:	22 ff       	sbrs	r18, 2
    2976:	16 c0       	rjmp	.+44     	; 0x29a4 <fputc+0x46>
    2978:	46 81       	ldd	r20, Z+6	; 0x06
    297a:	57 81       	ldd	r21, Z+7	; 0x07
    297c:	24 81       	ldd	r18, Z+4	; 0x04
    297e:	35 81       	ldd	r19, Z+5	; 0x05
    2980:	42 17       	cp	r20, r18
    2982:	53 07       	cpc	r21, r19
    2984:	44 f4       	brge	.+16     	; 0x2996 <fputc+0x38>
    2986:	a0 81       	ld	r26, Z
    2988:	b1 81       	ldd	r27, Z+1	; 0x01
    298a:	9d 01       	movw	r18, r26
    298c:	2f 5f       	subi	r18, 0xFF	; 255
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	31 83       	std	Z+1, r19	; 0x01
    2992:	20 83       	st	Z, r18
    2994:	8c 93       	st	X, r24
    2996:	26 81       	ldd	r18, Z+6	; 0x06
    2998:	37 81       	ldd	r19, Z+7	; 0x07
    299a:	2f 5f       	subi	r18, 0xFF	; 255
    299c:	3f 4f       	sbci	r19, 0xFF	; 255
    299e:	37 83       	std	Z+7, r19	; 0x07
    29a0:	26 83       	std	Z+6, r18	; 0x06
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <fputc+0x6e>
    29a4:	8b 01       	movw	r16, r22
    29a6:	ec 01       	movw	r28, r24
    29a8:	fb 01       	movw	r30, r22
    29aa:	00 84       	ldd	r0, Z+8	; 0x08
    29ac:	f1 85       	ldd	r31, Z+9	; 0x09
    29ae:	e0 2d       	mov	r30, r0
    29b0:	09 95       	icall
    29b2:	89 2b       	or	r24, r25
    29b4:	e1 f6       	brne	.-72     	; 0x296e <fputc+0x10>
    29b6:	d8 01       	movw	r26, r16
    29b8:	16 96       	adiw	r26, 0x06	; 6
    29ba:	8d 91       	ld	r24, X+
    29bc:	9c 91       	ld	r25, X
    29be:	17 97       	sbiw	r26, 0x07	; 7
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	17 96       	adiw	r26, 0x07	; 7
    29c4:	9c 93       	st	X, r25
    29c6:	8e 93       	st	-X, r24
    29c8:	16 97       	sbiw	r26, 0x06	; 6
    29ca:	ce 01       	movw	r24, r28
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <__ultoa_invert>:
    29d6:	fa 01       	movw	r30, r20
    29d8:	aa 27       	eor	r26, r26
    29da:	28 30       	cpi	r18, 0x08	; 8
    29dc:	51 f1       	breq	.+84     	; 0x2a32 <__ultoa_invert+0x5c>
    29de:	20 31       	cpi	r18, 0x10	; 16
    29e0:	81 f1       	breq	.+96     	; 0x2a42 <__ultoa_invert+0x6c>
    29e2:	e8 94       	clt
    29e4:	6f 93       	push	r22
    29e6:	6e 7f       	andi	r22, 0xFE	; 254
    29e8:	6e 5f       	subi	r22, 0xFE	; 254
    29ea:	7f 4f       	sbci	r23, 0xFF	; 255
    29ec:	8f 4f       	sbci	r24, 0xFF	; 255
    29ee:	9f 4f       	sbci	r25, 0xFF	; 255
    29f0:	af 4f       	sbci	r26, 0xFF	; 255
    29f2:	b1 e0       	ldi	r27, 0x01	; 1
    29f4:	3e d0       	rcall	.+124    	; 0x2a72 <__ultoa_invert+0x9c>
    29f6:	b4 e0       	ldi	r27, 0x04	; 4
    29f8:	3c d0       	rcall	.+120    	; 0x2a72 <__ultoa_invert+0x9c>
    29fa:	67 0f       	add	r22, r23
    29fc:	78 1f       	adc	r23, r24
    29fe:	89 1f       	adc	r24, r25
    2a00:	9a 1f       	adc	r25, r26
    2a02:	a1 1d       	adc	r26, r1
    2a04:	68 0f       	add	r22, r24
    2a06:	79 1f       	adc	r23, r25
    2a08:	8a 1f       	adc	r24, r26
    2a0a:	91 1d       	adc	r25, r1
    2a0c:	a1 1d       	adc	r26, r1
    2a0e:	6a 0f       	add	r22, r26
    2a10:	71 1d       	adc	r23, r1
    2a12:	81 1d       	adc	r24, r1
    2a14:	91 1d       	adc	r25, r1
    2a16:	a1 1d       	adc	r26, r1
    2a18:	20 d0       	rcall	.+64     	; 0x2a5a <__ultoa_invert+0x84>
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <__ultoa_invert+0x48>
    2a1c:	68 94       	set
    2a1e:	3f 91       	pop	r19
    2a20:	2a e0       	ldi	r18, 0x0A	; 10
    2a22:	26 9f       	mul	r18, r22
    2a24:	11 24       	eor	r1, r1
    2a26:	30 19       	sub	r19, r0
    2a28:	30 5d       	subi	r19, 0xD0	; 208
    2a2a:	31 93       	st	Z+, r19
    2a2c:	de f6       	brtc	.-74     	; 0x29e4 <__ultoa_invert+0xe>
    2a2e:	cf 01       	movw	r24, r30
    2a30:	08 95       	ret
    2a32:	46 2f       	mov	r20, r22
    2a34:	47 70       	andi	r20, 0x07	; 7
    2a36:	40 5d       	subi	r20, 0xD0	; 208
    2a38:	41 93       	st	Z+, r20
    2a3a:	b3 e0       	ldi	r27, 0x03	; 3
    2a3c:	0f d0       	rcall	.+30     	; 0x2a5c <__ultoa_invert+0x86>
    2a3e:	c9 f7       	brne	.-14     	; 0x2a32 <__ultoa_invert+0x5c>
    2a40:	f6 cf       	rjmp	.-20     	; 0x2a2e <__ultoa_invert+0x58>
    2a42:	46 2f       	mov	r20, r22
    2a44:	4f 70       	andi	r20, 0x0F	; 15
    2a46:	40 5d       	subi	r20, 0xD0	; 208
    2a48:	4a 33       	cpi	r20, 0x3A	; 58
    2a4a:	18 f0       	brcs	.+6      	; 0x2a52 <__ultoa_invert+0x7c>
    2a4c:	49 5d       	subi	r20, 0xD9	; 217
    2a4e:	31 fd       	sbrc	r19, 1
    2a50:	40 52       	subi	r20, 0x20	; 32
    2a52:	41 93       	st	Z+, r20
    2a54:	02 d0       	rcall	.+4      	; 0x2a5a <__ultoa_invert+0x84>
    2a56:	a9 f7       	brne	.-22     	; 0x2a42 <__ultoa_invert+0x6c>
    2a58:	ea cf       	rjmp	.-44     	; 0x2a2e <__ultoa_invert+0x58>
    2a5a:	b4 e0       	ldi	r27, 0x04	; 4
    2a5c:	a6 95       	lsr	r26
    2a5e:	97 95       	ror	r25
    2a60:	87 95       	ror	r24
    2a62:	77 95       	ror	r23
    2a64:	67 95       	ror	r22
    2a66:	ba 95       	dec	r27
    2a68:	c9 f7       	brne	.-14     	; 0x2a5c <__ultoa_invert+0x86>
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	61 05       	cpc	r22, r1
    2a6e:	71 05       	cpc	r23, r1
    2a70:	08 95       	ret
    2a72:	9b 01       	movw	r18, r22
    2a74:	ac 01       	movw	r20, r24
    2a76:	0a 2e       	mov	r0, r26
    2a78:	06 94       	lsr	r0
    2a7a:	57 95       	ror	r21
    2a7c:	47 95       	ror	r20
    2a7e:	37 95       	ror	r19
    2a80:	27 95       	ror	r18
    2a82:	ba 95       	dec	r27
    2a84:	c9 f7       	brne	.-14     	; 0x2a78 <__ultoa_invert+0xa2>
    2a86:	62 0f       	add	r22, r18
    2a88:	73 1f       	adc	r23, r19
    2a8a:	84 1f       	adc	r24, r20
    2a8c:	95 1f       	adc	r25, r21
    2a8e:	a0 1d       	adc	r26, r0
    2a90:	08 95       	ret

00002a92 <__prologue_saves__>:
    2a92:	2f 92       	push	r2
    2a94:	3f 92       	push	r3
    2a96:	4f 92       	push	r4
    2a98:	5f 92       	push	r5
    2a9a:	6f 92       	push	r6
    2a9c:	7f 92       	push	r7
    2a9e:	8f 92       	push	r8
    2aa0:	9f 92       	push	r9
    2aa2:	af 92       	push	r10
    2aa4:	bf 92       	push	r11
    2aa6:	cf 92       	push	r12
    2aa8:	df 92       	push	r13
    2aaa:	ef 92       	push	r14
    2aac:	ff 92       	push	r15
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	ca 1b       	sub	r28, r26
    2abc:	db 0b       	sbc	r29, r27
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	09 94       	ijmp

00002aca <__epilogue_restores__>:
    2aca:	2a 88       	ldd	r2, Y+18	; 0x12
    2acc:	39 88       	ldd	r3, Y+17	; 0x11
    2ace:	48 88       	ldd	r4, Y+16	; 0x10
    2ad0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ad2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ad4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ada:	aa 84       	ldd	r10, Y+10	; 0x0a
    2adc:	b9 84       	ldd	r11, Y+9	; 0x09
    2ade:	c8 84       	ldd	r12, Y+8	; 0x08
    2ae0:	df 80       	ldd	r13, Y+7	; 0x07
    2ae2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ae4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aea:	aa 81       	ldd	r26, Y+2	; 0x02
    2aec:	b9 81       	ldd	r27, Y+1	; 0x01
    2aee:	ce 0f       	add	r28, r30
    2af0:	d1 1d       	adc	r29, r1
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	ed 01       	movw	r28, r26
    2afe:	08 95       	ret

00002b00 <_exit>:
    2b00:	f8 94       	cli

00002b02 <__stop_program>:
    2b02:	ff cf       	rjmp	.-2      	; 0x2b02 <__stop_program>
