
projcodes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000268  00800060  00002e62  00002ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000354  008002c8  008002c8  0000315e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000315e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000538  00000000  00000000  000031f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005225  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f6b  00000000  00000000  00008955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003448  00000000  00000000  0000a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  0000dd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0e  00000000  00000000  0000e814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b03  00000000  00000000  0000f522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00012025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	33 05       	cpc	r19, r3
      56:	36 05       	cpc	r19, r6
      58:	39 05       	cpc	r19, r9
      5a:	3c 05       	cpc	r19, r12
      5c:	3f 05       	cpc	r19, r15
      5e:	42 05       	cpc	r20, r2
      60:	45 05       	cpc	r20, r5
      62:	f0 0d       	add	r31, r0
      64:	f3 0d       	add	r31, r3
      66:	f6 0d       	add	r31, r6
      68:	f9 0d       	add	r31, r9
      6a:	fc 0d       	add	r31, r12
      6c:	ff 0d       	add	r31, r15
      6e:	02 0e       	add	r0, r18

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <Keypad_AddKey+0xae>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <Error_ErrorBin+0x2a>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <regression+0x13e>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <sumit+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e2 e6       	ldi	r30, 0x62	; 98
     17e:	fe e2       	ldi	r31, 0x2E	; 46
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 3c       	cpi	r26, 0xC8	; 200
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	26 e0       	ldi	r18, 0x06	; 6
     18e:	a8 ec       	ldi	r26, 0xC8	; 200
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 31       	cpi	r26, 0x1C	; 28
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 23 0a 	call	0x1446	; 0x1446 <main>
     1a0:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <sumit>:
char disp[16] = "00000000000001";
char result[8] = "000001"; 

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=data_points[i];
     1bc:	16 16       	cp	r1, r22
     1be:	17 06       	cpc	r1, r23
     1c0:	04 f5       	brge	.+64     	; 0x202 <sumit+0x5a>
     1c2:	7b 01       	movw	r14, r22
     1c4:	8c 01       	movw	r16, r24
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	c1 e0       	ldi	r28, 0x01	; 1
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	81 2c       	mov	r8, r1
     1d0:	91 2c       	mov	r9, r1
     1d2:	54 01       	movw	r10, r8
     1d4:	f8 01       	movw	r30, r16
     1d6:	61 91       	ld	r22, Z+
     1d8:	71 91       	ld	r23, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	07 2e       	mov	r0, r23
     1de:	00 0c       	add	r0, r0
     1e0:	88 0b       	sbc	r24, r24
     1e2:	99 0b       	sbc	r25, r25
     1e4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	ec 16       	cp	r14, r28
     1fc:	fd 06       	cpc	r15, r29
     1fe:	54 f7       	brge	.-44     	; 0x1d4 <sumit+0x2c>
     200:	03 c0       	rjmp	.+6      	; 0x208 <sumit+0x60>

double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	 int i;
	 double sum=0;
     202:	81 2c       	mov	r8, r1
     204:	91 2c       	mov	r9, r1
     206:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=data_points[i];
	 return sum;
}
     208:	c5 01       	movw	r24, r10
     20a:	b4 01       	movw	r22, r8
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <xysum>:

double xysum(int data_points[],int length){
     222:	8f 92       	push	r8
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	 int i;
	 double sum=0;
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     236:	16 16       	cp	r1, r22
     238:	17 06       	cpc	r1, r23
     23a:	3c f5       	brge	.+78     	; 0x28a <xysum+0x68>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	c1 e0       	ldi	r28, 0x01	; 1
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	54 01       	movw	r10, r8
     24e:	f8 01       	movw	r30, r16
     250:	81 91       	ld	r24, Z+
     252:	91 91       	ld	r25, Z+
     254:	8f 01       	movw	r16, r30
     256:	8c 9f       	mul	r24, r28
     258:	b0 01       	movw	r22, r0
     25a:	8d 9f       	mul	r24, r29
     25c:	70 0d       	add	r23, r0
     25e:	9c 9f       	mul	r25, r28
     260:	70 0d       	add	r23, r0
     262:	11 24       	eor	r1, r1
     264:	07 2e       	mov	r0, r23
     266:	00 0c       	add	r0, r0
     268:	88 0b       	sbc	r24, r24
     26a:	99 0b       	sbc	r25, r25
     26c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__floatsisf>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	21 96       	adiw	r28, 0x01	; 1
     282:	ec 16       	cp	r14, r28
     284:	fd 06       	cpc	r15, r29
     286:	1c f7       	brge	.-58     	; 0x24e <xysum+0x2c>
     288:	03 c0       	rjmp	.+6      	; 0x290 <xysum+0x6e>
	 return sum;
}

double xysum(int data_points[],int length){
	 int i;
	 double sum=0;
     28a:	81 2c       	mov	r8, r1
     28c:	91 2c       	mov	r9, r1
     28e:	54 01       	movw	r10, r8
	 for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
	 return sum;
}
     290:	c5 01       	movw	r24, r10
     292:	b4 01       	movw	r22, r8
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret

000002aa <regression>:

void regression(int data_points[],double n){
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	60 97       	sbiw	r28, 0x10	; 16
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	3c 01       	movw	r6, r24
     2d8:	6a 01       	movw	r12, r20
     2da:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     2ec:	6d 83       	std	Y+5, r22	; 0x05
     2ee:	7e 83       	std	Y+6, r23	; 0x06
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
	double xbar = (n+1)/2.0;
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__fixsfsi>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	c3 01       	movw	r24, r6
     316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <sumit>
     31a:	a7 01       	movw	r20, r14
     31c:	96 01       	movw	r18, r12
     31e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__divsf3>
     322:	69 87       	std	Y+9, r22	; 0x09
     324:	7a 87       	std	Y+10, r23	; 0x0a
     326:	8b 87       	std	Y+11, r24	; 0x0b
     328:	9c 87       	std	Y+12, r25	; 0x0c
	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     32a:	b4 01       	movw	r22, r8
     32c:	c3 01       	movw	r24, r6
     32e:	0e 94 11 01 	call	0x222	; 0x222 <xysum>
     332:	4b 01       	movw	r8, r22
     334:	5c 01       	movw	r10, r24
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     346:	2b 01       	movw	r4, r22
     348:	3c 01       	movw	r6, r24
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	69 85       	ldd	r22, Y+9	; 0x09
     350:	7a 85       	ldd	r23, Y+10	; 0x0a
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__subsf3>
     366:	4b 01       	movw	r8, r22
     368:	5c 01       	movw	r10, r24
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     382:	6d 87       	std	Y+13, r22	; 0x0d
     384:	7e 87       	std	Y+14, r23	; 0x0e
     386:	8f 87       	std	Y+15, r24	; 0x0f
     388:	98 8b       	std	Y+16, r25	; 0x10
     38a:	2d 81       	ldd	r18, Y+5	; 0x05
     38c:	3e 81       	ldd	r19, Y+6	; 0x06
     38e:	4f 81       	ldd	r20, Y+7	; 0x07
     390:	58 85       	ldd	r21, Y+8	; 0x08
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a4:	98 89       	ldd	r25, Y+16	; 0x10
     3a6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 ec       	ldi	r20, 0xC0	; 192
     3b0:	50 e4       	ldi	r21, 0x40	; 64
     3b2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__divsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	a3 01       	movw	r20, r6
     3bc:	92 01       	movw	r18, r4
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__subsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__divsf3>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <m>
     3ea:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <m+0x1>
     3ee:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <m+0x2>
     3f2:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <m+0x3>
	c=ybar-m*xbar;
     3f6:	69 81       	ldd	r22, Y+1	; 0x01
     3f8:	7a 81       	ldd	r23, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	69 85       	ldd	r22, Y+9	; 0x09
     408:	7a 85       	ldd	r23, Y+10	; 0x0a
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__subsf3>
     412:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <__data_end>
     416:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <__data_end+0x1>
     41a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__data_end+0x2>
     41e:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <__data_end+0x3>
}
     422:	60 96       	adiw	r28, 0x10	; 16
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	08 95       	ret

0000044c <Bp_Read>:

int Bp_Read()
{
   ADCSRA |= (1<<ADSC);
     44c:	36 9a       	sbi	0x06, 6	; 6
   while(ADCSRA & (1<<ADSC));
     44e:	36 99       	sbic	0x06, 6	; 6
     450:	fe cf       	rjmp	.-4      	; 0x44e <Bp_Read+0x2>
   
   return ADC;
     452:	84 b1       	in	r24, 0x04	; 4
     454:	95 b1       	in	r25, 0x05	; 5
}
     456:	08 95       	ret

00000458 <Bp_Init>:

void Bp_Init()
{
	DDRA &= ~2;		/* Vref: Avcc, ADC channel: 1 */
     458:	d1 98       	cbi	0x1a, 1	; 26
	ADMUX = 0b11000001; 		//internal voltage 2.56V, right-justified, input ADC0
     45a:	81 ec       	ldi	r24, 0xC1	; 193
     45c:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	86 b9       	out	0x06, r24	; 6
     462:	08 95       	ret

00000464 <Bp_PrintBp>:
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
}

void Bp_PrintBp()
{
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <Bp_PrintBp+0x22>
     486:	00 d0       	rcall	.+0      	; 0x488 <Bp_PrintBp+0x24>
     488:	00 d0       	rcall	.+0      	; 0x48a <Bp_PrintBp+0x26>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
}
     48e:	4d b6       	in	r4, 0x3d	; 61
     490:	5e b6       	in	r5, 0x3e	; 62
	
	/*  timing data */
    const double sampling_rate = 0.100 ;	   	// actually this is the _delay_ms val
    const int time_limit = 15 ;  				 //in seconds
    const int size=time_limit/(sampling_rate);
    int data_points[size+1];
     492:	8d b7       	in	r24, 0x3d	; 61
     494:	9e b7       	in	r25, 0x3e	; 62
     496:	8e 52       	subi	r24, 0x2E	; 46
     498:	91 40       	sbci	r25, 0x01	; 1
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	9e bf       	out	0x3e, r25	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	8d bf       	out	0x3d, r24	; 61
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	3f 01       	movw	r6, r30

	data_points[0]=0;
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	12 82       	std	Z+2, r1	; 0x02
     4b2:	11 82       	std	Z+1, r1	; 0x01
     4b4:	ad b6       	in	r10, 0x3d	; 61
     4b6:	be b6       	in	r11, 0x3e	; 62
     4b8:	f3 e0       	ldi	r31, 0x03	; 3
     4ba:	af 0e       	add	r10, r31
     4bc:	b1 1c       	adc	r11, r1
     4be:	0f e9       	ldi	r16, 0x9F	; 159
     4c0:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
		
		sprintf(val , "%2ds",(size -i +9)/10);
     4c2:	0f 2e       	mov	r0, r31
     4c4:	fa e0       	ldi	r31, 0x0A	; 10
     4c6:	8f 2e       	mov	r8, r31
     4c8:	91 2c       	mov	r9, r1
     4ca:	f0 2d       	mov	r31, r0
     4cc:	0f 2e       	mov	r0, r31
     4ce:	fb e6       	ldi	r31, 0x6B	; 107
     4d0:	cf 2e       	mov	r12, r31
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	df 2e       	mov	r13, r31
     4d6:	f0 2d       	mov	r31, r0
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	7c 01       	movw	r14, r24
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
	{
		data_points[i+1]=Bp_Read();
     4de:	0e 94 26 02 	call	0x44c	; 0x44c <Bp_Read>
     4e2:	f5 01       	movw	r30, r10
     4e4:	81 93       	st	Z+, r24
     4e6:	91 93       	st	Z+, r25
     4e8:	5f 01       	movw	r10, r30
		
		sprintf(val , "%2ds",(size -i +9)/10);
     4ea:	c8 01       	movw	r24, r16
     4ec:	b4 01       	movw	r22, r8
     4ee:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__divmodhi4>
     4f2:	7f 93       	push	r23
     4f4:	6f 93       	push	r22
     4f6:	df 92       	push	r13
     4f8:	cf 92       	push	r12
     4fa:	ff 92       	push	r15
     4fc:	ef 92       	push	r14
     4fe:	0e 94 03 12 	call	0x2406	; 0x2406 <sprintf>
		Lcd_Position(LCDKEYPAD , 1, 6 );
     502:	46 e0       	ldi	r20, 0x06	; 6
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
		Lcd_Prints(LCDKEYPAD , val);
     510:	b7 01       	movw	r22, r14
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     518:	ff ef       	ldi	r31, 0xFF	; 255
     51a:	20 e7       	ldi	r18, 0x70	; 112
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	f1 50       	subi	r31, 0x01	; 1
     520:	20 40       	sbci	r18, 0x00	; 0
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <Bp_PrintBp+0xba>
     526:	00 c0       	rjmp	.+0      	; 0x528 <Bp_PrintBp+0xc4>
     528:	00 00       	nop
     52a:	01 50       	subi	r16, 0x01	; 1
     52c:	11 09       	sbc	r17, r1
	/* /timing data */
	
	
	char val[6]; //temporary variable for itoa

    for(i=0;i<=size;i++)
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	08 30       	cpi	r16, 0x08	; 8
     53c:	11 05       	cpc	r17, r1
     53e:	79 f6       	brne	.-98     	; 0x4de <Bp_PrintBp+0x7a>

		_delay_ms(sampling_rate*1000);
	
	}

	regression(data_points,size);
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	66 e1       	ldi	r22, 0x16	; 22
     546:	73 e4       	ldi	r23, 0x43	; 67
     548:	c3 01       	movw	r24, r6
     54a:	0e 94 55 01 	call	0x2aa	; 0x2aa <regression>
     54e:	f3 01       	movw	r30, r6
     550:	94 ed       	ldi	r25, 0xD4	; 212
     552:	69 1a       	sub	r6, r25
     554:	9e ef       	ldi	r25, 0xFE	; 254
     556:	79 0a       	sbc	r7, r25
	int count3 =  0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
	
	//recorded wave form
	for(i=0;i<size;i++){	
		thresh=(i+2)*m+c;

		int a=data_points[i+1];//current value
     55c:	22 81       	ldd	r18, Z+2	; 0x02
     55e:	33 81       	ldd	r19, Z+3	; 0x03
			count1+=1; //peak counting]
			if(a>data_points[i] && a>data_points[i+2]){
				count2+=1;
			}
		}
		if(a>data_points[i] && a>data_points[i+2])
     560:	40 81       	ld	r20, Z
     562:	51 81       	ldd	r21, Z+1	; 0x01
     564:	32 96       	adiw	r30, 0x02	; 2
     566:	42 17       	cp	r20, r18
     568:	53 07       	cpc	r21, r19
     56a:	34 f4       	brge	.+12     	; 0x578 <Bp_PrintBp+0x114>
     56c:	42 81       	ldd	r20, Z+2	; 0x02
     56e:	53 81       	ldd	r21, Z+3	; 0x03
     570:	42 17       	cp	r20, r18
     572:	53 07       	cpc	r21, r19
     574:	0c f4       	brge	.+2      	; 0x578 <Bp_PrintBp+0x114>
		{
			count3++;
     576:	01 96       	adiw	r24, 0x01	; 1

	regression(data_points,size);
	int count3 =  0;
	
	//recorded wave form
	for(i=0;i<size;i++){	
     578:	6e 16       	cp	r6, r30
     57a:	7f 06       	cpc	r7, r31
     57c:	79 f7       	brne	.-34     	; 0x55c <Bp_PrintBp+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     57e:	4a e0       	ldi	r20, 0x0A	; 10
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	0e 94 de 11 	call	0x23bc	; 0x23bc <__itoa_ncheck>
			count3++;
		}
	}
	
    itoa(count3*(60/time_limit),val,10);
	Lcd_Position(LCDKEYPAD , 1,  10);
     592:	4a e0       	ldi	r20, 0x0A	; 10
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , val);
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	
	Lcd_Position(LCDKEYPAD , 1,  13);
     5ac:	4d e0       	ldi	r20, 0x0D	; 13
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "BPM");
     5ba:	60 e7       	ldi	r22, 0x70	; 112
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	
	// sprintf(val , "%3d",count2*(60/time_limit));
	// Lcd_Position(LCDNOTICE , 1,  5);
	// Lcd_Prints(LCDNOTICE , val);
	
	strcpy(keyBuffer , val);
     5c4:	be 01       	movw	r22, r28
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	88 ed       	ldi	r24, 0xD8	; 216
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
}
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	5e be       	out	0x3e, r5	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	4d be       	out	0x3d, r4	; 61
     5dc:	26 96       	adiw	r28, 0x06	; 6
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	bf 90       	pop	r11
     5fa:	af 90       	pop	r10
     5fc:	9f 90       	pop	r9
     5fe:	8f 90       	pop	r8
     600:	7f 90       	pop	r7
     602:	6f 90       	pop	r6
     604:	5f 90       	pop	r5
     606:	4f 90       	pop	r4
     608:	08 95       	ret

0000060a <Button_Init>:
#include "button.h"

void Button_Init()
{
	DDRA &= ~(1<<2);
     60a:	d2 98       	cbi	0x1a, 2	; 26
     60c:	08 95       	ret

0000060e <Button_ButtonPressed>:
}
bool Button_ButtonPressed()
{
	return (((PINA>>2)&1) == 0);
     60e:	89 b3       	in	r24, 0x19	; 25
     610:	82 fb       	bst	r24, 2
     612:	88 27       	eor	r24, r24
     614:	80 f9       	bld	r24, 0
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	89 27       	eor	r24, r25
     61a:	08 95       	ret

0000061c <Error_Error>:
#include "all.h"

void Error_Error(const char * text)
{
	HC05_SendString(text);
     61c:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
     620:	08 95       	ret

00000622 <Error_ErrorNum>:
}
void Error_ErrorNum(const char * text , int val)
{
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	2a 97       	sbiw	r28, 0x0a	; 10
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	16 2f       	mov	r17, r22
     63c:	07 2f       	mov	r16, r23
	HC05_SendString(text);
     63e:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
	char temp[10];
	sprintf(temp , " = %d\n" , val);
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	84 e7       	ldi	r24, 0x74	; 116
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	8e 01       	movw	r16, r28
     650:	0f 5f       	subi	r16, 0xFF	; 255
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	1f 93       	push	r17
     656:	0f 93       	push	r16
     658:	0e 94 03 12 	call	0x2406	; 0x2406 <sprintf>
	HC05_SendString(temp);
     65c:	c8 01       	movw	r24, r16
     65e:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
	HC05_SendString("\r\n");
     662:	8b e7       	ldi	r24, 0x7B	; 123
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	2a 96       	adiw	r28, 0x0a	; 10
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <Error_ErrorBin>:
void Error_ErrorBin(const char * text,int val)
{
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	2a 97       	sbiw	r28, 0x0a	; 10
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	8b 01       	movw	r16, r22
	HC05_SendString(text);
     6a6:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
     6aa:	fe 01       	movw	r30, r28
     6ac:	31 96       	adiw	r30, 0x01	; 1
	char temp[10];
	for(int i=0;i<8;i++)
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
		temp[i]='0' + ((val>>i)&1);
     6b2:	c8 01       	movw	r24, r16
     6b4:	02 2e       	mov	r0, r18
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <Error_ErrorBin+0x30>
     6b8:	95 95       	asr	r25
     6ba:	87 95       	ror	r24
     6bc:	0a 94       	dec	r0
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <Error_ErrorBin+0x2c>
     6c0:	81 70       	andi	r24, 0x01	; 1
     6c2:	80 5d       	subi	r24, 0xD0	; 208
     6c4:	81 93       	st	Z+, r24
}
void Error_ErrorBin(const char * text,int val)
{
	HC05_SendString(text);
	char temp[10];
	for(int i=0;i<8;i++)
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
     6c8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ca:	28 30       	cpi	r18, 0x08	; 8
     6cc:	31 05       	cpc	r19, r1
     6ce:	89 f7       	brne	.-30     	; 0x6b2 <Error_ErrorBin+0x26>
		temp[i]='0' + ((val>>i)&1);
	temp[8]=0;
     6d0:	19 86       	std	Y+9, r1	; 0x09
	HC05_SendString(temp);
     6d2:	ce 01       	movw	r24, r28
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
	HC05_SendString("\r\n");
     6da:	8b e7       	ldi	r24, 0x7B	; 123
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
     6e2:	2a 96       	adiw	r28, 0x0a	; 10
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <HC05_Init_Data_Mode>:

char HC05_ReceiveChar()
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return (UDR);
}
     6f8:	1b b8       	out	0x0b, r1	; 11
     6fa:	88 e1       	ldi	r24, 0x18	; 24
     6fc:	8a b9       	out	0x0a, r24	; 10
     6fe:	86 e8       	ldi	r24, 0x86	; 134
     700:	80 bd       	out	0x20, r24	; 32
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	89 b9       	out	0x09, r24	; 9
     706:	10 bc       	out	0x20, r1	; 32
     708:	08 95       	ret

0000070a <HC05_SendChar>:
void HC05_SendChar(char data)
{
	UDR = data;										/* Write data to be transmitting in UDR */
     70a:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     70c:	5d 9b       	sbis	0x0b, 5	; 11
     70e:	fe cf       	rjmp	.-4      	; 0x70c <HC05_SendChar+0x2>
}
     710:	08 95       	ret

00000712 <HC05_SendString>:
void HC05_SendString(char * s)
{
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	ec 01       	movw	r28, r24
	while(*s)
     718:	88 81       	ld	r24, Y
     71a:	88 23       	and	r24, r24
     71c:	31 f0       	breq	.+12     	; 0x72a <HC05_SendString+0x18>
     71e:	21 96       	adiw	r28, 0x01	; 1
		HC05_SendChar(*(s++));
     720:	0e 94 85 03 	call	0x70a	; 0x70a <HC05_SendChar>
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
void HC05_SendString(char * s)
{
	while(*s)
     724:	89 91       	ld	r24, Y+
     726:	81 11       	cpse	r24, r1
     728:	fb cf       	rjmp	.-10     	; 0x720 <HC05_SendString+0xe>
		HC05_SendChar(*(s++));
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <Keypad_Init>:
void Keypad_Init()
{
	// col: b7-b0
	// row: a7-a4
	// cols will function as output, rows will as input
    DDRA = (DDRA & 0b00000011) | 0x00;
     730:	8a b3       	in	r24, 0x1a	; 26
     732:	83 70       	andi	r24, 0x03	; 3
     734:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	87 bb       	out	0x17, r24	; 23
	// PORTA = 0x00;       /** you may use 0b 0000 00XX if ADC has any operations after that. However, we are not reading that data for getting rows */
	PORTB = 0xFF;
     73a:	88 bb       	out	0x18, r24	; 24
     73c:	08 95       	ret

0000073e <Keypad_ResetBuffer>:
}
void Keypad_ResetBuffer()
{
	isNumber = false;
     73e:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <isNumber>
	isUpperCase = false;
     742:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <isUpperCase>
	position = 0;
     746:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <position+0x1>
     74a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <position>
	keyBuffer[position] = 0;
     74e:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <keyBuffer>
     752:	08 95       	ret

00000754 <Keypad_WriteToBuffer>:
}

void Keypad_WriteToBuffer(char * newData)
{
	if(newData == NULL)
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	59 f4       	brne	.+22     	; 0x76e <Keypad_WriteToBuffer+0x1a>
	{
		Error_Error("newData is Null");
     758:	8e e7       	ldi	r24, 0x7E	; 126
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
		position = 0;
     760:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <position+0x1>
     764:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <position>
		keyBuffer[position]=0;
     768:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <keyBuffer>
     76c:	08 95       	ret
	}
	else 
	{
		int sz = min(strlen(newData),16);
     76e:	fc 01       	movw	r30, r24
     770:	01 90       	ld	r0, Z+
     772:	00 20       	and	r0, r0
     774:	e9 f7       	brne	.-6      	; 0x770 <Keypad_WriteToBuffer+0x1c>
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	e8 1b       	sub	r30, r24
     77a:	f9 0b       	sbc	r31, r25
     77c:	e0 31       	cpi	r30, 0x10	; 16
     77e:	f1 05       	cpc	r31, r1
     780:	28 f5       	brcc	.+74     	; 0x7cc <Keypad_WriteToBuffer+0x78>
     782:	af 01       	movw	r20, r30
		for(position=0;position<sz;position++)
     784:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <position+0x1>
     788:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <position>
     78c:	1e 16       	cp	r1, r30
     78e:	1f 06       	cpc	r1, r31
     790:	b4 f4       	brge	.+44     	; 0x7be <Keypad_WriteToBuffer+0x6a>
     792:	fc 01       	movw	r30, r24
     794:	a8 ed       	ldi	r26, 0xD8	; 216
     796:	b2 e0       	ldi	r27, 0x02	; 2
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
		for(position=0;position<sz;position++)
			keyBuffer[position] = newData[position];
     79c:	81 91       	ld	r24, Z+
     79e:	8d 93       	st	X+, r24
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <position+0x1>
     7a8:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <position>
     7ac:	24 17       	cp	r18, r20
     7ae:	35 07       	cpc	r19, r21
     7b0:	ac f3       	brlt	.-22     	; 0x79c <Keypad_WriteToBuffer+0x48>
     7b2:	14 16       	cp	r1, r20
     7b4:	15 06       	cpc	r1, r21
     7b6:	2c f0       	brlt	.+10     	; 0x7c2 <Keypad_WriteToBuffer+0x6e>
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <Keypad_WriteToBuffer+0x6e>
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
			keyBuffer[position] = newData[position];
		keyBuffer[position] = 0;
     7c2:	fa 01       	movw	r30, r20
     7c4:	e8 52       	subi	r30, 0x28	; 40
     7c6:	fd 4f       	sbci	r31, 0xFD	; 253
     7c8:	10 82       	st	Z, r1
	}
}
     7ca:	08 95       	ret
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
		for(position=0;position<sz;position++)
     7cc:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <position+0x1>
     7d0:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <position>
		position = 0;
		keyBuffer[position]=0;
	}
	else 
	{
		int sz = min(strlen(newData),16);
     7d4:	40 e1       	ldi	r20, 0x10	; 16
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	dc cf       	rjmp	.-72     	; 0x792 <Keypad_WriteToBuffer+0x3e>

000007da <Keypad_InitNumpad>:
	}
}

void Keypad_InitNumpad()
{
	isNumber = true;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <isNumber>
     7e0:	08 95       	ret

000007e2 <Keypad_GetMode>:
}

const char * Keypad_GetMode()
{
	if(isNumber)
     7e2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <isNumber>
     7e6:	81 11       	cpse	r24, r1
     7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <Keypad_GetMode+0x16>
		return "123";
	else if(isUpperCase)
     7ea:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <isUpperCase>
     7ee:	81 11       	cpse	r24, r1
     7f0:	06 c0       	rjmp	.+12     	; 0x7fe <Keypad_GetMode+0x1c>
		return "ABC";
	else return "abc";
     7f2:	86 e9       	ldi	r24, 0x96	; 150
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	08 95       	ret
}

const char * Keypad_GetMode()
{
	if(isNumber)
		return "123";
     7f8:	8e e8       	ldi	r24, 0x8E	; 142
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	08 95       	ret
	else if(isUpperCase)
		return "ABC";
     7fe:	82 e9       	ldi	r24, 0x92	; 146
     800:	90 e0       	ldi	r25, 0x00	; 0
	else return "abc";
}
     802:	08 95       	ret

00000804 <Keypad_UpdateKeyMode>:

void Keypad_UpdateKeyMode()
{
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
	const char * s = Keypad_GetMode();
     808:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Keypad_GetMode>
     80c:	ec 01       	movw	r28, r24
	Lcd_Position(LCDKEYPAD,0,16-strlen(s));
     80e:	fc 01       	movw	r30, r24
     810:	01 90       	ld	r0, Z+
     812:	00 20       	and	r0, r0
     814:	e9 f7       	brne	.-6      	; 0x810 <Keypad_UpdateKeyMode+0xc>
     816:	ac 01       	movw	r20, r24
     818:	4e 1b       	sub	r20, r30
     81a:	5f 0b       	sbc	r21, r31
     81c:	4f 5e       	subi	r20, 0xEF	; 239
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
     82a:	be 01       	movw	r22, r28
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <Keypad_KeyPressed>:

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     838:	89 b3       	in	r24, 0x19	; 25
}
     83a:	82 95       	swap	r24
     83c:	8f 70       	andi	r24, 0x0F	; 15
     83e:	08 95       	ret

00000840 <Keypad_GetRow>:

int_fast8_t Keypad_GetRow()
{
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
	int pin = PINA >> 4;
     846:	c9 b3       	in	r28, 0x19	; 25
     848:	c2 95       	swap	r28
     84a:	cf 70       	andi	r28, 0x0F	; 15
     84c:	0c 2f       	mov	r16, r28
     84e:	10 e0       	ldi	r17, 0x00	; 0
	Error_ErrorBin("PIN_row:",pin);
     850:	b8 01       	movw	r22, r16
     852:	8a e9       	ldi	r24, 0x9A	; 154
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 46 03 	call	0x68c	; 0x68c <Error_ErrorBin>
	for(int i=0;i<4;i++)
	{
		if(pin&(1<<i))
     85a:	c0 fd       	sbrc	r28, 0
     85c:	0c c0       	rjmp	.+24     	; 0x876 <__stack+0x17>
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	98 01       	movw	r18, r16
     864:	08 2e       	mov	r0, r24
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	35 95       	asr	r19
     86a:	27 95       	ror	r18
     86c:	0a 94       	dec	r0
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	20 ff       	sbrs	r18, 0
     872:	04 c0       	rjmp	.+8      	; 0x87c <__stack+0x1d>
     874:	0c c0       	rjmp	.+24     	; 0x88e <__stack+0x2f>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(pin&(1<<i))
			return i;
     87a:	09 c0       	rjmp	.+18     	; 0x88e <__stack+0x2f>

int_fast8_t Keypad_GetRow()
{
	int pin = PINA >> 4;
	Error_ErrorBin("PIN_row:",pin);
	for(int i=0;i<4;i++)
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	84 30       	cpi	r24, 0x04	; 4
     880:	91 05       	cpc	r25, r1
     882:	79 f7       	brne	.-34     	; 0x862 <__stack+0x3>
	{
		if(pin&(1<<i))
			return i;
	}
	// report error
	Error_Error("KeypadGetRow:");
     884:	83 ea       	ldi	r24, 0xA3	; 163
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	return -1;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
}
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	08 95       	ret

00000896 <Keypad_GetCol>:

int_fast8_t Keypad_GetCol()
{
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
	int i = 7;
     89e:	c7 e0       	ldi	r28, 0x07	; 7
     8a0:	d0 e0       	ldi	r29, 0x00	; 0
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
     8a2:	01 e0       	ldi	r16, 0x01	; 1
     8a4:	10 e0       	ldi	r17, 0x00	; 0
     8a6:	28 b3       	in	r18, 0x18	; 24
     8a8:	c8 01       	movw	r24, r16
     8aa:	0c 2e       	mov	r0, r28
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <Keypad_GetCol+0x1c>
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <Keypad_GetCol+0x18>
     8b6:	82 27       	eor	r24, r18
     8b8:	88 bb       	out	0x18, r24	; 24
		Error_ErrorBin("PINB:",PINB);
     8ba:	66 b3       	in	r22, 0x16	; 22
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	81 eb       	ldi	r24, 0xB1	; 177
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 46 03 	call	0x68c	; 0x68c <Error_ErrorBin>
	Lcd_Prints(LCDKEYPAD,s);
}

inline int_fast8_t Keypad_KeyPressed()
{
	return (PINA >> 4);
     8c6:	89 b3       	in	r24, 0x19	; 25
	int i = 7;
	while(i >=0)
	{
		PORTB = PORTB ^(1<<i);
		Error_ErrorBin("PINB:",PINB);
		if(!Keypad_KeyPressed())
     8c8:	82 95       	swap	r24
     8ca:	8f 70       	andi	r24, 0x0F	; 15
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <Keypad_GetCol+0x3c>
		{
			return i;
     8ce:	8c 2f       	mov	r24, r28
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <Keypad_GetCol+0x4a>
		}
		i--;
     8d2:	21 97       	sbiw	r28, 0x01	; 1
     8d4:	40 f7       	brcc	.-48     	; 0x8a6 <Keypad_GetCol+0x10>
	}
	Error_Error("KeypadGetCol:");
     8d6:	87 eb       	ldi	r24, 0xB7	; 183
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	// report error
	return -1;
     8de:	8f ef       	ldi	r24, 0xFF	; 255
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	08 95       	ret

000008ea <addChar>:

void addChar(const char c)
{
	keyBuffer[position] = c;
     8ea:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <position>
     8ee:	30 91 d1 02 	lds	r19, 0x02D1	; 0x8002d1 <position+0x1>
     8f2:	f9 01       	movw	r30, r18
     8f4:	e8 52       	subi	r30, 0x28	; 40
     8f6:	fd 4f       	sbci	r31, 0xFD	; 253
     8f8:	80 83       	st	Z, r24
	if(position < 16)
     8fa:	20 31       	cpi	r18, 0x10	; 16
     8fc:	31 05       	cpc	r19, r1
     8fe:	34 f4       	brge	.+12     	; 0x90c <addChar+0x22>
		position = position +1;
     900:	2f 5f       	subi	r18, 0xFF	; 255
     902:	3f 4f       	sbci	r19, 0xFF	; 255
     904:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <position+0x1>
     908:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <position>
	keyBuffer[position] = 0;
     90c:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <position>
     910:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <position+0x1>
     914:	e8 52       	subi	r30, 0x28	; 40
     916:	fd 4f       	sbci	r31, 0xFD	; 253
     918:	10 82       	st	Z, r1
     91a:	08 95       	ret

0000091c <Keypad_AddKey>:
	//sprintf(temp , "pos:%d:\n",position);
	//HC05_SendString(temp);
}

void Keypad_AddKey(int_fast8_t key)
{
     91c:	cf 93       	push	r28
     91e:	c8 2f       	mov	r28, r24
	if(key >= 30)
     920:	8e 31       	cpi	r24, 0x1E	; 30
     922:	24 f0       	brlt	.+8      	; 0x92c <Keypad_AddKey+0x10>
		Error_Error("KeyPad_AddKey: 31|30");
     924:	85 ec       	ldi	r24, 0xC5	; 197
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	if(key == 29) 
     92c:	cd 31       	cpi	r28, 0x1D	; 29
     92e:	99 f4       	brne	.+38     	; 0x956 <Keypad_AddKey+0x3a>
	{
		// backspace = delete char
		if(position)
     930:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <position>
     934:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <position+0x1>
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	29 f0       	breq	.+10     	; 0x946 <Keypad_AddKey+0x2a>
			position--;
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <position+0x1>
     942:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <position>
		keyBuffer[position] = 0;
     946:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <position>
     94a:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <position+0x1>
     94e:	e8 52       	subi	r30, 0x28	; 40
     950:	fd 4f       	sbci	r31, 0xFD	; 253
     952:	10 82       	st	Z, r1
     954:	57 c0       	rjmp	.+174    	; 0xa04 <Keypad_AddKey+0xe8>
	}
	else if(key == 28)
     956:	cc 31       	cpi	r28, 0x1C	; 28
     958:	21 f4       	brne	.+8      	; 0x962 <Keypad_AddKey+0x46>
	{
		// space
		addChar(' ');
     95a:	80 e2       	ldi	r24, 0x20	; 32
     95c:	0e 94 75 04 	call	0x8ea	; 0x8ea <addChar>
     960:	51 c0       	rjmp	.+162    	; 0xa04 <Keypad_AddKey+0xe8>
	}
	else if(key == 27)
     962:	cb 31       	cpi	r28, 0x1B	; 27
     964:	39 f4       	brne	.+14     	; 0x974 <Keypad_AddKey+0x58>
	{
		// toggle num/abc
		isNumber = ! isNumber;
     966:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <isNumber>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	89 27       	eor	r24, r25
     96e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <isNumber>
     972:	48 c0       	rjmp	.+144    	; 0xa04 <Keypad_AddKey+0xe8>
	}
	else if(isNumber) 
     974:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <isNumber>
     978:	88 23       	and	r24, r24
     97a:	e9 f0       	breq	.+58     	; 0x9b6 <Keypad_AddKey+0x9a>
	{
		char row = key >> 3;
		char col = key & 0b00000111;
     97c:	9c 2f       	mov	r25, r28
     97e:	97 70       	andi	r25, 0x07	; 7
		char c;
		
		if(col >= 3) return;
     980:	93 30       	cpi	r25, 0x03	; 3
     982:	08 f0       	brcs	.+2      	; 0x986 <Keypad_AddKey+0x6a>
     984:	3f c0       	rjmp	.+126    	; 0xa04 <Keypad_AddKey+0xe8>
		// toggle num/abc
		isNumber = ! isNumber;
	}
	else if(isNumber) 
	{
		char row = key >> 3;
     986:	c5 95       	asr	r28
     988:	c5 95       	asr	r28
     98a:	c5 95       	asr	r28
		char col = key & 0b00000111;
		char c;
		
		if(col >= 3) return;
		
		if(row < 3) {
     98c:	c3 30       	cpi	r28, 0x03	; 3
     98e:	38 f4       	brcc	.+14     	; 0x99e <Keypad_AddKey+0x82>
			c = '1' + row * 3 + col;
     990:	8c 2f       	mov	r24, r28
     992:	88 0f       	add	r24, r24
     994:	c8 0f       	add	r28, r24
     996:	81 e3       	ldi	r24, 0x31	; 49
     998:	89 0f       	add	r24, r25
     99a:	8c 0f       	add	r24, r28
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <Keypad_AddKey+0x94>
		}
		else if(col == 0) {
     99e:	99 23       	and	r25, r25
     9a0:	21 f0       	breq	.+8      	; 0x9aa <Keypad_AddKey+0x8e>
			c = '*';
		}
		else if(col == 1) {
     9a2:	91 30       	cpi	r25, 0x01	; 1
     9a4:	21 f0       	breq	.+8      	; 0x9ae <Keypad_AddKey+0x92>
			c = '0';
		}
		else  {
			c = '#';
     9a6:	83 e2       	ldi	r24, 0x23	; 35
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <Keypad_AddKey+0x94>
		
		if(row < 3) {
			c = '1' + row * 3 + col;
		}
		else if(col == 0) {
			c = '*';
     9aa:	8a e2       	ldi	r24, 0x2A	; 42
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <Keypad_AddKey+0x94>
		}
		else if(col == 1) {
			c = '0';
     9ae:	80 e3       	ldi	r24, 0x30	; 48
		}
		else  {
			c = '#';
		}
		addChar(c);
     9b0:	0e 94 75 04 	call	0x8ea	; 0x8ea <addChar>
     9b4:	27 c0       	rjmp	.+78     	; 0xa04 <Keypad_AddKey+0xe8>
		
	}
	else if(key == 26)
     9b6:	ca 31       	cpi	r28, 0x1A	; 26
     9b8:	39 f4       	brne	.+14     	; 0x9c8 <Keypad_AddKey+0xac>
	{
		// capslock
		isUpperCase = !isUpperCase;
     9ba:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <isUpperCase>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	89 27       	eor	r24, r25
     9c2:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <isUpperCase>
     9c6:	1e c0       	rjmp	.+60     	; 0xa04 <Keypad_AddKey+0xe8>
	}
	else
	{
		// char
		char row = key >> 3;
     9c8:	9c 2f       	mov	r25, r28
     9ca:	95 95       	asr	r25
     9cc:	95 95       	asr	r25
     9ce:	95 95       	asr	r25
		char col = key & 0b00000111;
     9d0:	c7 70       	andi	r28, 0x07	; 7
		char c;
		
		if(row < 3) {
     9d2:	93 30       	cpi	r25, 0x03	; 3
     9d4:	68 f4       	brcc	.+26     	; 0x9f0 <Keypad_AddKey+0xd4>
			c = 'A' + (isUpperCase ? 0 : 32) + row * 8 + col;
     9d6:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <isUpperCase>
     9da:	81 11       	cpse	r24, r1
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <Keypad_AddKey+0xc6>
     9de:	81 e6       	ldi	r24, 0x61	; 97
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <Keypad_AddKey+0xc8>
     9e2:	81 e4       	ldi	r24, 0x41	; 65
     9e4:	99 0f       	add	r25, r25
     9e6:	99 0f       	add	r25, r25
     9e8:	99 0f       	add	r25, r25
     9ea:	c9 0f       	add	r28, r25
     9ec:	8c 0f       	add	r24, r28
     9ee:	08 c0       	rjmp	.+16     	; 0xa00 <Keypad_AddKey+0xe4>
		}
		else {
			c = 'Y' + (isUpperCase ? 0 : 32) + col;
     9f0:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <isUpperCase>
     9f4:	81 11       	cpse	r24, r1
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <Keypad_AddKey+0xe0>
     9f8:	89 e7       	ldi	r24, 0x79	; 121
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <Keypad_AddKey+0xe2>
     9fc:	89 e5       	ldi	r24, 0x59	; 89
     9fe:	8c 0f       	add	r24, r28
		}
		
		addChar(c);
     a00:	0e 94 75 04 	call	0x8ea	; 0x8ea <addChar>
	}
	return ;
}
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <Keypad_GetKey>:

int_fast8_t Keypad_GetKey()
{
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
	int_fast8_t row = Keypad_GetRow();
     a0c:	0e 94 20 04 	call	0x840	; 0x840 <Keypad_GetRow>
     a10:	c8 2f       	mov	r28, r24
	int_fast8_t col = Keypad_GetCol();
     a12:	0e 94 4b 04 	call	0x896	; 0x896 <Keypad_GetCol>
     a16:	d8 2f       	mov	r29, r24
	Error_ErrorNum("row",row);
     a18:	6c 2f       	mov	r22, r28
     a1a:	0c 2e       	mov	r0, r28
     a1c:	00 0c       	add	r0, r0
     a1e:	77 0b       	sbc	r23, r23
     a20:	8a ed       	ldi	r24, 0xDA	; 218
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 11 03 	call	0x622	; 0x622 <Error_ErrorNum>
	Error_ErrorNum("col",col);
     a28:	6d 2f       	mov	r22, r29
     a2a:	0d 2e       	mov	r0, r29
     a2c:	00 0c       	add	r0, r0
     a2e:	77 0b       	sbc	r23, r23
     a30:	8e ed       	ldi	r24, 0xDE	; 222
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 11 03 	call	0x622	; 0x622 <Error_ErrorNum>
	return row * 8 + col;
     a38:	8c 2f       	mov	r24, r28
     a3a:	88 0f       	add	r24, r24
     a3c:	88 0f       	add	r24, r24
     a3e:	88 0f       	add	r24, r24
     a40:	8d 0f       	add	r24, r29
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <KeyProcessor_ProcessKey>:
#include "all.h"

extern int_fast8_t currentState;
void KeyProcessor_ProcessKey(int_fast8_t key)
{
	switch(currentState)
     a48:	e0 91 17 06 	lds	r30, 0x0617	; 0x800617 <currentState>
     a4c:	4e 2f       	mov	r20, r30
     a4e:	ee 0f       	add	r30, r30
     a50:	55 0b       	sbc	r21, r21
     a52:	66 0b       	sbc	r22, r22
     a54:	77 0b       	sbc	r23, r23
     a56:	47 30       	cpi	r20, 0x07	; 7
     a58:	51 05       	cpc	r21, r1
     a5a:	d0 f4       	brcc	.+52     	; 0xa90 <KeyProcessor_ProcessKey+0x48>
     a5c:	fa 01       	movw	r30, r20
     a5e:	e6 5d       	subi	r30, 0xD6	; 214
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__tablejump2__>
	{
		case IDLE:
			Idle_ProcessKey(key);
     a66:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Idle_ProcessKey>
			break;
     a6a:	08 95       	ret
		case ENTERING_NAME :
			EnteringName_ProcessKey(key);
     a6c:	0e 94 17 0c 	call	0x182e	; 0x182e <EnteringName_ProcessKey>
			break;
     a70:	08 95       	ret
		case ENTERING_AGE :
			EnteringAge_ProcessKey(key);
     a72:	0e 94 8b 0b 	call	0x1716	; 0x1716 <EnteringAge_ProcessKey>
			break;
     a76:	08 95       	ret
		case ENTERING_PHONE :
			EnteringPhone_ProcessKey(key);
     a78:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <EnteringPhone_ProcessKey>
			break;
     a7c:	08 95       	ret
		case ENTERING_TEMP :
			EnteringTemp_ProcessKey(key);
     a7e:	0e 94 bd 0c 	call	0x197a	; 0x197a <EnteringTemp_ProcessKey>
			break;
     a82:	08 95       	ret
		case ENTERING_BP :
			EnteringBp_ProcessKey(key);
     a84:	0e 94 cb 0b 	call	0x1796	; 0x1796 <EnteringBp_ProcessKey>
			break;
     a88:	08 95       	ret
		case GENERATE_SERIAL :
			GenerateSerial_ProcessKey(key);
     a8a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <GenerateSerial_ProcessKey>
			break;
     a8e:	08 95       	ret
		default:
			Error_Error("ProcessKey: Undefined Current State");
     a90:	82 ee       	ldi	r24, 0xE2	; 226
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     a98:	08 95       	ret

00000a9a <Lcd_Init>:
#include "lcdgeneric.h"

void Lcd_Init(int_fast8_t lcdType)
{
	switch(lcdType)
     a9a:	88 23       	and	r24, r24
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <Lcd_Init+0xa>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	39 f0       	breq	.+14     	; 0xab0 <Lcd_Init+0x16>
     aa2:	24 c0       	rjmp	.+72     	; 0xaec <Lcd_Init+0x52>
	{
		case LCDKEYPAD:
			DDRD = DDRD | 0b11111100;
     aa4:	81 b3       	in	r24, 0x11	; 17
     aa6:	8c 6f       	ori	r24, 0xFC	; 252
     aa8:	81 bb       	out	0x11, r24	; 17
			Lcd4_Init();
     aaa:	0e 94 bb 07 	call	0xf76	; 0xf76 <Lcd4_Init>
			break;
     aae:	08 95       	ret
		case LCDNOTICE:
			//////////////////////////////////////////////////////////////////////////
			//lcd with i2c
			lcd_init(LCD_ON_DISPLAY);
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0e 94 10 09 	call	0x1220	; 0x1220 <lcd_init>
			lcd_backlight(0);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 81 09 	call	0x1302	; 0x1302 <lcd_backlight>
     abc:	2f ef       	ldi	r18, 0xFF	; 255
     abe:	84 e3       	ldi	r24, 0x34	; 52
     ac0:	9c e0       	ldi	r25, 0x0C	; 12
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	80 40       	sbci	r24, 0x00	; 0
     ac6:	90 40       	sbci	r25, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <Lcd_Init+0x28>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <Lcd_Init+0x32>
     acc:	00 00       	nop
			_delay_ms(500);
			lcd_backlight(1);
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 81 09 	call	0x1302	; 0x1302 <lcd_backlight>
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	84 e3       	ldi	r24, 0x34	; 52
     ad8:	9c e0       	ldi	r25, 0x0C	; 12
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <Lcd_Init+0x40>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <Lcd_Init+0x4a>
     ae4:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
     ae6:	0e 94 cf 08 	call	0x119e	; 0x119e <lcd_clrscr>
			//////////////////////////////////////////////////////////////////////////
			break;
     aea:	08 95       	ret
		default:
			Error_Error("Lcd_Init: LcdType Notsupported");
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     af4:	08 95       	ret

00000af6 <Lcd_ClearScreen>:
	}
}
void Lcd_ClearScreen(int_fast8_t lcdType)
{
	switch(lcdType)
     af6:	88 23       	and	r24, r24
     af8:	19 f0       	breq	.+6      	; 0xb00 <Lcd_ClearScreen+0xa>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	21 f0       	breq	.+8      	; 0xb06 <Lcd_ClearScreen+0x10>
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <Lcd_ClearScreen+0x16>
	{
		case LCDKEYPAD:
			Lcd4_Clear();
     b00:	0e 94 97 07 	call	0xf2e	; 0xf2e <Lcd4_Clear>
			break;
     b04:	08 95       	ret
		case LCDNOTICE:
			lcd_clrscr();
     b06:	0e 94 cf 08 	call	0x119e	; 0x119e <lcd_clrscr>
			break;
     b0a:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     b0c:	85 e2       	ldi	r24, 0x25	; 37
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     b14:	08 95       	ret

00000b16 <Lcd_Prints>:
	}
}
void Lcd_Prints(int_fast8_t lcdType ,const char * s)
{
	switch(lcdType)
     b16:	88 23       	and	r24, r24
     b18:	19 f0       	breq	.+6      	; 0xb20 <Lcd_Prints+0xa>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	29 f0       	breq	.+10     	; 0xb28 <Lcd_Prints+0x12>
     b1e:	08 c0       	rjmp	.+16     	; 0xb30 <Lcd_Prints+0x1a>
	{
		case LCDKEYPAD:
			Lcd4_Write_String(s);
     b20:	cb 01       	movw	r24, r22
     b22:	0e 94 34 08 	call	0x1068	; 0x1068 <Lcd4_Write_String>
			break;
     b26:	08 95       	ret
		case LCDNOTICE:
			lcd_puts(s);
     b28:	cb 01       	movw	r24, r22
     b2a:	0e 94 01 09 	call	0x1202	; 0x1202 <lcd_puts>
			break;
     b2e:	08 95       	ret
		default:
			Error_Error("Lcd_ClearScreen: LcdType Not supported");
     b30:	85 e2       	ldi	r24, 0x25	; 37
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     b38:	08 95       	ret

00000b3a <Lcd_Position>:
	}
}
void Lcd_Position(int_fast8_t lcdType,int x,int y)
{
     b3a:	96 2f       	mov	r25, r22
	switch(lcdType)
     b3c:	88 23       	and	r24, r24
     b3e:	19 f0       	breq	.+6      	; 0xb46 <Lcd_Position+0xc>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	31 f0       	breq	.+12     	; 0xb50 <Lcd_Position+0x16>
     b44:	09 c0       	rjmp	.+18     	; 0xb58 <Lcd_Position+0x1e>
	{
		case LCDKEYPAD:
			Lcd4_Set_Cursor(x,y);
     b46:	64 2f       	mov	r22, r20
     b48:	89 2f       	mov	r24, r25
     b4a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Lcd4_Set_Cursor>
		break;
     b4e:	08 95       	ret
		case LCDNOTICE:
			lcd_gotoxy(y,x);
     b50:	84 2f       	mov	r24, r20
     b52:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_gotoxy>
		break;
     b56:	08 95       	ret
		default:
			Error_Error("Lcd_Position: LcdType Not supported");
     b58:	8c e4       	ldi	r24, 0x4C	; 76
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
     b60:	08 95       	ret

00000b62 <Lcd_Printc>:
	}
}
void Lcd_Printc(int_fast8_t lcdType ,const char c)
{
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <Lcd_Printc+0x6>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	char s[] = {c,0};
     b6c:	69 83       	std	Y+1, r22	; 0x01
     b6e:	1a 82       	std	Y+2, r1	; 0x02
	Lcd_Prints(lcdType , s);
     b70:	be 01       	movw	r22, r28
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <Lcd_PrintLine>:
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	f8 2e       	mov	r15, r24
     b90:	ea 01       	movw	r28, r20
	Lcd_Position(lcdType , row , 0);
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	int i =0;
	while (str[i])
     b9a:	68 81       	ld	r22, Y
     b9c:	66 23       	and	r22, r22
     b9e:	91 f0       	breq	.+36     	; 0xbc4 <Lcd_PrintLine+0x40>
     ba0:	8e 01       	movw	r16, r28
     ba2:	0f 5f       	subi	r16, 0xFF	; 255
     ba4:	1f 4f       	sbci	r17, 0xFF	; 255
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Lcd_Printc(lcdType , str[i++]);
     baa:	21 96       	adiw	r28, 0x01	; 1
     bac:	8f 2d       	mov	r24, r15
     bae:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd_Printc>
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
	while (str[i])
     bb2:	f8 01       	movw	r30, r16
     bb4:	61 91       	ld	r22, Z+
     bb6:	8f 01       	movw	r16, r30
     bb8:	61 11       	cpse	r22, r1
     bba:	f7 cf       	rjmp	.-18     	; 0xbaa <Lcd_PrintLine+0x26>
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     bbc:	c0 31       	cpi	r28, 0x10	; 16
     bbe:	d1 05       	cpc	r29, r1
     bc0:	1c f0       	brlt	.+6      	; 0xbc8 <Lcd_PrintLine+0x44>
     bc2:	0a c0       	rjmp	.+20     	; 0xbd8 <Lcd_PrintLine+0x54>
	Lcd_Prints(lcdType , s);
}
void Lcd_PrintLine(int_fast8_t lcdType , int row , char * str)
{
	Lcd_Position(lcdType , row , 0);
	int i =0;
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
		Lcd_Printc(lcdType , ' '),i++;
     bc8:	60 e2       	ldi	r22, 0x20	; 32
     bca:	8f 2d       	mov	r24, r15
     bcc:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd_Printc>
     bd0:	21 96       	adiw	r28, 0x01	; 1
	int i =0;
	while (str[i])
	{
		Lcd_Printc(lcdType , str[i++]);
	}
	while(i<16)
     bd2:	c0 31       	cpi	r28, 0x10	; 16
     bd4:	d1 05       	cpc	r29, r1
     bd6:	c4 f3       	brlt	.-16     	; 0xbc8 <Lcd_PrintLine+0x44>
		Lcd_Printc(lcdType , ' '),i++;
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	08 95       	ret

00000be4 <pinChange>:
#include "lcd_4bit.h"

void pinChange(int a, int b)
{
	if(b == 0)
     be4:	67 2b       	or	r22, r23
     be6:	09 f0       	breq	.+2      	; 0xbea <pinChange+0x6>
     be8:	9f c0       	rjmp	.+318    	; 0xd28 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	11 f4       	brne	.+4      	; 0xbf2 <pinChange+0xe>
		PORTA &= ~(1<<PA0);
     bee:	d8 98       	cbi	0x1b, 0	; 27
     bf0:	08 95       	ret
		else if(a == eS_PORTA1)
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	91 05       	cpc	r25, r1
     bf6:	11 f4       	brne	.+4      	; 0xbfc <pinChange+0x18>
		PORTA &= ~(1<<PA1);
     bf8:	d9 98       	cbi	0x1b, 1	; 27
     bfa:	08 95       	ret
		else if(a == eS_PORTA2)
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	91 05       	cpc	r25, r1
     c00:	11 f4       	brne	.+4      	; 0xc06 <pinChange+0x22>
		PORTA &= ~(1<<PA2);
     c02:	da 98       	cbi	0x1b, 2	; 27
     c04:	08 95       	ret
		else if(a == eS_PORTA3)
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	91 05       	cpc	r25, r1
     c0a:	11 f4       	brne	.+4      	; 0xc10 <pinChange+0x2c>
		PORTA &= ~(1<<PA3);
     c0c:	db 98       	cbi	0x1b, 3	; 27
     c0e:	08 95       	ret
		else if(a == eS_PORTA4)
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	91 05       	cpc	r25, r1
     c14:	11 f4       	brne	.+4      	; 0xc1a <pinChange+0x36>
		PORTA &= ~(1<<PA4);
     c16:	dc 98       	cbi	0x1b, 4	; 27
     c18:	08 95       	ret
		else if(a == eS_PORTA5)
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	91 05       	cpc	r25, r1
     c1e:	11 f4       	brne	.+4      	; 0xc24 <pinChange+0x40>
		PORTA &= ~(1<<PA5);
     c20:	dd 98       	cbi	0x1b, 5	; 27
     c22:	08 95       	ret
		else if(a == eS_PORTA6)
     c24:	86 30       	cpi	r24, 0x06	; 6
     c26:	91 05       	cpc	r25, r1
     c28:	11 f4       	brne	.+4      	; 0xc2e <pinChange+0x4a>
		PORTA &= ~(1<<PA6);
     c2a:	de 98       	cbi	0x1b, 6	; 27
     c2c:	08 95       	ret
		else if(a == eS_PORTA7)
     c2e:	87 30       	cpi	r24, 0x07	; 7
     c30:	91 05       	cpc	r25, r1
     c32:	11 f4       	brne	.+4      	; 0xc38 <pinChange+0x54>
		PORTA &= ~(1<<PA7);
     c34:	df 98       	cbi	0x1b, 7	; 27
     c36:	08 95       	ret
		else if(a == eS_PORTB0)
     c38:	8a 30       	cpi	r24, 0x0A	; 10
     c3a:	91 05       	cpc	r25, r1
     c3c:	11 f4       	brne	.+4      	; 0xc42 <pinChange+0x5e>
		PORTB &= ~(1<<PB0);
     c3e:	c0 98       	cbi	0x18, 0	; 24
     c40:	08 95       	ret
		else if(a == eS_PORTB1)
     c42:	8b 30       	cpi	r24, 0x0B	; 11
     c44:	91 05       	cpc	r25, r1
     c46:	11 f4       	brne	.+4      	; 0xc4c <pinChange+0x68>
		PORTB &= ~(1<<PB1);
     c48:	c1 98       	cbi	0x18, 1	; 24
     c4a:	08 95       	ret
		else if(a == eS_PORTB2)
     c4c:	8c 30       	cpi	r24, 0x0C	; 12
     c4e:	91 05       	cpc	r25, r1
     c50:	11 f4       	brne	.+4      	; 0xc56 <pinChange+0x72>
		PORTB &= ~(1<<PB2);
     c52:	c2 98       	cbi	0x18, 2	; 24
     c54:	08 95       	ret
		else if(a == eS_PORTB3)
     c56:	8d 30       	cpi	r24, 0x0D	; 13
     c58:	91 05       	cpc	r25, r1
     c5a:	11 f4       	brne	.+4      	; 0xc60 <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
     c5c:	c3 98       	cbi	0x18, 3	; 24
     c5e:	08 95       	ret
		else if(a == eS_PORTB4)
     c60:	8e 30       	cpi	r24, 0x0E	; 14
     c62:	91 05       	cpc	r25, r1
     c64:	11 f4       	brne	.+4      	; 0xc6a <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     c66:	c4 98       	cbi	0x18, 4	; 24
     c68:	08 95       	ret
		else if(a == eS_PORTB5)
     c6a:	8f 30       	cpi	r24, 0x0F	; 15
     c6c:	91 05       	cpc	r25, r1
     c6e:	11 f4       	brne	.+4      	; 0xc74 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     c70:	c5 98       	cbi	0x18, 5	; 24
     c72:	08 95       	ret
		else if(a == eS_PORTB6)
     c74:	80 31       	cpi	r24, 0x10	; 16
     c76:	91 05       	cpc	r25, r1
     c78:	11 f4       	brne	.+4      	; 0xc7e <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     c7a:	c6 98       	cbi	0x18, 6	; 24
     c7c:	08 95       	ret
		else if(a == eS_PORTB7)
     c7e:	81 31       	cpi	r24, 0x11	; 17
     c80:	91 05       	cpc	r25, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     c84:	c7 98       	cbi	0x18, 7	; 24
     c86:	08 95       	ret
		else if(a == eS_PORTC0)
     c88:	84 31       	cpi	r24, 0x14	; 20
     c8a:	91 05       	cpc	r25, r1
     c8c:	11 f4       	brne	.+4      	; 0xc92 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     c8e:	a8 98       	cbi	0x15, 0	; 21
     c90:	08 95       	ret
		else if(a == eS_PORTC1)
     c92:	85 31       	cpi	r24, 0x15	; 21
     c94:	91 05       	cpc	r25, r1
     c96:	11 f4       	brne	.+4      	; 0xc9c <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     c98:	a9 98       	cbi	0x15, 1	; 21
     c9a:	08 95       	ret
		else if(a == eS_PORTC2)
     c9c:	86 31       	cpi	r24, 0x16	; 22
     c9e:	91 05       	cpc	r25, r1
     ca0:	11 f4       	brne	.+4      	; 0xca6 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     ca2:	aa 98       	cbi	0x15, 2	; 21
     ca4:	08 95       	ret
		else if(a == eS_PORTC3)
     ca6:	87 31       	cpi	r24, 0x17	; 23
     ca8:	91 05       	cpc	r25, r1
     caa:	11 f4       	brne	.+4      	; 0xcb0 <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     cac:	ab 98       	cbi	0x15, 3	; 21
     cae:	08 95       	ret
		else if(a == eS_PORTC4)
     cb0:	88 31       	cpi	r24, 0x18	; 24
     cb2:	91 05       	cpc	r25, r1
     cb4:	11 f4       	brne	.+4      	; 0xcba <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     cb6:	ac 98       	cbi	0x15, 4	; 21
     cb8:	08 95       	ret
		else if(a == eS_PORTC5)
     cba:	89 31       	cpi	r24, 0x19	; 25
     cbc:	91 05       	cpc	r25, r1
     cbe:	11 f4       	brne	.+4      	; 0xcc4 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     cc0:	ad 98       	cbi	0x15, 5	; 21
     cc2:	08 95       	ret
		else if(a == eS_PORTC6)
     cc4:	8a 31       	cpi	r24, 0x1A	; 26
     cc6:	91 05       	cpc	r25, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     cca:	ae 98       	cbi	0x15, 6	; 21
     ccc:	08 95       	ret
		else if(a == eS_PORTC7)
     cce:	8b 31       	cpi	r24, 0x1B	; 27
     cd0:	91 05       	cpc	r25, r1
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     cd4:	af 98       	cbi	0x15, 7	; 21
     cd6:	08 95       	ret
		else if(a == eS_PORTD0)
     cd8:	8e 31       	cpi	r24, 0x1E	; 30
     cda:	91 05       	cpc	r25, r1
     cdc:	11 f4       	brne	.+4      	; 0xce2 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     cde:	90 98       	cbi	0x12, 0	; 18
     ce0:	08 95       	ret
		else if(a == eS_PORTD1)
     ce2:	8f 31       	cpi	r24, 0x1F	; 31
     ce4:	91 05       	cpc	r25, r1
     ce6:	11 f4       	brne	.+4      	; 0xcec <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     ce8:	91 98       	cbi	0x12, 1	; 18
     cea:	08 95       	ret
		else if(a == eS_PORTD2)
     cec:	80 32       	cpi	r24, 0x20	; 32
     cee:	91 05       	cpc	r25, r1
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     cf2:	92 98       	cbi	0x12, 2	; 18
     cf4:	08 95       	ret
		else if(a == eS_PORTD3)
     cf6:	81 32       	cpi	r24, 0x21	; 33
     cf8:	91 05       	cpc	r25, r1
     cfa:	11 f4       	brne	.+4      	; 0xd00 <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     cfc:	93 98       	cbi	0x12, 3	; 18
     cfe:	08 95       	ret
		else if(a == eS_PORTD4)
     d00:	82 32       	cpi	r24, 0x22	; 34
     d02:	91 05       	cpc	r25, r1
     d04:	11 f4       	brne	.+4      	; 0xd0a <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     d06:	94 98       	cbi	0x12, 4	; 18
     d08:	08 95       	ret
		else if(a == eS_PORTD5)
     d0a:	83 32       	cpi	r24, 0x23	; 35
     d0c:	91 05       	cpc	r25, r1
     d0e:	11 f4       	brne	.+4      	; 0xd14 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     d10:	95 98       	cbi	0x12, 5	; 18
     d12:	08 95       	ret
		else if(a == eS_PORTD6)
     d14:	84 32       	cpi	r24, 0x24	; 36
     d16:	91 05       	cpc	r25, r1
     d18:	11 f4       	brne	.+4      	; 0xd1e <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     d1a:	96 98       	cbi	0x12, 6	; 18
     d1c:	08 95       	ret
		else if(a == eS_PORTD7)
     d1e:	85 97       	sbiw	r24, 0x25	; 37
     d20:	09 f0       	breq	.+2      	; 0xd24 <pinChange+0x140>
     d22:	9f c0       	rjmp	.+318    	; 0xe62 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     d24:	97 98       	cbi	0x12, 7	; 18
     d26:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	11 f4       	brne	.+4      	; 0xd30 <pinChange+0x14c>
		PORTA |= (1<<PA0);
     d2c:	d8 9a       	sbi	0x1b, 0	; 27
     d2e:	08 95       	ret
		else if(a == eS_PORTA1)
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	11 f4       	brne	.+4      	; 0xd3a <pinChange+0x156>
		PORTA |= (1<<PA1);
     d36:	d9 9a       	sbi	0x1b, 1	; 27
     d38:	08 95       	ret
		else if(a == eS_PORTA2)
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	91 05       	cpc	r25, r1
     d3e:	11 f4       	brne	.+4      	; 0xd44 <pinChange+0x160>
		PORTA |= (1<<PA2);
     d40:	da 9a       	sbi	0x1b, 2	; 27
     d42:	08 95       	ret
		else if(a == eS_PORTA3)
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	91 05       	cpc	r25, r1
     d48:	11 f4       	brne	.+4      	; 0xd4e <pinChange+0x16a>
		PORTA |= (1<<PA3);
     d4a:	db 9a       	sbi	0x1b, 3	; 27
     d4c:	08 95       	ret
		else if(a == eS_PORTA4)
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	91 05       	cpc	r25, r1
     d52:	11 f4       	brne	.+4      	; 0xd58 <pinChange+0x174>
		PORTA |= (1<<PA4);
     d54:	dc 9a       	sbi	0x1b, 4	; 27
     d56:	08 95       	ret
		else if(a == eS_PORTA5)
     d58:	85 30       	cpi	r24, 0x05	; 5
     d5a:	91 05       	cpc	r25, r1
     d5c:	11 f4       	brne	.+4      	; 0xd62 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     d5e:	dd 9a       	sbi	0x1b, 5	; 27
     d60:	08 95       	ret
		else if(a == eS_PORTA6)
     d62:	86 30       	cpi	r24, 0x06	; 6
     d64:	91 05       	cpc	r25, r1
     d66:	11 f4       	brne	.+4      	; 0xd6c <pinChange+0x188>
		PORTA |= (1<<PA6);
     d68:	de 9a       	sbi	0x1b, 6	; 27
     d6a:	08 95       	ret
		else if(a == eS_PORTA7)
     d6c:	87 30       	cpi	r24, 0x07	; 7
     d6e:	91 05       	cpc	r25, r1
     d70:	11 f4       	brne	.+4      	; 0xd76 <pinChange+0x192>
		PORTA |= (1<<PA7);
     d72:	df 9a       	sbi	0x1b, 7	; 27
     d74:	08 95       	ret
		else if(a == eS_PORTB0)
     d76:	8a 30       	cpi	r24, 0x0A	; 10
     d78:	91 05       	cpc	r25, r1
     d7a:	11 f4       	brne	.+4      	; 0xd80 <pinChange+0x19c>
		PORTB |= (1<<PB0);
     d7c:	c0 9a       	sbi	0x18, 0	; 24
     d7e:	08 95       	ret
		else if(a == eS_PORTB1)
     d80:	8b 30       	cpi	r24, 0x0B	; 11
     d82:	91 05       	cpc	r25, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     d86:	c1 9a       	sbi	0x18, 1	; 24
     d88:	08 95       	ret
		else if(a == eS_PORTB2)
     d8a:	8c 30       	cpi	r24, 0x0C	; 12
     d8c:	91 05       	cpc	r25, r1
     d8e:	11 f4       	brne	.+4      	; 0xd94 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     d90:	c2 9a       	sbi	0x18, 2	; 24
     d92:	08 95       	ret
		else if(a == eS_PORTB3)
     d94:	8d 30       	cpi	r24, 0x0D	; 13
     d96:	91 05       	cpc	r25, r1
     d98:	11 f4       	brne	.+4      	; 0xd9e <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     d9a:	c3 9a       	sbi	0x18, 3	; 24
     d9c:	08 95       	ret
		else if(a == eS_PORTB4)
     d9e:	8e 30       	cpi	r24, 0x0E	; 14
     da0:	91 05       	cpc	r25, r1
     da2:	11 f4       	brne	.+4      	; 0xda8 <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     da4:	c4 9a       	sbi	0x18, 4	; 24
     da6:	08 95       	ret
		else if(a == eS_PORTB5)
     da8:	8f 30       	cpi	r24, 0x0F	; 15
     daa:	91 05       	cpc	r25, r1
     dac:	11 f4       	brne	.+4      	; 0xdb2 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     dae:	c5 9a       	sbi	0x18, 5	; 24
     db0:	08 95       	ret
		else if(a == eS_PORTB6)
     db2:	80 31       	cpi	r24, 0x10	; 16
     db4:	91 05       	cpc	r25, r1
     db6:	11 f4       	brne	.+4      	; 0xdbc <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     db8:	c6 9a       	sbi	0x18, 6	; 24
     dba:	08 95       	ret
		else if(a == eS_PORTB7)
     dbc:	81 31       	cpi	r24, 0x11	; 17
     dbe:	91 05       	cpc	r25, r1
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     dc2:	c7 9a       	sbi	0x18, 7	; 24
     dc4:	08 95       	ret
		else if(a == eS_PORTC0)
     dc6:	84 31       	cpi	r24, 0x14	; 20
     dc8:	91 05       	cpc	r25, r1
     dca:	11 f4       	brne	.+4      	; 0xdd0 <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     dcc:	a8 9a       	sbi	0x15, 0	; 21
     dce:	08 95       	ret
		else if(a == eS_PORTC1)
     dd0:	85 31       	cpi	r24, 0x15	; 21
     dd2:	91 05       	cpc	r25, r1
     dd4:	11 f4       	brne	.+4      	; 0xdda <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     dd6:	a9 9a       	sbi	0x15, 1	; 21
     dd8:	08 95       	ret
		else if(a == eS_PORTC2)
     dda:	86 31       	cpi	r24, 0x16	; 22
     ddc:	91 05       	cpc	r25, r1
     dde:	11 f4       	brne	.+4      	; 0xde4 <pinChange+0x200>
		PORTC |= (1<<PC2);
     de0:	aa 9a       	sbi	0x15, 2	; 21
     de2:	08 95       	ret
		else if(a == eS_PORTC3)
     de4:	87 31       	cpi	r24, 0x17	; 23
     de6:	91 05       	cpc	r25, r1
     de8:	11 f4       	brne	.+4      	; 0xdee <pinChange+0x20a>
		PORTC |= (1<<PC3);
     dea:	ab 9a       	sbi	0x15, 3	; 21
     dec:	08 95       	ret
		else if(a == eS_PORTC4)
     dee:	88 31       	cpi	r24, 0x18	; 24
     df0:	91 05       	cpc	r25, r1
     df2:	11 f4       	brne	.+4      	; 0xdf8 <pinChange+0x214>
		PORTC |= (1<<PC4);
     df4:	ac 9a       	sbi	0x15, 4	; 21
     df6:	08 95       	ret
		else if(a == eS_PORTC5)
     df8:	89 31       	cpi	r24, 0x19	; 25
     dfa:	91 05       	cpc	r25, r1
     dfc:	11 f4       	brne	.+4      	; 0xe02 <pinChange+0x21e>
		PORTC |= (1<<PC5);
     dfe:	ad 9a       	sbi	0x15, 5	; 21
     e00:	08 95       	ret
		else if(a == eS_PORTC6)
     e02:	8a 31       	cpi	r24, 0x1A	; 26
     e04:	91 05       	cpc	r25, r1
     e06:	11 f4       	brne	.+4      	; 0xe0c <pinChange+0x228>
		PORTC |= (1<<PC6);
     e08:	ae 9a       	sbi	0x15, 6	; 21
     e0a:	08 95       	ret
		else if(a == eS_PORTC7)
     e0c:	8b 31       	cpi	r24, 0x1B	; 27
     e0e:	91 05       	cpc	r25, r1
     e10:	11 f4       	brne	.+4      	; 0xe16 <pinChange+0x232>
		PORTC |= (1<<PC7);
     e12:	af 9a       	sbi	0x15, 7	; 21
     e14:	08 95       	ret
		else if(a == eS_PORTD0)
     e16:	8e 31       	cpi	r24, 0x1E	; 30
     e18:	91 05       	cpc	r25, r1
     e1a:	11 f4       	brne	.+4      	; 0xe20 <pinChange+0x23c>
		PORTD |= (1<<PD0);
     e1c:	90 9a       	sbi	0x12, 0	; 18
     e1e:	08 95       	ret
		else if(a == eS_PORTD1)
     e20:	8f 31       	cpi	r24, 0x1F	; 31
     e22:	91 05       	cpc	r25, r1
     e24:	11 f4       	brne	.+4      	; 0xe2a <pinChange+0x246>
		PORTD |= (1<<PD1);
     e26:	91 9a       	sbi	0x12, 1	; 18
     e28:	08 95       	ret
		else if(a == eS_PORTD2)
     e2a:	80 32       	cpi	r24, 0x20	; 32
     e2c:	91 05       	cpc	r25, r1
     e2e:	11 f4       	brne	.+4      	; 0xe34 <pinChange+0x250>
		PORTD |= (1<<PD2);
     e30:	92 9a       	sbi	0x12, 2	; 18
     e32:	08 95       	ret
		else if(a == eS_PORTD3)
     e34:	81 32       	cpi	r24, 0x21	; 33
     e36:	91 05       	cpc	r25, r1
     e38:	11 f4       	brne	.+4      	; 0xe3e <pinChange+0x25a>
		PORTD |= (1<<PD3);
     e3a:	93 9a       	sbi	0x12, 3	; 18
     e3c:	08 95       	ret
		else if(a == eS_PORTD4)
     e3e:	82 32       	cpi	r24, 0x22	; 34
     e40:	91 05       	cpc	r25, r1
     e42:	11 f4       	brne	.+4      	; 0xe48 <pinChange+0x264>
		PORTD |= (1<<PD4);
     e44:	94 9a       	sbi	0x12, 4	; 18
     e46:	08 95       	ret
		else if(a == eS_PORTD5)
     e48:	83 32       	cpi	r24, 0x23	; 35
     e4a:	91 05       	cpc	r25, r1
     e4c:	11 f4       	brne	.+4      	; 0xe52 <pinChange+0x26e>
		PORTD |= (1<<PD5);
     e4e:	95 9a       	sbi	0x12, 5	; 18
     e50:	08 95       	ret
		else if(a == eS_PORTD6)
     e52:	84 32       	cpi	r24, 0x24	; 36
     e54:	91 05       	cpc	r25, r1
     e56:	11 f4       	brne	.+4      	; 0xe5c <pinChange+0x278>
		PORTD |= (1<<PD6);
     e58:	96 9a       	sbi	0x12, 6	; 18
     e5a:	08 95       	ret
		else if(a == eS_PORTD7)
     e5c:	85 97       	sbiw	r24, 0x25	; 37
     e5e:	09 f4       	brne	.+2      	; 0xe62 <pinChange+0x27e>
		PORTD |= (1<<PD7);
     e60:	97 9a       	sbi	0x12, 7	; 18
     e62:	08 95       	ret

00000e64 <Lcd4_Port>:
	}
}

void Lcd4_Port(char a)
{
     e64:	cf 93       	push	r28
     e66:	c8 2f       	mov	r28, r24
	if(a & 1)
     e68:	80 ff       	sbrs	r24, 0
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <Lcd4_Port+0x16>
	pinChange(D4,1);
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	83 e2       	ldi	r24, 0x23	; 35
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	83 e2       	ldi	r24, 0x23	; 35
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
	
	if(a & 2)
     e86:	c1 ff       	sbrs	r28, 1
     e88:	07 c0       	rjmp	.+14     	; 0xe98 <Lcd4_Port+0x34>
	pinChange(D5,1);
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	82 e2       	ldi	r24, 0x22	; 34
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	82 e2       	ldi	r24, 0x22	; 34
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
	
	if(a & 4)
     ea4:	c2 ff       	sbrs	r28, 2
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <Lcd4_Port+0x52>
	pinChange(D6,1);
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	81 e2       	ldi	r24, 0x21	; 33
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	81 e2       	ldi	r24, 0x21	; 33
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
	
	if(a & 8)
     ec2:	c3 ff       	sbrs	r28, 3
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <Lcd4_Port+0x70>
	pinChange(D7,1);
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
}
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     ee4:	cf 93       	push	r28
     ee6:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	85 e2       	ldi	r24, 0x25	; 37
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
	Lcd4_Port(a);
     ef4:	8c 2f       	mov	r24, r28
     ef6:	0e 94 32 07 	call	0xe64	; 0xe64 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	84 e2       	ldi	r24, 0x24	; 36
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
     f06:	8f ec       	ldi	r24, 0xCF	; 207
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <Lcd4_Cmd+0x26>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <Lcd4_Cmd+0x2c>
     f10:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	84 e2       	ldi	r24, 0x24	; 36
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
     f1e:	8f ec       	ldi	r24, 0xCF	; 207
     f20:	97 e0       	ldi	r25, 0x07	; 7
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <Lcd4_Cmd+0x3e>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <Lcd4_Cmd+0x44>
     f28:	00 00       	nop
	_delay_ms(1);
}
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
     f3a:	08 95       	ret

00000f3c <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     f3c:	cf 93       	push	r28
     f3e:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 0)
     f40:	81 11       	cpse	r24, r1
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     f44:	80 e8       	ldi	r24, 0x80	; 128
     f46:	86 0f       	add	r24, r22
     f48:	82 95       	swap	r24
     f4a:	8f 70       	andi	r24, 0x0F	; 15
     f4c:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f50:	8c 2f       	mov	r24, r28
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
     f58:	0c c0       	rjmp	.+24     	; 0xf72 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 1)
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	51 f4       	brne	.+20     	; 0xf72 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     f5e:	80 ec       	ldi	r24, 0xC0	; 192
     f60:	86 0f       	add	r24, r22
     f62:	82 95       	swap	r24
     f64:	8f 70       	andi	r24, 0x0F	; 15
     f66:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     f6a:	8c 2f       	mov	r24, r28
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	}
}
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 32 07 	call	0xe64	; 0xe64 <Lcd4_Port>
     f7c:	8f e3       	ldi	r24, 0x3F	; 63
     f7e:	9c e9       	ldi	r25, 0x9C	; 156
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <Lcd4_Init+0xa>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <Lcd4_Init+0x10>
     f86:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
     f8e:	8f e0       	ldi	r24, 0x0F	; 15
     f90:	97 e2       	ldi	r25, 0x27	; 39
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <Lcd4_Init+0x1c>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <Lcd4_Init+0x22>
     f98:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
     fa0:	8f ee       	ldi	r24, 0xEF	; 239
     fa2:	95 e5       	ldi	r25, 0x55	; 85
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <Lcd4_Init+0x2e>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <Lcd4_Init+0x34>
     faa:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     fca:	8c e0       	ldi	r24, 0x0C	; 12
     fcc:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     fd6:	86 e0       	ldi	r24, 0x06	; 6
     fd8:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd4_Cmd>
	Lcd4_Clear();
     fdc:	0e 94 97 07 	call	0xf2e	; 0xf2e <Lcd4_Clear>
     fe0:	08 95       	ret

00000fe2 <Lcd4_Write_Char>:
}


void Lcd4_Write_Char(char a)
{
     fe2:	cf 93       	push	r28
     fe4:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	85 e2       	ldi	r24, 0x25	; 37
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     ff2:	8c 2f       	mov	r24, r28
     ff4:	82 95       	swap	r24
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	0e 94 32 07 	call	0xe64	; 0xe64 <Lcd4_Port>
	pinChange(EN,1);
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	84 e2       	ldi	r24, 0x24	; 36
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
    1008:	8f ec       	ldi	r24, 0xCF	; 207
    100a:	97 e0       	ldi	r25, 0x07	; 7
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <Lcd4_Write_Char+0x2a>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <Lcd4_Write_Char+0x30>
    1012:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	84 e2       	ldi	r24, 0x24	; 36
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
    1020:	8f ec       	ldi	r24, 0xCF	; 207
    1022:	97 e0       	ldi	r25, 0x07	; 7
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <Lcd4_Write_Char+0x42>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <Lcd4_Write_Char+0x48>
    102a:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
    102c:	8c 2f       	mov	r24, r28
    102e:	8f 70       	andi	r24, 0x0F	; 15
    1030:	0e 94 32 07 	call	0xe64	; 0xe64 <Lcd4_Port>
	pinChange(EN,1);
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	84 e2       	ldi	r24, 0x24	; 36
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
    1040:	8f ec       	ldi	r24, 0xCF	; 207
    1042:	97 e0       	ldi	r25, 0x07	; 7
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <Lcd4_Write_Char+0x62>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <Lcd4_Write_Char+0x68>
    104a:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	84 e2       	ldi	r24, 0x24	; 36
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <pinChange>
    1058:	8f ec       	ldi	r24, 0xCF	; 207
    105a:	97 e0       	ldi	r25, 0x07	; 7
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <Lcd4_Write_Char+0x7a>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <Lcd4_Write_Char+0x80>
    1062:	00 00       	nop
	_delay_ms(1);
}
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <Lcd4_Write_String>:

void Lcd4_Write_String(const char *a)
{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    106e:	88 81       	ld	r24, Y
    1070:	88 23       	and	r24, r24
    1072:	31 f0       	breq	.+12     	; 0x1080 <Lcd4_Write_String+0x18>
    1074:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
    1076:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Lcd4_Write_Char>
}

void Lcd4_Write_String(const char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    107a:	89 91       	ld	r24, Y+
    107c:	81 11       	cpse	r24, r1
    107e:	fb cf       	rjmp	.-10     	; 0x1076 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	7b 01       	movw	r14, r22
    1094:	14 2f       	mov	r17, r20
    1096:	88 0f       	add	r24, r24
    1098:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <i2c_start>
    109c:	81 11       	cpse	r24, r1
    109e:	12 c0       	rjmp	.+36     	; 0x10c4 <I2C_WRITESEQ+0x3e>
    10a0:	11 23       	and	r17, r17
    10a2:	91 f0       	breq	.+36     	; 0x10c8 <I2C_WRITESEQ+0x42>
    10a4:	e7 01       	movw	r28, r14
    10a6:	11 50       	subi	r17, 0x01	; 1
    10a8:	01 2f       	mov	r16, r17
    10aa:	10 e0       	ldi	r17, 0x00	; 0
    10ac:	0f 5f       	subi	r16, 0xFF	; 255
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	0e 0d       	add	r16, r14
    10b2:	1f 1d       	adc	r17, r15
    10b4:	89 91       	ld	r24, Y+
    10b6:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <i2c_write>
    10ba:	c0 17       	cp	r28, r16
    10bc:	d1 07       	cpc	r29, r17
    10be:	d1 f7       	brne	.-12     	; 0x10b4 <I2C_WRITESEQ+0x2e>
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <I2C_WRITESEQ+0x44>
    10c4:	c1 e0       	ldi	r28, 0x01	; 1
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <I2C_WRITESEQ+0x44>
    10c8:	c0 e0       	ldi	r28, 0x00	; 0
    10ca:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <i2c_stop>
    10ce:	8c 2f       	mov	r24, r28
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	08 95       	ret

000010de <wr_lcd_mode>:
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <wr_lcd_mode+0xa>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <wr_lcd_mode+0xc>
    10ea:	1f 92       	push	r1
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	08 2f       	mov	r16, r24
    10f2:	68 30       	cpi	r22, 0x08	; 8
    10f4:	71 f4       	brne	.+28     	; 0x1112 <wr_lcd_mode+0x34>
    10f6:	81 11       	cpse	r24, r1
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <wr_lcd_mode+0x20>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <wr_lcd_mode+0x22>
    10fe:	88 e0       	ldi	r24, 0x08	; 8
    1100:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <backlight.1943>
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	66 e6       	ldi	r22, 0x66	; 102
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	87 e2       	ldi	r24, 0x27	; 39
    110c:	0e 94 43 08 	call	0x1086	; 0x1086 <I2C_WRITESEQ>
    1110:	26 c0       	rjmp	.+76     	; 0x115e <wr_lcd_mode+0x80>
    1112:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <backlight.1943>
    1116:	16 2f       	mov	r17, r22
    1118:	18 2b       	or	r17, r24
    111a:	19 83       	std	Y+1, r17	; 0x01
    111c:	80 2f       	mov	r24, r16
    111e:	80 7f       	andi	r24, 0xF0	; 240
    1120:	84 60       	ori	r24, 0x04	; 4
    1122:	81 2b       	or	r24, r17
    1124:	8a 83       	std	Y+2, r24	; 0x02
    1126:	8b 7f       	andi	r24, 0xFB	; 251
    1128:	8b 83       	std	Y+3, r24	; 0x03
    112a:	20 e1       	ldi	r18, 0x10	; 16
    112c:	02 9f       	mul	r16, r18
    112e:	c0 01       	movw	r24, r0
    1130:	11 24       	eor	r1, r1
    1132:	81 2b       	or	r24, r17
    1134:	84 60       	ori	r24, 0x04	; 4
    1136:	8c 83       	std	Y+4, r24	; 0x04
    1138:	8b 7f       	andi	r24, 0xFB	; 251
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	45 e0       	ldi	r20, 0x05	; 5
    113e:	be 01       	movw	r22, r28
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	87 e2       	ldi	r24, 0x27	; 39
    1146:	0e 94 43 08 	call	0x1086	; 0x1086 <I2C_WRITESEQ>
    114a:	10 fd       	sbrc	r17, 0
    114c:	08 c0       	rjmp	.+16     	; 0x115e <wr_lcd_mode+0x80>
    114e:	03 30       	cpi	r16, 0x03	; 3
    1150:	30 f4       	brcc	.+12     	; 0x115e <wr_lcd_mode+0x80>
    1152:	e3 ef       	ldi	r30, 0xF3	; 243
    1154:	f1 e0       	ldi	r31, 0x01	; 1
    1156:	31 97       	sbiw	r30, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <wr_lcd_mode+0x78>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <wr_lcd_mode+0x7e>
    115c:	00 00       	nop
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <lcd_gotoxy>:
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	d8 2f       	mov	r29, r24
    1178:	c6 2f       	mov	r28, r22
    117a:	e6 2f       	mov	r30, r22
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	e9 59       	subi	r30, 0x99	; 153
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	98 2f       	mov	r25, r24
    1184:	90 68       	ori	r25, 0x80	; 128
    1186:	80 81       	ld	r24, Z
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	89 2b       	or	r24, r25
    118c:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    1190:	d0 93 ea 02 	sts	0x02EA, r29	; 0x8002ea <_lcd_x>
    1194:	c0 93 eb 02 	sts	0x02EB, r28	; 0x8002eb <_lcd_y>
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <lcd_clrscr>:
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    11a6:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_lcd_y>
    11aa:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <_lcd_x>
    11ae:	08 95       	ret

000011b0 <lcd_putc>:
    11b0:	cf 93       	push	r28
    11b2:	c8 2f       	mov	r28, r24
    11b4:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_lcd_x>
    11b8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_lcd_maxx>
    11bc:	98 17       	cp	r25, r24
    11be:	18 f4       	brcc	.+6      	; 0x11c6 <lcd_putc+0x16>
    11c0:	ca 30       	cpi	r28, 0x0A	; 10
    11c2:	59 f4       	brne	.+22     	; 0x11da <lcd_putc+0x2a>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <lcd_putc+0x3e>
    11c6:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <_lcd_y>
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <_lcd_y>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_gotoxy>
    11d6:	ca 30       	cpi	r28, 0x0A	; 10
    11d8:	91 f0       	breq	.+36     	; 0x11fe <lcd_putc+0x4e>
    11da:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_lcd_x>
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_lcd_x>
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	8c 2f       	mov	r24, r28
    11e8:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    11ec:	08 c0       	rjmp	.+16     	; 0x11fe <lcd_putc+0x4e>
    11ee:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <_lcd_y>
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <_lcd_y>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_gotoxy>
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <lcd_puts>:
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	88 81       	ld	r24, Y
    120a:	88 23       	and	r24, r24
    120c:	31 f0       	breq	.+12     	; 0x121a <lcd_puts+0x18>
    120e:	21 96       	adiw	r28, 0x01	; 1
    1210:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <lcd_putc>
    1214:	89 91       	ld	r24, Y+
    1216:	81 11       	cpse	r24, r1
    1218:	fb cf       	rjmp	.-10     	; 0x1210 <lcd_puts+0xe>
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	00 d0       	rcall	.+0      	; 0x122a <lcd_init+0xa>
    122a:	00 d0       	rcall	.+0      	; 0x122c <lcd_init+0xc>
    122c:	00 d0       	rcall	.+0      	; 0x122e <lcd_init+0xe>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
    1234:	80 e3       	ldi	r24, 0x30	; 48
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	94 e3       	ldi	r25, 0x34	; 52
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	8c 83       	std	Y+4, r24	; 0x04
    1242:	94 e2       	ldi	r25, 0x24	; 36
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
    1248:	80 e1       	ldi	r24, 0x10	; 16
    124a:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
    124e:	e7 e6       	ldi	r30, 0x67	; 103
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 5f       	subi	r24, 0xF0	; 240
    1256:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	80 5f       	subi	r24, 0xF0	; 240
    125c:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
    125e:	bd 9a       	sbi	0x17, 5	; 23
    1260:	c5 9a       	sbi	0x18, 5	; 24
    I2C_INIT();
    1262:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <i2c_init>
    1266:	8b e4       	ldi	r24, 0x4B	; 75
    1268:	9d e1       	ldi	r25, 0x1D	; 29
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <lcd_init+0x4a>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <lcd_init+0x50>
    1270:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
    1272:	43 e0       	ldi	r20, 0x03	; 3
    1274:	be 01       	movw	r22, r28
    1276:	6f 5f       	subi	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	87 e2       	ldi	r24, 0x27	; 39
    127c:	0e 94 43 08 	call	0x1086	; 0x1086 <I2C_WRITESEQ>
    1280:	18 2f       	mov	r17, r24
    1282:	81 ee       	ldi	r24, 0xE1	; 225
    1284:	94 e0       	ldi	r25, 0x04	; 4
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <lcd_init+0x66>
    128a:	00 c0       	rjmp	.+0      	; 0x128c <lcd_init+0x6c>
    128c:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    128e:	43 e0       	ldi	r20, 0x03	; 3
    1290:	be 01       	movw	r22, r28
    1292:	6f 5f       	subi	r22, 0xFF	; 255
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	87 e2       	ldi	r24, 0x27	; 39
    1298:	0e 94 43 08 	call	0x1086	; 0x1086 <I2C_WRITESEQ>
    129c:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
    129e:	43 e0       	ldi	r20, 0x03	; 3
    12a0:	be 01       	movw	r22, r28
    12a2:	6f 5f       	subi	r22, 0xFF	; 255
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	87 e2       	ldi	r24, 0x27	; 39
    12a8:	0e 94 43 08 	call	0x1086	; 0x1086 <I2C_WRITESEQ>
    12ac:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
    12ae:	43 e0       	ldi	r20, 0x03	; 3
    12b0:	be 01       	movw	r22, r28
    12b2:	6c 5f       	subi	r22, 0xFC	; 252
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	87 e2       	ldi	r24, 0x27	; 39
    12b8:	0e 94 43 08 	call	0x1086	; 0x1086 <I2C_WRITESEQ>
    12bc:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	88 e2       	ldi	r24, 0x28	; 40
    12c2:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    if (ret) { PORTB &= ~(1<<5); }
    12c6:	81 2b       	or	r24, r17
    12c8:	09 f0       	breq	.+2      	; 0x12cc <lcd_init+0xac>
    12ca:	c5 98       	cbi	0x18, 5	; 24
    wr_lcd_mode(0x0c, 0);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	8c e0       	ldi	r24, 0x0C	; 12
    12d0:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	86 e0       	ldi	r24, 0x06	; 6
    12d8:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    wr_lcd_mode(command, 0);
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	80 2f       	mov	r24, r16
    12e8:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
}
    12ec:	26 96       	adiw	r28, 0x06	; 6
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
    1302:	68 e0       	ldi	r22, 0x08	; 8
    1304:	0e 94 6f 08 	call	0x10de	; 0x10de <wr_lcd_mode>
    1308:	08 95       	ret

0000130a <Lm35_Init>:
#include "../all.h"

void Lm35_Init()
{
	ADMUX = 0b11000000; 		//internal voltage 2.56V, right-justified, input ADC0
    130a:	80 ec       	ldi	r24, 0xC0	; 192
    130c:	87 b9       	out	0x07, r24	; 7
	ADCSRA =0b10000000; 		//enable = true ,start conversion = false , auto trigger = false , 
    130e:	80 e8       	ldi	r24, 0x80	; 128
    1310:	86 b9       	out	0x06, r24	; 6
							//interrupt flag = false  ,interrupt enable = false ,  prescaler factor 2
	DDRA &= ~1;
    1312:	d0 98       	cbi	0x1a, 0	; 26
    1314:	08 95       	ret

00001316 <Lm35_GetTemp>:

float Lm35_GetTemp()
{
	float tempC, tempF, vref = 2.56;

	ADCSRA |= (1<<ADSC);
    1316:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    1318:	36 99       	sbic	0x06, 6	; 6
    131a:	fe cf       	rjmp	.-4      	; 0x1318 <Lm35_GetTemp+0x2>

	unsigned int i = ADC;
    131c:	64 b1       	in	r22, 0x04	; 4
    131e:	75 b1       	in	r23, 0x05	; 5
	tempC = (i * vref * 1000.0) / (10.0 * 1024);
	tempF = tempC * (9.0 / 5)  + 32.0;

	return tempF;
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__floatunsisf>
    1328:	2a e0       	ldi	r18, 0x0A	; 10
    132a:	37 ed       	ldi	r19, 0xD7	; 215
    132c:	43 e2       	ldi	r20, 0x23	; 35
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e7       	ldi	r20, 0x7A	; 122
    133a:	54 e4       	ldi	r21, 0x44	; 68
    133c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	56 e4       	ldi	r21, 0x46	; 70
    1348:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__divsf3>
    134c:	26 e6       	ldi	r18, 0x66	; 102
    134e:	36 e6       	ldi	r19, 0x66	; 102
    1350:	46 ee       	ldi	r20, 0xE6	; 230
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsf3>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	52 e4       	ldi	r21, 0x42	; 66
    1360:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
    1364:	08 95       	ret

00001366 <enqueue>:
}

int nextPatientSerial(struct Queue *qptr)
{
	return qptr->queue[qptr->front_num + 1].serial;
}
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8c 01       	movw	r16, r24
    1374:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <q+0x2dc>
    1378:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <q+0x2dd>
    137c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <q+0x2de>
    1380:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <q+0x2df>
    1384:	82 17       	cp	r24, r18
    1386:	93 07       	cpc	r25, r19
    1388:	74 f4       	brge	.+28     	; 0x13a6 <enqueue+0x40>
    138a:	40 e7       	ldi	r20, 0x70	; 112
    138c:	51 e0       	ldi	r21, 0x01	; 1
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    1398:	41 e8       	ldi	r20, 0x81	; 129
    139a:	51 e0       	ldi	r21, 0x01	; 1
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    13a6:	f8 01       	movw	r30, r16
    13a8:	e2 52       	subi	r30, 0x22	; 34
    13aa:	fd 4f       	sbci	r31, 0xFD	; 253
    13ac:	20 81       	ld	r18, Z
    13ae:	31 81       	ldd	r19, Z+1	; 0x01
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	31 83       	std	Z+1, r19	; 0x01
    13b6:	20 83       	st	Z, r18
    13b8:	89 e4       	ldi	r24, 0x49	; 73
    13ba:	82 9f       	mul	r24, r18
    13bc:	d0 01       	movw	r26, r0
    13be:	83 9f       	mul	r24, r19
    13c0:	b0 0d       	add	r27, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	a0 0f       	add	r26, r16
    13c6:	b1 1f       	adc	r27, r17
    13c8:	fe 01       	movw	r30, r28
    13ca:	37 96       	adiw	r30, 0x07	; 7
    13cc:	01 90       	ld	r0, Z+
    13ce:	0d 92       	st	X+, r0
    13d0:	8a 95       	dec	r24
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <enqueue+0x66>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	08 95       	ret

000013de <dequeue>:
    13de:	fc 01       	movw	r30, r24
    13e0:	e4 52       	subi	r30, 0x24	; 36
    13e2:	fd 4f       	sbci	r31, 0xFD	; 253
    13e4:	40 81       	ld	r20, Z
    13e6:	51 81       	ldd	r21, Z+1	; 0x01
    13e8:	32 96       	adiw	r30, 0x02	; 2
    13ea:	20 81       	ld	r18, Z
    13ec:	31 81       	ldd	r19, Z+1	; 0x01
    13ee:	24 17       	cp	r18, r20
    13f0:	35 07       	cpc	r19, r21
    13f2:	7c f0       	brlt	.+30     	; 0x1412 <dequeue+0x34>
    13f4:	32 97       	sbiw	r30, 0x02	; 2
    13f6:	9a 01       	movw	r18, r20
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	31 83       	std	Z+1, r19	; 0x01
    13fe:	20 83       	st	Z, r18
    1400:	69 e4       	ldi	r22, 0x49	; 73
    1402:	64 9f       	mul	r22, r20
    1404:	90 01       	movw	r18, r0
    1406:	65 9f       	mul	r22, r21
    1408:	30 0d       	add	r19, r0
    140a:	11 24       	eor	r1, r1
    140c:	82 0f       	add	r24, r18
    140e:	93 1f       	adc	r25, r19
    1410:	08 95       	ret
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	08 95       	ret

00001418 <front>:
    1418:	fc 01       	movw	r30, r24
    141a:	e4 52       	subi	r30, 0x24	; 36
    141c:	fd 4f       	sbci	r31, 0xFD	; 253
    141e:	40 81       	ld	r20, Z
    1420:	51 81       	ldd	r21, Z+1	; 0x01
    1422:	32 96       	adiw	r30, 0x02	; 2
    1424:	20 81       	ld	r18, Z
    1426:	31 81       	ldd	r19, Z+1	; 0x01
    1428:	24 17       	cp	r18, r20
    142a:	35 07       	cpc	r19, r21
    142c:	4c f0       	brlt	.+18     	; 0x1440 <front+0x28>
    142e:	69 e4       	ldi	r22, 0x49	; 73
    1430:	64 9f       	mul	r22, r20
    1432:	90 01       	movw	r18, r0
    1434:	65 9f       	mul	r22, r21
    1436:	30 0d       	add	r19, r0
    1438:	11 24       	eor	r1, r1
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	08 95       	ret
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	08 95       	ret

00001446 <main>:

bool doctorSeeing = 0;

int main(void)
{
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	61 97       	sbiw	r28, 0x11	; 17
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
struct Queue q;

void Queue_Init(struct Queue *qptr)
{
	//toq=0;
	qptr->front_num = 0;
    145a:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <q+0x2dd>
    145e:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <q+0x2dc>
	qptr->rear_num = -1;
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <q+0x2df>
    146a:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <q+0x2de>

int main(void)
{
	Queue_Init(&q);
	
	HC05_Init_Data_Mode();
    146e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <HC05_Init_Data_Mode>
	//HC05_Init_ATCommand_Mode();
	
	HC05_SendString("hello there");
    1472:	81 e9       	ldi	r24, 0x91	; 145
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
	
	Lcd_Init(LCDKEYPAD);
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Lcd_Init>
	Lcd_Init(LCDNOTICE);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Lcd_Init>
	
	Lcd_Position(LCDNOTICE , 0,0);
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    1494:	6d e9       	ldi	r22, 0x9D	; 157
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	Lcd_Position(LCDNOTICE , 0,0);
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    14ac:	6d e9       	ldi	r22, 0x9D	; 157
    14ae:	71 e0       	ldi	r23, 0x01	; 1
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	Lcd_Prints(LCDNOTICE , "abcdefghijklmnopqrstuvwxyz");
    14b6:	6d e9       	ldi	r22, 0x9D	; 157
    14b8:	71 e0       	ldi	r23, 0x01	; 1
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	
	States_GotoState(IDLE);
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
	//States_GotoState(GENERATE_SERIAL);
	
	Keypad_Init();
    14c6:	0e 94 98 03 	call	0x730	; 0x730 <Keypad_Init>
	Button_Init();
    14ca:	0e 94 05 03 	call	0x60a	; 0x60a <Button_Init>
	
	Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    14ce:	48 eb       	ldi	r20, 0xB8	; 184
    14d0:	51 e0       	ldi	r21, 0x01	; 1
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    14dc:	47 ec       	ldi	r20, 0xC7	; 199
    14de:	51 e0       	ldi	r21, 0x01	; 1
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	qptr->rear_num = -1;
}

bool empty(struct Queue *qptr)
{
	if(qptr->front_num > qptr->rear_num)
    14ea:	0f 2e       	mov	r0, r31
    14ec:	f8 ec       	ldi	r31, 0xC8	; 200
    14ee:	af 2e       	mov	r10, r31
    14f0:	f5 e0       	ldi	r31, 0x05	; 5
    14f2:	bf 2e       	mov	r11, r31
    14f4:	f0 2d       	mov	r31, r0
    14f6:	0f 2e       	mov	r0, r31
    14f8:	fa ec       	ldi	r31, 0xCA	; 202
    14fa:	cf 2e       	mov	r12, r31
    14fc:	f5 e0       	ldi	r31, 0x05	; 5
    14fe:	df 2e       	mov	r13, r31
    1500:	f0 2d       	mov	r31, r0
				{
					;
				}
				else 
				{
					doctorSeeing = 1;
    1502:	55 24       	eor	r5, r5
    1504:	53 94       	inc	r5
					
					struct Patient* now =  front(&q);
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    1506:	0f 2e       	mov	r0, r31
    1508:	f1 ed       	ldi	r31, 0xD1	; 209
    150a:	8f 2e       	mov	r8, r31
    150c:	f1 e0       	ldi	r31, 0x01	; 1
    150e:	9f 2e       	mov	r9, r31
    1510:	f0 2d       	mov	r31, r0
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	7c 01       	movw	r14, r24
					Lcd_PrintLine(LCDNOTICE , 0,s);
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    1518:	0f 2e       	mov	r0, r31
    151a:	fa ed       	ldi	r31, 0xDA	; 218
    151c:	6f 2e       	mov	r6, r31
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	7f 2e       	mov	r7, r31
    1522:	f0 2d       	mov	r31, r0
	Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
	Lcd_PrintLine(LCDNOTICE , 1,"the queue");
	
	while (1)
	{
		if(Keypad_KeyPressed())
    1524:	0e 94 1c 04 	call	0x838	; 0x838 <Keypad_KeyPressed>
    1528:	88 23       	and	r24, r24
    152a:	b1 f0       	breq	.+44     	; 0x1558 <main+0x112>
    152c:	ef e3       	ldi	r30, 0x3F	; 63
    152e:	fc e9       	ldi	r31, 0x9C	; 156
    1530:	31 97       	sbiw	r30, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <main+0xea>
    1534:	00 c0       	rjmp	.+0      	; 0x1536 <main+0xf0>
    1536:	00 00       	nop
		{
			_delay_ms(20);
			if(Keypad_KeyPressed())
    1538:	0e 94 1c 04 	call	0x838	; 0x838 <Keypad_KeyPressed>
    153c:	88 23       	and	r24, r24
    153e:	61 f0       	breq	.+24     	; 0x1558 <main+0x112>
			{
				int_fast8_t x = Keypad_GetKey();
    1540:	0e 94 04 05 	call	0xa08	; 0xa08 <Keypad_GetKey>
				KeyProcessor_ProcessKey(x);
    1544:	0e 94 24 05 	call	0xa48	; 0xa48 <KeyProcessor_ProcessKey>
    1548:	8f e3       	ldi	r24, 0x3F	; 63
    154a:	9c e9       	ldi	r25, 0x9C	; 156
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <main+0x106>
    1550:	00 c0       	rjmp	.+0      	; 0x1552 <main+0x10c>
    1552:	00 00       	nop
				_delay_ms(20);
				Keypad_Init();
    1554:	0e 94 98 03 	call	0x730	; 0x730 <Keypad_Init>
			}
		}
		States_Refresh();
    1558:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <States_Refresh>
		if(Button_ButtonPressed())
    155c:	0e 94 07 03 	call	0x60e	; 0x60e <Button_ButtonPressed>
    1560:	88 23       	and	r24, r24
    1562:	01 f3       	breq	.-64     	; 0x1524 <main+0xde>
		{
			// buzzer
			
			if(doctorSeeing)
    1564:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <doctorSeeing>
    1568:	88 23       	and	r24, r24
    156a:	09 f4       	brne	.+2      	; 0x156e <main+0x128>
    156c:	55 c0       	rjmp	.+170    	; 0x1618 <main+0x1d2>
			{
				
				if(empty(&q))
    156e:	f5 01       	movw	r30, r10
    1570:	20 81       	ld	r18, Z
    1572:	31 81       	ldd	r19, Z+1	; 0x01
    1574:	f6 01       	movw	r30, r12
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	82 17       	cp	r24, r18
    157c:	93 07       	cpc	r25, r19
    157e:	8c f4       	brge	.+34     	; 0x15a2 <main+0x15c>
				{
					Lcd_PrintLine(LCDNOTICE , 0,"No Patient in ");
    1580:	48 eb       	ldi	r20, 0xB8	; 184
    1582:	51 e0       	ldi	r21, 0x01	; 1
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	85 2d       	mov	r24, r5
    158a:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
					Lcd_PrintLine(LCDNOTICE , 1,"the queue");
    158e:	47 ec       	ldi	r20, 0xC7	; 199
    1590:	51 e0       	ldi	r21, 0x01	; 1
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	85 2d       	mov	r24, r5
    1598:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
					doctorSeeing = 0;
    159c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <doctorSeeing>
    15a0:	80 c0       	rjmp	.+256    	; 0x16a2 <main+0x25c>
				}
				else 
				{
					struct Patient* now =  front(&q);
    15a2:	8c ee       	ldi	r24, 0xEC	; 236
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <front>
    15aa:	8c 01       	movw	r16, r24
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    15ac:	1f 93       	push	r17
    15ae:	8f 93       	push	r24
    15b0:	fc 01       	movw	r30, r24
    15b2:	e9 5b       	subi	r30, 0xB9	; 185
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	81 81       	ldd	r24, Z+1	; 0x01
    15b8:	8f 93       	push	r24
    15ba:	80 81       	ld	r24, Z
    15bc:	8f 93       	push	r24
    15be:	9f 92       	push	r9
    15c0:	8f 92       	push	r8
    15c2:	ff 92       	push	r15
    15c4:	ef 92       	push	r14
    15c6:	0e 94 03 12 	call	0x2406	; 0x2406 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 0,s);
    15ca:	a7 01       	movw	r20, r14
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	85 2d       	mov	r24, r5
    15d2:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    15d6:	c8 01       	movw	r24, r16
    15d8:	41 96       	adiw	r24, 0x11	; 17
    15da:	9f 93       	push	r25
    15dc:	8f 93       	push	r24
    15de:	8c 96       	adiw	r24, 0x2c	; 44
    15e0:	9f 93       	push	r25
    15e2:	8f 93       	push	r24
    15e4:	0d 5c       	subi	r16, 0xCD	; 205
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	1f 93       	push	r17
    15ea:	0f 93       	push	r16
    15ec:	7f 92       	push	r7
    15ee:	6f 92       	push	r6
    15f0:	ff 92       	push	r15
    15f2:	ef 92       	push	r14
    15f4:	0e 94 03 12 	call	0x2406	; 0x2406 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 1,s);
    15f8:	a7 01       	movw	r20, r14
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	85 2d       	mov	r24, r5
    1600:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
					dequeue(&q);// ager ta falailam
    1604:	8c ee       	ldi	r24, 0xEC	; 236
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	0e 94 ef 09 	call	0x13de	; 0x13de <dequeue>
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	45 c0       	rjmp	.+138    	; 0x16a2 <main+0x25c>
				}
				
			}
			else
			{
				if(empty(&q))
    1618:	f5 01       	movw	r30, r10
    161a:	20 81       	ld	r18, Z
    161c:	31 81       	ldd	r19, Z+1	; 0x01
    161e:	f6 01       	movw	r30, r12
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	e4 f1       	brlt	.+120    	; 0x16a2 <main+0x25c>
				{
					;
				}
				else 
				{
					doctorSeeing = 1;
    162a:	50 92 d4 02 	sts	0x02D4, r5	; 0x8002d4 <doctorSeeing>
					
					struct Patient* now =  front(&q);
    162e:	8c ee       	ldi	r24, 0xEC	; 236
    1630:	92 e0       	ldi	r25, 0x02	; 2
    1632:	0e 94 0c 0a 	call	0x1418	; 0x1418 <front>
    1636:	8c 01       	movw	r16, r24
					char s[17];
					sprintf(s,"%2d-%13s",now->serial , now->name);
    1638:	1f 93       	push	r17
    163a:	8f 93       	push	r24
    163c:	fc 01       	movw	r30, r24
    163e:	e9 5b       	subi	r30, 0xB9	; 185
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	81 81       	ldd	r24, Z+1	; 0x01
    1644:	8f 93       	push	r24
    1646:	80 81       	ld	r24, Z
    1648:	8f 93       	push	r24
    164a:	9f 92       	push	r9
    164c:	8f 92       	push	r8
    164e:	ff 92       	push	r15
    1650:	ef 92       	push	r14
    1652:	0e 94 03 12 	call	0x2406	; 0x2406 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 0,s);
    1656:	a7 01       	movw	r20, r14
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	85 2d       	mov	r24, r5
    165e:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
					sprintf(s,"%6sF%3sBPM%2sY",now->temperature,now->bp,now->age);
    1662:	c8 01       	movw	r24, r16
    1664:	41 96       	adiw	r24, 0x11	; 17
    1666:	9f 93       	push	r25
    1668:	8f 93       	push	r24
    166a:	8c 96       	adiw	r24, 0x2c	; 44
    166c:	9f 93       	push	r25
    166e:	8f 93       	push	r24
    1670:	0d 5c       	subi	r16, 0xCD	; 205
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	1f 93       	push	r17
    1676:	0f 93       	push	r16
    1678:	7f 92       	push	r7
    167a:	6f 92       	push	r6
    167c:	ff 92       	push	r15
    167e:	ef 92       	push	r14
    1680:	0e 94 03 12 	call	0x2406	; 0x2406 <sprintf>
					Lcd_PrintLine(LCDNOTICE , 1,s);
    1684:	a7 01       	movw	r20, r14
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	85 2d       	mov	r24, r5
    168c:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
					dequeue(&q);// ager ta falailam
    1690:	8c ee       	ldi	r24, 0xEC	; 236
    1692:	92 e0       	ldi	r25, 0x02	; 2
    1694:	0e 94 ef 09 	call	0x13de	; 0x13de <dequeue>
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	9f ef       	ldi	r25, 0xFF	; 255
    16a4:	e4 e3       	ldi	r30, 0x34	; 52
    16a6:	fc e0       	ldi	r31, 0x0C	; 12
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	e0 40       	sbci	r30, 0x00	; 0
    16ac:	f0 40       	sbci	r31, 0x00	; 0
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <main+0x262>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <main+0x26c>
    16b2:	00 00       	nop
    16b4:	37 cf       	rjmp	.-402    	; 0x1524 <main+0xde>

000016b6 <Patient_UpdateName>:
struct Patient currentPatient ;
int patientsCount = 0;

void Patient_UpdateName(struct Patient * p, char *newName)
{
	strcpy(p->name , newName);
    16b6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
    16ba:	08 95       	ret

000016bc <Patient_UpdateAge>:
}
void Patient_UpdateAge(struct Patient *p, char *newAge)
{
	strcpy(p->age , newAge);
    16bc:	41 96       	adiw	r24, 0x11	; 17
    16be:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
    16c2:	08 95       	ret

000016c4 <Patient_UpdatePhone>:
}
void Patient_UpdatePhone(struct Patient *p, char *newPhone)
{
	strcpy(p->phone , newPhone);
    16c4:	82 96       	adiw	r24, 0x22	; 34
    16c6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
    16ca:	08 95       	ret

000016cc <Patient_UpdateSerial>:
}
void Patient_UpdateSerial(struct Patient *p, int newSerial)
{
	p->serial = newSerial;
    16cc:	89 5b       	subi	r24, 0xB9	; 185
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	fc 01       	movw	r30, r24
    16d2:	71 83       	std	Z+1, r23	; 0x01
    16d4:	60 83       	st	Z, r22
    16d6:	08 95       	ret

000016d8 <Patient_UpdateTemperature>:
}
void Patient_UpdateTemperature(struct Patient *p, char *newTemp)
{
	strcpy(p->temperature , newTemp);
    16d8:	c3 96       	adiw	r24, 0x33	; 51
    16da:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
    16de:	08 95       	ret

000016e0 <Patient_UpdateBp>:
}
void Patient_UpdateBp(struct Patient *p, char *newBp)
{
	strcpy(p->bp, newBp);
    16e0:	cd 96       	adiw	r24, 0x3d	; 61
    16e2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
    16e6:	08 95       	ret

000016e8 <EnteringAge_Init>:
void EnteringAge_Init()
{
	// clear screen of keypad display , 
	// since both row is used and printed ' ' 
	// so no clear screen func is required
    Lcd_PrintLine(LCDKEYPAD,0,"Enter Age:");
    16e8:	49 ee       	ldi	r20, 0xE9	; 233
    16ea:	51 e0       	ldi	r21, 0x01	; 1
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	Keypad_InitNumpad();
    16f6:	0e 94 ed 03 	call	0x7da	; 0x7da <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    16fa:	0e 94 02 04 	call	0x804	; 0x804 <Keypad_UpdateKeyMode>
	
	// restore old age
	Keypad_WriteToBuffer(currentPatient.age);
    16fe:	8f ed       	ldi	r24, 0xDF	; 223
    1700:	95 e0       	ldi	r25, 0x05	; 5
    1702:	0e 94 aa 03 	call	0x754	; 0x754 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1706:	48 ed       	ldi	r20, 0xD8	; 216
    1708:	52 e0       	ldi	r21, 0x02	; 2
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    1714:	08 95       	ret

00001716 <EnteringAge_ProcessKey>:
}

void EnteringAge_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1716:	8f 31       	cpi	r24, 0x1F	; 31
    1718:	61 f4       	brne	.+24     	; 0x1732 <EnteringAge_ProcessKey+0x1c>
	{
		// nxt
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    171a:	68 ed       	ldi	r22, 0xD8	; 216
    171c:	72 e0       	ldi	r23, 0x02	; 2
    171e:	8e ec       	ldi	r24, 0xCE	; 206
    1720:	95 e0       	ldi	r25, 0x05	; 5
    1722:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    1726:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    1730:	08 95       	ret
	}
	else if(key == 30)
    1732:	8e 31       	cpi	r24, 0x1E	; 30
    1734:	61 f4       	brne	.+24     	; 0x174e <EnteringAge_ProcessKey+0x38>
	{
		// prev
		
		// save age
		Patient_UpdateAge(&currentPatient , keyBuffer);
    1736:	68 ed       	ldi	r22, 0xD8	; 216
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	8e ec       	ldi	r24, 0xCE	; 206
    173c:	95 e0       	ldi	r25, 0x05	; 5
    173e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Patient_UpdateAge>
		
		Keypad_ResetBuffer();
    1742:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_NAME);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    174c:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    174e:	0e 94 8e 04 	call	0x91c	; 0x91c <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    1752:	48 ed       	ldi	r20, 0xD8	; 216
    1754:	52 e0       	ldi	r21, 0x02	; 2
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1760:	88 ed       	ldi	r24, 0xD8	; 216
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1768:	0e 94 02 04 	call	0x804	; 0x804 <Keypad_UpdateKeyMode>
    176c:	08 95       	ret

0000176e <EnteringBp_Init>:
#include "../../all.h"

bool scanning = 0;
void EnteringBp_Init()
{
    Lcd_PrintLine(LCDKEYPAD,0,"Finger on green-");
    176e:	44 ef       	ldi	r20, 0xF4	; 244
    1770:	51 e0       	ldi	r21, 0x01	; 1
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	Lcd_PrintLine(LCDKEYPAD , 1, "Light, press next");
    177c:	45 e0       	ldi	r20, 0x05	; 5
    177e:	52 e0       	ldi	r21, 0x02	; 2
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	Bp_Init();
    178a:	0e 94 2c 02 	call	0x458	; 0x458 <Bp_Init>
	scanning = 0;
    178e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <scanning>
    1792:	08 95       	ret

00001794 <EntetingBp_Refresh>:
}

void EntetingBp_Refresh()
{
    1794:	08 95       	ret

00001796 <EnteringBp_ProcessKey>:
	
}

void EnteringBp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1796:	8f 31       	cpi	r24, 0x1F	; 31
    1798:	f9 f4       	brne	.+62     	; 0x17d8 <EnteringBp_ProcessKey+0x42>
	{
		if(scanning == 0)
    179a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <scanning>
    179e:	81 11       	cpse	r24, r1
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <EnteringBp_ProcessKey+0x26>
		{
			scanning = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <scanning>
			Lcd_PrintLine(LCDKEYPAD , 1, "Light");
    17a8:	47 e1       	ldi	r20, 0x17	; 23
    17aa:	52 e0       	ldi	r21, 0x02	; 2
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
			Bp_PrintBp();
    17b6:	0e 94 32 02 	call	0x464	; 0x464 <Bp_PrintBp>
    17ba:	08 95       	ret
		}
		else 
		{
			scanning = 0;
    17bc:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <scanning>
			Patient_UpdateBp(&currentPatient , keyBuffer);
    17c0:	68 ed       	ldi	r22, 0xD8	; 216
    17c2:	72 e0       	ldi	r23, 0x02	; 2
    17c4:	8e ec       	ldi	r24, 0xCE	; 206
    17c6:	95 e0       	ldi	r25, 0x05	; 5
    17c8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <Patient_UpdateBp>
			Keypad_ResetBuffer();
    17cc:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
			States_GotoState(GENERATE_SERIAL);
    17d0:	86 e0       	ldi	r24, 0x06	; 6
    17d2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    17d6:	08 95       	ret
		}
		// print serial
	}
	else if(key == 30)
    17d8:	8e 31       	cpi	r24, 0x1E	; 30
    17da:	59 f4       	brne	.+22     	; 0x17f2 <EnteringBp_ProcessKey+0x5c>
	{
		Patient_UpdateBp(&currentPatient , keyBuffer);
    17dc:	68 ed       	ldi	r22, 0xD8	; 216
    17de:	72 e0       	ldi	r23, 0x02	; 2
    17e0:	8e ec       	ldi	r24, 0xCE	; 206
    17e2:	95 e0       	ldi	r25, 0x05	; 5
    17e4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <Patient_UpdateBp>
		Keypad_ResetBuffer();
    17e8:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    17ec:	84 e0       	ldi	r24, 0x04	; 4
    17ee:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    17f2:	08 95       	ret

000017f4 <EnteringName_Init>:
//extern struct storeRecords records[100];
//extern unsigned int serial;

void EnteringName_Init()
{
    Lcd_ClearScreen(LCDKEYPAD);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Lcd_ClearScreen>
    Lcd_Position(LCDKEYPAD,0,0);
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
    Lcd_Prints(LCDKEYPAD,"Enter Name:");
    1808:	6d e1       	ldi	r22, 0x1D	; 29
    180a:	72 e0       	ldi	r23, 0x02	; 2
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	Keypad_UpdateKeyMode();
    1812:	0e 94 02 04 	call	0x804	; 0x804 <Keypad_UpdateKeyMode>
	
	Keypad_WriteToBuffer(currentPatient.name);
    1816:	8e ec       	ldi	r24, 0xCE	; 206
    1818:	95 e0       	ldi	r25, 0x05	; 5
    181a:	0e 94 aa 03 	call	0x754	; 0x754 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    181e:	48 ed       	ldi	r20, 0xD8	; 216
    1820:	52 e0       	ldi	r21, 0x02	; 2
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    182c:	08 95       	ret

0000182e <EnteringName_ProcessKey>:
}

void EnteringName_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    182e:	8f 31       	cpi	r24, 0x1F	; 31
    1830:	61 f4       	brne	.+24     	; 0x184a <EnteringName_ProcessKey+0x1c>
	{
		// nxt
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    1832:	68 ed       	ldi	r22, 0xD8	; 216
    1834:	72 e0       	ldi	r23, 0x02	; 2
    1836:	8e ec       	ldi	r24, 0xCE	; 206
    1838:	95 e0       	ldi	r25, 0x05	; 5
    183a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Patient_UpdateName>
		Keypad_ResetBuffer();
    183e:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    1848:	08 95       	ret
	}
	else if(key == 30)
    184a:	8e 31       	cpi	r24, 0x1E	; 30
    184c:	61 f4       	brne	.+24     	; 0x1866 <EnteringName_ProcessKey+0x38>
	{
		//prev
		// save name and procced
		Patient_UpdateName(&currentPatient , keyBuffer);
    184e:	68 ed       	ldi	r22, 0xD8	; 216
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	8e ec       	ldi	r24, 0xCE	; 206
    1854:	95 e0       	ldi	r25, 0x05	; 5
    1856:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Patient_UpdateName>
		Keypad_ResetBuffer();
    185a:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(IDLE);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    1864:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    1866:	0e 94 8e 04 	call	0x91c	; 0x91c <Keypad_AddKey>
		// print input in lower line
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    186a:	48 ed       	ldi	r20, 0xD8	; 216
    186c:	52 e0       	ldi	r21, 0x02	; 2
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
		HC05_SendString(keyBuffer);
    1878:	88 ed       	ldi	r24, 0xD8	; 216
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
		
		Keypad_UpdateKeyMode();
    1880:	0e 94 02 04 	call	0x804	; 0x804 <Keypad_UpdateKeyMode>
    1884:	08 95       	ret

00001886 <EnteringPhone_Init>:


void EnteringPhone_Init()
{
	
    Lcd_PrintLine(LCDKEYPAD,0,"Phone no:");
    1886:	49 e2       	ldi	r20, 0x29	; 41
    1888:	52 e0       	ldi	r21, 0x02	; 2
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	
	Keypad_InitNumpad();
    1894:	0e 94 ed 03 	call	0x7da	; 0x7da <Keypad_InitNumpad>
	Keypad_UpdateKeyMode();
    1898:	0e 94 02 04 	call	0x804	; 0x804 <Keypad_UpdateKeyMode>
	
	//restore old age
	Keypad_WriteToBuffer(currentPatient.phone);
    189c:	80 ef       	ldi	r24, 0xF0	; 240
    189e:	95 e0       	ldi	r25, 0x05	; 5
    18a0:	0e 94 aa 03 	call	0x754	; 0x754 <Keypad_WriteToBuffer>
	Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    18a4:	48 ed       	ldi	r20, 0xD8	; 216
    18a6:	52 e0       	ldi	r21, 0x02	; 2
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    18b2:	08 95       	ret

000018b4 <EnteringPhone_ProcessKey>:
}

void EnteringPhone_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    18b4:	8f 31       	cpi	r24, 0x1F	; 31
    18b6:	61 f4       	brne	.+24     	; 0x18d0 <EnteringPhone_ProcessKey+0x1c>
	{
		// nxt
		
		// save phone patient
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    18b8:	68 ed       	ldi	r22, 0xD8	; 216
    18ba:	72 e0       	ldi	r23, 0x02	; 2
    18bc:	8e ec       	ldi	r24, 0xCE	; 206
    18be:	95 e0       	ldi	r25, 0x05	; 5
    18c0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <Patient_UpdatePhone>
		Keypad_ResetBuffer();
    18c4:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_TEMP);
    18c8:	84 e0       	ldi	r24, 0x04	; 4
    18ca:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    18ce:	08 95       	ret
		// print serial
	}
	else if(key == 30)
    18d0:	8e 31       	cpi	r24, 0x1E	; 30
    18d2:	61 f4       	brne	.+24     	; 0x18ec <EnteringPhone_ProcessKey+0x38>
	{
		// prev
		// save phone 
		Patient_UpdatePhone(&currentPatient , keyBuffer);
    18d4:	68 ed       	ldi	r22, 0xD8	; 216
    18d6:	72 e0       	ldi	r23, 0x02	; 2
    18d8:	8e ec       	ldi	r24, 0xCE	; 206
    18da:	95 e0       	ldi	r25, 0x05	; 5
    18dc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <Patient_UpdatePhone>
		
		Keypad_ResetBuffer();
    18e0:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_AGE);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    18ea:	08 95       	ret
	}
	else 
	{
		Keypad_AddKey(key);
    18ec:	0e 94 8e 04 	call	0x91c	; 0x91c <Keypad_AddKey>
		
		Lcd_PrintLine(LCDKEYPAD , 1 , keyBuffer);
    18f0:	48 ed       	ldi	r20, 0xD8	; 216
    18f2:	52 e0       	ldi	r21, 0x02	; 2
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
		
		HC05_SendString(keyBuffer);
    18fe:	88 ed       	ldi	r24, 0xD8	; 216
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 89 03 	call	0x712	; 0x712 <HC05_SendString>
		
		Keypad_InitNumpad();
    1906:	0e 94 ed 03 	call	0x7da	; 0x7da <Keypad_InitNumpad>
		Keypad_UpdateKeyMode();
    190a:	0e 94 02 04 	call	0x804	; 0x804 <Keypad_UpdateKeyMode>
    190e:	08 95       	ret

00001910 <EnteringTemp_Init>:
#include "../../all.h"

void EnteringTemp_Init()
{
	Lcd_PrintLine(LCDKEYPAD, 0, "Temperature:");
    1910:	43 e3       	ldi	r20, 0x33	; 51
    1912:	52 e0       	ldi	r21, 0x02	; 2
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    Lm35_Init();
    191e:	0e 94 85 09 	call	0x130a	; 0x130a <Lm35_Init>
    1922:	08 95       	ret

00001924 <EnteringTemp_Refresh>:
}

void EnteringTemp_Refresh()
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	64 97       	sbiw	r28, 0x14	; 20
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
	float tempF = Lm35_GetTemp();
    193c:	0e 94 8b 09 	call	0x1316	; 0x1316 <Lm35_GetTemp>
	char tempF_txt[20];
	dtostrf(tempF, 5, 2, tempF_txt);
    1940:	8e 01       	movw	r16, r28
    1942:	0f 5f       	subi	r16, 0xFF	; 255
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	22 e0       	ldi	r18, 0x02	; 2
    1948:	45 e0       	ldi	r20, 0x05	; 5
    194a:	0e 94 96 10 	call	0x212c	; 0x212c <dtostrf>
	Lcd_PrintLine(LCDKEYPAD, 1, tempF_txt);
    194e:	a8 01       	movw	r20, r16
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	strcpy(keyBuffer, tempF_txt);
    195a:	b8 01       	movw	r22, r16
    195c:	88 ed       	ldi	r24, 0xD8	; 216
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
}
    1964:	64 96       	adiw	r28, 0x14	; 20
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <EnteringTemp_ProcessKey>:

void EnteringTemp_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    197a:	8f 31       	cpi	r24, 0x1F	; 31
    197c:	61 f4       	brne	.+24     	; 0x1996 <EnteringTemp_ProcessKey+0x1c>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    197e:	68 ed       	ldi	r22, 0xD8	; 216
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	8e ec       	ldi	r24, 0xCE	; 206
    1984:	95 e0       	ldi	r25, 0x05	; 5
    1986:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    198a:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(GENERATE_SERIAL);
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    1994:	08 95       	ret
	}
	else if(key == 30)
    1996:	8e 31       	cpi	r24, 0x1E	; 30
    1998:	59 f4       	brne	.+22     	; 0x19b0 <EnteringTemp_ProcessKey+0x36>
	{
		Patient_UpdateTemperature(&currentPatient , keyBuffer);
    199a:	68 ed       	ldi	r22, 0xD8	; 216
    199c:	72 e0       	ldi	r23, 0x02	; 2
    199e:	8e ec       	ldi	r24, 0xCE	; 206
    19a0:	95 e0       	ldi	r25, 0x05	; 5
    19a2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <Patient_UpdateTemperature>
		Keypad_ResetBuffer();
    19a6:	0e 94 9f 03 	call	0x73e	; 0x73e <Keypad_ResetBuffer>
		States_GotoState(ENTERING_PHONE);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    19b0:	08 95       	ret

000019b2 <Update_Serial>:
		
	}
}

void Update_Serial()
{
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	c4 56       	subi	r28, 0x64	; 100
    19c0:	d1 09       	sbc	r29, r1
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
	char s[100];
	dtostrf((float)(patientsCount+1), 3, 0, s);
    19cc:	60 91 d5 02 	lds	r22, 0x02D5	; 0x8002d5 <patientsCount>
    19d0:	70 91 d6 02 	lds	r23, 0x02D6	; 0x8002d6 <patientsCount+0x1>
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	07 2e       	mov	r0, r23
    19da:	00 0c       	add	r0, r0
    19dc:	88 0b       	sbc	r24, r24
    19de:	99 0b       	sbc	r25, r25
    19e0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__floatsisf>
    19e4:	8e 01       	movw	r16, r28
    19e6:	0f 5f       	subi	r16, 0xFF	; 255
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	43 e0       	ldi	r20, 0x03	; 3
    19ee:	0e 94 96 10 	call	0x212c	; 0x212c <dtostrf>
	Lcd_Position(LCDKEYPAD,0,13);
    19f2:	4d e0       	ldi	r20, 0x0D	; 13
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDKEYPAD,s);
    1a00:	b8 01       	movw	r22, r16
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	Patient_UpdateSerial(&currentPatient, patientsCount);
    1a08:	60 91 d5 02 	lds	r22, 0x02D5	; 0x8002d5 <patientsCount>
    1a0c:	70 91 d6 02 	lds	r23, 0x02D6	; 0x8002d6 <patientsCount+0x1>
    1a10:	8e ec       	ldi	r24, 0xCE	; 206
    1a12:	95 e0       	ldi	r25, 0x05	; 5
    1a14:	0e 94 66 0b 	call	0x16cc	; 0x16cc <Patient_UpdateSerial>
	
}
    1a18:	cc 59       	subi	r28, 0x9C	; 156
    1a1a:	df 4f       	sbci	r29, 0xFF	; 255
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <GenerateSerial_Init>:


void GenerateSerial_Init()
{
    
	Lcd_Position(LCDKEYPAD,0,0);
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_PrintLine(LCDKEYPAD,0,"Your Serial: ");
    1a3e:	40 e4       	ldi	r20, 0x40	; 64
    1a40:	52 e0       	ldi	r21, 0x02	; 2
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
	Update_Serial();
    1a4c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Update_Serial>
	Lcd_Position(LCDKEYPAD,1,0);
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_PrintLine(LCDKEYPAD,1,"N:Confirm P:Back");
    1a5e:	4e e4       	ldi	r20, 0x4E	; 78
    1a60:	52 e0       	ldi	r21, 0x02	; 2
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	0e 94 c2 05 	call	0xb84	; 0xb84 <Lcd_PrintLine>
    1a6c:	08 95       	ret

00001a6e <Update_PatientsList>:
	Patient_UpdateSerial(&currentPatient, patientsCount);
	
}

void Update_PatientsList()
{
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
	struct Patient *cp = (struct Patient*) malloc(sizeof(struct Patient));
    1a72:	89 e4       	ldi	r24, 0x49	; 73
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 b6 10 	call	0x216c	; 0x216c <malloc>
    1a7a:	ec 01       	movw	r28, r24
	strcpy(cp->name, currentPatient.name);
    1a7c:	6e ec       	ldi	r22, 0xCE	; 206
    1a7e:	75 e0       	ldi	r23, 0x05	; 5
    1a80:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
	strcpy(cp->age, currentPatient.age);
    1a84:	6f ed       	ldi	r22, 0xDF	; 223
    1a86:	75 e0       	ldi	r23, 0x05	; 5
    1a88:	ce 01       	movw	r24, r28
    1a8a:	41 96       	adiw	r24, 0x11	; 17
    1a8c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
	strcpy(cp->phone, currentPatient.phone);
    1a90:	60 ef       	ldi	r22, 0xF0	; 240
    1a92:	75 e0       	ldi	r23, 0x05	; 5
    1a94:	ce 01       	movw	r24, r28
    1a96:	82 96       	adiw	r24, 0x22	; 34
    1a98:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
	cp->serial = currentPatient.serial;
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e9 5b       	subi	r30, 0xB9	; 185
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <currentPatient+0x47>
    1aa6:	90 91 16 06 	lds	r25, 0x0616	; 0x800616 <currentPatient+0x48>
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
	strcpy(cp->temperature, currentPatient.temperature);
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	76 e0       	ldi	r23, 0x06	; 6
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	c3 96       	adiw	r24, 0x33	; 51
    1ab6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
	strcpy(cp->bp, currentPatient.bp);
    1aba:	6b e0       	ldi	r22, 0x0B	; 11
    1abc:	76 e0       	ldi	r23, 0x06	; 6
    1abe:	ce 01       	movw	r24, r28
    1ac0:	cd 96       	adiw	r24, 0x3d	; 61
    1ac2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcpy>
	enqueue(&q,*cp);
    1ac6:	8d b7       	in	r24, 0x3d	; 61
    1ac8:	9e b7       	in	r25, 0x3e	; 62
    1aca:	89 54       	subi	r24, 0x49	; 73
    1acc:	91 09       	sbc	r25, r1
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	9e bf       	out	0x3e, r25	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	8d bf       	out	0x3d, r24	; 61
    1ad8:	ad b7       	in	r26, 0x3d	; 61
    1ada:	be b7       	in	r27, 0x3e	; 62
    1adc:	11 96       	adiw	r26, 0x01	; 1
    1ade:	89 e4       	ldi	r24, 0x49	; 73
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	01 90       	ld	r0, Z+
    1ae4:	0d 92       	st	X+, r0
    1ae6:	8a 95       	dec	r24
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <Update_PatientsList+0x74>
    1aea:	8c ee       	ldi	r24, 0xEC	; 236
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 b3 09 	call	0x1366	; 0x1366 <enqueue>
	free(cp);
    1af2:	8d b7       	in	r24, 0x3d	; 61
    1af4:	9e b7       	in	r25, 0x3e	; 62
    1af6:	87 5b       	subi	r24, 0xB7	; 183
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	9e bf       	out	0x3e, r25	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	8d bf       	out	0x3d, r24	; 61
    1b04:	ce 01       	movw	r24, r28
    1b06:	0e 94 4e 11 	call	0x229c	; 0x229c <free>
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	08 95       	ret

00001b10 <Clear_CurrentPatient_Data>:

void Clear_CurrentPatient_Data(){
	strcpy(currentPatient.name, "");
    1b10:	ee ec       	ldi	r30, 0xCE	; 206
    1b12:	f5 e0       	ldi	r31, 0x05	; 5
    1b14:	10 82       	st	Z, r1
	strcpy(currentPatient.age, "");
    1b16:	11 8a       	std	Z+17, r1	; 0x11
	strcpy(currentPatient.phone, "");
    1b18:	12 a2       	std	Z+34, r1	; 0x22
	strcpy(currentPatient.temperature, "");
    1b1a:	13 aa       	std	Z+51, r1	; 0x33
	strcpy(currentPatient.bp, "");
    1b1c:	15 ae       	std	Z+61, r1	; 0x3d
    1b1e:	08 95       	ret

00001b20 <GenerateSerial_ProcessKey>:
	Lcd_PrintLine(LCDKEYPAD,1,"N:Confirm P:Back");
}

void GenerateSerial_ProcessKey(int_fast8_t key)
{
	if(key == 31)
    1b20:	8f 31       	cpi	r24, 0x1F	; 31
    1b22:	49 f5       	brne	.+82     	; 0x1b76 <GenerateSerial_ProcessKey+0x56>
	{
		Lcd_ClearScreen(LCDKEYPAD);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Lcd_ClearScreen>
		Lcd_Position(LCDKEYPAD,0,3);
    1b2a:	43 e0       	ldi	r20, 0x03	; 3
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
		patientsCount++;
    1b38:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <patientsCount>
    1b3c:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <patientsCount+0x1>
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <patientsCount+0x1>
    1b46:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <patientsCount>
		Update_PatientsList();
    1b4a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <Update_PatientsList>
		Lcd_Prints(LCDKEYPAD,"Thank You");
    1b4e:	6f e5       	ldi	r22, 0x5F	; 95
    1b50:	72 e0       	ldi	r23, 0x02	; 2
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
    1b58:	2f ef       	ldi	r18, 0xFF	; 255
    1b5a:	87 e8       	ldi	r24, 0x87	; 135
    1b5c:	93 e1       	ldi	r25, 0x13	; 19
    1b5e:	21 50       	subi	r18, 0x01	; 1
    1b60:	80 40       	sbci	r24, 0x00	; 0
    1b62:	90 40       	sbci	r25, 0x00	; 0
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <GenerateSerial_ProcessKey+0x3e>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <GenerateSerial_ProcessKey+0x48>
    1b68:	00 00       	nop
		_delay_ms(800);
		States_GotoState(IDLE);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
		Clear_CurrentPatient_Data();
    1b70:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <Clear_CurrentPatient_Data>
    1b74:	08 95       	ret
	}
	else if(key == 30)
    1b76:	8e 31       	cpi	r24, 0x1E	; 30
    1b78:	19 f4       	brne	.+6      	; 0x1b80 <GenerateSerial_ProcessKey+0x60>
	{
		States_GotoState(ENTERING_BP);
    1b7a:	85 e0       	ldi	r24, 0x05	; 5
    1b7c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    1b80:	08 95       	ret

00001b82 <Idle_ProcessKey>:
#include "../../all.h"

void Idle_ProcessKey(int_fast8_t key)
{
	States_GotoState(ENTERING_NAME);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <States_GotoState>
    1b88:	08 95       	ret

00001b8a <Idle_Init>:
}
void Idle_Init()
{
	Lcd_ClearScreen(LCDKEYPAD);
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Lcd_ClearScreen>
	Lcd_Position(LCDKEYPAD , 0,0);
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "Welcome!");
    1b9e:	69 e6       	ldi	r22, 0x69	; 105
    1ba0:	72 e0       	ldi	r23, 0x02	; 2
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
	Lcd_Position(LCDKEYPAD , 1,0);
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Lcd_Position>
	Lcd_Prints(LCDKEYPAD , "1. New Entry");
    1bb6:	62 e7       	ldi	r22, 0x72	; 114
    1bb8:	72 e0       	ldi	r23, 0x02	; 2
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	0e 94 8b 05 	call	0xb16	; 0xb16 <Lcd_Prints>
    1bc0:	08 95       	ret

00001bc2 <States_GotoState>:
#include "../all.h"

volatile int_fast8_t currentState;

void States_GotoState(int_fast8_t newState)
{
    1bc2:	cf 93       	push	r28
    1bc4:	c8 2f       	mov	r28, r24
	switch(newState)
    1bc6:	08 2e       	mov	r0, r24
    1bc8:	00 0c       	add	r0, r0
    1bca:	99 0b       	sbc	r25, r25
    1bcc:	aa 0b       	sbc	r26, r26
    1bce:	bb 0b       	sbc	r27, r27
    1bd0:	87 30       	cpi	r24, 0x07	; 7
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	d0 f4       	brcc	.+52     	; 0x1c0a <States_GotoState+0x48>
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ef 5c       	subi	r30, 0xCF	; 207
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__tablejump2__>
	{
		case IDLE:
			Idle_Init();
    1be0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Idle_Init>
			break;
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <States_GotoState+0x50>
		case ENTERING_NAME:
			EnteringName_Init();
    1be6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <EnteringName_Init>
			break;
    1bea:	13 c0       	rjmp	.+38     	; 0x1c12 <States_GotoState+0x50>
		case ENTERING_AGE:
			EnteringAge_Init();
    1bec:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <EnteringAge_Init>
			break;
    1bf0:	10 c0       	rjmp	.+32     	; 0x1c12 <States_GotoState+0x50>
		case ENTERING_PHONE:
			EnteringPhone_Init();
    1bf2:	0e 94 43 0c 	call	0x1886	; 0x1886 <EnteringPhone_Init>
			break;
    1bf6:	0d c0       	rjmp	.+26     	; 0x1c12 <States_GotoState+0x50>
		case ENTERING_TEMP:
			EnteringTemp_Init();
    1bf8:	0e 94 88 0c 	call	0x1910	; 0x1910 <EnteringTemp_Init>
			break;
    1bfc:	0a c0       	rjmp	.+20     	; 0x1c12 <States_GotoState+0x50>
		case ENTERING_BP:
			EnteringBp_Init();
    1bfe:	0e 94 b7 0b 	call	0x176e	; 0x176e <EnteringBp_Init>
			break;
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <States_GotoState+0x50>
		case GENERATE_SERIAL:
			GenerateSerial_Init();
    1c04:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <GenerateSerial_Init>
			break;
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <States_GotoState+0x50>
		default:
			Error_Error("GotoState: newState not defined");
    1c0a:	8f e7       	ldi	r24, 0x7F	; 127
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
	}
	currentState = newState;
    1c12:	c0 93 17 06 	sts	0x0617, r28	; 0x800617 <currentState>
}
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <States_Refresh>:
void States_Refresh()
{
	switch(currentState)
    1c1a:	80 91 17 06 	lds	r24, 0x0617	; 0x800617 <currentState>
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	39 f0       	breq	.+14     	; 0x1c30 <States_Refresh+0x16>
    1c22:	1c f4       	brge	.+6      	; 0x1c2a <States_Refresh+0x10>
    1c24:	88 23       	and	r24, r24
    1c26:	74 f4       	brge	.+28     	; 0x1c44 <States_Refresh+0x2a>
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <States_Refresh+0x22>
    1c2a:	85 30       	cpi	r24, 0x05	; 5
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <States_Refresh+0x1c>
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <States_Refresh+0x22>
		
		case ENTERING_PHONE:
		
			break;
		case ENTERING_TEMP:
			EnteringTemp_Refresh();
    1c30:	0e 94 92 0c 	call	0x1924	; 0x1924 <EnteringTemp_Refresh>
			break;
    1c34:	08 95       	ret
		case ENTERING_BP:
			EntetingBp_Refresh();
    1c36:	0e 94 ca 0b 	call	0x1794	; 0x1794 <EntetingBp_Refresh>
			break;
    1c3a:	08 95       	ret
		default:
		Error_Error("States_Refresh: currentstate not defined");
    1c3c:	8f e9       	ldi	r24, 0x9F	; 159
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	0e 94 0e 03 	call	0x61c	; 0x61c <Error_Error>
    1c44:	08 95       	ret

00001c46 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1c46:	11 b8       	out	0x01, r1	; 1
    1c48:	80 e2       	ldi	r24, 0x20	; 32
    1c4a:	80 b9       	out	0x00, r24	; 0
    1c4c:	08 95       	ret

00001c4e <i2c_start>:
    1c4e:	94 ea       	ldi	r25, 0xA4	; 164
    1c50:	96 bf       	out	0x36, r25	; 54
    1c52:	06 b6       	in	r0, 0x36	; 54
    1c54:	07 fe       	sbrs	r0, 7
    1c56:	fd cf       	rjmp	.-6      	; 0x1c52 <i2c_start+0x4>
    1c58:	91 b1       	in	r25, 0x01	; 1
    1c5a:	98 7f       	andi	r25, 0xF8	; 248
    1c5c:	98 30       	cpi	r25, 0x08	; 8
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <i2c_start+0x16>
    1c60:	90 31       	cpi	r25, 0x10	; 16
    1c62:	79 f4       	brne	.+30     	; 0x1c82 <i2c_start+0x34>
    1c64:	83 b9       	out	0x03, r24	; 3
    1c66:	84 e8       	ldi	r24, 0x84	; 132
    1c68:	86 bf       	out	0x36, r24	; 54
    1c6a:	06 b6       	in	r0, 0x36	; 54
    1c6c:	07 fe       	sbrs	r0, 7
    1c6e:	fd cf       	rjmp	.-6      	; 0x1c6a <i2c_start+0x1c>
    1c70:	91 b1       	in	r25, 0x01	; 1
    1c72:	98 7f       	andi	r25, 0xF8	; 248
    1c74:	98 31       	cpi	r25, 0x18	; 24
    1c76:	39 f0       	breq	.+14     	; 0x1c86 <i2c_start+0x38>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 34       	cpi	r25, 0x40	; 64
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <i2c_start+0x3a>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	08 95       	ret
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	08 95       	ret
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	08 95       	ret

00001c8a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c8a:	84 e9       	ldi	r24, 0x94	; 148
    1c8c:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1c8e:	06 b6       	in	r0, 0x36	; 54
    1c90:	04 fc       	sbrc	r0, 4
    1c92:	fd cf       	rjmp	.-6      	; 0x1c8e <i2c_stop+0x4>

}/* i2c_stop */
    1c94:	08 95       	ret

00001c96 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1c96:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c98:	84 e8       	ldi	r24, 0x84	; 132
    1c9a:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1c9c:	06 b6       	in	r0, 0x36	; 54
    1c9e:	07 fe       	sbrs	r0, 7
    1ca0:	fd cf       	rjmp	.-6      	; 0x1c9c <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1ca2:	91 b1       	in	r25, 0x01	; 1
    1ca4:	98 7f       	andi	r25, 0xF8	; 248
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	98 32       	cpi	r25, 0x28	; 40
    1caa:	09 f4       	brne	.+2      	; 0x1cae <i2c_write+0x18>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1cae:	08 95       	ret

00001cb0 <__subsf3>:
    1cb0:	50 58       	subi	r21, 0x80	; 128

00001cb2 <__addsf3>:
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	aa 27       	eor	r26, r26
    1cb6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__addsf3x>
    1cba:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_round>
    1cbe:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fp_pscA>
    1cc2:	38 f0       	brcs	.+14     	; 0x1cd2 <__addsf3+0x20>
    1cc4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__fp_pscB>
    1cc8:	20 f0       	brcs	.+8      	; 0x1cd2 <__addsf3+0x20>
    1cca:	39 f4       	brne	.+14     	; 0x1cda <__addsf3+0x28>
    1ccc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cce:	19 f4       	brne	.+6      	; 0x1cd6 <__addsf3+0x24>
    1cd0:	26 f4       	brtc	.+8      	; 0x1cda <__addsf3+0x28>
    1cd2:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__fp_nan>
    1cd6:	0e f4       	brtc	.+2      	; 0x1cda <__addsf3+0x28>
    1cd8:	e0 95       	com	r30
    1cda:	e7 fb       	bst	r30, 7
    1cdc:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_inf>

00001ce0 <__addsf3x>:
    1ce0:	e9 2f       	mov	r30, r25
    1ce2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__fp_split3>
    1ce6:	58 f3       	brcs	.-42     	; 0x1cbe <__addsf3+0xc>
    1ce8:	ba 17       	cp	r27, r26
    1cea:	62 07       	cpc	r22, r18
    1cec:	73 07       	cpc	r23, r19
    1cee:	84 07       	cpc	r24, r20
    1cf0:	95 07       	cpc	r25, r21
    1cf2:	20 f0       	brcs	.+8      	; 0x1cfc <__addsf3x+0x1c>
    1cf4:	79 f4       	brne	.+30     	; 0x1d14 <__addsf3x+0x34>
    1cf6:	a6 f5       	brtc	.+104    	; 0x1d60 <__addsf3x+0x80>
    1cf8:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__fp_zero>
    1cfc:	0e f4       	brtc	.+2      	; 0x1d00 <__addsf3x+0x20>
    1cfe:	e0 95       	com	r30
    1d00:	0b 2e       	mov	r0, r27
    1d02:	ba 2f       	mov	r27, r26
    1d04:	a0 2d       	mov	r26, r0
    1d06:	0b 01       	movw	r0, r22
    1d08:	b9 01       	movw	r22, r18
    1d0a:	90 01       	movw	r18, r0
    1d0c:	0c 01       	movw	r0, r24
    1d0e:	ca 01       	movw	r24, r20
    1d10:	a0 01       	movw	r20, r0
    1d12:	11 24       	eor	r1, r1
    1d14:	ff 27       	eor	r31, r31
    1d16:	59 1b       	sub	r21, r25
    1d18:	99 f0       	breq	.+38     	; 0x1d40 <__addsf3x+0x60>
    1d1a:	59 3f       	cpi	r21, 0xF9	; 249
    1d1c:	50 f4       	brcc	.+20     	; 0x1d32 <__addsf3x+0x52>
    1d1e:	50 3e       	cpi	r21, 0xE0	; 224
    1d20:	68 f1       	brcs	.+90     	; 0x1d7c <__addsf3x+0x9c>
    1d22:	1a 16       	cp	r1, r26
    1d24:	f0 40       	sbci	r31, 0x00	; 0
    1d26:	a2 2f       	mov	r26, r18
    1d28:	23 2f       	mov	r18, r19
    1d2a:	34 2f       	mov	r19, r20
    1d2c:	44 27       	eor	r20, r20
    1d2e:	58 5f       	subi	r21, 0xF8	; 248
    1d30:	f3 cf       	rjmp	.-26     	; 0x1d18 <__addsf3x+0x38>
    1d32:	46 95       	lsr	r20
    1d34:	37 95       	ror	r19
    1d36:	27 95       	ror	r18
    1d38:	a7 95       	ror	r26
    1d3a:	f0 40       	sbci	r31, 0x00	; 0
    1d3c:	53 95       	inc	r21
    1d3e:	c9 f7       	brne	.-14     	; 0x1d32 <__addsf3x+0x52>
    1d40:	7e f4       	brtc	.+30     	; 0x1d60 <__addsf3x+0x80>
    1d42:	1f 16       	cp	r1, r31
    1d44:	ba 0b       	sbc	r27, r26
    1d46:	62 0b       	sbc	r22, r18
    1d48:	73 0b       	sbc	r23, r19
    1d4a:	84 0b       	sbc	r24, r20
    1d4c:	ba f0       	brmi	.+46     	; 0x1d7c <__addsf3x+0x9c>
    1d4e:	91 50       	subi	r25, 0x01	; 1
    1d50:	a1 f0       	breq	.+40     	; 0x1d7a <__addsf3x+0x9a>
    1d52:	ff 0f       	add	r31, r31
    1d54:	bb 1f       	adc	r27, r27
    1d56:	66 1f       	adc	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	c2 f7       	brpl	.-16     	; 0x1d4e <__addsf3x+0x6e>
    1d5e:	0e c0       	rjmp	.+28     	; 0x1d7c <__addsf3x+0x9c>
    1d60:	ba 0f       	add	r27, r26
    1d62:	62 1f       	adc	r22, r18
    1d64:	73 1f       	adc	r23, r19
    1d66:	84 1f       	adc	r24, r20
    1d68:	48 f4       	brcc	.+18     	; 0x1d7c <__addsf3x+0x9c>
    1d6a:	87 95       	ror	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	b7 95       	ror	r27
    1d72:	f7 95       	ror	r31
    1d74:	9e 3f       	cpi	r25, 0xFE	; 254
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <__addsf3x+0x9a>
    1d78:	b0 cf       	rjmp	.-160    	; 0x1cda <__addsf3+0x28>
    1d7a:	93 95       	inc	r25
    1d7c:	88 0f       	add	r24, r24
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <__addsf3x+0xa2>
    1d80:	99 27       	eor	r25, r25
    1d82:	ee 0f       	add	r30, r30
    1d84:	97 95       	ror	r25
    1d86:	87 95       	ror	r24
    1d88:	08 95       	ret

00001d8a <__divsf3>:
    1d8a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__divsf3x>
    1d8e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_round>
    1d92:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__fp_pscB>
    1d96:	58 f0       	brcs	.+22     	; 0x1dae <__divsf3+0x24>
    1d98:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fp_pscA>
    1d9c:	40 f0       	brcs	.+16     	; 0x1dae <__divsf3+0x24>
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <__divsf3+0x20>
    1da0:	5f 3f       	cpi	r21, 0xFF	; 255
    1da2:	29 f0       	breq	.+10     	; 0x1dae <__divsf3+0x24>
    1da4:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_inf>
    1da8:	51 11       	cpse	r21, r1
    1daa:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_szero>
    1dae:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__fp_nan>

00001db2 <__divsf3x>:
    1db2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__fp_split3>
    1db6:	68 f3       	brcs	.-38     	; 0x1d92 <__divsf3+0x8>

00001db8 <__divsf3_pse>:
    1db8:	99 23       	and	r25, r25
    1dba:	b1 f3       	breq	.-20     	; 0x1da8 <__divsf3+0x1e>
    1dbc:	55 23       	and	r21, r21
    1dbe:	91 f3       	breq	.-28     	; 0x1da4 <__divsf3+0x1a>
    1dc0:	95 1b       	sub	r25, r21
    1dc2:	55 0b       	sbc	r21, r21
    1dc4:	bb 27       	eor	r27, r27
    1dc6:	aa 27       	eor	r26, r26
    1dc8:	62 17       	cp	r22, r18
    1dca:	73 07       	cpc	r23, r19
    1dcc:	84 07       	cpc	r24, r20
    1dce:	38 f0       	brcs	.+14     	; 0x1dde <__divsf3_pse+0x26>
    1dd0:	9f 5f       	subi	r25, 0xFF	; 255
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	22 0f       	add	r18, r18
    1dd6:	33 1f       	adc	r19, r19
    1dd8:	44 1f       	adc	r20, r20
    1dda:	aa 1f       	adc	r26, r26
    1ddc:	a9 f3       	breq	.-22     	; 0x1dc8 <__divsf3_pse+0x10>
    1dde:	35 d0       	rcall	.+106    	; 0x1e4a <__divsf3_pse+0x92>
    1de0:	0e 2e       	mov	r0, r30
    1de2:	3a f0       	brmi	.+14     	; 0x1df2 <__divsf3_pse+0x3a>
    1de4:	e0 e8       	ldi	r30, 0x80	; 128
    1de6:	32 d0       	rcall	.+100    	; 0x1e4c <__divsf3_pse+0x94>
    1de8:	91 50       	subi	r25, 0x01	; 1
    1dea:	50 40       	sbci	r21, 0x00	; 0
    1dec:	e6 95       	lsr	r30
    1dee:	00 1c       	adc	r0, r0
    1df0:	ca f7       	brpl	.-14     	; 0x1de4 <__divsf3_pse+0x2c>
    1df2:	2b d0       	rcall	.+86     	; 0x1e4a <__divsf3_pse+0x92>
    1df4:	fe 2f       	mov	r31, r30
    1df6:	29 d0       	rcall	.+82     	; 0x1e4a <__divsf3_pse+0x92>
    1df8:	66 0f       	add	r22, r22
    1dfa:	77 1f       	adc	r23, r23
    1dfc:	88 1f       	adc	r24, r24
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	26 17       	cp	r18, r22
    1e02:	37 07       	cpc	r19, r23
    1e04:	48 07       	cpc	r20, r24
    1e06:	ab 07       	cpc	r26, r27
    1e08:	b0 e8       	ldi	r27, 0x80	; 128
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <__divsf3_pse+0x56>
    1e0c:	bb 0b       	sbc	r27, r27
    1e0e:	80 2d       	mov	r24, r0
    1e10:	bf 01       	movw	r22, r30
    1e12:	ff 27       	eor	r31, r31
    1e14:	93 58       	subi	r25, 0x83	; 131
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	3a f0       	brmi	.+14     	; 0x1e28 <__divsf3_pse+0x70>
    1e1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e1c:	51 05       	cpc	r21, r1
    1e1e:	78 f0       	brcs	.+30     	; 0x1e3e <__divsf3_pse+0x86>
    1e20:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_inf>
    1e24:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_szero>
    1e28:	5f 3f       	cpi	r21, 0xFF	; 255
    1e2a:	e4 f3       	brlt	.-8      	; 0x1e24 <__divsf3_pse+0x6c>
    1e2c:	98 3e       	cpi	r25, 0xE8	; 232
    1e2e:	d4 f3       	brlt	.-12     	; 0x1e24 <__divsf3_pse+0x6c>
    1e30:	86 95       	lsr	r24
    1e32:	77 95       	ror	r23
    1e34:	67 95       	ror	r22
    1e36:	b7 95       	ror	r27
    1e38:	f7 95       	ror	r31
    1e3a:	9f 5f       	subi	r25, 0xFF	; 255
    1e3c:	c9 f7       	brne	.-14     	; 0x1e30 <__divsf3_pse+0x78>
    1e3e:	88 0f       	add	r24, r24
    1e40:	91 1d       	adc	r25, r1
    1e42:	96 95       	lsr	r25
    1e44:	87 95       	ror	r24
    1e46:	97 f9       	bld	r25, 7
    1e48:	08 95       	ret
    1e4a:	e1 e0       	ldi	r30, 0x01	; 1
    1e4c:	66 0f       	add	r22, r22
    1e4e:	77 1f       	adc	r23, r23
    1e50:	88 1f       	adc	r24, r24
    1e52:	bb 1f       	adc	r27, r27
    1e54:	62 17       	cp	r22, r18
    1e56:	73 07       	cpc	r23, r19
    1e58:	84 07       	cpc	r24, r20
    1e5a:	ba 07       	cpc	r27, r26
    1e5c:	20 f0       	brcs	.+8      	; 0x1e66 <__divsf3_pse+0xae>
    1e5e:	62 1b       	sub	r22, r18
    1e60:	73 0b       	sbc	r23, r19
    1e62:	84 0b       	sbc	r24, r20
    1e64:	ba 0b       	sbc	r27, r26
    1e66:	ee 1f       	adc	r30, r30
    1e68:	88 f7       	brcc	.-30     	; 0x1e4c <__divsf3_pse+0x94>
    1e6a:	e0 95       	com	r30
    1e6c:	08 95       	ret

00001e6e <__fixsfsi>:
    1e6e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__fixunssfsi>
    1e72:	68 94       	set
    1e74:	b1 11       	cpse	r27, r1
    1e76:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_szero>
    1e7a:	08 95       	ret

00001e7c <__fixunssfsi>:
    1e7c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fp_splitA>
    1e80:	88 f0       	brcs	.+34     	; 0x1ea4 <__fixunssfsi+0x28>
    1e82:	9f 57       	subi	r25, 0x7F	; 127
    1e84:	98 f0       	brcs	.+38     	; 0x1eac <__fixunssfsi+0x30>
    1e86:	b9 2f       	mov	r27, r25
    1e88:	99 27       	eor	r25, r25
    1e8a:	b7 51       	subi	r27, 0x17	; 23
    1e8c:	b0 f0       	brcs	.+44     	; 0x1eba <__fixunssfsi+0x3e>
    1e8e:	e1 f0       	breq	.+56     	; 0x1ec8 <__fixunssfsi+0x4c>
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	1a f0       	brmi	.+6      	; 0x1ea0 <__fixunssfsi+0x24>
    1e9a:	ba 95       	dec	r27
    1e9c:	c9 f7       	brne	.-14     	; 0x1e90 <__fixunssfsi+0x14>
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <__fixunssfsi+0x4c>
    1ea0:	b1 30       	cpi	r27, 0x01	; 1
    1ea2:	91 f0       	breq	.+36     	; 0x1ec8 <__fixunssfsi+0x4c>
    1ea4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fp_zero>
    1ea8:	b1 e0       	ldi	r27, 0x01	; 1
    1eaa:	08 95       	ret
    1eac:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__fp_zero>
    1eb0:	67 2f       	mov	r22, r23
    1eb2:	78 2f       	mov	r23, r24
    1eb4:	88 27       	eor	r24, r24
    1eb6:	b8 5f       	subi	r27, 0xF8	; 248
    1eb8:	39 f0       	breq	.+14     	; 0x1ec8 <__fixunssfsi+0x4c>
    1eba:	b9 3f       	cpi	r27, 0xF9	; 249
    1ebc:	cc f3       	brlt	.-14     	; 0x1eb0 <__fixunssfsi+0x34>
    1ebe:	86 95       	lsr	r24
    1ec0:	77 95       	ror	r23
    1ec2:	67 95       	ror	r22
    1ec4:	b3 95       	inc	r27
    1ec6:	d9 f7       	brne	.-10     	; 0x1ebe <__fixunssfsi+0x42>
    1ec8:	3e f4       	brtc	.+14     	; 0x1ed8 <__fixunssfsi+0x5c>
    1eca:	90 95       	com	r25
    1ecc:	80 95       	com	r24
    1ece:	70 95       	com	r23
    1ed0:	61 95       	neg	r22
    1ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	08 95       	ret

00001eda <__floatunsisf>:
    1eda:	e8 94       	clt
    1edc:	09 c0       	rjmp	.+18     	; 0x1ef0 <__floatsisf+0x12>

00001ede <__floatsisf>:
    1ede:	97 fb       	bst	r25, 7
    1ee0:	3e f4       	brtc	.+14     	; 0x1ef0 <__floatsisf+0x12>
    1ee2:	90 95       	com	r25
    1ee4:	80 95       	com	r24
    1ee6:	70 95       	com	r23
    1ee8:	61 95       	neg	r22
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	8f 4f       	sbci	r24, 0xFF	; 255
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	99 23       	and	r25, r25
    1ef2:	a9 f0       	breq	.+42     	; 0x1f1e <__floatsisf+0x40>
    1ef4:	f9 2f       	mov	r31, r25
    1ef6:	96 e9       	ldi	r25, 0x96	; 150
    1ef8:	bb 27       	eor	r27, r27
    1efa:	93 95       	inc	r25
    1efc:	f6 95       	lsr	r31
    1efe:	87 95       	ror	r24
    1f00:	77 95       	ror	r23
    1f02:	67 95       	ror	r22
    1f04:	b7 95       	ror	r27
    1f06:	f1 11       	cpse	r31, r1
    1f08:	f8 cf       	rjmp	.-16     	; 0x1efa <__floatsisf+0x1c>
    1f0a:	fa f4       	brpl	.+62     	; 0x1f4a <__floatsisf+0x6c>
    1f0c:	bb 0f       	add	r27, r27
    1f0e:	11 f4       	brne	.+4      	; 0x1f14 <__floatsisf+0x36>
    1f10:	60 ff       	sbrs	r22, 0
    1f12:	1b c0       	rjmp	.+54     	; 0x1f4a <__floatsisf+0x6c>
    1f14:	6f 5f       	subi	r22, 0xFF	; 255
    1f16:	7f 4f       	sbci	r23, 0xFF	; 255
    1f18:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1c:	16 c0       	rjmp	.+44     	; 0x1f4a <__floatsisf+0x6c>
    1f1e:	88 23       	and	r24, r24
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <__floatsisf+0x48>
    1f22:	96 e9       	ldi	r25, 0x96	; 150
    1f24:	11 c0       	rjmp	.+34     	; 0x1f48 <__floatsisf+0x6a>
    1f26:	77 23       	and	r23, r23
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <__floatsisf+0x54>
    1f2a:	9e e8       	ldi	r25, 0x8E	; 142
    1f2c:	87 2f       	mov	r24, r23
    1f2e:	76 2f       	mov	r23, r22
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <__floatsisf+0x5e>
    1f32:	66 23       	and	r22, r22
    1f34:	71 f0       	breq	.+28     	; 0x1f52 <__floatsisf+0x74>
    1f36:	96 e8       	ldi	r25, 0x86	; 134
    1f38:	86 2f       	mov	r24, r22
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	2a f0       	brmi	.+10     	; 0x1f4a <__floatsisf+0x6c>
    1f40:	9a 95       	dec	r25
    1f42:	66 0f       	add	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	da f7       	brpl	.-10     	; 0x1f40 <__floatsisf+0x62>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	96 95       	lsr	r25
    1f4e:	87 95       	ror	r24
    1f50:	97 f9       	bld	r25, 7
    1f52:	08 95       	ret

00001f54 <__fp_inf>:
    1f54:	97 f9       	bld	r25, 7
    1f56:	9f 67       	ori	r25, 0x7F	; 127
    1f58:	80 e8       	ldi	r24, 0x80	; 128
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	08 95       	ret

00001f60 <__fp_nan>:
    1f60:	9f ef       	ldi	r25, 0xFF	; 255
    1f62:	80 ec       	ldi	r24, 0xC0	; 192
    1f64:	08 95       	ret

00001f66 <__fp_pscA>:
    1f66:	00 24       	eor	r0, r0
    1f68:	0a 94       	dec	r0
    1f6a:	16 16       	cp	r1, r22
    1f6c:	17 06       	cpc	r1, r23
    1f6e:	18 06       	cpc	r1, r24
    1f70:	09 06       	cpc	r0, r25
    1f72:	08 95       	ret

00001f74 <__fp_pscB>:
    1f74:	00 24       	eor	r0, r0
    1f76:	0a 94       	dec	r0
    1f78:	12 16       	cp	r1, r18
    1f7a:	13 06       	cpc	r1, r19
    1f7c:	14 06       	cpc	r1, r20
    1f7e:	05 06       	cpc	r0, r21
    1f80:	08 95       	ret

00001f82 <__fp_round>:
    1f82:	09 2e       	mov	r0, r25
    1f84:	03 94       	inc	r0
    1f86:	00 0c       	add	r0, r0
    1f88:	11 f4       	brne	.+4      	; 0x1f8e <__fp_round+0xc>
    1f8a:	88 23       	and	r24, r24
    1f8c:	52 f0       	brmi	.+20     	; 0x1fa2 <__fp_round+0x20>
    1f8e:	bb 0f       	add	r27, r27
    1f90:	40 f4       	brcc	.+16     	; 0x1fa2 <__fp_round+0x20>
    1f92:	bf 2b       	or	r27, r31
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <__fp_round+0x18>
    1f96:	60 ff       	sbrs	r22, 0
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <__fp_round+0x20>
    1f9a:	6f 5f       	subi	r22, 0xFF	; 255
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	08 95       	ret

00001fa4 <__fp_split3>:
    1fa4:	57 fd       	sbrc	r21, 7
    1fa6:	90 58       	subi	r25, 0x80	; 128
    1fa8:	44 0f       	add	r20, r20
    1faa:	55 1f       	adc	r21, r21
    1fac:	59 f0       	breq	.+22     	; 0x1fc4 <__fp_splitA+0x10>
    1fae:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb0:	71 f0       	breq	.+28     	; 0x1fce <__fp_splitA+0x1a>
    1fb2:	47 95       	ror	r20

00001fb4 <__fp_splitA>:
    1fb4:	88 0f       	add	r24, r24
    1fb6:	97 fb       	bst	r25, 7
    1fb8:	99 1f       	adc	r25, r25
    1fba:	61 f0       	breq	.+24     	; 0x1fd4 <__fp_splitA+0x20>
    1fbc:	9f 3f       	cpi	r25, 0xFF	; 255
    1fbe:	79 f0       	breq	.+30     	; 0x1fde <__fp_splitA+0x2a>
    1fc0:	87 95       	ror	r24
    1fc2:	08 95       	ret
    1fc4:	12 16       	cp	r1, r18
    1fc6:	13 06       	cpc	r1, r19
    1fc8:	14 06       	cpc	r1, r20
    1fca:	55 1f       	adc	r21, r21
    1fcc:	f2 cf       	rjmp	.-28     	; 0x1fb2 <__fp_split3+0xe>
    1fce:	46 95       	lsr	r20
    1fd0:	f1 df       	rcall	.-30     	; 0x1fb4 <__fp_splitA>
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <__fp_splitA+0x30>
    1fd4:	16 16       	cp	r1, r22
    1fd6:	17 06       	cpc	r1, r23
    1fd8:	18 06       	cpc	r1, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	f1 cf       	rjmp	.-30     	; 0x1fc0 <__fp_splitA+0xc>
    1fde:	86 95       	lsr	r24
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	61 05       	cpc	r22, r1
    1fe4:	08 94       	sec
    1fe6:	08 95       	ret

00001fe8 <__fp_zero>:
    1fe8:	e8 94       	clt

00001fea <__fp_szero>:
    1fea:	bb 27       	eor	r27, r27
    1fec:	66 27       	eor	r22, r22
    1fee:	77 27       	eor	r23, r23
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	97 f9       	bld	r25, 7
    1ff4:	08 95       	ret

00001ff6 <__mulsf3>:
    1ff6:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3x>
    1ffa:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_round>
    1ffe:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fp_pscA>
    2002:	38 f0       	brcs	.+14     	; 0x2012 <__mulsf3+0x1c>
    2004:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__fp_pscB>
    2008:	20 f0       	brcs	.+8      	; 0x2012 <__mulsf3+0x1c>
    200a:	95 23       	and	r25, r21
    200c:	11 f0       	breq	.+4      	; 0x2012 <__mulsf3+0x1c>
    200e:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_inf>
    2012:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__fp_nan>
    2016:	11 24       	eor	r1, r1
    2018:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_szero>

0000201c <__mulsf3x>:
    201c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__fp_split3>
    2020:	70 f3       	brcs	.-36     	; 0x1ffe <__mulsf3+0x8>

00002022 <__mulsf3_pse>:
    2022:	95 9f       	mul	r25, r21
    2024:	c1 f3       	breq	.-16     	; 0x2016 <__mulsf3+0x20>
    2026:	95 0f       	add	r25, r21
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	55 1f       	adc	r21, r21
    202c:	62 9f       	mul	r22, r18
    202e:	f0 01       	movw	r30, r0
    2030:	72 9f       	mul	r23, r18
    2032:	bb 27       	eor	r27, r27
    2034:	f0 0d       	add	r31, r0
    2036:	b1 1d       	adc	r27, r1
    2038:	63 9f       	mul	r22, r19
    203a:	aa 27       	eor	r26, r26
    203c:	f0 0d       	add	r31, r0
    203e:	b1 1d       	adc	r27, r1
    2040:	aa 1f       	adc	r26, r26
    2042:	64 9f       	mul	r22, r20
    2044:	66 27       	eor	r22, r22
    2046:	b0 0d       	add	r27, r0
    2048:	a1 1d       	adc	r26, r1
    204a:	66 1f       	adc	r22, r22
    204c:	82 9f       	mul	r24, r18
    204e:	22 27       	eor	r18, r18
    2050:	b0 0d       	add	r27, r0
    2052:	a1 1d       	adc	r26, r1
    2054:	62 1f       	adc	r22, r18
    2056:	73 9f       	mul	r23, r19
    2058:	b0 0d       	add	r27, r0
    205a:	a1 1d       	adc	r26, r1
    205c:	62 1f       	adc	r22, r18
    205e:	83 9f       	mul	r24, r19
    2060:	a0 0d       	add	r26, r0
    2062:	61 1d       	adc	r22, r1
    2064:	22 1f       	adc	r18, r18
    2066:	74 9f       	mul	r23, r20
    2068:	33 27       	eor	r19, r19
    206a:	a0 0d       	add	r26, r0
    206c:	61 1d       	adc	r22, r1
    206e:	23 1f       	adc	r18, r19
    2070:	84 9f       	mul	r24, r20
    2072:	60 0d       	add	r22, r0
    2074:	21 1d       	adc	r18, r1
    2076:	82 2f       	mov	r24, r18
    2078:	76 2f       	mov	r23, r22
    207a:	6a 2f       	mov	r22, r26
    207c:	11 24       	eor	r1, r1
    207e:	9f 57       	subi	r25, 0x7F	; 127
    2080:	50 40       	sbci	r21, 0x00	; 0
    2082:	9a f0       	brmi	.+38     	; 0x20aa <__mulsf3_pse+0x88>
    2084:	f1 f0       	breq	.+60     	; 0x20c2 <__mulsf3_pse+0xa0>
    2086:	88 23       	and	r24, r24
    2088:	4a f0       	brmi	.+18     	; 0x209c <__mulsf3_pse+0x7a>
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	bb 1f       	adc	r27, r27
    2090:	66 1f       	adc	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	88 1f       	adc	r24, r24
    2096:	91 50       	subi	r25, 0x01	; 1
    2098:	50 40       	sbci	r21, 0x00	; 0
    209a:	a9 f7       	brne	.-22     	; 0x2086 <__mulsf3_pse+0x64>
    209c:	9e 3f       	cpi	r25, 0xFE	; 254
    209e:	51 05       	cpc	r21, r1
    20a0:	80 f0       	brcs	.+32     	; 0x20c2 <__mulsf3_pse+0xa0>
    20a2:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__fp_inf>
    20a6:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_szero>
    20aa:	5f 3f       	cpi	r21, 0xFF	; 255
    20ac:	e4 f3       	brlt	.-8      	; 0x20a6 <__mulsf3_pse+0x84>
    20ae:	98 3e       	cpi	r25, 0xE8	; 232
    20b0:	d4 f3       	brlt	.-12     	; 0x20a6 <__mulsf3_pse+0x84>
    20b2:	86 95       	lsr	r24
    20b4:	77 95       	ror	r23
    20b6:	67 95       	ror	r22
    20b8:	b7 95       	ror	r27
    20ba:	f7 95       	ror	r31
    20bc:	e7 95       	ror	r30
    20be:	9f 5f       	subi	r25, 0xFF	; 255
    20c0:	c1 f7       	brne	.-16     	; 0x20b2 <__mulsf3_pse+0x90>
    20c2:	fe 2b       	or	r31, r30
    20c4:	88 0f       	add	r24, r24
    20c6:	91 1d       	adc	r25, r1
    20c8:	96 95       	lsr	r25
    20ca:	87 95       	ror	r24
    20cc:	97 f9       	bld	r25, 7
    20ce:	08 95       	ret

000020d0 <__divmodhi4>:
    20d0:	97 fb       	bst	r25, 7
    20d2:	07 2e       	mov	r0, r23
    20d4:	16 f4       	brtc	.+4      	; 0x20da <__divmodhi4+0xa>
    20d6:	00 94       	com	r0
    20d8:	07 d0       	rcall	.+14     	; 0x20e8 <__divmodhi4_neg1>
    20da:	77 fd       	sbrc	r23, 7
    20dc:	09 d0       	rcall	.+18     	; 0x20f0 <__divmodhi4_neg2>
    20de:	0e 94 82 10 	call	0x2104	; 0x2104 <__udivmodhi4>
    20e2:	07 fc       	sbrc	r0, 7
    20e4:	05 d0       	rcall	.+10     	; 0x20f0 <__divmodhi4_neg2>
    20e6:	3e f4       	brtc	.+14     	; 0x20f6 <__divmodhi4_exit>

000020e8 <__divmodhi4_neg1>:
    20e8:	90 95       	com	r25
    20ea:	81 95       	neg	r24
    20ec:	9f 4f       	sbci	r25, 0xFF	; 255
    20ee:	08 95       	ret

000020f0 <__divmodhi4_neg2>:
    20f0:	70 95       	com	r23
    20f2:	61 95       	neg	r22
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255

000020f6 <__divmodhi4_exit>:
    20f6:	08 95       	ret

000020f8 <__tablejump2__>:
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	05 90       	lpm	r0, Z+
    20fe:	f4 91       	lpm	r31, Z
    2100:	e0 2d       	mov	r30, r0
    2102:	09 94       	ijmp

00002104 <__udivmodhi4>:
    2104:	aa 1b       	sub	r26, r26
    2106:	bb 1b       	sub	r27, r27
    2108:	51 e1       	ldi	r21, 0x11	; 17
    210a:	07 c0       	rjmp	.+14     	; 0x211a <__udivmodhi4_ep>

0000210c <__udivmodhi4_loop>:
    210c:	aa 1f       	adc	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	a6 17       	cp	r26, r22
    2112:	b7 07       	cpc	r27, r23
    2114:	10 f0       	brcs	.+4      	; 0x211a <__udivmodhi4_ep>
    2116:	a6 1b       	sub	r26, r22
    2118:	b7 0b       	sbc	r27, r23

0000211a <__udivmodhi4_ep>:
    211a:	88 1f       	adc	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	5a 95       	dec	r21
    2120:	a9 f7       	brne	.-22     	; 0x210c <__udivmodhi4_loop>
    2122:	80 95       	com	r24
    2124:	90 95       	com	r25
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	08 95       	ret

0000212c <dtostrf>:
    212c:	ef 92       	push	r14
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	e8 01       	movw	r28, r16
    2138:	47 fd       	sbrc	r20, 7
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <dtostrf+0x14>
    213c:	34 e0       	ldi	r19, 0x04	; 4
    213e:	01 c0       	rjmp	.+2      	; 0x2142 <dtostrf+0x16>
    2140:	34 e1       	ldi	r19, 0x14	; 20
    2142:	04 2e       	mov	r0, r20
    2144:	00 0c       	add	r0, r0
    2146:	55 0b       	sbc	r21, r21
    2148:	57 ff       	sbrs	r21, 7
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <dtostrf+0x26>
    214c:	51 95       	neg	r21
    214e:	41 95       	neg	r20
    2150:	51 09       	sbc	r21, r1
    2152:	e3 2e       	mov	r14, r19
    2154:	02 2f       	mov	r16, r18
    2156:	24 2f       	mov	r18, r20
    2158:	ae 01       	movw	r20, r28
    215a:	0e 94 06 14 	call	0x280c	; 0x280c <dtoa_prf>
    215e:	ce 01       	movw	r24, r28
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ef 90       	pop	r14
    216a:	08 95       	ret

0000216c <malloc>:
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	82 30       	cpi	r24, 0x02	; 2
    2176:	91 05       	cpc	r25, r1
    2178:	10 f4       	brcc	.+4      	; 0x217e <malloc+0x12>
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <__flp>
    2182:	f0 91 1b 06 	lds	r31, 0x061B	; 0x80061b <__flp+0x1>
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	a0 e0       	ldi	r26, 0x00	; 0
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	30 97       	sbiw	r30, 0x00	; 0
    2190:	19 f1       	breq	.+70     	; 0x21d8 <malloc+0x6c>
    2192:	40 81       	ld	r20, Z
    2194:	51 81       	ldd	r21, Z+1	; 0x01
    2196:	02 81       	ldd	r16, Z+2	; 0x02
    2198:	13 81       	ldd	r17, Z+3	; 0x03
    219a:	48 17       	cp	r20, r24
    219c:	59 07       	cpc	r21, r25
    219e:	c8 f0       	brcs	.+50     	; 0x21d2 <malloc+0x66>
    21a0:	84 17       	cp	r24, r20
    21a2:	95 07       	cpc	r25, r21
    21a4:	69 f4       	brne	.+26     	; 0x21c0 <malloc+0x54>
    21a6:	10 97       	sbiw	r26, 0x00	; 0
    21a8:	31 f0       	breq	.+12     	; 0x21b6 <malloc+0x4a>
    21aa:	12 96       	adiw	r26, 0x02	; 2
    21ac:	0c 93       	st	X, r16
    21ae:	12 97       	sbiw	r26, 0x02	; 2
    21b0:	13 96       	adiw	r26, 0x03	; 3
    21b2:	1c 93       	st	X, r17
    21b4:	27 c0       	rjmp	.+78     	; 0x2204 <malloc+0x98>
    21b6:	00 93 1a 06 	sts	0x061A, r16	; 0x80061a <__flp>
    21ba:	10 93 1b 06 	sts	0x061B, r17	; 0x80061b <__flp+0x1>
    21be:	22 c0       	rjmp	.+68     	; 0x2204 <malloc+0x98>
    21c0:	21 15       	cp	r18, r1
    21c2:	31 05       	cpc	r19, r1
    21c4:	19 f0       	breq	.+6      	; 0x21cc <malloc+0x60>
    21c6:	42 17       	cp	r20, r18
    21c8:	53 07       	cpc	r21, r19
    21ca:	18 f4       	brcc	.+6      	; 0x21d2 <malloc+0x66>
    21cc:	9a 01       	movw	r18, r20
    21ce:	bd 01       	movw	r22, r26
    21d0:	ef 01       	movw	r28, r30
    21d2:	df 01       	movw	r26, r30
    21d4:	f8 01       	movw	r30, r16
    21d6:	db cf       	rjmp	.-74     	; 0x218e <malloc+0x22>
    21d8:	21 15       	cp	r18, r1
    21da:	31 05       	cpc	r19, r1
    21dc:	f9 f0       	breq	.+62     	; 0x221c <malloc+0xb0>
    21de:	28 1b       	sub	r18, r24
    21e0:	39 0b       	sbc	r19, r25
    21e2:	24 30       	cpi	r18, 0x04	; 4
    21e4:	31 05       	cpc	r19, r1
    21e6:	80 f4       	brcc	.+32     	; 0x2208 <malloc+0x9c>
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	61 15       	cp	r22, r1
    21ee:	71 05       	cpc	r23, r1
    21f0:	21 f0       	breq	.+8      	; 0x21fa <malloc+0x8e>
    21f2:	fb 01       	movw	r30, r22
    21f4:	93 83       	std	Z+3, r25	; 0x03
    21f6:	82 83       	std	Z+2, r24	; 0x02
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <malloc+0x96>
    21fa:	90 93 1b 06 	sts	0x061B, r25	; 0x80061b <__flp+0x1>
    21fe:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__flp>
    2202:	fe 01       	movw	r30, r28
    2204:	32 96       	adiw	r30, 0x02	; 2
    2206:	44 c0       	rjmp	.+136    	; 0x2290 <malloc+0x124>
    2208:	fe 01       	movw	r30, r28
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	81 93       	st	Z+, r24
    2210:	91 93       	st	Z+, r25
    2212:	22 50       	subi	r18, 0x02	; 2
    2214:	31 09       	sbc	r19, r1
    2216:	39 83       	std	Y+1, r19	; 0x01
    2218:	28 83       	st	Y, r18
    221a:	3a c0       	rjmp	.+116    	; 0x2290 <malloc+0x124>
    221c:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__brkval>
    2220:	30 91 19 06 	lds	r19, 0x0619	; 0x800619 <__brkval+0x1>
    2224:	23 2b       	or	r18, r19
    2226:	41 f4       	brne	.+16     	; 0x2238 <malloc+0xcc>
    2228:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    222c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    2230:	30 93 19 06 	sts	0x0619, r19	; 0x800619 <__brkval+0x1>
    2234:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__brkval>
    2238:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    223c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2240:	21 15       	cp	r18, r1
    2242:	31 05       	cpc	r19, r1
    2244:	41 f4       	brne	.+16     	; 0x2256 <malloc+0xea>
    2246:	2d b7       	in	r18, 0x3d	; 61
    2248:	3e b7       	in	r19, 0x3e	; 62
    224a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    224e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    2252:	24 1b       	sub	r18, r20
    2254:	35 0b       	sbc	r19, r21
    2256:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <__brkval>
    225a:	f0 91 19 06 	lds	r31, 0x0619	; 0x800619 <__brkval+0x1>
    225e:	e2 17       	cp	r30, r18
    2260:	f3 07       	cpc	r31, r19
    2262:	a0 f4       	brcc	.+40     	; 0x228c <malloc+0x120>
    2264:	2e 1b       	sub	r18, r30
    2266:	3f 0b       	sbc	r19, r31
    2268:	28 17       	cp	r18, r24
    226a:	39 07       	cpc	r19, r25
    226c:	78 f0       	brcs	.+30     	; 0x228c <malloc+0x120>
    226e:	ac 01       	movw	r20, r24
    2270:	4e 5f       	subi	r20, 0xFE	; 254
    2272:	5f 4f       	sbci	r21, 0xFF	; 255
    2274:	24 17       	cp	r18, r20
    2276:	35 07       	cpc	r19, r21
    2278:	48 f0       	brcs	.+18     	; 0x228c <malloc+0x120>
    227a:	4e 0f       	add	r20, r30
    227c:	5f 1f       	adc	r21, r31
    227e:	50 93 19 06 	sts	0x0619, r21	; 0x800619 <__brkval+0x1>
    2282:	40 93 18 06 	sts	0x0618, r20	; 0x800618 <__brkval>
    2286:	81 93       	st	Z+, r24
    2288:	91 93       	st	Z+, r25
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <malloc+0x124>
    228c:	e0 e0       	ldi	r30, 0x00	; 0
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	cf 01       	movw	r24, r30
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <free>:
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <free+0xa>
    22a4:	81 c0       	rjmp	.+258    	; 0x23a8 <free+0x10c>
    22a6:	fc 01       	movw	r30, r24
    22a8:	32 97       	sbiw	r30, 0x02	; 2
    22aa:	13 82       	std	Z+3, r1	; 0x03
    22ac:	12 82       	std	Z+2, r1	; 0x02
    22ae:	a0 91 1a 06 	lds	r26, 0x061A	; 0x80061a <__flp>
    22b2:	b0 91 1b 06 	lds	r27, 0x061B	; 0x80061b <__flp+0x1>
    22b6:	10 97       	sbiw	r26, 0x00	; 0
    22b8:	81 f4       	brne	.+32     	; 0x22da <free+0x3e>
    22ba:	20 81       	ld	r18, Z
    22bc:	31 81       	ldd	r19, Z+1	; 0x01
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__brkval>
    22c6:	30 91 19 06 	lds	r19, 0x0619	; 0x800619 <__brkval+0x1>
    22ca:	28 17       	cp	r18, r24
    22cc:	39 07       	cpc	r19, r25
    22ce:	51 f5       	brne	.+84     	; 0x2324 <free+0x88>
    22d0:	f0 93 19 06 	sts	0x0619, r31	; 0x800619 <__brkval+0x1>
    22d4:	e0 93 18 06 	sts	0x0618, r30	; 0x800618 <__brkval>
    22d8:	67 c0       	rjmp	.+206    	; 0x23a8 <free+0x10c>
    22da:	ed 01       	movw	r28, r26
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	ce 17       	cp	r28, r30
    22e2:	df 07       	cpc	r29, r31
    22e4:	40 f4       	brcc	.+16     	; 0x22f6 <free+0x5a>
    22e6:	4a 81       	ldd	r20, Y+2	; 0x02
    22e8:	5b 81       	ldd	r21, Y+3	; 0x03
    22ea:	9e 01       	movw	r18, r28
    22ec:	41 15       	cp	r20, r1
    22ee:	51 05       	cpc	r21, r1
    22f0:	f1 f0       	breq	.+60     	; 0x232e <free+0x92>
    22f2:	ea 01       	movw	r28, r20
    22f4:	f5 cf       	rjmp	.-22     	; 0x22e0 <free+0x44>
    22f6:	d3 83       	std	Z+3, r29	; 0x03
    22f8:	c2 83       	std	Z+2, r28	; 0x02
    22fa:	40 81       	ld	r20, Z
    22fc:	51 81       	ldd	r21, Z+1	; 0x01
    22fe:	84 0f       	add	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	c8 17       	cp	r28, r24
    2304:	d9 07       	cpc	r29, r25
    2306:	59 f4       	brne	.+22     	; 0x231e <free+0x82>
    2308:	88 81       	ld	r24, Y
    230a:	99 81       	ldd	r25, Y+1	; 0x01
    230c:	84 0f       	add	r24, r20
    230e:	95 1f       	adc	r25, r21
    2310:	02 96       	adiw	r24, 0x02	; 2
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	93 83       	std	Z+3, r25	; 0x03
    231c:	82 83       	std	Z+2, r24	; 0x02
    231e:	21 15       	cp	r18, r1
    2320:	31 05       	cpc	r19, r1
    2322:	29 f4       	brne	.+10     	; 0x232e <free+0x92>
    2324:	f0 93 1b 06 	sts	0x061B, r31	; 0x80061b <__flp+0x1>
    2328:	e0 93 1a 06 	sts	0x061A, r30	; 0x80061a <__flp>
    232c:	3d c0       	rjmp	.+122    	; 0x23a8 <free+0x10c>
    232e:	e9 01       	movw	r28, r18
    2330:	fb 83       	std	Y+3, r31	; 0x03
    2332:	ea 83       	std	Y+2, r30	; 0x02
    2334:	49 91       	ld	r20, Y+
    2336:	59 91       	ld	r21, Y+
    2338:	c4 0f       	add	r28, r20
    233a:	d5 1f       	adc	r29, r21
    233c:	ec 17       	cp	r30, r28
    233e:	fd 07       	cpc	r31, r29
    2340:	61 f4       	brne	.+24     	; 0x235a <free+0xbe>
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	84 0f       	add	r24, r20
    2348:	95 1f       	adc	r25, r21
    234a:	02 96       	adiw	r24, 0x02	; 2
    234c:	e9 01       	movw	r28, r18
    234e:	99 83       	std	Y+1, r25	; 0x01
    2350:	88 83       	st	Y, r24
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	93 81       	ldd	r25, Z+3	; 0x03
    2356:	9b 83       	std	Y+3, r25	; 0x03
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	e0 e0       	ldi	r30, 0x00	; 0
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	12 96       	adiw	r26, 0x02	; 2
    2360:	8d 91       	ld	r24, X+
    2362:	9c 91       	ld	r25, X
    2364:	13 97       	sbiw	r26, 0x03	; 3
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	19 f0       	breq	.+6      	; 0x2370 <free+0xd4>
    236a:	fd 01       	movw	r30, r26
    236c:	dc 01       	movw	r26, r24
    236e:	f7 cf       	rjmp	.-18     	; 0x235e <free+0xc2>
    2370:	8d 91       	ld	r24, X+
    2372:	9c 91       	ld	r25, X
    2374:	11 97       	sbiw	r26, 0x01	; 1
    2376:	9d 01       	movw	r18, r26
    2378:	2e 5f       	subi	r18, 0xFE	; 254
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__brkval>
    2384:	30 91 19 06 	lds	r19, 0x0619	; 0x800619 <__brkval+0x1>
    2388:	28 17       	cp	r18, r24
    238a:	39 07       	cpc	r19, r25
    238c:	69 f4       	brne	.+26     	; 0x23a8 <free+0x10c>
    238e:	30 97       	sbiw	r30, 0x00	; 0
    2390:	29 f4       	brne	.+10     	; 0x239c <free+0x100>
    2392:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <__flp+0x1>
    2396:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <__flp>
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <free+0x104>
    239c:	13 82       	std	Z+3, r1	; 0x03
    239e:	12 82       	std	Z+2, r1	; 0x02
    23a0:	b0 93 19 06 	sts	0x0619, r27	; 0x800619 <__brkval+0x1>
    23a4:	a0 93 18 06 	sts	0x0618, r26	; 0x800618 <__brkval>
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <strcpy>:
    23ae:	fb 01       	movw	r30, r22
    23b0:	dc 01       	movw	r26, r24
    23b2:	01 90       	ld	r0, Z+
    23b4:	0d 92       	st	X+, r0
    23b6:	00 20       	and	r0, r0
    23b8:	e1 f7       	brne	.-8      	; 0x23b2 <strcpy+0x4>
    23ba:	08 95       	ret

000023bc <__itoa_ncheck>:
    23bc:	bb 27       	eor	r27, r27
    23be:	4a 30       	cpi	r20, 0x0A	; 10
    23c0:	31 f4       	brne	.+12     	; 0x23ce <__itoa_ncheck+0x12>
    23c2:	99 23       	and	r25, r25
    23c4:	22 f4       	brpl	.+8      	; 0x23ce <__itoa_ncheck+0x12>
    23c6:	bd e2       	ldi	r27, 0x2D	; 45
    23c8:	90 95       	com	r25
    23ca:	81 95       	neg	r24
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__utoa_common>

000023d2 <__utoa_ncheck>:
    23d2:	bb 27       	eor	r27, r27

000023d4 <__utoa_common>:
    23d4:	fb 01       	movw	r30, r22
    23d6:	55 27       	eor	r21, r21
    23d8:	aa 27       	eor	r26, r26
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	aa 1f       	adc	r26, r26
    23e0:	a4 17       	cp	r26, r20
    23e2:	10 f0       	brcs	.+4      	; 0x23e8 <__utoa_common+0x14>
    23e4:	a4 1b       	sub	r26, r20
    23e6:	83 95       	inc	r24
    23e8:	50 51       	subi	r21, 0x10	; 16
    23ea:	b9 f7       	brne	.-18     	; 0x23da <__utoa_common+0x6>
    23ec:	a0 5d       	subi	r26, 0xD0	; 208
    23ee:	aa 33       	cpi	r26, 0x3A	; 58
    23f0:	08 f0       	brcs	.+2      	; 0x23f4 <__utoa_common+0x20>
    23f2:	a9 5d       	subi	r26, 0xD9	; 217
    23f4:	a1 93       	st	Z+, r26
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	79 f7       	brne	.-34     	; 0x23d8 <__utoa_common+0x4>
    23fa:	b1 11       	cpse	r27, r1
    23fc:	b1 93       	st	Z+, r27
    23fe:	11 92       	st	Z+, r1
    2400:	cb 01       	movw	r24, r22
    2402:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <strrev>

00002406 <sprintf>:
    2406:	ae e0       	ldi	r26, 0x0E	; 14
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e0       	ldi	r30, 0x09	; 9
    240c:	f2 e1       	ldi	r31, 0x12	; 18
    240e:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__prologue_saves__+0x1c>
    2412:	0d 89       	ldd	r16, Y+21	; 0x15
    2414:	1e 89       	ldd	r17, Y+22	; 0x16
    2416:	86 e0       	ldi	r24, 0x06	; 6
    2418:	8c 83       	std	Y+4, r24	; 0x04
    241a:	1a 83       	std	Y+2, r17	; 0x02
    241c:	09 83       	std	Y+1, r16	; 0x01
    241e:	8f ef       	ldi	r24, 0xFF	; 255
    2420:	9f e7       	ldi	r25, 0x7F	; 127
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	ae 01       	movw	r20, r28
    2428:	47 5e       	subi	r20, 0xE7	; 231
    242a:	5f 4f       	sbci	r21, 0xFF	; 255
    242c:	6f 89       	ldd	r22, Y+23	; 0x17
    242e:	78 8d       	ldd	r23, Y+24	; 0x18
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	0e 94 25 12 	call	0x244a	; 0x244a <vfprintf>
    2438:	ef 81       	ldd	r30, Y+7	; 0x07
    243a:	f8 85       	ldd	r31, Y+8	; 0x08
    243c:	e0 0f       	add	r30, r16
    243e:	f1 1f       	adc	r31, r17
    2440:	10 82       	st	Z, r1
    2442:	2e 96       	adiw	r28, 0x0e	; 14
    2444:	e4 e0       	ldi	r30, 0x04	; 4
    2446:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__epilogue_restores__+0x1c>

0000244a <vfprintf>:
    244a:	ab e0       	ldi	r26, 0x0B	; 11
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f2 e1       	ldi	r31, 0x12	; 18
    2452:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__>
    2456:	6c 01       	movw	r12, r24
    2458:	7b 01       	movw	r14, r22
    245a:	8a 01       	movw	r16, r20
    245c:	fc 01       	movw	r30, r24
    245e:	17 82       	std	Z+7, r1	; 0x07
    2460:	16 82       	std	Z+6, r1	; 0x06
    2462:	83 81       	ldd	r24, Z+3	; 0x03
    2464:	81 ff       	sbrs	r24, 1
    2466:	cc c1       	rjmp	.+920    	; 0x2800 <vfprintf+0x3b6>
    2468:	ce 01       	movw	r24, r28
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	3c 01       	movw	r6, r24
    246e:	f6 01       	movw	r30, r12
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	f7 01       	movw	r30, r14
    2474:	93 fd       	sbrc	r25, 3
    2476:	85 91       	lpm	r24, Z+
    2478:	93 ff       	sbrs	r25, 3
    247a:	81 91       	ld	r24, Z+
    247c:	7f 01       	movw	r14, r30
    247e:	88 23       	and	r24, r24
    2480:	09 f4       	brne	.+2      	; 0x2484 <vfprintf+0x3a>
    2482:	ba c1       	rjmp	.+884    	; 0x27f8 <vfprintf+0x3ae>
    2484:	85 32       	cpi	r24, 0x25	; 37
    2486:	39 f4       	brne	.+14     	; 0x2496 <vfprintf+0x4c>
    2488:	93 fd       	sbrc	r25, 3
    248a:	85 91       	lpm	r24, Z+
    248c:	93 ff       	sbrs	r25, 3
    248e:	81 91       	ld	r24, Z+
    2490:	7f 01       	movw	r14, r30
    2492:	85 32       	cpi	r24, 0x25	; 37
    2494:	29 f4       	brne	.+10     	; 0x24a0 <vfprintf+0x56>
    2496:	b6 01       	movw	r22, r12
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    249e:	e7 cf       	rjmp	.-50     	; 0x246e <vfprintf+0x24>
    24a0:	91 2c       	mov	r9, r1
    24a2:	21 2c       	mov	r2, r1
    24a4:	31 2c       	mov	r3, r1
    24a6:	ff e1       	ldi	r31, 0x1F	; 31
    24a8:	f3 15       	cp	r31, r3
    24aa:	d8 f0       	brcs	.+54     	; 0x24e2 <vfprintf+0x98>
    24ac:	8b 32       	cpi	r24, 0x2B	; 43
    24ae:	79 f0       	breq	.+30     	; 0x24ce <vfprintf+0x84>
    24b0:	38 f4       	brcc	.+14     	; 0x24c0 <vfprintf+0x76>
    24b2:	80 32       	cpi	r24, 0x20	; 32
    24b4:	79 f0       	breq	.+30     	; 0x24d4 <vfprintf+0x8a>
    24b6:	83 32       	cpi	r24, 0x23	; 35
    24b8:	a1 f4       	brne	.+40     	; 0x24e2 <vfprintf+0x98>
    24ba:	23 2d       	mov	r18, r3
    24bc:	20 61       	ori	r18, 0x10	; 16
    24be:	1d c0       	rjmp	.+58     	; 0x24fa <vfprintf+0xb0>
    24c0:	8d 32       	cpi	r24, 0x2D	; 45
    24c2:	61 f0       	breq	.+24     	; 0x24dc <vfprintf+0x92>
    24c4:	80 33       	cpi	r24, 0x30	; 48
    24c6:	69 f4       	brne	.+26     	; 0x24e2 <vfprintf+0x98>
    24c8:	23 2d       	mov	r18, r3
    24ca:	21 60       	ori	r18, 0x01	; 1
    24cc:	16 c0       	rjmp	.+44     	; 0x24fa <vfprintf+0xb0>
    24ce:	83 2d       	mov	r24, r3
    24d0:	82 60       	ori	r24, 0x02	; 2
    24d2:	38 2e       	mov	r3, r24
    24d4:	e3 2d       	mov	r30, r3
    24d6:	e4 60       	ori	r30, 0x04	; 4
    24d8:	3e 2e       	mov	r3, r30
    24da:	2a c0       	rjmp	.+84     	; 0x2530 <vfprintf+0xe6>
    24dc:	f3 2d       	mov	r31, r3
    24de:	f8 60       	ori	r31, 0x08	; 8
    24e0:	1d c0       	rjmp	.+58     	; 0x251c <vfprintf+0xd2>
    24e2:	37 fc       	sbrc	r3, 7
    24e4:	2d c0       	rjmp	.+90     	; 0x2540 <vfprintf+0xf6>
    24e6:	20 ed       	ldi	r18, 0xD0	; 208
    24e8:	28 0f       	add	r18, r24
    24ea:	2a 30       	cpi	r18, 0x0A	; 10
    24ec:	40 f0       	brcs	.+16     	; 0x24fe <vfprintf+0xb4>
    24ee:	8e 32       	cpi	r24, 0x2E	; 46
    24f0:	b9 f4       	brne	.+46     	; 0x2520 <vfprintf+0xd6>
    24f2:	36 fc       	sbrc	r3, 6
    24f4:	81 c1       	rjmp	.+770    	; 0x27f8 <vfprintf+0x3ae>
    24f6:	23 2d       	mov	r18, r3
    24f8:	20 64       	ori	r18, 0x40	; 64
    24fa:	32 2e       	mov	r3, r18
    24fc:	19 c0       	rjmp	.+50     	; 0x2530 <vfprintf+0xe6>
    24fe:	36 fe       	sbrs	r3, 6
    2500:	06 c0       	rjmp	.+12     	; 0x250e <vfprintf+0xc4>
    2502:	8a e0       	ldi	r24, 0x0A	; 10
    2504:	98 9e       	mul	r9, r24
    2506:	20 0d       	add	r18, r0
    2508:	11 24       	eor	r1, r1
    250a:	92 2e       	mov	r9, r18
    250c:	11 c0       	rjmp	.+34     	; 0x2530 <vfprintf+0xe6>
    250e:	ea e0       	ldi	r30, 0x0A	; 10
    2510:	2e 9e       	mul	r2, r30
    2512:	20 0d       	add	r18, r0
    2514:	11 24       	eor	r1, r1
    2516:	22 2e       	mov	r2, r18
    2518:	f3 2d       	mov	r31, r3
    251a:	f0 62       	ori	r31, 0x20	; 32
    251c:	3f 2e       	mov	r3, r31
    251e:	08 c0       	rjmp	.+16     	; 0x2530 <vfprintf+0xe6>
    2520:	8c 36       	cpi	r24, 0x6C	; 108
    2522:	21 f4       	brne	.+8      	; 0x252c <vfprintf+0xe2>
    2524:	83 2d       	mov	r24, r3
    2526:	80 68       	ori	r24, 0x80	; 128
    2528:	38 2e       	mov	r3, r24
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <vfprintf+0xe6>
    252c:	88 36       	cpi	r24, 0x68	; 104
    252e:	41 f4       	brne	.+16     	; 0x2540 <vfprintf+0xf6>
    2530:	f7 01       	movw	r30, r14
    2532:	93 fd       	sbrc	r25, 3
    2534:	85 91       	lpm	r24, Z+
    2536:	93 ff       	sbrs	r25, 3
    2538:	81 91       	ld	r24, Z+
    253a:	7f 01       	movw	r14, r30
    253c:	81 11       	cpse	r24, r1
    253e:	b3 cf       	rjmp	.-154    	; 0x24a6 <vfprintf+0x5c>
    2540:	98 2f       	mov	r25, r24
    2542:	9f 7d       	andi	r25, 0xDF	; 223
    2544:	95 54       	subi	r25, 0x45	; 69
    2546:	93 30       	cpi	r25, 0x03	; 3
    2548:	28 f4       	brcc	.+10     	; 0x2554 <vfprintf+0x10a>
    254a:	0c 5f       	subi	r16, 0xFC	; 252
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
    254e:	9f e3       	ldi	r25, 0x3F	; 63
    2550:	99 83       	std	Y+1, r25	; 0x01
    2552:	0d c0       	rjmp	.+26     	; 0x256e <vfprintf+0x124>
    2554:	83 36       	cpi	r24, 0x63	; 99
    2556:	31 f0       	breq	.+12     	; 0x2564 <vfprintf+0x11a>
    2558:	83 37       	cpi	r24, 0x73	; 115
    255a:	71 f0       	breq	.+28     	; 0x2578 <vfprintf+0x12e>
    255c:	83 35       	cpi	r24, 0x53	; 83
    255e:	09 f0       	breq	.+2      	; 0x2562 <vfprintf+0x118>
    2560:	59 c0       	rjmp	.+178    	; 0x2614 <vfprintf+0x1ca>
    2562:	21 c0       	rjmp	.+66     	; 0x25a6 <vfprintf+0x15c>
    2564:	f8 01       	movw	r30, r16
    2566:	80 81       	ld	r24, Z
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	0e 5f       	subi	r16, 0xFE	; 254
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	88 24       	eor	r8, r8
    2570:	83 94       	inc	r8
    2572:	91 2c       	mov	r9, r1
    2574:	53 01       	movw	r10, r6
    2576:	13 c0       	rjmp	.+38     	; 0x259e <vfprintf+0x154>
    2578:	28 01       	movw	r4, r16
    257a:	f2 e0       	ldi	r31, 0x02	; 2
    257c:	4f 0e       	add	r4, r31
    257e:	51 1c       	adc	r5, r1
    2580:	f8 01       	movw	r30, r16
    2582:	a0 80       	ld	r10, Z
    2584:	b1 80       	ldd	r11, Z+1	; 0x01
    2586:	36 fe       	sbrs	r3, 6
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <vfprintf+0x146>
    258a:	69 2d       	mov	r22, r9
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <vfprintf+0x14a>
    2590:	6f ef       	ldi	r22, 0xFF	; 255
    2592:	7f ef       	ldi	r23, 0xFF	; 255
    2594:	c5 01       	movw	r24, r10
    2596:	0e 94 43 16 	call	0x2c86	; 0x2c86 <strnlen>
    259a:	4c 01       	movw	r8, r24
    259c:	82 01       	movw	r16, r4
    259e:	f3 2d       	mov	r31, r3
    25a0:	ff 77       	andi	r31, 0x7F	; 127
    25a2:	3f 2e       	mov	r3, r31
    25a4:	16 c0       	rjmp	.+44     	; 0x25d2 <vfprintf+0x188>
    25a6:	28 01       	movw	r4, r16
    25a8:	22 e0       	ldi	r18, 0x02	; 2
    25aa:	42 0e       	add	r4, r18
    25ac:	51 1c       	adc	r5, r1
    25ae:	f8 01       	movw	r30, r16
    25b0:	a0 80       	ld	r10, Z
    25b2:	b1 80       	ldd	r11, Z+1	; 0x01
    25b4:	36 fe       	sbrs	r3, 6
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <vfprintf+0x174>
    25b8:	69 2d       	mov	r22, r9
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <vfprintf+0x178>
    25be:	6f ef       	ldi	r22, 0xFF	; 255
    25c0:	7f ef       	ldi	r23, 0xFF	; 255
    25c2:	c5 01       	movw	r24, r10
    25c4:	0e 94 38 16 	call	0x2c70	; 0x2c70 <strnlen_P>
    25c8:	4c 01       	movw	r8, r24
    25ca:	f3 2d       	mov	r31, r3
    25cc:	f0 68       	ori	r31, 0x80	; 128
    25ce:	3f 2e       	mov	r3, r31
    25d0:	82 01       	movw	r16, r4
    25d2:	33 fc       	sbrc	r3, 3
    25d4:	1b c0       	rjmp	.+54     	; 0x260c <vfprintf+0x1c2>
    25d6:	82 2d       	mov	r24, r2
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	88 16       	cp	r8, r24
    25dc:	99 06       	cpc	r9, r25
    25de:	b0 f4       	brcc	.+44     	; 0x260c <vfprintf+0x1c2>
    25e0:	b6 01       	movw	r22, r12
    25e2:	80 e2       	ldi	r24, 0x20	; 32
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    25ea:	2a 94       	dec	r2
    25ec:	f4 cf       	rjmp	.-24     	; 0x25d6 <vfprintf+0x18c>
    25ee:	f5 01       	movw	r30, r10
    25f0:	37 fc       	sbrc	r3, 7
    25f2:	85 91       	lpm	r24, Z+
    25f4:	37 fe       	sbrs	r3, 7
    25f6:	81 91       	ld	r24, Z+
    25f8:	5f 01       	movw	r10, r30
    25fa:	b6 01       	movw	r22, r12
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    2602:	21 10       	cpse	r2, r1
    2604:	2a 94       	dec	r2
    2606:	21 e0       	ldi	r18, 0x01	; 1
    2608:	82 1a       	sub	r8, r18
    260a:	91 08       	sbc	r9, r1
    260c:	81 14       	cp	r8, r1
    260e:	91 04       	cpc	r9, r1
    2610:	71 f7       	brne	.-36     	; 0x25ee <vfprintf+0x1a4>
    2612:	e8 c0       	rjmp	.+464    	; 0x27e4 <vfprintf+0x39a>
    2614:	84 36       	cpi	r24, 0x64	; 100
    2616:	11 f0       	breq	.+4      	; 0x261c <vfprintf+0x1d2>
    2618:	89 36       	cpi	r24, 0x69	; 105
    261a:	41 f5       	brne	.+80     	; 0x266c <vfprintf+0x222>
    261c:	f8 01       	movw	r30, r16
    261e:	37 fe       	sbrs	r3, 7
    2620:	07 c0       	rjmp	.+14     	; 0x2630 <vfprintf+0x1e6>
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	0c 5f       	subi	r16, 0xFC	; 252
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	08 c0       	rjmp	.+16     	; 0x2640 <vfprintf+0x1f6>
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	07 2e       	mov	r0, r23
    2636:	00 0c       	add	r0, r0
    2638:	88 0b       	sbc	r24, r24
    263a:	99 0b       	sbc	r25, r25
    263c:	0e 5f       	subi	r16, 0xFE	; 254
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	f3 2d       	mov	r31, r3
    2642:	ff 76       	andi	r31, 0x6F	; 111
    2644:	3f 2e       	mov	r3, r31
    2646:	97 ff       	sbrs	r25, 7
    2648:	09 c0       	rjmp	.+18     	; 0x265c <vfprintf+0x212>
    264a:	90 95       	com	r25
    264c:	80 95       	com	r24
    264e:	70 95       	com	r23
    2650:	61 95       	neg	r22
    2652:	7f 4f       	sbci	r23, 0xFF	; 255
    2654:	8f 4f       	sbci	r24, 0xFF	; 255
    2656:	9f 4f       	sbci	r25, 0xFF	; 255
    2658:	f0 68       	ori	r31, 0x80	; 128
    265a:	3f 2e       	mov	r3, r31
    265c:	2a e0       	ldi	r18, 0x0A	; 10
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	a3 01       	movw	r20, r6
    2662:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__ultoa_invert>
    2666:	88 2e       	mov	r8, r24
    2668:	86 18       	sub	r8, r6
    266a:	45 c0       	rjmp	.+138    	; 0x26f6 <vfprintf+0x2ac>
    266c:	85 37       	cpi	r24, 0x75	; 117
    266e:	31 f4       	brne	.+12     	; 0x267c <vfprintf+0x232>
    2670:	23 2d       	mov	r18, r3
    2672:	2f 7e       	andi	r18, 0xEF	; 239
    2674:	b2 2e       	mov	r11, r18
    2676:	2a e0       	ldi	r18, 0x0A	; 10
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	25 c0       	rjmp	.+74     	; 0x26c6 <vfprintf+0x27c>
    267c:	93 2d       	mov	r25, r3
    267e:	99 7f       	andi	r25, 0xF9	; 249
    2680:	b9 2e       	mov	r11, r25
    2682:	8f 36       	cpi	r24, 0x6F	; 111
    2684:	c1 f0       	breq	.+48     	; 0x26b6 <vfprintf+0x26c>
    2686:	18 f4       	brcc	.+6      	; 0x268e <vfprintf+0x244>
    2688:	88 35       	cpi	r24, 0x58	; 88
    268a:	79 f0       	breq	.+30     	; 0x26aa <vfprintf+0x260>
    268c:	b5 c0       	rjmp	.+362    	; 0x27f8 <vfprintf+0x3ae>
    268e:	80 37       	cpi	r24, 0x70	; 112
    2690:	19 f0       	breq	.+6      	; 0x2698 <vfprintf+0x24e>
    2692:	88 37       	cpi	r24, 0x78	; 120
    2694:	21 f0       	breq	.+8      	; 0x269e <vfprintf+0x254>
    2696:	b0 c0       	rjmp	.+352    	; 0x27f8 <vfprintf+0x3ae>
    2698:	e9 2f       	mov	r30, r25
    269a:	e0 61       	ori	r30, 0x10	; 16
    269c:	be 2e       	mov	r11, r30
    269e:	b4 fe       	sbrs	r11, 4
    26a0:	0d c0       	rjmp	.+26     	; 0x26bc <vfprintf+0x272>
    26a2:	fb 2d       	mov	r31, r11
    26a4:	f4 60       	ori	r31, 0x04	; 4
    26a6:	bf 2e       	mov	r11, r31
    26a8:	09 c0       	rjmp	.+18     	; 0x26bc <vfprintf+0x272>
    26aa:	34 fe       	sbrs	r3, 4
    26ac:	0a c0       	rjmp	.+20     	; 0x26c2 <vfprintf+0x278>
    26ae:	29 2f       	mov	r18, r25
    26b0:	26 60       	ori	r18, 0x06	; 6
    26b2:	b2 2e       	mov	r11, r18
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <vfprintf+0x278>
    26b6:	28 e0       	ldi	r18, 0x08	; 8
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	05 c0       	rjmp	.+10     	; 0x26c6 <vfprintf+0x27c>
    26bc:	20 e1       	ldi	r18, 0x10	; 16
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <vfprintf+0x27c>
    26c2:	20 e1       	ldi	r18, 0x10	; 16
    26c4:	32 e0       	ldi	r19, 0x02	; 2
    26c6:	f8 01       	movw	r30, r16
    26c8:	b7 fe       	sbrs	r11, 7
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <vfprintf+0x290>
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	0c 5f       	subi	r16, 0xFC	; 252
    26d6:	1f 4f       	sbci	r17, 0xFF	; 255
    26d8:	06 c0       	rjmp	.+12     	; 0x26e6 <vfprintf+0x29c>
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 5f       	subi	r16, 0xFE	; 254
    26e4:	1f 4f       	sbci	r17, 0xFF	; 255
    26e6:	a3 01       	movw	r20, r6
    26e8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__ultoa_invert>
    26ec:	88 2e       	mov	r8, r24
    26ee:	86 18       	sub	r8, r6
    26f0:	fb 2d       	mov	r31, r11
    26f2:	ff 77       	andi	r31, 0x7F	; 127
    26f4:	3f 2e       	mov	r3, r31
    26f6:	36 fe       	sbrs	r3, 6
    26f8:	0d c0       	rjmp	.+26     	; 0x2714 <vfprintf+0x2ca>
    26fa:	23 2d       	mov	r18, r3
    26fc:	2e 7f       	andi	r18, 0xFE	; 254
    26fe:	a2 2e       	mov	r10, r18
    2700:	89 14       	cp	r8, r9
    2702:	58 f4       	brcc	.+22     	; 0x271a <vfprintf+0x2d0>
    2704:	34 fe       	sbrs	r3, 4
    2706:	0b c0       	rjmp	.+22     	; 0x271e <vfprintf+0x2d4>
    2708:	32 fc       	sbrc	r3, 2
    270a:	09 c0       	rjmp	.+18     	; 0x271e <vfprintf+0x2d4>
    270c:	83 2d       	mov	r24, r3
    270e:	8e 7e       	andi	r24, 0xEE	; 238
    2710:	a8 2e       	mov	r10, r24
    2712:	05 c0       	rjmp	.+10     	; 0x271e <vfprintf+0x2d4>
    2714:	b8 2c       	mov	r11, r8
    2716:	a3 2c       	mov	r10, r3
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <vfprintf+0x2d6>
    271a:	b8 2c       	mov	r11, r8
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <vfprintf+0x2d6>
    271e:	b9 2c       	mov	r11, r9
    2720:	a4 fe       	sbrs	r10, 4
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <vfprintf+0x2f8>
    2724:	fe 01       	movw	r30, r28
    2726:	e8 0d       	add	r30, r8
    2728:	f1 1d       	adc	r31, r1
    272a:	80 81       	ld	r24, Z
    272c:	80 33       	cpi	r24, 0x30	; 48
    272e:	21 f4       	brne	.+8      	; 0x2738 <vfprintf+0x2ee>
    2730:	9a 2d       	mov	r25, r10
    2732:	99 7e       	andi	r25, 0xE9	; 233
    2734:	a9 2e       	mov	r10, r25
    2736:	09 c0       	rjmp	.+18     	; 0x274a <vfprintf+0x300>
    2738:	a2 fe       	sbrs	r10, 2
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <vfprintf+0x2fe>
    273c:	b3 94       	inc	r11
    273e:	b3 94       	inc	r11
    2740:	04 c0       	rjmp	.+8      	; 0x274a <vfprintf+0x300>
    2742:	8a 2d       	mov	r24, r10
    2744:	86 78       	andi	r24, 0x86	; 134
    2746:	09 f0       	breq	.+2      	; 0x274a <vfprintf+0x300>
    2748:	b3 94       	inc	r11
    274a:	a3 fc       	sbrc	r10, 3
    274c:	11 c0       	rjmp	.+34     	; 0x2770 <vfprintf+0x326>
    274e:	a0 fe       	sbrs	r10, 0
    2750:	06 c0       	rjmp	.+12     	; 0x275e <vfprintf+0x314>
    2752:	b2 14       	cp	r11, r2
    2754:	88 f4       	brcc	.+34     	; 0x2778 <vfprintf+0x32e>
    2756:	28 0c       	add	r2, r8
    2758:	92 2c       	mov	r9, r2
    275a:	9b 18       	sub	r9, r11
    275c:	0e c0       	rjmp	.+28     	; 0x277a <vfprintf+0x330>
    275e:	b2 14       	cp	r11, r2
    2760:	60 f4       	brcc	.+24     	; 0x277a <vfprintf+0x330>
    2762:	b6 01       	movw	r22, r12
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    276c:	b3 94       	inc	r11
    276e:	f7 cf       	rjmp	.-18     	; 0x275e <vfprintf+0x314>
    2770:	b2 14       	cp	r11, r2
    2772:	18 f4       	brcc	.+6      	; 0x277a <vfprintf+0x330>
    2774:	2b 18       	sub	r2, r11
    2776:	02 c0       	rjmp	.+4      	; 0x277c <vfprintf+0x332>
    2778:	98 2c       	mov	r9, r8
    277a:	21 2c       	mov	r2, r1
    277c:	a4 fe       	sbrs	r10, 4
    277e:	10 c0       	rjmp	.+32     	; 0x27a0 <vfprintf+0x356>
    2780:	b6 01       	movw	r22, r12
    2782:	80 e3       	ldi	r24, 0x30	; 48
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    278a:	a2 fe       	sbrs	r10, 2
    278c:	17 c0       	rjmp	.+46     	; 0x27bc <vfprintf+0x372>
    278e:	a1 fc       	sbrc	r10, 1
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <vfprintf+0x34e>
    2792:	88 e7       	ldi	r24, 0x78	; 120
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 c0       	rjmp	.+4      	; 0x279c <vfprintf+0x352>
    2798:	88 e5       	ldi	r24, 0x58	; 88
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	b6 01       	movw	r22, r12
    279e:	0c c0       	rjmp	.+24     	; 0x27b8 <vfprintf+0x36e>
    27a0:	8a 2d       	mov	r24, r10
    27a2:	86 78       	andi	r24, 0x86	; 134
    27a4:	59 f0       	breq	.+22     	; 0x27bc <vfprintf+0x372>
    27a6:	a1 fe       	sbrs	r10, 1
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x364>
    27aa:	8b e2       	ldi	r24, 0x2B	; 43
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <vfprintf+0x366>
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	a7 fc       	sbrc	r10, 7
    27b2:	8d e2       	ldi	r24, 0x2D	; 45
    27b4:	b6 01       	movw	r22, r12
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    27bc:	89 14       	cp	r8, r9
    27be:	38 f4       	brcc	.+14     	; 0x27ce <vfprintf+0x384>
    27c0:	b6 01       	movw	r22, r12
    27c2:	80 e3       	ldi	r24, 0x30	; 48
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    27ca:	9a 94       	dec	r9
    27cc:	f7 cf       	rjmp	.-18     	; 0x27bc <vfprintf+0x372>
    27ce:	8a 94       	dec	r8
    27d0:	f3 01       	movw	r30, r6
    27d2:	e8 0d       	add	r30, r8
    27d4:	f1 1d       	adc	r31, r1
    27d6:	80 81       	ld	r24, Z
    27d8:	b6 01       	movw	r22, r12
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    27e0:	81 10       	cpse	r8, r1
    27e2:	f5 cf       	rjmp	.-22     	; 0x27ce <vfprintf+0x384>
    27e4:	22 20       	and	r2, r2
    27e6:	09 f4       	brne	.+2      	; 0x27ea <vfprintf+0x3a0>
    27e8:	42 ce       	rjmp	.-892    	; 0x246e <vfprintf+0x24>
    27ea:	b6 01       	movw	r22, r12
    27ec:	80 e2       	ldi	r24, 0x20	; 32
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <fputc>
    27f4:	2a 94       	dec	r2
    27f6:	f6 cf       	rjmp	.-20     	; 0x27e4 <vfprintf+0x39a>
    27f8:	f6 01       	movw	r30, r12
    27fa:	86 81       	ldd	r24, Z+6	; 0x06
    27fc:	97 81       	ldd	r25, Z+7	; 0x07
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <vfprintf+0x3ba>
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	9f ef       	ldi	r25, 0xFF	; 255
    2804:	2b 96       	adiw	r28, 0x0b	; 11
    2806:	e2 e1       	ldi	r30, 0x12	; 18
    2808:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__>

0000280c <dtoa_prf>:
    280c:	a9 e0       	ldi	r26, 0x09	; 9
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	ec e0       	ldi	r30, 0x0C	; 12
    2812:	f4 e1       	ldi	r31, 0x14	; 20
    2814:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0xc>
    2818:	6a 01       	movw	r12, r20
    281a:	12 2f       	mov	r17, r18
    281c:	b0 2e       	mov	r11, r16
    281e:	2b e3       	ldi	r18, 0x3B	; 59
    2820:	20 17       	cp	r18, r16
    2822:	20 f0       	brcs	.+8      	; 0x282c <dtoa_prf+0x20>
    2824:	ff 24       	eor	r15, r15
    2826:	f3 94       	inc	r15
    2828:	f0 0e       	add	r15, r16
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <dtoa_prf+0x24>
    282c:	2c e3       	ldi	r18, 0x3C	; 60
    282e:	f2 2e       	mov	r15, r18
    2830:	0f 2d       	mov	r16, r15
    2832:	27 e0       	ldi	r18, 0x07	; 7
    2834:	ae 01       	movw	r20, r28
    2836:	4f 5f       	subi	r20, 0xFF	; 255
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ftoa_engine>
    283e:	bc 01       	movw	r22, r24
    2840:	49 81       	ldd	r20, Y+1	; 0x01
    2842:	84 2f       	mov	r24, r20
    2844:	89 70       	andi	r24, 0x09	; 9
    2846:	81 30       	cpi	r24, 0x01	; 1
    2848:	31 f0       	breq	.+12     	; 0x2856 <dtoa_prf+0x4a>
    284a:	e1 fc       	sbrc	r14, 1
    284c:	06 c0       	rjmp	.+12     	; 0x285a <dtoa_prf+0x4e>
    284e:	e0 fe       	sbrs	r14, 0
    2850:	06 c0       	rjmp	.+12     	; 0x285e <dtoa_prf+0x52>
    2852:	90 e2       	ldi	r25, 0x20	; 32
    2854:	05 c0       	rjmp	.+10     	; 0x2860 <dtoa_prf+0x54>
    2856:	9d e2       	ldi	r25, 0x2D	; 45
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <dtoa_prf+0x54>
    285a:	9b e2       	ldi	r25, 0x2B	; 43
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <dtoa_prf+0x54>
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	5e 2d       	mov	r21, r14
    2862:	50 71       	andi	r21, 0x10	; 16
    2864:	43 ff       	sbrs	r20, 3
    2866:	3c c0       	rjmp	.+120    	; 0x28e0 <dtoa_prf+0xd4>
    2868:	91 11       	cpse	r25, r1
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <dtoa_prf+0x64>
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <dtoa_prf+0x66>
    2870:	84 e0       	ldi	r24, 0x04	; 4
    2872:	81 17       	cp	r24, r17
    2874:	18 f4       	brcc	.+6      	; 0x287c <dtoa_prf+0x70>
    2876:	21 2f       	mov	r18, r17
    2878:	28 1b       	sub	r18, r24
    287a:	01 c0       	rjmp	.+2      	; 0x287e <dtoa_prf+0x72>
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	51 11       	cpse	r21, r1
    2880:	0b c0       	rjmp	.+22     	; 0x2898 <dtoa_prf+0x8c>
    2882:	f6 01       	movw	r30, r12
    2884:	82 2f       	mov	r24, r18
    2886:	30 e2       	ldi	r19, 0x20	; 32
    2888:	88 23       	and	r24, r24
    288a:	19 f0       	breq	.+6      	; 0x2892 <dtoa_prf+0x86>
    288c:	31 93       	st	Z+, r19
    288e:	81 50       	subi	r24, 0x01	; 1
    2890:	fb cf       	rjmp	.-10     	; 0x2888 <dtoa_prf+0x7c>
    2892:	c2 0e       	add	r12, r18
    2894:	d1 1c       	adc	r13, r1
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	99 23       	and	r25, r25
    289a:	29 f0       	breq	.+10     	; 0x28a6 <dtoa_prf+0x9a>
    289c:	d6 01       	movw	r26, r12
    289e:	9c 93       	st	X, r25
    28a0:	f6 01       	movw	r30, r12
    28a2:	31 96       	adiw	r30, 0x01	; 1
    28a4:	6f 01       	movw	r12, r30
    28a6:	c6 01       	movw	r24, r12
    28a8:	03 96       	adiw	r24, 0x03	; 3
    28aa:	e2 fe       	sbrs	r14, 2
    28ac:	0a c0       	rjmp	.+20     	; 0x28c2 <dtoa_prf+0xb6>
    28ae:	3e e4       	ldi	r19, 0x4E	; 78
    28b0:	d6 01       	movw	r26, r12
    28b2:	3c 93       	st	X, r19
    28b4:	41 e4       	ldi	r20, 0x41	; 65
    28b6:	11 96       	adiw	r26, 0x01	; 1
    28b8:	4c 93       	st	X, r20
    28ba:	11 97       	sbiw	r26, 0x01	; 1
    28bc:	12 96       	adiw	r26, 0x02	; 2
    28be:	3c 93       	st	X, r19
    28c0:	06 c0       	rjmp	.+12     	; 0x28ce <dtoa_prf+0xc2>
    28c2:	3e e6       	ldi	r19, 0x6E	; 110
    28c4:	f6 01       	movw	r30, r12
    28c6:	30 83       	st	Z, r19
    28c8:	41 e6       	ldi	r20, 0x61	; 97
    28ca:	41 83       	std	Z+1, r20	; 0x01
    28cc:	32 83       	std	Z+2, r19	; 0x02
    28ce:	fc 01       	movw	r30, r24
    28d0:	32 2f       	mov	r19, r18
    28d2:	40 e2       	ldi	r20, 0x20	; 32
    28d4:	33 23       	and	r19, r19
    28d6:	09 f4       	brne	.+2      	; 0x28da <dtoa_prf+0xce>
    28d8:	42 c0       	rjmp	.+132    	; 0x295e <dtoa_prf+0x152>
    28da:	41 93       	st	Z+, r20
    28dc:	31 50       	subi	r19, 0x01	; 1
    28de:	fa cf       	rjmp	.-12     	; 0x28d4 <dtoa_prf+0xc8>
    28e0:	42 ff       	sbrs	r20, 2
    28e2:	44 c0       	rjmp	.+136    	; 0x296c <dtoa_prf+0x160>
    28e4:	91 11       	cpse	r25, r1
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <dtoa_prf+0xe0>
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <dtoa_prf+0xe2>
    28ec:	84 e0       	ldi	r24, 0x04	; 4
    28ee:	81 17       	cp	r24, r17
    28f0:	18 f4       	brcc	.+6      	; 0x28f8 <dtoa_prf+0xec>
    28f2:	21 2f       	mov	r18, r17
    28f4:	28 1b       	sub	r18, r24
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <dtoa_prf+0xee>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	51 11       	cpse	r21, r1
    28fc:	0b c0       	rjmp	.+22     	; 0x2914 <dtoa_prf+0x108>
    28fe:	f6 01       	movw	r30, r12
    2900:	82 2f       	mov	r24, r18
    2902:	30 e2       	ldi	r19, 0x20	; 32
    2904:	88 23       	and	r24, r24
    2906:	19 f0       	breq	.+6      	; 0x290e <dtoa_prf+0x102>
    2908:	31 93       	st	Z+, r19
    290a:	81 50       	subi	r24, 0x01	; 1
    290c:	fb cf       	rjmp	.-10     	; 0x2904 <dtoa_prf+0xf8>
    290e:	c2 0e       	add	r12, r18
    2910:	d1 1c       	adc	r13, r1
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	99 23       	and	r25, r25
    2916:	29 f0       	breq	.+10     	; 0x2922 <dtoa_prf+0x116>
    2918:	d6 01       	movw	r26, r12
    291a:	9c 93       	st	X, r25
    291c:	f6 01       	movw	r30, r12
    291e:	31 96       	adiw	r30, 0x01	; 1
    2920:	6f 01       	movw	r12, r30
    2922:	c6 01       	movw	r24, r12
    2924:	03 96       	adiw	r24, 0x03	; 3
    2926:	e2 fe       	sbrs	r14, 2
    2928:	0b c0       	rjmp	.+22     	; 0x2940 <dtoa_prf+0x134>
    292a:	39 e4       	ldi	r19, 0x49	; 73
    292c:	d6 01       	movw	r26, r12
    292e:	3c 93       	st	X, r19
    2930:	3e e4       	ldi	r19, 0x4E	; 78
    2932:	11 96       	adiw	r26, 0x01	; 1
    2934:	3c 93       	st	X, r19
    2936:	11 97       	sbiw	r26, 0x01	; 1
    2938:	36 e4       	ldi	r19, 0x46	; 70
    293a:	12 96       	adiw	r26, 0x02	; 2
    293c:	3c 93       	st	X, r19
    293e:	07 c0       	rjmp	.+14     	; 0x294e <dtoa_prf+0x142>
    2940:	39 e6       	ldi	r19, 0x69	; 105
    2942:	f6 01       	movw	r30, r12
    2944:	30 83       	st	Z, r19
    2946:	3e e6       	ldi	r19, 0x6E	; 110
    2948:	31 83       	std	Z+1, r19	; 0x01
    294a:	36 e6       	ldi	r19, 0x66	; 102
    294c:	32 83       	std	Z+2, r19	; 0x02
    294e:	fc 01       	movw	r30, r24
    2950:	32 2f       	mov	r19, r18
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	33 23       	and	r19, r19
    2956:	19 f0       	breq	.+6      	; 0x295e <dtoa_prf+0x152>
    2958:	41 93       	st	Z+, r20
    295a:	31 50       	subi	r19, 0x01	; 1
    295c:	fb cf       	rjmp	.-10     	; 0x2954 <dtoa_prf+0x148>
    295e:	fc 01       	movw	r30, r24
    2960:	e2 0f       	add	r30, r18
    2962:	f1 1d       	adc	r31, r1
    2964:	10 82       	st	Z, r1
    2966:	8e ef       	ldi	r24, 0xFE	; 254
    2968:	9f ef       	ldi	r25, 0xFF	; 255
    296a:	a6 c0       	rjmp	.+332    	; 0x2ab8 <dtoa_prf+0x2ac>
    296c:	21 e0       	ldi	r18, 0x01	; 1
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	91 11       	cpse	r25, r1
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <dtoa_prf+0x16c>
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	16 16       	cp	r1, r22
    297a:	17 06       	cpc	r1, r23
    297c:	1c f4       	brge	.+6      	; 0x2984 <dtoa_prf+0x178>
    297e:	fb 01       	movw	r30, r22
    2980:	31 96       	adiw	r30, 0x01	; 1
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <dtoa_prf+0x17c>
    2984:	e1 e0       	ldi	r30, 0x01	; 1
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	2e 0f       	add	r18, r30
    298a:	3f 1f       	adc	r19, r31
    298c:	bb 20       	and	r11, r11
    298e:	21 f0       	breq	.+8      	; 0x2998 <dtoa_prf+0x18c>
    2990:	eb 2d       	mov	r30, r11
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	31 96       	adiw	r30, 0x01	; 1
    2996:	02 c0       	rjmp	.+4      	; 0x299c <dtoa_prf+0x190>
    2998:	e0 e0       	ldi	r30, 0x00	; 0
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	2e 0f       	add	r18, r30
    299e:	3f 1f       	adc	r19, r31
    29a0:	e1 2f       	mov	r30, r17
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	2e 17       	cp	r18, r30
    29a6:	3f 07       	cpc	r19, r31
    29a8:	1c f4       	brge	.+6      	; 0x29b0 <dtoa_prf+0x1a4>
    29aa:	12 1b       	sub	r17, r18
    29ac:	21 2f       	mov	r18, r17
    29ae:	01 c0       	rjmp	.+2      	; 0x29b2 <dtoa_prf+0x1a6>
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	8e 2d       	mov	r24, r14
    29b4:	88 71       	andi	r24, 0x18	; 24
    29b6:	59 f4       	brne	.+22     	; 0x29ce <dtoa_prf+0x1c2>
    29b8:	f6 01       	movw	r30, r12
    29ba:	82 2f       	mov	r24, r18
    29bc:	30 e2       	ldi	r19, 0x20	; 32
    29be:	88 23       	and	r24, r24
    29c0:	19 f0       	breq	.+6      	; 0x29c8 <dtoa_prf+0x1bc>
    29c2:	31 93       	st	Z+, r19
    29c4:	81 50       	subi	r24, 0x01	; 1
    29c6:	fb cf       	rjmp	.-10     	; 0x29be <dtoa_prf+0x1b2>
    29c8:	c2 0e       	add	r12, r18
    29ca:	d1 1c       	adc	r13, r1
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	99 23       	and	r25, r25
    29d0:	29 f0       	breq	.+10     	; 0x29dc <dtoa_prf+0x1d0>
    29d2:	d6 01       	movw	r26, r12
    29d4:	9c 93       	st	X, r25
    29d6:	f6 01       	movw	r30, r12
    29d8:	31 96       	adiw	r30, 0x01	; 1
    29da:	6f 01       	movw	r12, r30
    29dc:	51 11       	cpse	r21, r1
    29de:	0b c0       	rjmp	.+22     	; 0x29f6 <dtoa_prf+0x1ea>
    29e0:	f6 01       	movw	r30, r12
    29e2:	82 2f       	mov	r24, r18
    29e4:	90 e3       	ldi	r25, 0x30	; 48
    29e6:	88 23       	and	r24, r24
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <dtoa_prf+0x1e4>
    29ea:	91 93       	st	Z+, r25
    29ec:	81 50       	subi	r24, 0x01	; 1
    29ee:	fb cf       	rjmp	.-10     	; 0x29e6 <dtoa_prf+0x1da>
    29f0:	c2 0e       	add	r12, r18
    29f2:	d1 1c       	adc	r13, r1
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	0f 2d       	mov	r16, r15
    29f8:	06 0f       	add	r16, r22
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	34 2f       	mov	r19, r20
    29fe:	30 71       	andi	r19, 0x10	; 16
    2a00:	44 ff       	sbrs	r20, 4
    2a02:	03 c0       	rjmp	.+6      	; 0x2a0a <dtoa_prf+0x1fe>
    2a04:	91 33       	cpi	r25, 0x31	; 49
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <dtoa_prf+0x1fe>
    2a08:	01 50       	subi	r16, 0x01	; 1
    2a0a:	10 16       	cp	r1, r16
    2a0c:	24 f4       	brge	.+8      	; 0x2a16 <dtoa_prf+0x20a>
    2a0e:	09 30       	cpi	r16, 0x09	; 9
    2a10:	18 f0       	brcs	.+6      	; 0x2a18 <dtoa_prf+0x20c>
    2a12:	08 e0       	ldi	r16, 0x08	; 8
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <dtoa_prf+0x20c>
    2a16:	01 e0       	ldi	r16, 0x01	; 1
    2a18:	ab 01       	movw	r20, r22
    2a1a:	77 ff       	sbrs	r23, 7
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <dtoa_prf+0x216>
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	fb 01       	movw	r30, r22
    2a24:	e4 1b       	sub	r30, r20
    2a26:	f5 0b       	sbc	r31, r21
    2a28:	a1 e0       	ldi	r26, 0x01	; 1
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	ac 0f       	add	r26, r28
    2a2e:	bd 1f       	adc	r27, r29
    2a30:	ea 0f       	add	r30, r26
    2a32:	fb 1f       	adc	r31, r27
    2a34:	8e e2       	ldi	r24, 0x2E	; 46
    2a36:	a8 2e       	mov	r10, r24
    2a38:	4b 01       	movw	r8, r22
    2a3a:	80 1a       	sub	r8, r16
    2a3c:	91 08       	sbc	r9, r1
    2a3e:	0b 2d       	mov	r16, r11
    2a40:	10 e0       	ldi	r17, 0x00	; 0
    2a42:	11 95       	neg	r17
    2a44:	01 95       	neg	r16
    2a46:	11 09       	sbc	r17, r1
    2a48:	4f 3f       	cpi	r20, 0xFF	; 255
    2a4a:	bf ef       	ldi	r27, 0xFF	; 255
    2a4c:	5b 07       	cpc	r21, r27
    2a4e:	21 f4       	brne	.+8      	; 0x2a58 <dtoa_prf+0x24c>
    2a50:	d6 01       	movw	r26, r12
    2a52:	ac 92       	st	X, r10
    2a54:	11 96       	adiw	r26, 0x01	; 1
    2a56:	6d 01       	movw	r12, r26
    2a58:	64 17       	cp	r22, r20
    2a5a:	75 07       	cpc	r23, r21
    2a5c:	2c f0       	brlt	.+10     	; 0x2a68 <dtoa_prf+0x25c>
    2a5e:	84 16       	cp	r8, r20
    2a60:	95 06       	cpc	r9, r21
    2a62:	14 f4       	brge	.+4      	; 0x2a68 <dtoa_prf+0x25c>
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <dtoa_prf+0x25e>
    2a68:	80 e3       	ldi	r24, 0x30	; 48
    2a6a:	41 50       	subi	r20, 0x01	; 1
    2a6c:	51 09       	sbc	r21, r1
    2a6e:	31 96       	adiw	r30, 0x01	; 1
    2a70:	d6 01       	movw	r26, r12
    2a72:	11 96       	adiw	r26, 0x01	; 1
    2a74:	7d 01       	movw	r14, r26
    2a76:	40 17       	cp	r20, r16
    2a78:	51 07       	cpc	r21, r17
    2a7a:	24 f0       	brlt	.+8      	; 0x2a84 <dtoa_prf+0x278>
    2a7c:	d6 01       	movw	r26, r12
    2a7e:	8c 93       	st	X, r24
    2a80:	67 01       	movw	r12, r14
    2a82:	e2 cf       	rjmp	.-60     	; 0x2a48 <dtoa_prf+0x23c>
    2a84:	64 17       	cp	r22, r20
    2a86:	75 07       	cpc	r23, r21
    2a88:	39 f4       	brne	.+14     	; 0x2a98 <dtoa_prf+0x28c>
    2a8a:	96 33       	cpi	r25, 0x36	; 54
    2a8c:	20 f4       	brcc	.+8      	; 0x2a96 <dtoa_prf+0x28a>
    2a8e:	95 33       	cpi	r25, 0x35	; 53
    2a90:	19 f4       	brne	.+6      	; 0x2a98 <dtoa_prf+0x28c>
    2a92:	31 11       	cpse	r19, r1
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <dtoa_prf+0x28c>
    2a96:	81 e3       	ldi	r24, 0x31	; 49
    2a98:	f6 01       	movw	r30, r12
    2a9a:	80 83       	st	Z, r24
    2a9c:	f7 01       	movw	r30, r14
    2a9e:	82 2f       	mov	r24, r18
    2aa0:	90 e2       	ldi	r25, 0x20	; 32
    2aa2:	88 23       	and	r24, r24
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <dtoa_prf+0x2a0>
    2aa6:	91 93       	st	Z+, r25
    2aa8:	81 50       	subi	r24, 0x01	; 1
    2aaa:	fb cf       	rjmp	.-10     	; 0x2aa2 <dtoa_prf+0x296>
    2aac:	f7 01       	movw	r30, r14
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f1 1d       	adc	r31, r1
    2ab2:	10 82       	st	Z, r1
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	29 96       	adiw	r28, 0x09	; 9
    2aba:	ec e0       	ldi	r30, 0x0C	; 12
    2abc:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0xc>

00002ac0 <__ftoa_engine>:
    2ac0:	28 30       	cpi	r18, 0x08	; 8
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <__ftoa_engine+0x6>
    2ac4:	27 e0       	ldi	r18, 0x07	; 7
    2ac6:	33 27       	eor	r19, r19
    2ac8:	da 01       	movw	r26, r20
    2aca:	99 0f       	add	r25, r25
    2acc:	31 1d       	adc	r19, r1
    2ace:	87 fd       	sbrc	r24, 7
    2ad0:	91 60       	ori	r25, 0x01	; 1
    2ad2:	00 96       	adiw	r24, 0x00	; 0
    2ad4:	61 05       	cpc	r22, r1
    2ad6:	71 05       	cpc	r23, r1
    2ad8:	39 f4       	brne	.+14     	; 0x2ae8 <__ftoa_engine+0x28>
    2ada:	32 60       	ori	r19, 0x02	; 2
    2adc:	2e 5f       	subi	r18, 0xFE	; 254
    2ade:	3d 93       	st	X+, r19
    2ae0:	30 e3       	ldi	r19, 0x30	; 48
    2ae2:	2a 95       	dec	r18
    2ae4:	e1 f7       	brne	.-8      	; 0x2ade <__ftoa_engine+0x1e>
    2ae6:	08 95       	ret
    2ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    2aea:	30 f0       	brcs	.+12     	; 0x2af8 <__ftoa_engine+0x38>
    2aec:	80 38       	cpi	r24, 0x80	; 128
    2aee:	71 05       	cpc	r23, r1
    2af0:	61 05       	cpc	r22, r1
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <__ftoa_engine+0x36>
    2af4:	3c 5f       	subi	r19, 0xFC	; 252
    2af6:	3c 5f       	subi	r19, 0xFC	; 252
    2af8:	3d 93       	st	X+, r19
    2afa:	91 30       	cpi	r25, 0x01	; 1
    2afc:	08 f0       	brcs	.+2      	; 0x2b00 <__ftoa_engine+0x40>
    2afe:	80 68       	ori	r24, 0x80	; 128
    2b00:	91 1d       	adc	r25, r1
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	1f 93       	push	r17
    2b08:	0f 93       	push	r16
    2b0a:	ff 92       	push	r15
    2b0c:	ef 92       	push	r14
    2b0e:	19 2f       	mov	r17, r25
    2b10:	98 7f       	andi	r25, 0xF8	; 248
    2b12:	96 95       	lsr	r25
    2b14:	e9 2f       	mov	r30, r25
    2b16:	96 95       	lsr	r25
    2b18:	96 95       	lsr	r25
    2b1a:	e9 0f       	add	r30, r25
    2b1c:	ff 27       	eor	r31, r31
    2b1e:	e6 53       	subi	r30, 0x36	; 54
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	99 27       	eor	r25, r25
    2b24:	33 27       	eor	r19, r19
    2b26:	ee 24       	eor	r14, r14
    2b28:	ff 24       	eor	r15, r15
    2b2a:	a7 01       	movw	r20, r14
    2b2c:	e7 01       	movw	r28, r14
    2b2e:	05 90       	lpm	r0, Z+
    2b30:	08 94       	sec
    2b32:	07 94       	ror	r0
    2b34:	28 f4       	brcc	.+10     	; 0x2b40 <__ftoa_engine+0x80>
    2b36:	36 0f       	add	r19, r22
    2b38:	e7 1e       	adc	r14, r23
    2b3a:	f8 1e       	adc	r15, r24
    2b3c:	49 1f       	adc	r20, r25
    2b3e:	51 1d       	adc	r21, r1
    2b40:	66 0f       	add	r22, r22
    2b42:	77 1f       	adc	r23, r23
    2b44:	88 1f       	adc	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	06 94       	lsr	r0
    2b4a:	a1 f7       	brne	.-24     	; 0x2b34 <__ftoa_engine+0x74>
    2b4c:	05 90       	lpm	r0, Z+
    2b4e:	07 94       	ror	r0
    2b50:	28 f4       	brcc	.+10     	; 0x2b5c <__ftoa_engine+0x9c>
    2b52:	e7 0e       	add	r14, r23
    2b54:	f8 1e       	adc	r15, r24
    2b56:	49 1f       	adc	r20, r25
    2b58:	56 1f       	adc	r21, r22
    2b5a:	c1 1d       	adc	r28, r1
    2b5c:	77 0f       	add	r23, r23
    2b5e:	88 1f       	adc	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	66 1f       	adc	r22, r22
    2b64:	06 94       	lsr	r0
    2b66:	a1 f7       	brne	.-24     	; 0x2b50 <__ftoa_engine+0x90>
    2b68:	05 90       	lpm	r0, Z+
    2b6a:	07 94       	ror	r0
    2b6c:	28 f4       	brcc	.+10     	; 0x2b78 <__ftoa_engine+0xb8>
    2b6e:	f8 0e       	add	r15, r24
    2b70:	49 1f       	adc	r20, r25
    2b72:	56 1f       	adc	r21, r22
    2b74:	c7 1f       	adc	r28, r23
    2b76:	d1 1d       	adc	r29, r1
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	66 1f       	adc	r22, r22
    2b7e:	77 1f       	adc	r23, r23
    2b80:	06 94       	lsr	r0
    2b82:	a1 f7       	brne	.-24     	; 0x2b6c <__ftoa_engine+0xac>
    2b84:	05 90       	lpm	r0, Z+
    2b86:	07 94       	ror	r0
    2b88:	20 f4       	brcc	.+8      	; 0x2b92 <__ftoa_engine+0xd2>
    2b8a:	49 0f       	add	r20, r25
    2b8c:	56 1f       	adc	r21, r22
    2b8e:	c7 1f       	adc	r28, r23
    2b90:	d8 1f       	adc	r29, r24
    2b92:	99 0f       	add	r25, r25
    2b94:	66 1f       	adc	r22, r22
    2b96:	77 1f       	adc	r23, r23
    2b98:	88 1f       	adc	r24, r24
    2b9a:	06 94       	lsr	r0
    2b9c:	a9 f7       	brne	.-22     	; 0x2b88 <__ftoa_engine+0xc8>
    2b9e:	84 91       	lpm	r24, Z
    2ba0:	10 95       	com	r17
    2ba2:	17 70       	andi	r17, 0x07	; 7
    2ba4:	41 f0       	breq	.+16     	; 0x2bb6 <__ftoa_engine+0xf6>
    2ba6:	d6 95       	lsr	r29
    2ba8:	c7 95       	ror	r28
    2baa:	57 95       	ror	r21
    2bac:	47 95       	ror	r20
    2bae:	f7 94       	ror	r15
    2bb0:	e7 94       	ror	r14
    2bb2:	1a 95       	dec	r17
    2bb4:	c1 f7       	brne	.-16     	; 0x2ba6 <__ftoa_engine+0xe6>
    2bb6:	e0 e7       	ldi	r30, 0x70	; 112
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	68 94       	set
    2bbc:	15 90       	lpm	r1, Z+
    2bbe:	15 91       	lpm	r17, Z+
    2bc0:	35 91       	lpm	r19, Z+
    2bc2:	65 91       	lpm	r22, Z+
    2bc4:	95 91       	lpm	r25, Z+
    2bc6:	05 90       	lpm	r0, Z+
    2bc8:	7f e2       	ldi	r23, 0x2F	; 47
    2bca:	73 95       	inc	r23
    2bcc:	e1 18       	sub	r14, r1
    2bce:	f1 0a       	sbc	r15, r17
    2bd0:	43 0b       	sbc	r20, r19
    2bd2:	56 0b       	sbc	r21, r22
    2bd4:	c9 0b       	sbc	r28, r25
    2bd6:	d0 09       	sbc	r29, r0
    2bd8:	c0 f7       	brcc	.-16     	; 0x2bca <__ftoa_engine+0x10a>
    2bda:	e1 0c       	add	r14, r1
    2bdc:	f1 1e       	adc	r15, r17
    2bde:	43 1f       	adc	r20, r19
    2be0:	56 1f       	adc	r21, r22
    2be2:	c9 1f       	adc	r28, r25
    2be4:	d0 1d       	adc	r29, r0
    2be6:	7e f4       	brtc	.+30     	; 0x2c06 <__ftoa_engine+0x146>
    2be8:	70 33       	cpi	r23, 0x30	; 48
    2bea:	11 f4       	brne	.+4      	; 0x2bf0 <__ftoa_engine+0x130>
    2bec:	8a 95       	dec	r24
    2bee:	e6 cf       	rjmp	.-52     	; 0x2bbc <__ftoa_engine+0xfc>
    2bf0:	e8 94       	clt
    2bf2:	01 50       	subi	r16, 0x01	; 1
    2bf4:	30 f0       	brcs	.+12     	; 0x2c02 <__ftoa_engine+0x142>
    2bf6:	08 0f       	add	r16, r24
    2bf8:	0a f4       	brpl	.+2      	; 0x2bfc <__ftoa_engine+0x13c>
    2bfa:	00 27       	eor	r16, r16
    2bfc:	02 17       	cp	r16, r18
    2bfe:	08 f4       	brcc	.+2      	; 0x2c02 <__ftoa_engine+0x142>
    2c00:	20 2f       	mov	r18, r16
    2c02:	23 95       	inc	r18
    2c04:	02 2f       	mov	r16, r18
    2c06:	7a 33       	cpi	r23, 0x3A	; 58
    2c08:	28 f0       	brcs	.+10     	; 0x2c14 <__ftoa_engine+0x154>
    2c0a:	79 e3       	ldi	r23, 0x39	; 57
    2c0c:	7d 93       	st	X+, r23
    2c0e:	2a 95       	dec	r18
    2c10:	e9 f7       	brne	.-6      	; 0x2c0c <__ftoa_engine+0x14c>
    2c12:	10 c0       	rjmp	.+32     	; 0x2c34 <__ftoa_engine+0x174>
    2c14:	7d 93       	st	X+, r23
    2c16:	2a 95       	dec	r18
    2c18:	89 f6       	brne	.-94     	; 0x2bbc <__ftoa_engine+0xfc>
    2c1a:	06 94       	lsr	r0
    2c1c:	97 95       	ror	r25
    2c1e:	67 95       	ror	r22
    2c20:	37 95       	ror	r19
    2c22:	17 95       	ror	r17
    2c24:	17 94       	ror	r1
    2c26:	e1 18       	sub	r14, r1
    2c28:	f1 0a       	sbc	r15, r17
    2c2a:	43 0b       	sbc	r20, r19
    2c2c:	56 0b       	sbc	r21, r22
    2c2e:	c9 0b       	sbc	r28, r25
    2c30:	d0 09       	sbc	r29, r0
    2c32:	98 f0       	brcs	.+38     	; 0x2c5a <__ftoa_engine+0x19a>
    2c34:	23 95       	inc	r18
    2c36:	7e 91       	ld	r23, -X
    2c38:	73 95       	inc	r23
    2c3a:	7a 33       	cpi	r23, 0x3A	; 58
    2c3c:	08 f0       	brcs	.+2      	; 0x2c40 <__ftoa_engine+0x180>
    2c3e:	70 e3       	ldi	r23, 0x30	; 48
    2c40:	7c 93       	st	X, r23
    2c42:	20 13       	cpse	r18, r16
    2c44:	b8 f7       	brcc	.-18     	; 0x2c34 <__ftoa_engine+0x174>
    2c46:	7e 91       	ld	r23, -X
    2c48:	70 61       	ori	r23, 0x10	; 16
    2c4a:	7d 93       	st	X+, r23
    2c4c:	30 f0       	brcs	.+12     	; 0x2c5a <__ftoa_engine+0x19a>
    2c4e:	83 95       	inc	r24
    2c50:	71 e3       	ldi	r23, 0x31	; 49
    2c52:	7d 93       	st	X+, r23
    2c54:	70 e3       	ldi	r23, 0x30	; 48
    2c56:	2a 95       	dec	r18
    2c58:	e1 f7       	brne	.-8      	; 0x2c52 <__ftoa_engine+0x192>
    2c5a:	11 24       	eor	r1, r1
    2c5c:	ef 90       	pop	r14
    2c5e:	ff 90       	pop	r15
    2c60:	0f 91       	pop	r16
    2c62:	1f 91       	pop	r17
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	99 27       	eor	r25, r25
    2c6a:	87 fd       	sbrc	r24, 7
    2c6c:	90 95       	com	r25
    2c6e:	08 95       	ret

00002c70 <strnlen_P>:
    2c70:	fc 01       	movw	r30, r24
    2c72:	05 90       	lpm	r0, Z+
    2c74:	61 50       	subi	r22, 0x01	; 1
    2c76:	70 40       	sbci	r23, 0x00	; 0
    2c78:	01 10       	cpse	r0, r1
    2c7a:	d8 f7       	brcc	.-10     	; 0x2c72 <strnlen_P+0x2>
    2c7c:	80 95       	com	r24
    2c7e:	90 95       	com	r25
    2c80:	8e 0f       	add	r24, r30
    2c82:	9f 1f       	adc	r25, r31
    2c84:	08 95       	ret

00002c86 <strnlen>:
    2c86:	fc 01       	movw	r30, r24
    2c88:	61 50       	subi	r22, 0x01	; 1
    2c8a:	70 40       	sbci	r23, 0x00	; 0
    2c8c:	01 90       	ld	r0, Z+
    2c8e:	01 10       	cpse	r0, r1
    2c90:	d8 f7       	brcc	.-10     	; 0x2c88 <strnlen+0x2>
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	8e 0f       	add	r24, r30
    2c98:	9f 1f       	adc	r25, r31
    2c9a:	08 95       	ret

00002c9c <strrev>:
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	67 2f       	mov	r22, r23
    2ca2:	71 91       	ld	r23, Z+
    2ca4:	77 23       	and	r23, r23
    2ca6:	e1 f7       	brne	.-8      	; 0x2ca0 <strrev+0x4>
    2ca8:	32 97       	sbiw	r30, 0x02	; 2
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <strrev+0x18>
    2cac:	7c 91       	ld	r23, X
    2cae:	6d 93       	st	X+, r22
    2cb0:	70 83       	st	Z, r23
    2cb2:	62 91       	ld	r22, -Z
    2cb4:	ae 17       	cp	r26, r30
    2cb6:	bf 07       	cpc	r27, r31
    2cb8:	c8 f3       	brcs	.-14     	; 0x2cac <strrev+0x10>
    2cba:	08 95       	ret

00002cbc <fputc>:
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	fb 01       	movw	r30, r22
    2cc6:	23 81       	ldd	r18, Z+3	; 0x03
    2cc8:	21 fd       	sbrc	r18, 1
    2cca:	03 c0       	rjmp	.+6      	; 0x2cd2 <fputc+0x16>
    2ccc:	8f ef       	ldi	r24, 0xFF	; 255
    2cce:	9f ef       	ldi	r25, 0xFF	; 255
    2cd0:	2c c0       	rjmp	.+88     	; 0x2d2a <fputc+0x6e>
    2cd2:	22 ff       	sbrs	r18, 2
    2cd4:	16 c0       	rjmp	.+44     	; 0x2d02 <fputc+0x46>
    2cd6:	46 81       	ldd	r20, Z+6	; 0x06
    2cd8:	57 81       	ldd	r21, Z+7	; 0x07
    2cda:	24 81       	ldd	r18, Z+4	; 0x04
    2cdc:	35 81       	ldd	r19, Z+5	; 0x05
    2cde:	42 17       	cp	r20, r18
    2ce0:	53 07       	cpc	r21, r19
    2ce2:	44 f4       	brge	.+16     	; 0x2cf4 <fputc+0x38>
    2ce4:	a0 81       	ld	r26, Z
    2ce6:	b1 81       	ldd	r27, Z+1	; 0x01
    2ce8:	9d 01       	movw	r18, r26
    2cea:	2f 5f       	subi	r18, 0xFF	; 255
    2cec:	3f 4f       	sbci	r19, 0xFF	; 255
    2cee:	31 83       	std	Z+1, r19	; 0x01
    2cf0:	20 83       	st	Z, r18
    2cf2:	8c 93       	st	X, r24
    2cf4:	26 81       	ldd	r18, Z+6	; 0x06
    2cf6:	37 81       	ldd	r19, Z+7	; 0x07
    2cf8:	2f 5f       	subi	r18, 0xFF	; 255
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	37 83       	std	Z+7, r19	; 0x07
    2cfe:	26 83       	std	Z+6, r18	; 0x06
    2d00:	14 c0       	rjmp	.+40     	; 0x2d2a <fputc+0x6e>
    2d02:	8b 01       	movw	r16, r22
    2d04:	ec 01       	movw	r28, r24
    2d06:	fb 01       	movw	r30, r22
    2d08:	00 84       	ldd	r0, Z+8	; 0x08
    2d0a:	f1 85       	ldd	r31, Z+9	; 0x09
    2d0c:	e0 2d       	mov	r30, r0
    2d0e:	09 95       	icall
    2d10:	89 2b       	or	r24, r25
    2d12:	e1 f6       	brne	.-72     	; 0x2ccc <fputc+0x10>
    2d14:	d8 01       	movw	r26, r16
    2d16:	16 96       	adiw	r26, 0x06	; 6
    2d18:	8d 91       	ld	r24, X+
    2d1a:	9c 91       	ld	r25, X
    2d1c:	17 97       	sbiw	r26, 0x07	; 7
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	17 96       	adiw	r26, 0x07	; 7
    2d22:	9c 93       	st	X, r25
    2d24:	8e 93       	st	-X, r24
    2d26:	16 97       	sbiw	r26, 0x06	; 6
    2d28:	ce 01       	movw	r24, r28
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	08 95       	ret

00002d34 <__ultoa_invert>:
    2d34:	fa 01       	movw	r30, r20
    2d36:	aa 27       	eor	r26, r26
    2d38:	28 30       	cpi	r18, 0x08	; 8
    2d3a:	51 f1       	breq	.+84     	; 0x2d90 <__ultoa_invert+0x5c>
    2d3c:	20 31       	cpi	r18, 0x10	; 16
    2d3e:	81 f1       	breq	.+96     	; 0x2da0 <__ultoa_invert+0x6c>
    2d40:	e8 94       	clt
    2d42:	6f 93       	push	r22
    2d44:	6e 7f       	andi	r22, 0xFE	; 254
    2d46:	6e 5f       	subi	r22, 0xFE	; 254
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	af 4f       	sbci	r26, 0xFF	; 255
    2d50:	b1 e0       	ldi	r27, 0x01	; 1
    2d52:	3e d0       	rcall	.+124    	; 0x2dd0 <__ultoa_invert+0x9c>
    2d54:	b4 e0       	ldi	r27, 0x04	; 4
    2d56:	3c d0       	rcall	.+120    	; 0x2dd0 <__ultoa_invert+0x9c>
    2d58:	67 0f       	add	r22, r23
    2d5a:	78 1f       	adc	r23, r24
    2d5c:	89 1f       	adc	r24, r25
    2d5e:	9a 1f       	adc	r25, r26
    2d60:	a1 1d       	adc	r26, r1
    2d62:	68 0f       	add	r22, r24
    2d64:	79 1f       	adc	r23, r25
    2d66:	8a 1f       	adc	r24, r26
    2d68:	91 1d       	adc	r25, r1
    2d6a:	a1 1d       	adc	r26, r1
    2d6c:	6a 0f       	add	r22, r26
    2d6e:	71 1d       	adc	r23, r1
    2d70:	81 1d       	adc	r24, r1
    2d72:	91 1d       	adc	r25, r1
    2d74:	a1 1d       	adc	r26, r1
    2d76:	20 d0       	rcall	.+64     	; 0x2db8 <__ultoa_invert+0x84>
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <__ultoa_invert+0x48>
    2d7a:	68 94       	set
    2d7c:	3f 91       	pop	r19
    2d7e:	2a e0       	ldi	r18, 0x0A	; 10
    2d80:	26 9f       	mul	r18, r22
    2d82:	11 24       	eor	r1, r1
    2d84:	30 19       	sub	r19, r0
    2d86:	30 5d       	subi	r19, 0xD0	; 208
    2d88:	31 93       	st	Z+, r19
    2d8a:	de f6       	brtc	.-74     	; 0x2d42 <__ultoa_invert+0xe>
    2d8c:	cf 01       	movw	r24, r30
    2d8e:	08 95       	ret
    2d90:	46 2f       	mov	r20, r22
    2d92:	47 70       	andi	r20, 0x07	; 7
    2d94:	40 5d       	subi	r20, 0xD0	; 208
    2d96:	41 93       	st	Z+, r20
    2d98:	b3 e0       	ldi	r27, 0x03	; 3
    2d9a:	0f d0       	rcall	.+30     	; 0x2dba <__ultoa_invert+0x86>
    2d9c:	c9 f7       	brne	.-14     	; 0x2d90 <__ultoa_invert+0x5c>
    2d9e:	f6 cf       	rjmp	.-20     	; 0x2d8c <__ultoa_invert+0x58>
    2da0:	46 2f       	mov	r20, r22
    2da2:	4f 70       	andi	r20, 0x0F	; 15
    2da4:	40 5d       	subi	r20, 0xD0	; 208
    2da6:	4a 33       	cpi	r20, 0x3A	; 58
    2da8:	18 f0       	brcs	.+6      	; 0x2db0 <__ultoa_invert+0x7c>
    2daa:	49 5d       	subi	r20, 0xD9	; 217
    2dac:	31 fd       	sbrc	r19, 1
    2dae:	40 52       	subi	r20, 0x20	; 32
    2db0:	41 93       	st	Z+, r20
    2db2:	02 d0       	rcall	.+4      	; 0x2db8 <__ultoa_invert+0x84>
    2db4:	a9 f7       	brne	.-22     	; 0x2da0 <__ultoa_invert+0x6c>
    2db6:	ea cf       	rjmp	.-44     	; 0x2d8c <__ultoa_invert+0x58>
    2db8:	b4 e0       	ldi	r27, 0x04	; 4
    2dba:	a6 95       	lsr	r26
    2dbc:	97 95       	ror	r25
    2dbe:	87 95       	ror	r24
    2dc0:	77 95       	ror	r23
    2dc2:	67 95       	ror	r22
    2dc4:	ba 95       	dec	r27
    2dc6:	c9 f7       	brne	.-14     	; 0x2dba <__ultoa_invert+0x86>
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	61 05       	cpc	r22, r1
    2dcc:	71 05       	cpc	r23, r1
    2dce:	08 95       	ret
    2dd0:	9b 01       	movw	r18, r22
    2dd2:	ac 01       	movw	r20, r24
    2dd4:	0a 2e       	mov	r0, r26
    2dd6:	06 94       	lsr	r0
    2dd8:	57 95       	ror	r21
    2dda:	47 95       	ror	r20
    2ddc:	37 95       	ror	r19
    2dde:	27 95       	ror	r18
    2de0:	ba 95       	dec	r27
    2de2:	c9 f7       	brne	.-14     	; 0x2dd6 <__ultoa_invert+0xa2>
    2de4:	62 0f       	add	r22, r18
    2de6:	73 1f       	adc	r23, r19
    2de8:	84 1f       	adc	r24, r20
    2dea:	95 1f       	adc	r25, r21
    2dec:	a0 1d       	adc	r26, r0
    2dee:	08 95       	ret

00002df0 <__prologue_saves__>:
    2df0:	2f 92       	push	r2
    2df2:	3f 92       	push	r3
    2df4:	4f 92       	push	r4
    2df6:	5f 92       	push	r5
    2df8:	6f 92       	push	r6
    2dfa:	7f 92       	push	r7
    2dfc:	8f 92       	push	r8
    2dfe:	9f 92       	push	r9
    2e00:	af 92       	push	r10
    2e02:	bf 92       	push	r11
    2e04:	cf 92       	push	r12
    2e06:	df 92       	push	r13
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	ca 1b       	sub	r28, r26
    2e1a:	db 0b       	sbc	r29, r27
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	09 94       	ijmp

00002e28 <__epilogue_restores__>:
    2e28:	2a 88       	ldd	r2, Y+18	; 0x12
    2e2a:	39 88       	ldd	r3, Y+17	; 0x11
    2e2c:	48 88       	ldd	r4, Y+16	; 0x10
    2e2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e3e:	df 80       	ldd	r13, Y+7	; 0x07
    2e40:	ee 80       	ldd	r14, Y+6	; 0x06
    2e42:	fd 80       	ldd	r15, Y+5	; 0x05
    2e44:	0c 81       	ldd	r16, Y+4	; 0x04
    2e46:	1b 81       	ldd	r17, Y+3	; 0x03
    2e48:	aa 81       	ldd	r26, Y+2	; 0x02
    2e4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e4c:	ce 0f       	add	r28, r30
    2e4e:	d1 1d       	adc	r29, r1
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	ed 01       	movw	r28, r26
    2e5c:	08 95       	ret

00002e5e <_exit>:
    2e5e:	f8 94       	cli

00002e60 <__stop_program>:
    2e60:	ff cf       	rjmp	.-2      	; 0x2e60 <__stop_program>
